BLEU SCORE: 0.0020832552720791786

TEST MSG: Switched animation system to capabilities , added animated item example , fixed state passing in MultiModel .
GENERATED MSG: Added model bake event ( allows mods to insert custom baked models , much like TextureStitchEvent allows to load custom textures ) , ISmartBlock / ItemModel ( ability form models to react to block / item states ) , Block . getExtendedState , support for unlisted properties in block states . Includes example implementation of http : / / imgur . com / a / FyyJX

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch <nl> index c6a455d . . a000941 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch <nl> @ @ - 8 , 7 + 8 , 7 @ @ <nl> public ResourceLocation func _ 188021 _ a ( ItemStack p _ 188021 _ 1 _ , World p _ 188021 _ 2 _ , EntityLivingBase p _ 188021 _ 3 _ ) <nl> { <nl> if ( ! this . field _ 188023 _ b . isEmpty ( ) ) <nl> - @ @ - 42 , 4 + 43 , 18 @ @ <nl> + @ @ - 42 , 4 + 43 , 23 @ @ <nl> <nl> return null ; <nl> } <nl> @ @ - 26 , 4 + 26 , 9 @ @ <nl> + } <nl> + return originalModel ; <nl> + } <nl> + + <nl> + + public com . google . common . collect . ImmutableList < ItemOverride > getOverrides ( ) <nl> + + { <nl> + + return com . google . common . collect . ImmutableList . copyOf ( field _ 188023 _ b ) ; <nl> + + } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index 46f446c . . 23d952e 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 57 , 7 + 57 , 7 @ @ <nl> Vec3d vec3d1 = vec3d . func _ 72441 _ c ( ( double ) f6 * d3 , ( double ) f5 * d3 , ( double ) f7 * d3 ) ; <nl> return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; <nl> } <nl> - @ @ - 422 , 11 + 431 , 588 @ @ <nl> + @ @ - 422 , 11 + 431 , 606 @ @ <nl> return false ; <nl> } <nl> <nl> @ @ - 641 , 12 + 641 , 30 @ @ <nl> + { <nl> + return null ; <nl> + } <nl> + + <nl> + + public com . google . common . collect . ImmutableMap < String , net . minecraftforge . client . model . animation . ITimeValue > getAnimationParameters ( final ItemStack stack , final World world , final EntityLivingBase entity ) <nl> + + { <nl> + + com . google . common . collect . ImmutableMap . Builder < String , net . minecraftforge . client . model . animation . ITimeValue > builder = com . google . common . collect . ImmutableMap . builder ( ) ; <nl> + + for ( ResourceLocation location : field _ 185051 _ m . func _ 148742 _ b ( ) ) <nl> + + { <nl> + + final IItemPropertyGetter parameter = field _ 185051 _ m . func _ 82594 _ a ( location ) ; <nl> + + builder . put ( location . toString ( ) , new net . minecraftforge . client . model . animation . ITimeValue ( ) <nl> + + { <nl> + + public float apply ( float input ) <nl> + + { <nl> + + return parameter . func _ 185085 _ a ( stack , world , entity ) ; <nl> + + } <nl> + + } ) ; <nl> + + } <nl> + + return builder . build ( ) ; <nl> + + } <nl> + + <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150348 _ b , ( new ItemMultiTexture ( Blocks . field _ 150348 _ b , Blocks . field _ 150348 _ b , new Function < ItemStack , String > ( ) <nl> - @ @ - 935 , 6 + 1521 , 10 @ @ <nl> + @ @ - 935 , 6 + 1539 , 10 @ @ <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> <nl> @ @ - 657 , 7 + 675 , 7 @ @ <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> this . field _ 78001 _ f = p _ i1874 _ 3 _ ; <nl> - @ @ - 969 , 9 + 1559 , 36 @ @ <nl> + @ @ - 969 , 9 + 1577 , 36 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index e813982 . . 89141ec 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 185 , 9 + 185 , 7 @ @ public class BlockStateLoader <nl> <nl> IModel model = ModelLoaderRegistry . getModelOrLogError ( part . getModelLocation ( ) , " Unable to load block sub - model : \ ' " + part . getModelLocation ( ) ) ; <nl> <nl> - IModelState partState = new ModelStateComposition ( baseTr , part . getState ( ) ) ; <nl> - <nl> - models . put ( entry . getKey ( ) , Pair . < IModel , IModelState > of ( runModelHooks ( model , part . smooth , part . gui3d , part . uvLock , part . getTextures ( ) , part . getCustomData ( ) ) , partState ) ) ; <nl> + models . put ( entry . getKey ( ) , Pair . < IModel , IModelState > of ( runModelHooks ( model , part . smooth , part . gui3d , part . uvLock , part . getTextures ( ) , part . getCustomData ( ) ) , part . getState ( ) ) ) ; <nl> } <nl> <nl> return new MultiModel ( getModelLocation ( ) , hasBase ? base : null , baseTr , models . build ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index b72b8cf . . 395913f 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> import net . minecraft . client . renderer . block . model . ItemModelGenerator ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> import net . minecraft . client . renderer . block . model . ModelBakery ; <nl> import net . minecraft . client . renderer . block . model . ModelBlock ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; <nl> @ @ - 57 , 6 + 58 , 7 @ @ import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . registry . IRegistry ; <nl> import net . minecraftforge . client . model . animation . Animation ; <nl> + import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; <nl> import net . minecraftforge . client . model . animation . IAnimatedModel ; <nl> import net . minecraftforge . client . model . animation . IClip ; <nl> import net . minecraftforge . client . model . animation . ModelBlockAnimation ; <nl> @ @ - 497 , 17 + 499 , 18 @ @ public final class ModelLoader extends ModelBakery <nl> return new ItemLayerModel ( model ) . bake ( perState , format , bakedTextureGetter ) ; <nl> } <nl> if ( isCustomRenderer ( model ) ) return new BuiltInModel ( transforms , model . createOverrides ( ) ) ; <nl> - return bakeNormal ( model , perState , state . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) , newTransforms , format , bakedTextureGetter , uvlock ) ; <nl> + return bakeNormal ( model , perState , state , newTransforms , format , bakedTextureGetter , uvlock ) ; <nl> } <nl> <nl> - private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> + private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final IModelState modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> { <nl> + final TRSRTransformation baseState = modelState . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) ; <nl> TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model , model . createOverrides ( ) ) ) . setTexture ( particle ) ; <nl> for ( int i = 0 ; i < model . getElements ( ) . size ( ) ; i + + ) <nl> { <nl> BlockPart part = model . getElements ( ) . get ( i ) ; <nl> - TRSRTransformation transformation = modelState ; <nl> + TRSRTransformation transformation = baseState ; <nl> if ( newTransforms . get ( i ) ! = null ) <nl> { <nl> transformation = transformation . compose ( newTransforms . get ( i ) ) ; <nl> @ @ - 525 , 13 + 528 , 15 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> else <nl> { <nl> - builder . addFaceQuad ( modelState . rotate ( e . getValue ( ) . cullFace ) , makeBakedQuad ( part , e . getValue ( ) , textureatlassprite1 , e . getKey ( ) , transformation , uvLocked ) ) ; <nl> + builder . addFaceQuad ( baseState . rotate ( e . getValue ( ) . cullFace ) , makeBakedQuad ( part , e . getValue ( ) , textureatlassprite1 , e . getKey ( ) , transformation , uvLocked ) ) ; <nl> } <nl> } <nl> } <nl> <nl> return new IPerspectiveAwareModel . MapWrapper ( builder . makeBakedModel ( ) , perState ) <nl> { <nl> + private final ItemOverrideList overrides = new AnimationItemOverrideList ( VanillaModelWrapper . this , modelState , format , bakedTextureGetter , super . getOverrides ( ) ) ; <nl> + <nl> @ Override <nl> public List < BakedQuad > getQuads ( IBlockState state , EnumFacing side , long rand ) <nl> { <nl> @ @ - 550 , 6 + 555 , 12 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> return super . getQuads ( state , side , rand ) ; <nl> } ; <nl> + <nl> + @ Override <nl> + public ItemOverrideList getOverrides ( ) <nl> + { <nl> + return overrides ; <nl> + } <nl> } ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> index a6f3b6c . . 7db688e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> @ @ - 14 , 11 + 14 , 15 @ @ import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverride ; <nl> import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . World ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> @ @ - 28 , 6 + 32 , 7 @ @ import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Sets ; <nl> <nl> / / TODO : Switch to vanilla class , or to something similar <nl> @ @ - 36 , 15 + 41 , 55 @ @ public final class MultiModel implements IModel <nl> { <nl> private static final class Baked implements IPerspectiveAwareModel <nl> { <nl> + private final ResourceLocation location ; <nl> private final IBakedModel base ; <nl> private final ImmutableMap < String , IBakedModel > parts ; <nl> <nl> private final IBakedModel internalBase ; <nl> private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; <nl> private final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; <nl> + private final ItemOverrideList overrides = new ItemOverrideList ( Lists . < ItemOverride > newArrayList ( ) ) <nl> + { <nl> + @ Override <nl> + public IBakedModel handleItemState ( IBakedModel originalModel , ItemStack stack , World world , EntityLivingBase entity ) <nl> + { <nl> + if ( originalModel ! = Baked . this ) <nl> + { <nl> + return originalModel ; <nl> + } <nl> + boolean dirty = false ; <nl> + IBakedModel newBase = null ; <nl> + <nl> + if ( base ! = null ) <nl> + { <nl> + newBase = base . getOverrides ( ) . handleItemState ( base , stack , world , entity ) ; <nl> + if ( base ! = newBase ) <nl> + { <nl> + dirty = true ; <nl> + } <nl> + } <nl> + ImmutableMap . Builder < String , IBakedModel > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , IBakedModel > entry : parts . entrySet ( ) ) <nl> + { <nl> + IBakedModel newPart = entry . getValue ( ) . getOverrides ( ) . handleItemState ( entry . getValue ( ) , stack , world , entity ) ; <nl> + builder . put ( entry . getKey ( ) , newPart ) ; <nl> + if ( entry . getValue ( ) ! = newPart ) <nl> + { <nl> + dirty = true ; <nl> + } <nl> + } <nl> + if ( dirty ) <nl> + { <nl> + / / TODO : caching ? <nl> + return new Baked ( location , newBase instanceof IPerspectiveAwareModel , newBase , builder . build ( ) ) ; <nl> + } <nl> + return Baked . this ; <nl> + } <nl> + } ; <nl> <nl> public Baked ( ResourceLocation location , boolean perspective , IBakedModel base , ImmutableMap < String , IBakedModel > parts ) <nl> { <nl> + this . location = location ; <nl> this . base = base ; <nl> this . parts = parts ; <nl> <nl> @ @ - 120 , 22 + 165 , 22 @ @ public final class MultiModel implements IModel <nl> ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; <nl> if ( base ! = null ) <nl> { <nl> - quads . addAll ( base . getQuads ( null , face , 0 ) ) ; <nl> + quads . addAll ( base . getQuads ( state , face , 0 ) ) ; <nl> } <nl> for ( IBakedModel bakedPart : parts . values ( ) ) <nl> { <nl> - quads . addAll ( bakedPart . getQuads ( null , face , 0 ) ) ; <nl> + quads . addAll ( bakedPart . getQuads ( state , face , 0 ) ) ; <nl> } <nl> builder . put ( Optional . of ( face ) , quads . build ( ) ) ; <nl> } <nl> ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; <nl> if ( base ! = null ) <nl> { <nl> - quads . addAll ( base . getQuads ( null , null , 0 ) ) ; <nl> + quads . addAll ( base . getQuads ( state , null , 0 ) ) ; <nl> } <nl> for ( IBakedModel bakedPart : parts . values ( ) ) <nl> { <nl> - quads . addAll ( bakedPart . getQuads ( null , null , 0 ) ) ; <nl> + quads . addAll ( bakedPart . getQuads ( state , null , 0 ) ) ; <nl> } <nl> builder . put ( Optional . < EnumFacing > absent ( ) , quads . build ( ) ) ; <nl> this . quads = builder . build ( ) ; <nl> @ @ - 154 , 7 + 199 , 7 @ @ public final class MultiModel implements IModel <nl> @ Override <nl> public ItemOverrideList getOverrides ( ) <nl> { <nl> - return ItemOverrideList . NONE ; <nl> + return overrides ; <nl> } <nl> } <nl> <nl> @ @ - 217 , 7 + 262 , 7 @ @ public final class MultiModel implements IModel <nl> for ( Entry < String , Pair < IModel , IModelState > > entry : parts . entrySet ( ) ) <nl> { <nl> Pair < IModel , IModelState > pair = entry . getValue ( ) ; <nl> - mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( pair . getRight ( ) , format , bakedTextureGetter ) ) ; <nl> + mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( new ModelStateComposition ( state , pair . getRight ( ) ) , format , bakedTextureGetter ) ) ; <nl> } <nl> <nl> if ( bakedBase = = null & & parts . isEmpty ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / Animation . java b / src / main / java / net / minecraftforge / client / model / animation / Animation . java <nl> index 75cc9cc . . e25786c 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / Animation . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / Animation . java <nl> @ @ - 107 , 7 + 107 , 7 @ @ public enum Animation implements IResourceManagerReloadListener <nl> return defaultModelBlockAnimation ; <nl> } <nl> ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , ModelBlockAnimation . class ) ; <nl> - String json = mbaGson . toJson ( mba ) ; <nl> + / / String json = mbaGson . toJson ( mba ) ; <nl> return mba ; <nl> } <nl> catch ( IOException e ) <nl> @ @ - 124 , 7 + 124 , 7 @ @ public enum Animation implements IResourceManagerReloadListener <nl> <nl> private IResourceManager manager ; <nl> <nl> - private final AnimationStateMachine missing = new AnimationStateMachine ( <nl> + protected final AnimationStateMachine missing = new AnimationStateMachine ( <nl> ImmutableMap . < String , ITimeValue > of ( ) , <nl> ImmutableMap . of ( " missingno " , ( IClip ) Clips . IdentityClip . instance ) , <nl> ImmutableList . of ( " missingno " ) , <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java <nl> new file mode 100644 <nl> index 0000000 . . 9fe7631 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java <nl> @ @ - 0 , 0 + 1 , 63 @ @ <nl> + package net . minecraftforge . client . model . animation ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverride ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . entity . EntityLivingBase ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . model . IModel ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ModelStateComposition ; <nl> + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + <nl> + public final class AnimationItemOverrideList extends ItemOverrideList <nl> + { <nl> + private final IModel model ; <nl> + private final IModelState state ; <nl> + private final VertexFormat format ; <nl> + private final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ; <nl> + <nl> + public AnimationItemOverrideList ( IModel model , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , ItemOverrideList overrides ) <nl> + { <nl> + this ( model , state , format , bakedTextureGetter , overrides . getOverrides ( ) ) ; <nl> + } <nl> + <nl> + public AnimationItemOverrideList ( IModel model , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , List < ItemOverride > overrides ) <nl> + { <nl> + super ( overrides ) ; <nl> + this . model = model ; <nl> + this . state = state ; <nl> + this . format = format ; <nl> + this . bakedTextureGetter = bakedTextureGetter ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleItemState ( IBakedModel originalModel , ItemStack stack , World world , EntityLivingBase entity ) <nl> + { <nl> + if ( stack . hasCapability ( net . minecraftforge . client . model . animation . CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) <nl> + { <nl> + / / TODO : caching ? <nl> + IAnimationStateMachine asm = stack . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ; <nl> + if ( world = = null ) <nl> + { <nl> + world = entity . worldObj ; <nl> + } <nl> + if ( world = = null ) <nl> + { <nl> + world = Minecraft . getMinecraft ( ) . theWorld ; <nl> + } <nl> + IModelState state = asm . apply ( Animation . getWorldTime ( world , Animation . getPartialTickTime ( ) ) ) . getLeft ( ) ; <nl> + return model . bake ( new ModelStateComposition ( state , this . state ) , format , bakedTextureGetter ) ; <nl> + } <nl> + return originalModel ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java <nl> index 6174ee3 . . 3273967 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java <nl> @ @ - 14 , 9 + 14 , 11 @ @ import net . minecraft . entity . Entity ; <nl> import net . minecraft . init . Blocks ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . client . model . IModel ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . pipeline . VertexLighterFlat ; <nl> import net . minecraftforge . client . model . pipeline . VertexBufferConsumer ; <nl> <nl> @ @ - 28 , 14 + 30 , 14 @ @ import org . lwjgl . opengl . GL11 ; <nl> * Some quirks are still left , deprecated for the moment . <nl> * / <nl> @ Deprecated <nl> - public class AnimationModelBase < T extends Entity & IAnimationProvider > extends ModelBase implements IEventHandler < T > <nl> + public class AnimationModelBase < T extends Entity > extends ModelBase implements IEventHandler < T > <nl> { <nl> private final VertexLighterFlat lighter ; <nl> - private final IModel model ; <nl> + private final ResourceLocation modelLocation ; <nl> <nl> - public AnimationModelBase ( IModel model , VertexLighterFlat lighter ) <nl> + public AnimationModelBase ( ResourceLocation modelLocation , VertexLighterFlat lighter ) <nl> { <nl> - this . model = model ; <nl> + this . modelLocation = modelLocation ; <nl> this . lighter = lighter ; <nl> } <nl> <nl> @ @ - 43 , 13 + 45 , 14 @ @ public class AnimationModelBase < T extends Entity & IAnimationProvider > extends M <nl> @ Override <nl> public void render ( Entity entity , float limbSwing , float limbSwingSpeed , float timeAlive , float yawHead , float rotationPitch , float scale ) <nl> { <nl> - if ( ! ( entity instanceof IAnimationProvider ) ) <nl> + if ( ! ( entity . hasCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) ) <nl> { <nl> - throw new ClassCastException ( " AnimationModelBase expects IAnimationProvider " ) ; <nl> + return ; <nl> } <nl> <nl> - Pair < IModelState , Iterable < Event > > pair = ( ( IAnimationProvider ) entity ) . asm ( ) . apply ( timeAlive / 20 ) ; <nl> + Pair < IModelState , Iterable < Event > > pair = entity . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) . apply ( timeAlive / 20 ) ; <nl> handleEvents ( ( T ) entity , timeAlive / 20 , pair . getRight ( ) ) ; <nl> + IModel model = ModelLoaderRegistry . getModelOrMissing ( modelLocation ) ; <nl> IBakedModel bakedModel = model . bake ( pair . getLeft ( ) , DefaultVertexFormats . ITEM , ModelLoader . defaultTextureGetter ( ) ) ; <nl> <nl> BlockPos pos = new BlockPos ( entity . posX , entity . posY + entity . height , entity . posZ ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> index ac6ec94 . . db81f32 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> @ @ - 18 , 12 + 18 , 16 @ @ import org . apache . commons . lang3 . tuple . Pair ; <nl> / * * <nl> * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . <nl> * / <nl> - public class AnimationTESR < T extends TileEntity & IAnimationProvider > extends FastTESR < T > implements IEventHandler < T > <nl> + public class AnimationTESR < T extends TileEntity > extends FastTESR < T > implements IEventHandler < T > <nl> { <nl> protected static BlockRendererDispatcher blockRenderer ; <nl> <nl> public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , VertexBuffer renderer ) <nl> { <nl> + if ( ! te . hasCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) <nl> + { <nl> + return ; <nl> + } <nl> if ( blockRenderer = = null ) blockRenderer = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) ; <nl> BlockPos pos = te . getPos ( ) ; <nl> IBlockAccess world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; <nl> @ @ - 38 , 7 + 42 , 7 @ @ public class AnimationTESR < T extends TileEntity & IAnimationProvider > extends Fa <nl> if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) <nl> { <nl> float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; <nl> - Pair < IModelState , Iterable < Event > > pair = te . asm ( ) . apply ( time ) ; <nl> + Pair < IModelState , Iterable < Event > > pair = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) . apply ( time ) ; <nl> handleEvents ( te , time , pair . getRight ( ) ) ; <nl> <nl> / / TODO : caching ? <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java <nl> new file mode 100644 <nl> index 0000000 . . 3181e46 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package net . minecraftforge . client . model . animation ; <nl> + <nl> + import java . util . concurrent . Callable ; <nl> + <nl> + import net . minecraft . nbt . NBTBase ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraftforge . common . capabilities . Capability ; <nl> + import net . minecraftforge . common . capabilities . CapabilityInject ; <nl> + import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> + import net . minecraftforge . common . capabilities . ICapabilityProvider ; <nl> + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> + <nl> + public class CapabilityAnimation <nl> + { <nl> + @ CapabilityInject ( IAnimationStateMachine . class ) <nl> + public static Capability < IAnimationStateMachine > ANIMATION _ CAPABILITY = null ; <nl> + <nl> + public static void register ( ) <nl> + { <nl> + CapabilityManager . INSTANCE . register ( IAnimationStateMachine . class , new Capability . IStorage < IAnimationStateMachine > ( ) <nl> + { <nl> + public NBTBase writeNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + public void readNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side , NBTBase nbt ) { } <nl> + } , new Callable < IAnimationStateMachine > ( ) <nl> + { <nl> + public IAnimationStateMachine call ( ) throws Exception <nl> + { <nl> + return Animation . INSTANCE . missing ; <nl> + } <nl> + } ) ; <nl> + } <nl> + <nl> + public static class DefaultItemAnimationCapabilityProvider implements ICapabilityProvider <nl> + { <nl> + private final IAnimationStateMachine asm ; <nl> + <nl> + public DefaultItemAnimationCapabilityProvider ( IAnimationStateMachine asm ) <nl> + { <nl> + this . asm = asm ; <nl> + } <nl> + <nl> + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) <nl> + { <nl> + return capability = = ANIMATION _ CAPABILITY ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) <nl> + { <nl> + if ( capability = = ANIMATION _ CAPABILITY ) <nl> + { <nl> + return ( T ) asm ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java b / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java <nl> deleted file mode 100644 <nl> index 94723d3 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package net . minecraftforge . client . model . animation ; <nl> - <nl> - import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> - <nl> - <nl> - / * * <nl> - * Something that can provide the Animation State Machine , for example and Entity or a Block <nl> - * / <nl> - public interface IAnimationProvider <nl> - { <nl> - public IAnimationStateMachine asm ( ) ; <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index 6e9cf90 . . 9ae3fdc 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 49 , 7 + 49 , 6 @ @ import net . minecraftforge . client . model . b3d . B3DModel . Mesh ; <nl> import net . minecraftforge . client . model . b3d . B3DModel . Node ; <nl> import net . minecraftforge . client . model . b3d . B3DModel . Texture ; <nl> import net . minecraftforge . client . model . b3d . B3DModel . Vertex ; <nl> - import net . minecraftforge . client . model . pipeline . LightUtil ; <nl> import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> import net . minecraftforge . common . property . IUnlistedProperty ; <nl> @ @ - 680 , 9 + 679 , 16 @ @ public final class B3DLoader implements ICustomModelLoader <nl> if ( quads = = null ) <nl> { <nl> ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> - generateQuads ( builder , node , modelState ) ; <nl> + generateQuads ( builder , node , this . state ) ; <nl> quads = builder . build ( ) ; <nl> } <nl> + / / TODO : caching ? <nl> + if ( this . state ! = modelState ) <nl> + { <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + generateQuads ( builder , node , modelState ) ; <nl> + return builder . build ( ) ; <nl> + } <nl> return quads ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> index 3156a22 . . 07c2481 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> @ @ - 1 , 7 + 1 , 5 @ @ <nl> package net . minecraftforge . debug ; <nl> <nl> - import java . io . IOException ; <nl> - <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockPistonBase ; <nl> import net . minecraft . block . material . Material ; <nl> @ @ - 20 , 7 + 18 , 9 @ @ import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . entity . SharedMonsterAttributes ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . EnumHand ; <nl> @ @ - 28 , 23 + 28 , 17 @ @ import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> - import net . minecraftforge . client . model . IModel ; <nl> - import net . minecraftforge . client . model . IModelState ; <nl> - import net . minecraftforge . client . model . IRetexturableModel ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> - import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> - import net . minecraftforge . client . model . ModelProcessingHelper ; <nl> - import net . minecraftforge . client . model . MultiModel ; <nl> - import net . minecraftforge . client . model . TRSRTransformation ; <nl> import net . minecraftforge . client . model . animation . Animation ; <nl> - import net . minecraftforge . client . model . animation . AnimationModelBase ; <nl> import net . minecraftforge . client . model . animation . AnimationTESR ; <nl> + import net . minecraftforge . client . model . animation . CapabilityAnimation ; <nl> import net . minecraftforge . client . model . animation . Event ; <nl> - import net . minecraftforge . client . model . animation . IAnimationProvider ; <nl> import net . minecraftforge . client . model . animation . ITimeValue ; <nl> import net . minecraftforge . client . model . animation . TimeValues . VariableValue ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> import net . minecraftforge . client . model . pipeline . VertexLighterSmoothAo ; <nl> + import net . minecraftforge . common . capabilities . Capability ; <nl> + import net . minecraftforge . common . capabilities . ICapabilityProvider ; <nl> import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> import net . minecraftforge . common . property . IUnlistedProperty ; <nl> @ @ - 60 , 8 + 54 , 6 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . registry . EntityRegistry ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> - <nl> import com . google . common . collect . ImmutableMap ; <nl> <nl> @ Mod ( modid = ModelAnimationDebug . MODID , version = ModelAnimationDebug . VERSION ) <nl> @ @ - 156 , 6 + 148 , 14 @ @ public class ModelAnimationDebug <nl> } <nl> return true ; <nl> } <nl> + } , null , blockName ) ; <nl> + GameRegistry . registerItem ( new ItemBlock ( GameRegistry . findBlock ( MODID , blockName ) ) <nl> + { <nl> + @ Override <nl> + public ICapabilityProvider initCapabilities ( ItemStack stack , NBTTagCompound nbt ) <nl> + { <nl> + return new ItemAnimationHolder ( ) ; <nl> + } <nl> } , blockName ) ; <nl> GameRegistry . registerTileEntity ( Chest . class , MODID + " : " + " tile _ " + blockName ) ; <nl> } <nl> @ @ - 192 , 6 + 192 , 7 @ @ public class ModelAnimationDebug <nl> EntityRegistry . registerModEntity ( EntityChest . class , entityName , 0 , ModelAnimationDebug . instance , 64 , 20 , true , 0xFFAAAA00 , 0xFFDDDD00 ) ; <nl> RenderingRegistry . registerEntityRenderingHandler ( EntityChest . class , new IRenderFactory < EntityChest > ( ) <nl> { <nl> + @ SuppressWarnings ( " deprecation " ) <nl> public Render < EntityChest > createRenderFor ( RenderManager manager ) <nl> { <nl> / * model = ModelLoaderRegistry . getModel ( new ResourceLocation ( ModelLoaderRegistryDebug . MODID , " block / chest . b3d " ) ) ; <nl> @ @ - 203 , 25 + 204 , 8 @ @ public class ModelAnimationDebug <nl> { <nl> model = ( ( IModelCustomData ) model ) . process ( ImmutableMap . of ( " mesh " , " [ \ " Base \ " , \ " Lid \ " ] " ) ) ; <nl> } * / <nl> - IModel base = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ModelAnimationDebug . MODID , " block / engine " ) ) ; <nl> - IModel ring = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ModelAnimationDebug . MODID , " block / engine _ ring " ) ) ; <nl> - ImmutableMap < String , String > textures = ImmutableMap . of ( <nl> - " base " , " blocks / stone " , <nl> - " front " , " blocks / log _ oak " , <nl> - " chamber " , " blocks / redstone _ block " , <nl> - " trunk " , " blocks / end _ stone " <nl> - ) ; <nl> - base = ModelProcessingHelper . retexture ( base , textures ) ; <nl> - ring = ModelProcessingHelper . retexture ( base , textures ) ; <nl> - IModel model = new MultiModel ( <nl> - new ResourceLocation ( ModelAnimationDebug . MODID , " builtin / engine " ) , <nl> - ring , <nl> - TRSRTransformation . identity ( ) , <nl> - ImmutableMap . of ( <nl> - " base " , Pair . < IModel , IModelState > of ( base , TRSRTransformation . identity ( ) ) <nl> - ) <nl> - ) ; <nl> - return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . getBlockColors ( ) ) ) <nl> + ResourceLocation location = new ModelResourceLocation ( new ResourceLocation ( MODID , blockName ) , " entity " ) ; <nl> + return new RenderLiving < EntityChest > ( manager , new net . minecraftforge . client . model . animation . AnimationModelBase < EntityChest > ( location , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . getBlockColors ( ) ) ) <nl> { <nl> @ Override <nl> public void handleEvents ( EntityChest chest , float time , Iterable < Event > pastEvents ) <nl> @ @ - 246 , 10 + 230 , 34 @ @ public class ModelAnimationDebug <nl> <nl> } <nl> <nl> + private static class ItemAnimationHolder implements ICapabilityProvider <nl> + { <nl> + private final VariableValue cycleLength = new VariableValue ( 4 ) ; <nl> + <nl> + private final IAnimationStateMachine asm = proxy . load ( new ResourceLocation ( MODID . toLowerCase ( ) , " asms / block / engine . json " ) , ImmutableMap . < String , ITimeValue > of ( <nl> + " cycle _ length " , cycleLength <nl> + ) ) ; <nl> + <nl> + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) <nl> + { <nl> + return capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) <nl> + { <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return ( T ) asm ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> <nl> - public static class Chest extends TileEntity implements IAnimationProvider <nl> + public static class Chest extends TileEntity <nl> { <nl> private final IAnimationStateMachine asm ; <nl> private final VariableValue cycleLength = new VariableValue ( 4 ) ; <nl> @ @ - 319 , 25 + 327 , 37 @ @ public class ModelAnimationDebug <nl> } <nl> } <nl> <nl> - public IAnimationStateMachine asm ( ) <nl> + @ Override <nl> + public boolean hasCapability ( Capability < ? > capability , EnumFacing side ) <nl> { <nl> - return asm ; <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return true ; <nl> + } <nl> + return super . hasCapability ( capability , side ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Override <nl> + public < T > T getCapability ( Capability < T > capability , EnumFacing side ) <nl> + { <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return ( T ) asm ; <nl> + } <nl> + return super . getCapability ( capability , side ) ; <nl> } <nl> } <nl> <nl> - public static class EntityChest extends EntityLiving implements IAnimationProvider <nl> + public static class EntityChest extends EntityLiving <nl> { <nl> private final IAnimationStateMachine asm ; <nl> - private VariableValue cycleLength ; <nl> + private final VariableValue cycleLength = new VariableValue ( getHealth ( ) / 5 ) ; <nl> <nl> public EntityChest ( World world ) <nl> { <nl> super ( world ) ; <nl> setSize ( 1 , 1 ) ; <nl> - if ( cycleLength = = null ) <nl> - { <nl> - cycleLength = new VariableValue ( getHealth ( ) / 5 ) ; <nl> - } <nl> asm = proxy . load ( new ResourceLocation ( MODID . toLowerCase ( ) , " asms / block / engine . json " ) , ImmutableMap . < String , ITimeValue > of ( <nl> " cycle _ length " , cycleLength <nl> ) ) ; <nl> @ @ - 348 , 25 + 368 , 15 @ @ public class ModelAnimationDebug <nl> / / TODO Auto - generated method stub <nl> } <nl> <nl> - public IAnimationStateMachine asm ( ) <nl> - { <nl> - return asm ; <nl> - } <nl> - <nl> - / / FIXME update health <nl> - / * @ Override <nl> - public void func _ 184206 _ a ( DataParameter < ? > key ) <nl> + @ Override <nl> + public void onEntityUpdate ( ) <nl> { <nl> - super . func _ 184206 _ a ( key ) ; <nl> - if ( field _ 184632 _ c . equals ( key ) ) / / health <nl> + super . onEntityUpdate ( ) ; <nl> + if ( worldObj . isRemote & & cycleLength ! = null ) <nl> { <nl> - if ( cycleLength = = null ) <nl> - { <nl> - cycleLength = new VariableValue ( 0 ) ; <nl> - } <nl> cycleLength . setValue ( getHealth ( ) / 5 ) ; <nl> } <nl> - } * / <nl> + } <nl> <nl> @ Override <nl> protected void applyEntityAttributes ( ) <nl> @ @ - 374 , 6 + 384 , 27 @ @ public class ModelAnimationDebug <nl> super . applyEntityAttributes ( ) ; <nl> this . getEntityAttribute ( SharedMonsterAttributes . MAX _ HEALTH ) . setBaseValue ( 60 ) ; <nl> } <nl> + <nl> + @ Override <nl> + public boolean hasCapability ( Capability < ? > capability , EnumFacing side ) <nl> + { <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return true ; <nl> + } <nl> + return super . hasCapability ( capability , side ) ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + @ Override <nl> + public < T > T getCapability ( Capability < T > capability , EnumFacing side ) <nl> + { <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return ( T ) asm ; <nl> + } <nl> + return super . getCapability ( capability , side ) ; <nl> + } <nl> } <nl> } <nl> <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json b / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json <nl> index f2faef7 . . 26dc74e 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json <nl> @ @ - 43 , 6 + 43 , 12 @ @ <nl> } * / <nl> " model " : " forgedebugmodelanimation : engine _ ring " <nl> } <nl> - } <nl> + } , <nl> + " entity " : [ { <nl> + " model " : " forgedebugmodelanimation : engine " , <nl> + " submodel " : { <nl> + " ring " : { " model " : " forgedebugmodelanimation : engine _ ring " } <nl> + } <nl> + } ] <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 523a8df . . a946cbd 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 161 , 7 + 161 , 7 @ @ <nl> } <nl> <nl> protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) <nl> - @ @ - 971 , 6 + 989 , 1011 @ @ <nl> + @ @ - 971 , 6 + 989 , 1019 @ @ <nl> return Block . EnumOffsetType . NONE ; <nl> } <nl> <nl> @ @ - 1145 , 6 + 1145 , 14 @ @ <nl> + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; <nl> + } <nl> + <nl> + + / * * <nl> + + * Can return IExtendedBlockState <nl> + + * / <nl> + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + + { <nl> + + return func _ 176221 _ a ( state , world , pos ) ; <nl> + + } <nl> + + <nl> + / / For Internal use only to capture droped items inside getDrops <nl> + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) <nl> + { <nl> diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 90b08e7 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java <nl> + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java <nl> + @ @ - 47 , 6 + 47 , 16 @ @ <nl> + <nl> + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) <nl> + { <nl> + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; <nl> + + } <nl> + + <nl> + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + + { <nl> + + return new StateImplementation ( block , properties ) ; <nl> + + } <nl> + + <nl> + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) <nl> + + { <nl> + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; <nl> + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) <nl> + { <nl> + @ @ - 70 , 7 + 80 , 7 @ @ <nl> + { <nl> + List list = ( List ) iterator . next ( ) ; <nl> + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; <nl> + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; <nl> + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; <nl> + linkedhashmap . put ( map , stateimplementation ) ; <nl> + arraylist . add ( stateimplementation ) ; <nl> + } <nl> + @ @ - 231 , 5 + 241 , 10 @ @ <nl> + { <nl> + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; <nl> + } <nl> + + <nl> + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) <nl> + + { <nl> + + return field _ 177238 _ c ; <nl> + + } <nl> + } <nl> + } <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . a24be3d <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 0 , 0 + 1 , 15 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + @ @ - 129 , 6 + 129 , 12 @ @ <nl> + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + } <nl> + + <nl> + return ibakedmodel ; <nl> + } <nl> + <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> new file mode 100644 <nl> index 0000000 . . dbe123b <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch <nl> @ @ - 0 , 0 + 1 , 14 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java <nl> + @ @ - 52 , 6 + 52 , 11 @ @ <nl> + } <nl> + } <nl> + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) <nl> + + { <nl> + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; <nl> + + } <nl> + + <nl> + if ( ibakedmodel = = null ) <nl> + { <nl> + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 9b2da14 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java <nl> + @ @ - 28 , 6 + 28 , 7 @ @ <nl> + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; <nl> + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; <nl> + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; <nl> + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; <nl> + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 9b9b75e . . d0126b6 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; <nl> <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA ; <nl> import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; <nl> - import java . util . Random ; <nl> - import javax . imageio . ImageIO ; <nl> import net . minecraft . block . Block ; <nl> - import net . minecraft . block . BlockBed ; <nl> - import net . minecraft . block . BlockLiquid ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . audio . ISound ; <nl> import net . minecraft . client . audio . SoundEventAccessorComposite ; <nl> import net . minecraft . client . audio . SoundManager ; <nl> - import net . minecraft . client . entity . EntityPlayerSP ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> import net . minecraft . client . model . ModelBase ; <nl> - import net . minecraft . client . model . ModelBiped ; <nl> import net . minecraft . client . renderer . EntityRenderer ; <nl> - import net . minecraft . client . renderer . GlStateManager ; <nl> import net . minecraft . client . renderer . RenderGlobal ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . renderer . texture . TextureManager ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . resources . I18n ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . client . settings . GameSettings ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> - import net . minecraft . entity . item . EntityItem ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . BlockPos ; <nl> - import net . minecraft . util . ChatComponentTranslation ; <nl> import net . minecraft . util . EnumChatFormatting ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . MathHelper ; <nl> + import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . EntityViewRenderEvent ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> import net . minecraftforge . client . event . GuiScreenEvent ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraftforge . client . event . RenderHandEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> - import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> - import net . minecraftforge . fml . client . registry . RenderingRegistry ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import org . lwjgl . LWJGLException ; <nl> - import org . lwjgl . opengl . Display ; <nl> + <nl> import org . lwjgl . opengl . GL11 ; <nl> - import org . lwjgl . opengl . PixelFormat ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> <nl> @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient <nl> } <nl> } <nl> * / <nl> + <nl> + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 502454f <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 0 , 0 + 1 , 24 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + import net . minecraft . client . resources . model . ModelBakery ; <nl> + import net . minecraft . client . resources . model . ModelManager ; <nl> + import net . minecraft . util . IRegistry ; <nl> + <nl> + / * * <nl> + * Fired when the ModelManager is notified of the resource manager reloading . <nl> + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . <nl> + * / <nl> + public class ModelBakeEvent extends Event <nl> + { <nl> + public final ModelManager modelManager ; <nl> + public final IRegistry modelRegistry ; <nl> + public final ModelBakery modelBakery ; <nl> + <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + { <nl> + this . modelManager = modelManager ; <nl> + this . modelRegistry = modelRegistry ; <nl> + this . modelBakery = modelBakery ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> new file mode 100644 <nl> index 0000000 . . 37dee84 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartBlockModel extends IBakedModel <nl> + { <nl> + IBakedModel handleBlockState ( IBlockState state ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> new file mode 100644 <nl> index 0000000 . . 7973271 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java <nl> @ @ - 0 , 0 + 1 , 9 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + <nl> + public interface ISmartItemModel extends IBakedModel <nl> + { <nl> + IBakedModel handleItemState ( ItemStack stack ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . ef54140 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 138 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . base . Predicates ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . ImmutableTable ; <nl> + import com . google . common . collect . Iterables ; <nl> + <nl> + public class ExtendedBlockState extends BlockState <nl> + { <nl> + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; <nl> + <nl> + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; <nl> + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > property : unlistedProperties ) <nl> + { <nl> + builder . add ( property ) ; <nl> + } <nl> + this . unlistedProperties = builder . build ( ) ; <nl> + } <nl> + <nl> + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + { <nl> + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; <nl> + for ( IUnlistedProperty < ? > p : unlistedProperties ) <nl> + { <nl> + builder . put ( p , Optional . absent ( ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + { <nl> + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> + } <nl> + <nl> + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState <nl> + { <nl> + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; <nl> + <nl> + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + { <nl> + super ( block , properties ) ; <nl> + this . unlistedProperties = unlistedProperties ; <nl> + this . propertyValueTable = table ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState withProperty ( IProperty property , Comparable value ) <nl> + { <nl> + if ( ! this . getProperties ( ) . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + else <nl> + { <nl> + if ( this . getProperties ( ) . get ( property ) = = value ) <nl> + { <nl> + return this ; <nl> + } <nl> + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties present , looking up in the normal table <nl> + return super . withProperty ( property , value ) ; <nl> + } <nl> + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> + map . put ( property , value ) ; <nl> + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; <nl> + } <nl> + } <nl> + <nl> + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + if ( ! property . isValid ( value ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; <nl> + } <nl> + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; <nl> + newMap . put ( property , Optional . fromNullable ( value ) ) ; <nl> + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> + { / / no dynamic properties , lookup normal state <nl> + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; <nl> + } <nl> + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; <nl> + } <nl> + <nl> + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) <nl> + { <nl> + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; <nl> + } <nl> + <nl> + public < V > V getValue ( IUnlistedProperty < V > property ) <nl> + { <nl> + if ( ! this . unlistedProperties . containsKey ( property ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; <nl> + } <nl> + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; <nl> + } <nl> + <nl> + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) <nl> + { <nl> + return unlistedProperties ; <nl> + } <nl> + <nl> + @ Override <nl> + public void buildPropertyValueTable ( Map map ) <nl> + { <nl> + this . normalMap = map ; <nl> + super . buildPropertyValueTable ( map ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> new file mode 100644 <nl> index 0000000 . . 218e427 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . util . Collection ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + <nl> + import com . google . common . base . Optional ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + public interface IExtendedBlockState extends IBlockState <nl> + { <nl> + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; <nl> + <nl> + < V > V getValue ( IUnlistedProperty < V > property ) ; <nl> + <nl> + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; <nl> + <nl> + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> new file mode 100644 <nl> index 0000000 . . da4b702 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java <nl> @ @ - 0 , 0 + 1 , 12 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + public interface IUnlistedProperty < V > <nl> + { <nl> + String getName ( ) ; <nl> + <nl> + boolean isValid ( V value ) ; <nl> + <nl> + Class < V > getType ( ) ; <nl> + <nl> + String valueToString ( V value ) ; <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> new file mode 100644 <nl> index 0000000 . . b24e6be <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> @ @ - 0 , 0 + 1 , 45 @ @ <nl> + package net . minecraftforge . common . property ; <nl> + <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + <nl> + import net . minecraft . block . properties . IProperty ; <nl> + <nl> + import org . apache . commons . lang3 . reflect . ConstructorUtils ; <nl> + <nl> + public class Properties <nl> + { <nl> + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) <nl> + { <nl> + return new PropertyAdapter ( property ) ; <nl> + } <nl> + <nl> + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > <nl> + { <nl> + private final IProperty parent ; <nl> + <nl> + public PropertyAdapter ( IProperty parent ) <nl> + { <nl> + this . parent = parent ; <nl> + } <nl> + <nl> + public String getName ( ) <nl> + { <nl> + return parent . getName ( ) ; <nl> + } <nl> + <nl> + public boolean isValid ( V value ) <nl> + { <nl> + return parent . getAllowedValues ( ) . contains ( value ) ; <nl> + } <nl> + <nl> + public Class < V > getType ( ) <nl> + { <nl> + return parent . getValueClass ( ) ; <nl> + } <nl> + <nl> + public String valueToString ( V value ) <nl> + { <nl> + return parent . getName ( value ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc <nl> index c2381c6 . . f59ef26 100644 <nl> - - - a / src / main / resources / forge . exc <nl> + + + b / src / main / resources / forge . exc <nl> @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec <nl> net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune <nl> net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player <nl> net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest <nl> - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> \ No newline at end of file <nl> + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font <nl> + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties <nl> diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg <nl> index ff42e14 . . 6c78cf2 100644 <nl> - - - a / src / main / resources / forge _ at . cfg <nl> + + + b / src / main / resources / forge _ at . cfg <nl> @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj <nl> # RenderEntityItem <nl> protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount <nl> public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern <nl> - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> \ No newline at end of file <nl> + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V <nl> + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> new file mode 100644 <nl> index 0000000 . . c8de9a4 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 0 , 0 + 1 , 354 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . block . BlockContainer ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . properties . IProperty ; <nl> + import net . minecraft . block . properties . PropertyInteger ; <nl> + import net . minecraft . block . state . BlockState ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . BlockPos ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . Vec3 ; <nl> + import net . minecraft . world . IBlockAccess ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . common . property . ExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IExtendedBlockState ; <nl> + import net . minecraftforge . common . property . IUnlistedProperty ; <nl> + import net . minecraftforge . common . property . Properties ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) <nl> + public class ModelBakeEventDebug <nl> + { <nl> + public static final String MODID = " ForgeDebugModelBakeEvent " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + public static final int cubeSize = 3 ; <nl> + <nl> + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; <nl> + <nl> + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; <nl> + <nl> + static <nl> + { <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ EventHandler <nl> + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> + <nl> + @ EventHandler <nl> + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> + } <nl> + <nl> + public void postInit ( FMLPostInitializationEvent event ) { } <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + <nl> + @ Override <nl> + public void init ( FMLInitializationEvent event ) <nl> + { <nl> + super . init ( event ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void postInit ( FMLPostInitializationEvent event ) { <nl> + super . postInit ( event ) ; <nl> + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> + if ( renderItem ! = null ) <nl> + { <nl> + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> + public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> + { <nl> + return modelLocation ; <nl> + } <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class BakeEventHandler <nl> + { <nl> + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; <nl> + <nl> + private BakeEventHandler ( ) { } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( ModelBakeEvent event ) <nl> + { <nl> + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModelBlock extends BlockContainer <nl> + { <nl> + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; <nl> + public static final String name = " custom _ model _ block " ; <nl> + <nl> + private CustomModelBlock ( ) <nl> + { <nl> + super ( Material . iron ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getRenderType ( ) { return 3 ; } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isFullCube ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isVisuallyOpaque ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TileEntity createNewTileEntity ( World world , int meta ) <nl> + { <nl> + return new CustomTileEntity ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; <nl> + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; <nl> + if ( value = = null ) value = 0 ; <nl> + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; <nl> + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; <nl> + world . markBlockRangeForRenderUpdate ( pos , pos ) ; <nl> + } <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> + { <nl> + TileEntity te = world . getTileEntity ( pos ) ; <nl> + if ( te instanceof CustomTileEntity ) <nl> + { <nl> + CustomTileEntity cte = ( CustomTileEntity ) te ; <nl> + return cte . getState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + @ Override <nl> + protected BlockState createBlockState ( ) <nl> + { <nl> + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomTileEntity extends TileEntity <nl> + { <nl> + private IExtendedBlockState state ; <nl> + public CustomTileEntity ( ) { } <nl> + <nl> + public IExtendedBlockState getState ( ) <nl> + { <nl> + if ( state = = null ) <nl> + { <nl> + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; <nl> + } <nl> + return state ; <nl> + } <nl> + <nl> + public void setState ( IExtendedBlockState state ) <nl> + { <nl> + this . state = state ; <nl> + } <nl> + } <nl> + <nl> + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel <nl> + { <nl> + private final TextureAtlasSprite base , overlay ; <nl> + private boolean hasStateSet = false ; <nl> + private final IExtendedBlockState state ; <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) <nl> + { <nl> + this ( base , overlay , null ) ; <nl> + } <nl> + <nl> + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) <nl> + { <nl> + this . base = base ; <nl> + this . overlay = overlay ; <nl> + this . state = state ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) <nl> + { <nl> + return new int [ ] { <nl> + Float . floatToRawIntBits ( x ) , <nl> + Float . floatToRawIntBits ( y ) , <nl> + Float . floatToRawIntBits ( z ) , <nl> + color , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> + 0 <nl> + } ; <nl> + } <nl> + <nl> + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) <nl> + { <nl> + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; <nl> + return new BakedQuad ( Ints . concat ( <nl> + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , <nl> + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , <nl> + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , <nl> + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) <nl> + ) , - 1 , side ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + int len = cubeSize * 5 + 1 ; <nl> + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> + for ( EnumFacing f : EnumFacing . values ( ) ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; <nl> + for ( int i = 0 ; i < cubeSize ; i + + ) <nl> + { <nl> + for ( int j = 0 ; j < cubeSize ; j + + ) <nl> + { <nl> + if ( state ! = null ) <nl> + { <nl> + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; <nl> + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) <nl> + { <nl> + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) { return this . base ; } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( IBlockState state ) <nl> + { <nl> + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleItemState ( ItemStack stack ) <nl> + { <nl> + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; <nl> + return new CustomModel ( base , overlay , itemState ) ; <nl> + } <nl> + } <nl> + <nl> + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + <nl> + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) <nl> + { <nl> + switch ( side ) <nl> + { <nl> + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; <nl> + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; <nl> + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; <nl> + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; <nl> + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; <nl> + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; <nl> + } <nl> + return null ; <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . c2352ff <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 4 @ @ <nl> + { <nl> + " variants " : { <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> new file mode 100644 <nl> index 0000000 . . 43a272a <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + { <nl> + " parent " : " builtin / entity " <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch b / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch 
 index c6a455d . . a000941 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / block / model / ItemOverrideList . java . patch 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 public ResourceLocation func _ 188021 _ a ( ItemStack p _ 188021 _ 1 _ , World p _ 188021 _ 2 _ , EntityLivingBase p _ 188021 _ 3 _ ) 
 { 
 if ( ! this . field _ 188023 _ b . isEmpty ( ) ) 
 - @ @ - 42 , 4 + 43 , 18 @ @ 
 + @ @ - 42 , 4 + 43 , 23 @ @ 
 
 return null ; 
 } 
 @ @ - 26 , 4 + 26 , 9 @ @ 
 + } 
 + return originalModel ; 
 + } 
 + + 
 + + public com . google . common . collect . ImmutableList < ItemOverride > getOverrides ( ) 
 + + { 
 + + return com . google . common . collect . ImmutableList . copyOf ( field _ 188023 _ b ) ; 
 + + } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index 46f446c . . 23d952e 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 57 , 7 + 57 , 7 @ @ 
 Vec3d vec3d1 = vec3d . func _ 72441 _ c ( ( double ) f6 * d3 , ( double ) f5 * d3 , ( double ) f7 * d3 ) ; 
 return p _ 77621 _ 1 _ . func _ 147447 _ a ( vec3d , vec3d1 , p _ 77621 _ 3 _ , ! p _ 77621 _ 3 _ , false ) ; 
 } 
 - @ @ - 422 , 11 + 431 , 588 @ @ 
 + @ @ - 422 , 11 + 431 , 606 @ @ 
 return false ; 
 } 
 
 @ @ - 641 , 12 + 641 , 30 @ @ 
 + { 
 + return null ; 
 + } 
 + + 
 + + public com . google . common . collect . ImmutableMap < String , net . minecraftforge . client . model . animation . ITimeValue > getAnimationParameters ( final ItemStack stack , final World world , final EntityLivingBase entity ) 
 + + { 
 + + com . google . common . collect . ImmutableMap . Builder < String , net . minecraftforge . client . model . animation . ITimeValue > builder = com . google . common . collect . ImmutableMap . builder ( ) ; 
 + + for ( ResourceLocation location : field _ 185051 _ m . func _ 148742 _ b ( ) ) 
 + + { 
 + + final IItemPropertyGetter parameter = field _ 185051 _ m . func _ 82594 _ a ( location ) ; 
 + + builder . put ( location . toString ( ) , new net . minecraftforge . client . model . animation . ITimeValue ( ) 
 + + { 
 + + public float apply ( float input ) 
 + + { 
 + + return parameter . func _ 185085 _ a ( stack , world , entity ) ; 
 + + } 
 + + } ) ; 
 + + } 
 + + return builder . build ( ) ; 
 + + } 
 + + 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150348 _ b , ( new ItemMultiTexture ( Blocks . field _ 150348 _ b , Blocks . field _ 150348 _ b , new Function < ItemStack , String > ( ) 
 - @ @ - 935 , 6 + 1521 , 10 @ @ 
 + @ @ - 935 , 6 + 1539 , 10 @ @ 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 
 @ @ - 657 , 7 + 675 , 7 @ @ 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 this . field _ 78001 _ f = p _ i1874 _ 3 _ ; 
 - @ @ - 969 , 9 + 1559 , 36 @ @ 
 + @ @ - 969 , 9 + 1577 , 36 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index e813982 . . 89141ec 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 185 , 9 + 185 , 7 @ @ public class BlockStateLoader 
 
 IModel model = ModelLoaderRegistry . getModelOrLogError ( part . getModelLocation ( ) , " Unable to load block sub - model : \ ' " + part . getModelLocation ( ) ) ; 
 
 - IModelState partState = new ModelStateComposition ( baseTr , part . getState ( ) ) ; 
 - 
 - models . put ( entry . getKey ( ) , Pair . < IModel , IModelState > of ( runModelHooks ( model , part . smooth , part . gui3d , part . uvLock , part . getTextures ( ) , part . getCustomData ( ) ) , partState ) ) ; 
 + models . put ( entry . getKey ( ) , Pair . < IModel , IModelState > of ( runModelHooks ( model , part . smooth , part . gui3d , part . uvLock , part . getTextures ( ) , part . getCustomData ( ) ) , part . getState ( ) ) ) ; 
 } 
 
 return new MultiModel ( getModelLocation ( ) , hasBase ? base : null , baseTr , models . build ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index b72b8cf . . 395913f 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 import net . minecraft . client . renderer . block . model . ItemModelGenerator ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 import net . minecraft . client . renderer . block . model . ModelBakery ; 
 import net . minecraft . client . renderer . block . model . ModelBlock ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; 
 @ @ - 57 , 6 + 58 , 7 @ @ import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . registry . IRegistry ; 
 import net . minecraftforge . client . model . animation . Animation ; 
 + import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; 
 import net . minecraftforge . client . model . animation . IAnimatedModel ; 
 import net . minecraftforge . client . model . animation . IClip ; 
 import net . minecraftforge . client . model . animation . ModelBlockAnimation ; 
 @ @ - 497 , 17 + 499 , 18 @ @ public final class ModelLoader extends ModelBakery 
 return new ItemLayerModel ( model ) . bake ( perState , format , bakedTextureGetter ) ; 
 } 
 if ( isCustomRenderer ( model ) ) return new BuiltInModel ( transforms , model . createOverrides ( ) ) ; 
 - return bakeNormal ( model , perState , state . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) , newTransforms , format , bakedTextureGetter , uvlock ) ; 
 + return bakeNormal ( model , perState , state , newTransforms , format , bakedTextureGetter , uvlock ) ; 
 } 
 
 - private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final TRSRTransformation modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 + private IBakedModel bakeNormal ( ModelBlock model , IModelState perState , final IModelState modelState , List < TRSRTransformation > newTransforms , final VertexFormat format , final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 { 
 + final TRSRTransformation baseState = modelState . apply ( Optional . < IModelPart > absent ( ) ) . or ( TRSRTransformation . identity ( ) ) ; 
 TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model , model . createOverrides ( ) ) ) . setTexture ( particle ) ; 
 for ( int i = 0 ; i < model . getElements ( ) . size ( ) ; i + + ) 
 { 
 BlockPart part = model . getElements ( ) . get ( i ) ; 
 - TRSRTransformation transformation = modelState ; 
 + TRSRTransformation transformation = baseState ; 
 if ( newTransforms . get ( i ) ! = null ) 
 { 
 transformation = transformation . compose ( newTransforms . get ( i ) ) ; 
 @ @ - 525 , 13 + 528 , 15 @ @ public final class ModelLoader extends ModelBakery 
 } 
 else 
 { 
 - builder . addFaceQuad ( modelState . rotate ( e . getValue ( ) . cullFace ) , makeBakedQuad ( part , e . getValue ( ) , textureatlassprite1 , e . getKey ( ) , transformation , uvLocked ) ) ; 
 + builder . addFaceQuad ( baseState . rotate ( e . getValue ( ) . cullFace ) , makeBakedQuad ( part , e . getValue ( ) , textureatlassprite1 , e . getKey ( ) , transformation , uvLocked ) ) ; 
 } 
 } 
 } 
 
 return new IPerspectiveAwareModel . MapWrapper ( builder . makeBakedModel ( ) , perState ) 
 { 
 + private final ItemOverrideList overrides = new AnimationItemOverrideList ( VanillaModelWrapper . this , modelState , format , bakedTextureGetter , super . getOverrides ( ) ) ; 
 + 
 @ Override 
 public List < BakedQuad > getQuads ( IBlockState state , EnumFacing side , long rand ) 
 { 
 @ @ - 550 , 6 + 555 , 12 @ @ public final class ModelLoader extends ModelBakery 
 } 
 return super . getQuads ( state , side , rand ) ; 
 } ; 
 + 
 + @ Override 
 + public ItemOverrideList getOverrides ( ) 
 + { 
 + return overrides ; 
 + } 
 } ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 index a6f3b6c . . 7db688e 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 @ @ - 14 , 11 + 14 , 15 @ @ import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 + import net . minecraft . client . renderer . block . model . ItemOverride ; 
 import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . World ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 @ @ - 28 , 6 + 32 , 7 @ @ import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Lists ; 
 import com . google . common . collect . Sets ; 
 
 / / TODO : Switch to vanilla class , or to something similar 
 @ @ - 36 , 15 + 41 , 55 @ @ public final class MultiModel implements IModel 
 { 
 private static final class Baked implements IPerspectiveAwareModel 
 { 
 + private final ResourceLocation location ; 
 private final IBakedModel base ; 
 private final ImmutableMap < String , IBakedModel > parts ; 
 
 private final IBakedModel internalBase ; 
 private ImmutableMap < Optional < EnumFacing > , ImmutableList < BakedQuad > > quads ; 
 private final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; 
 + private final ItemOverrideList overrides = new ItemOverrideList ( Lists . < ItemOverride > newArrayList ( ) ) 
 + { 
 + @ Override 
 + public IBakedModel handleItemState ( IBakedModel originalModel , ItemStack stack , World world , EntityLivingBase entity ) 
 + { 
 + if ( originalModel ! = Baked . this ) 
 + { 
 + return originalModel ; 
 + } 
 + boolean dirty = false ; 
 + IBakedModel newBase = null ; 
 + 
 + if ( base ! = null ) 
 + { 
 + newBase = base . getOverrides ( ) . handleItemState ( base , stack , world , entity ) ; 
 + if ( base ! = newBase ) 
 + { 
 + dirty = true ; 
 + } 
 + } 
 + ImmutableMap . Builder < String , IBakedModel > builder = ImmutableMap . builder ( ) ; 
 + for ( Map . Entry < String , IBakedModel > entry : parts . entrySet ( ) ) 
 + { 
 + IBakedModel newPart = entry . getValue ( ) . getOverrides ( ) . handleItemState ( entry . getValue ( ) , stack , world , entity ) ; 
 + builder . put ( entry . getKey ( ) , newPart ) ; 
 + if ( entry . getValue ( ) ! = newPart ) 
 + { 
 + dirty = true ; 
 + } 
 + } 
 + if ( dirty ) 
 + { 
 + / / TODO : caching ? 
 + return new Baked ( location , newBase instanceof IPerspectiveAwareModel , newBase , builder . build ( ) ) ; 
 + } 
 + return Baked . this ; 
 + } 
 + } ; 
 
 public Baked ( ResourceLocation location , boolean perspective , IBakedModel base , ImmutableMap < String , IBakedModel > parts ) 
 { 
 + this . location = location ; 
 this . base = base ; 
 this . parts = parts ; 
 
 @ @ - 120 , 22 + 165 , 22 @ @ public final class MultiModel implements IModel 
 ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; 
 if ( base ! = null ) 
 { 
 - quads . addAll ( base . getQuads ( null , face , 0 ) ) ; 
 + quads . addAll ( base . getQuads ( state , face , 0 ) ) ; 
 } 
 for ( IBakedModel bakedPart : parts . values ( ) ) 
 { 
 - quads . addAll ( bakedPart . getQuads ( null , face , 0 ) ) ; 
 + quads . addAll ( bakedPart . getQuads ( state , face , 0 ) ) ; 
 } 
 builder . put ( Optional . of ( face ) , quads . build ( ) ) ; 
 } 
 ImmutableList . Builder < BakedQuad > quads = ImmutableList . builder ( ) ; 
 if ( base ! = null ) 
 { 
 - quads . addAll ( base . getQuads ( null , null , 0 ) ) ; 
 + quads . addAll ( base . getQuads ( state , null , 0 ) ) ; 
 } 
 for ( IBakedModel bakedPart : parts . values ( ) ) 
 { 
 - quads . addAll ( bakedPart . getQuads ( null , null , 0 ) ) ; 
 + quads . addAll ( bakedPart . getQuads ( state , null , 0 ) ) ; 
 } 
 builder . put ( Optional . < EnumFacing > absent ( ) , quads . build ( ) ) ; 
 this . quads = builder . build ( ) ; 
 @ @ - 154 , 7 + 199 , 7 @ @ public final class MultiModel implements IModel 
 @ Override 
 public ItemOverrideList getOverrides ( ) 
 { 
 - return ItemOverrideList . NONE ; 
 + return overrides ; 
 } 
 } 
 
 @ @ - 217 , 7 + 262 , 7 @ @ public final class MultiModel implements IModel 
 for ( Entry < String , Pair < IModel , IModelState > > entry : parts . entrySet ( ) ) 
 { 
 Pair < IModel , IModelState > pair = entry . getValue ( ) ; 
 - mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( pair . getRight ( ) , format , bakedTextureGetter ) ) ; 
 + mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( new ModelStateComposition ( state , pair . getRight ( ) ) , format , bakedTextureGetter ) ) ; 
 } 
 
 if ( bakedBase = = null & & parts . isEmpty ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / Animation . java b / src / main / java / net / minecraftforge / client / model / animation / Animation . java 
 index 75cc9cc . . e25786c 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / Animation . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / Animation . java 
 @ @ - 107 , 7 + 107 , 7 @ @ public enum Animation implements IResourceManagerReloadListener 
 return defaultModelBlockAnimation ; 
 } 
 ModelBlockAnimation mba = mbaGson . fromJson ( new InputStreamReader ( resource . getInputStream ( ) , " UTF - 8 " ) , ModelBlockAnimation . class ) ; 
 - String json = mbaGson . toJson ( mba ) ; 
 + / / String json = mbaGson . toJson ( mba ) ; 
 return mba ; 
 } 
 catch ( IOException e ) 
 @ @ - 124 , 7 + 124 , 7 @ @ public enum Animation implements IResourceManagerReloadListener 
 
 private IResourceManager manager ; 
 
 - private final AnimationStateMachine missing = new AnimationStateMachine ( 
 + protected final AnimationStateMachine missing = new AnimationStateMachine ( 
 ImmutableMap . < String , ITimeValue > of ( ) , 
 ImmutableMap . of ( " missingno " , ( IClip ) Clips . IdentityClip . instance ) , 
 ImmutableList . of ( " missingno " ) , 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java 
 new file mode 100644 
 index 0000000 . . 9fe7631 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationItemOverrideList . java 
 @ @ - 0 , 0 + 1 , 63 @ @ 
 + package net . minecraftforge . client . model . animation ; 
 + 
 + import java . util . List ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . block . model . ItemOverride ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . entity . EntityLivingBase ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . model . IModel ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ModelStateComposition ; 
 + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 + 
 + import com . google . common . base . Function ; 
 + 
 + public final class AnimationItemOverrideList extends ItemOverrideList 
 + { 
 + private final IModel model ; 
 + private final IModelState state ; 
 + private final VertexFormat format ; 
 + private final Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ; 
 + 
 + public AnimationItemOverrideList ( IModel model , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , ItemOverrideList overrides ) 
 + { 
 + this ( model , state , format , bakedTextureGetter , overrides . getOverrides ( ) ) ; 
 + } 
 + 
 + public AnimationItemOverrideList ( IModel model , IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , List < ItemOverride > overrides ) 
 + { 
 + super ( overrides ) ; 
 + this . model = model ; 
 + this . state = state ; 
 + this . format = format ; 
 + this . bakedTextureGetter = bakedTextureGetter ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleItemState ( IBakedModel originalModel , ItemStack stack , World world , EntityLivingBase entity ) 
 + { 
 + if ( stack . hasCapability ( net . minecraftforge . client . model . animation . CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) 
 + { 
 + / / TODO : caching ? 
 + IAnimationStateMachine asm = stack . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ; 
 + if ( world = = null ) 
 + { 
 + world = entity . worldObj ; 
 + } 
 + if ( world = = null ) 
 + { 
 + world = Minecraft . getMinecraft ( ) . theWorld ; 
 + } 
 + IModelState state = asm . apply ( Animation . getWorldTime ( world , Animation . getPartialTickTime ( ) ) ) . getLeft ( ) ; 
 + return model . bake ( new ModelStateComposition ( state , this . state ) , format , bakedTextureGetter ) ; 
 + } 
 + return originalModel ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java 
 index 6174ee3 . . 3273967 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationModelBase . java 
 @ @ - 14 , 9 + 14 , 11 @ @ import net . minecraft . entity . Entity ; 
 import net . minecraft . init . Blocks ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . client . model . IModel ; 
 import net . minecraftforge . client . model . IModelState ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . pipeline . VertexLighterFlat ; 
 import net . minecraftforge . client . model . pipeline . VertexBufferConsumer ; 
 
 @ @ - 28 , 14 + 30 , 14 @ @ import org . lwjgl . opengl . GL11 ; 
 * Some quirks are still left , deprecated for the moment . 
 * / 
 @ Deprecated 
 - public class AnimationModelBase < T extends Entity & IAnimationProvider > extends ModelBase implements IEventHandler < T > 
 + public class AnimationModelBase < T extends Entity > extends ModelBase implements IEventHandler < T > 
 { 
 private final VertexLighterFlat lighter ; 
 - private final IModel model ; 
 + private final ResourceLocation modelLocation ; 
 
 - public AnimationModelBase ( IModel model , VertexLighterFlat lighter ) 
 + public AnimationModelBase ( ResourceLocation modelLocation , VertexLighterFlat lighter ) 
 { 
 - this . model = model ; 
 + this . modelLocation = modelLocation ; 
 this . lighter = lighter ; 
 } 
 
 @ @ - 43 , 13 + 45 , 14 @ @ public class AnimationModelBase < T extends Entity & IAnimationProvider > extends M 
 @ Override 
 public void render ( Entity entity , float limbSwing , float limbSwingSpeed , float timeAlive , float yawHead , float rotationPitch , float scale ) 
 { 
 - if ( ! ( entity instanceof IAnimationProvider ) ) 
 + if ( ! ( entity . hasCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) ) 
 { 
 - throw new ClassCastException ( " AnimationModelBase expects IAnimationProvider " ) ; 
 + return ; 
 } 
 
 - Pair < IModelState , Iterable < Event > > pair = ( ( IAnimationProvider ) entity ) . asm ( ) . apply ( timeAlive / 20 ) ; 
 + Pair < IModelState , Iterable < Event > > pair = entity . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) . apply ( timeAlive / 20 ) ; 
 handleEvents ( ( T ) entity , timeAlive / 20 , pair . getRight ( ) ) ; 
 + IModel model = ModelLoaderRegistry . getModelOrMissing ( modelLocation ) ; 
 IBakedModel bakedModel = model . bake ( pair . getLeft ( ) , DefaultVertexFormats . ITEM , ModelLoader . defaultTextureGetter ( ) ) ; 
 
 BlockPos pos = new BlockPos ( entity . posX , entity . posY + entity . height , entity . posZ ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 index ac6ec94 . . db81f32 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 @ @ - 18 , 12 + 18 , 16 @ @ import org . apache . commons . lang3 . tuple . Pair ; 
 / * * 
 * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . 
 * / 
 - public class AnimationTESR < T extends TileEntity & IAnimationProvider > extends FastTESR < T > implements IEventHandler < T > 
 + public class AnimationTESR < T extends TileEntity > extends FastTESR < T > implements IEventHandler < T > 
 { 
 protected static BlockRendererDispatcher blockRenderer ; 
 
 public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , VertexBuffer renderer ) 
 { 
 + if ( ! te . hasCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) ) 
 + { 
 + return ; 
 + } 
 if ( blockRenderer = = null ) blockRenderer = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) ; 
 BlockPos pos = te . getPos ( ) ; 
 IBlockAccess world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; 
 @ @ - 38 , 7 + 42 , 7 @ @ public class AnimationTESR < T extends TileEntity & IAnimationProvider > extends Fa 
 if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) 
 { 
 float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; 
 - Pair < IModelState , Iterable < Event > > pair = te . asm ( ) . apply ( time ) ; 
 + Pair < IModelState , Iterable < Event > > pair = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY , null ) . apply ( time ) ; 
 handleEvents ( te , time , pair . getRight ( ) ) ; 
 
 / / TODO : caching ? 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java 
 new file mode 100644 
 index 0000000 . . 3181e46 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / CapabilityAnimation . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package net . minecraftforge . client . model . animation ; 
 + 
 + import java . util . concurrent . Callable ; 
 + 
 + import net . minecraft . nbt . NBTBase ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraftforge . common . capabilities . Capability ; 
 + import net . minecraftforge . common . capabilities . CapabilityInject ; 
 + import net . minecraftforge . common . capabilities . CapabilityManager ; 
 + import net . minecraftforge . common . capabilities . ICapabilityProvider ; 
 + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 + 
 + public class CapabilityAnimation 
 + { 
 + @ CapabilityInject ( IAnimationStateMachine . class ) 
 + public static Capability < IAnimationStateMachine > ANIMATION _ CAPABILITY = null ; 
 + 
 + public static void register ( ) 
 + { 
 + CapabilityManager . INSTANCE . register ( IAnimationStateMachine . class , new Capability . IStorage < IAnimationStateMachine > ( ) 
 + { 
 + public NBTBase writeNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side ) 
 + { 
 + return null ; 
 + } 
 + 
 + public void readNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side , NBTBase nbt ) { } 
 + } , new Callable < IAnimationStateMachine > ( ) 
 + { 
 + public IAnimationStateMachine call ( ) throws Exception 
 + { 
 + return Animation . INSTANCE . missing ; 
 + } 
 + } ) ; 
 + } 
 + 
 + public static class DefaultItemAnimationCapabilityProvider implements ICapabilityProvider 
 + { 
 + private final IAnimationStateMachine asm ; 
 + 
 + public DefaultItemAnimationCapabilityProvider ( IAnimationStateMachine asm ) 
 + { 
 + this . asm = asm ; 
 + } 
 + 
 + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) 
 + { 
 + return capability = = ANIMATION _ CAPABILITY ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) 
 + { 
 + if ( capability = = ANIMATION _ CAPABILITY ) 
 + { 
 + return ( T ) asm ; 
 + } 
 + return null ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java b / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java 
 deleted file mode 100644 
 index 94723d3 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / IAnimationProvider . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package net . minecraftforge . client . model . animation ; 
 - 
 - import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 - 
 - 
 - / * * 
 - * Something that can provide the Animation State Machine , for example and Entity or a Block 
 - * / 
 - public interface IAnimationProvider 
 - { 
 - public IAnimationStateMachine asm ( ) ; 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index 6e9cf90 . . 9ae3fdc 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 49 , 7 + 49 , 6 @ @ import net . minecraftforge . client . model . b3d . B3DModel . Mesh ; 
 import net . minecraftforge . client . model . b3d . B3DModel . Node ; 
 import net . minecraftforge . client . model . b3d . B3DModel . Texture ; 
 import net . minecraftforge . client . model . b3d . B3DModel . Vertex ; 
 - import net . minecraftforge . client . model . pipeline . LightUtil ; 
 import net . minecraftforge . client . model . pipeline . UnpackedBakedQuad ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 import net . minecraftforge . common . property . IUnlistedProperty ; 
 @ @ - 680 , 9 + 679 , 16 @ @ public final class B3DLoader implements ICustomModelLoader 
 if ( quads = = null ) 
 { 
 ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 - generateQuads ( builder , node , modelState ) ; 
 + generateQuads ( builder , node , this . state ) ; 
 quads = builder . build ( ) ; 
 } 
 + / / TODO : caching ? 
 + if ( this . state ! = modelState ) 
 + { 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + generateQuads ( builder , node , modelState ) ; 
 + return builder . build ( ) ; 
 + } 
 return quads ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 index 3156a22 . . 07c2481 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 @ @ - 1 , 7 + 1 , 5 @ @ 
 package net . minecraftforge . debug ; 
 
 - import java . io . IOException ; 
 - 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockPistonBase ; 
 import net . minecraft . block . material . Material ; 
 @ @ - 20 , 7 + 18 , 9 @ @ import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . entity . SharedMonsterAttributes ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . EnumHand ; 
 @ @ - 28 , 23 + 28 , 17 @ @ import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 - import net . minecraftforge . client . model . IModel ; 
 - import net . minecraftforge . client . model . IModelState ; 
 - import net . minecraftforge . client . model . IRetexturableModel ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 - import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 - import net . minecraftforge . client . model . ModelProcessingHelper ; 
 - import net . minecraftforge . client . model . MultiModel ; 
 - import net . minecraftforge . client . model . TRSRTransformation ; 
 import net . minecraftforge . client . model . animation . Animation ; 
 - import net . minecraftforge . client . model . animation . AnimationModelBase ; 
 import net . minecraftforge . client . model . animation . AnimationTESR ; 
 + import net . minecraftforge . client . model . animation . CapabilityAnimation ; 
 import net . minecraftforge . client . model . animation . Event ; 
 - import net . minecraftforge . client . model . animation . IAnimationProvider ; 
 import net . minecraftforge . client . model . animation . ITimeValue ; 
 import net . minecraftforge . client . model . animation . TimeValues . VariableValue ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 import net . minecraftforge . client . model . pipeline . VertexLighterSmoothAo ; 
 + import net . minecraftforge . common . capabilities . Capability ; 
 + import net . minecraftforge . common . capabilities . ICapabilityProvider ; 
 import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 import net . minecraftforge . common . property . IUnlistedProperty ; 
 @ @ - 60 , 8 + 54 , 6 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . registry . EntityRegistry ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 - 
 import com . google . common . collect . ImmutableMap ; 
 
 @ Mod ( modid = ModelAnimationDebug . MODID , version = ModelAnimationDebug . VERSION ) 
 @ @ - 156 , 6 + 148 , 14 @ @ public class ModelAnimationDebug 
 } 
 return true ; 
 } 
 + } , null , blockName ) ; 
 + GameRegistry . registerItem ( new ItemBlock ( GameRegistry . findBlock ( MODID , blockName ) ) 
 + { 
 + @ Override 
 + public ICapabilityProvider initCapabilities ( ItemStack stack , NBTTagCompound nbt ) 
 + { 
 + return new ItemAnimationHolder ( ) ; 
 + } 
 } , blockName ) ; 
 GameRegistry . registerTileEntity ( Chest . class , MODID + " : " + " tile _ " + blockName ) ; 
 } 
 @ @ - 192 , 6 + 192 , 7 @ @ public class ModelAnimationDebug 
 EntityRegistry . registerModEntity ( EntityChest . class , entityName , 0 , ModelAnimationDebug . instance , 64 , 20 , true , 0xFFAAAA00 , 0xFFDDDD00 ) ; 
 RenderingRegistry . registerEntityRenderingHandler ( EntityChest . class , new IRenderFactory < EntityChest > ( ) 
 { 
 + @ SuppressWarnings ( " deprecation " ) 
 public Render < EntityChest > createRenderFor ( RenderManager manager ) 
 { 
 / * model = ModelLoaderRegistry . getModel ( new ResourceLocation ( ModelLoaderRegistryDebug . MODID , " block / chest . b3d " ) ) ; 
 @ @ - 203 , 25 + 204 , 8 @ @ public class ModelAnimationDebug 
 { 
 model = ( ( IModelCustomData ) model ) . process ( ImmutableMap . of ( " mesh " , " [ \ " Base \ " , \ " Lid \ " ] " ) ) ; 
 } * / 
 - IModel base = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ModelAnimationDebug . MODID , " block / engine " ) ) ; 
 - IModel ring = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ModelAnimationDebug . MODID , " block / engine _ ring " ) ) ; 
 - ImmutableMap < String , String > textures = ImmutableMap . of ( 
 - " base " , " blocks / stone " , 
 - " front " , " blocks / log _ oak " , 
 - " chamber " , " blocks / redstone _ block " , 
 - " trunk " , " blocks / end _ stone " 
 - ) ; 
 - base = ModelProcessingHelper . retexture ( base , textures ) ; 
 - ring = ModelProcessingHelper . retexture ( base , textures ) ; 
 - IModel model = new MultiModel ( 
 - new ResourceLocation ( ModelAnimationDebug . MODID , " builtin / engine " ) , 
 - ring , 
 - TRSRTransformation . identity ( ) , 
 - ImmutableMap . of ( 
 - " base " , Pair . < IModel , IModelState > of ( base , TRSRTransformation . identity ( ) ) 
 - ) 
 - ) ; 
 - return new RenderLiving < EntityChest > ( manager , new AnimationModelBase < EntityChest > ( model , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . getBlockColors ( ) ) ) 
 + ResourceLocation location = new ModelResourceLocation ( new ResourceLocation ( MODID , blockName ) , " entity " ) ; 
 + return new RenderLiving < EntityChest > ( manager , new net . minecraftforge . client . model . animation . AnimationModelBase < EntityChest > ( location , new VertexLighterSmoothAo ( Minecraft . getMinecraft ( ) . getBlockColors ( ) ) ) 
 { 
 @ Override 
 public void handleEvents ( EntityChest chest , float time , Iterable < Event > pastEvents ) 
 @ @ - 246 , 10 + 230 , 34 @ @ public class ModelAnimationDebug 
 
 } 
 
 + private static class ItemAnimationHolder implements ICapabilityProvider 
 + { 
 + private final VariableValue cycleLength = new VariableValue ( 4 ) ; 
 + 
 + private final IAnimationStateMachine asm = proxy . load ( new ResourceLocation ( MODID . toLowerCase ( ) , " asms / block / engine . json " ) , ImmutableMap . < String , ITimeValue > of ( 
 + " cycle _ length " , cycleLength 
 + ) ) ; 
 + 
 + public boolean hasCapability ( Capability < ? > capability , EnumFacing facing ) 
 + { 
 + return capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public < T > T getCapability ( Capability < T > capability , EnumFacing facing ) 
 + { 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return ( T ) asm ; 
 + } 
 + return null ; 
 + } 
 + } 
 + 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 
 - public static class Chest extends TileEntity implements IAnimationProvider 
 + public static class Chest extends TileEntity 
 { 
 private final IAnimationStateMachine asm ; 
 private final VariableValue cycleLength = new VariableValue ( 4 ) ; 
 @ @ - 319 , 25 + 327 , 37 @ @ public class ModelAnimationDebug 
 } 
 } 
 
 - public IAnimationStateMachine asm ( ) 
 + @ Override 
 + public boolean hasCapability ( Capability < ? > capability , EnumFacing side ) 
 { 
 - return asm ; 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return true ; 
 + } 
 + return super . hasCapability ( capability , side ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Override 
 + public < T > T getCapability ( Capability < T > capability , EnumFacing side ) 
 + { 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return ( T ) asm ; 
 + } 
 + return super . getCapability ( capability , side ) ; 
 } 
 } 
 
 - public static class EntityChest extends EntityLiving implements IAnimationProvider 
 + public static class EntityChest extends EntityLiving 
 { 
 private final IAnimationStateMachine asm ; 
 - private VariableValue cycleLength ; 
 + private final VariableValue cycleLength = new VariableValue ( getHealth ( ) / 5 ) ; 
 
 public EntityChest ( World world ) 
 { 
 super ( world ) ; 
 setSize ( 1 , 1 ) ; 
 - if ( cycleLength = = null ) 
 - { 
 - cycleLength = new VariableValue ( getHealth ( ) / 5 ) ; 
 - } 
 asm = proxy . load ( new ResourceLocation ( MODID . toLowerCase ( ) , " asms / block / engine . json " ) , ImmutableMap . < String , ITimeValue > of ( 
 " cycle _ length " , cycleLength 
 ) ) ; 
 @ @ - 348 , 25 + 368 , 15 @ @ public class ModelAnimationDebug 
 / / TODO Auto - generated method stub 
 } 
 
 - public IAnimationStateMachine asm ( ) 
 - { 
 - return asm ; 
 - } 
 - 
 - / / FIXME update health 
 - / * @ Override 
 - public void func _ 184206 _ a ( DataParameter < ? > key ) 
 + @ Override 
 + public void onEntityUpdate ( ) 
 { 
 - super . func _ 184206 _ a ( key ) ; 
 - if ( field _ 184632 _ c . equals ( key ) ) / / health 
 + super . onEntityUpdate ( ) ; 
 + if ( worldObj . isRemote & & cycleLength ! = null ) 
 { 
 - if ( cycleLength = = null ) 
 - { 
 - cycleLength = new VariableValue ( 0 ) ; 
 - } 
 cycleLength . setValue ( getHealth ( ) / 5 ) ; 
 } 
 - } * / 
 + } 
 
 @ Override 
 protected void applyEntityAttributes ( ) 
 @ @ - 374 , 6 + 384 , 27 @ @ public class ModelAnimationDebug 
 super . applyEntityAttributes ( ) ; 
 this . getEntityAttribute ( SharedMonsterAttributes . MAX _ HEALTH ) . setBaseValue ( 60 ) ; 
 } 
 + 
 + @ Override 
 + public boolean hasCapability ( Capability < ? > capability , EnumFacing side ) 
 + { 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return true ; 
 + } 
 + return super . hasCapability ( capability , side ) ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + @ Override 
 + public < T > T getCapability ( Capability < T > capability , EnumFacing side ) 
 + { 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return ( T ) asm ; 
 + } 
 + return super . getCapability ( capability , side ) ; 
 + } 
 } 
 } 
 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json b / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json 
 index f2faef7 . . 26dc74e 100644 
 - - - a / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / blockstates / test _ animation _ block . json 
 @ @ - 43 , 6 + 43 , 12 @ @ 
 } * / 
 " model " : " forgedebugmodelanimation : engine _ ring " 
 } 
 - } 
 + } , 
 + " entity " : [ { 
 + " model " : " forgedebugmodelanimation : engine " , 
 + " submodel " : { 
 + " ring " : { " model " : " forgedebugmodelanimation : engine _ ring " } 
 + } 
 + } ] 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / Block . java . patch b / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 523a8df . . a946cbd 100644 
 - - - a / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 161 , 7 + 161 , 7 @ @ 
 } 
 
 protected ItemStack func _ 180643 _ i ( IBlockState p _ 180643 _ 1 _ ) 
 - @ @ - 971 , 6 + 989 , 1011 @ @ 
 + @ @ - 971 , 6 + 989 , 1019 @ @ 
 return Block . EnumOffsetType . NONE ; 
 } 
 
 @ @ - 1145 , 6 + 1145 , 14 @ @ 
 + return type ! = null & & type . equals ( getHarvestTool ( state ) ) ; 
 + } 
 + 
 + + / * * 
 + + * Can return IExtendedBlockState 
 + + * / 
 + + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + + { 
 + + return func _ 176221 _ a ( state , world , pos ) ; 
 + + } 
 + + 
 + / / For Internal use only to capture droped items inside getDrops 
 + protected static ThreadLocal < Boolean > captureDrops = new ThreadLocal < Boolean > ( ) 
 + { 
 diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 new file mode 100644 
 index 0000000 . . 90b08e7 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / block / state / BlockState . java 
 + + + + . . / src - work / minecraft / net / minecraft / block / state / BlockState . java 
 + @ @ - 47 , 6 + 47 , 16 @ @ 
 + 
 + public BlockState ( Block p _ i45663 _ 1 _ , IProperty . . . p _ i45663 _ 2 _ ) 
 + { 
 + + this ( p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , null ) ; 
 + + } 
 + + 
 + + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + + { 
 + + return new StateImplementation ( block , properties ) ; 
 + + } 
 + + 
 + + protected BlockState ( Block p _ i45663 _ 1 _ , IProperty [ ] p _ i45663 _ 2 _ , ImmutableMap unlistedProperties ) 
 + + { 
 + this . field _ 177627 _ c = p _ i45663 _ 1 _ ; 
 + Arrays . sort ( p _ i45663 _ 2 _ , new Comparator ( ) 
 + { 
 + @ @ - 70 , 7 + 80 , 7 @ @ 
 + { 
 + List list = ( List ) iterator . next ( ) ; 
 + Map map = MapPopulator . func _ 179400 _ b ( this . field _ 177624 _ d , list ) ; 
 + - BlockState . StateImplementation stateimplementation = new BlockState . StateImplementation ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , null ) ; 
 + + BlockState . StateImplementation stateimplementation = createState ( p _ i45663 _ 1 _ , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; 
 + linkedhashmap . put ( map , stateimplementation ) ; 
 + arraylist . add ( stateimplementation ) ; 
 + } 
 + @ @ - 231 , 5 + 241 , 10 @ @ 
 + { 
 + this ( p _ i45661 _ 1 _ , p _ i45661 _ 2 _ ) ; 
 + } 
 + + 
 + + public ImmutableTable < IProperty , Comparable , IBlockState > getPropertyValueTable ( ) 
 + + { 
 + + return field _ 177238 _ c ; 
 + + } 
 + } 
 + } 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 new file mode 100644 
 index 0000000 . . a24be3d 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 0 , 0 + 1 , 15 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + @ @ - 129 , 6 + 129 , 12 @ @ 
 + ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175022 _ 1 _ , p _ 175022 _ 2 _ , p _ 175022 _ 3 _ ) ; 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + } 
 + + 
 + return ibakedmodel ; 
 + } 
 + 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 new file mode 100644 
 index 0000000 . . dbe123b 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / ItemModelMesher . java . patch 
 @ @ - 0 , 0 + 1 , 14 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemModelMesher . java 
 + @ @ - 52 , 6 + 52 , 11 @ @ 
 + } 
 + } 
 + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartItemModel ) 
 + + { 
 + + ibakedmodel = ( ( net . minecraftforge . client . model . ISmartItemModel ) ibakedmodel ) . handleItemState ( p _ 178089 _ 1 _ ) ; 
 + + } 
 + + 
 + if ( ibakedmodel = = null ) 
 + { 
 + ibakedmodel = this . field _ 178090 _ d . func _ 174951 _ a ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 new file mode 100644 
 index 0000000 . . 9b2da14 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelManager . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / resources / model / ModelManager . java 
 + @ @ - 28 , 6 + 28 , 7 @ @ 
 + ModelBakery modelbakery = new ModelBakery ( p _ 110549 _ 1 _ , this . field _ 174956 _ b , this . field _ 174957 _ c ) ; 
 + this . field _ 174958 _ a = modelbakery . func _ 177570 _ a ( ) ; 
 + this . field _ 174955 _ d = ( IBakedModel ) this . field _ 174958 _ a . func _ 82594 _ a ( ModelBakery . field _ 177604 _ a ) ; 
 + + net . minecraftforge . client . ForgeHooksClient . onModelBake ( this , this . field _ 174958 _ a , modelbakery ) ; 
 + this . field _ 174957 _ c . func _ 178124 _ c ( ) ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 9b9b75e . . d0126b6 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 2 , 41 + 2 , 31 @ @ package net . minecraftforge . client ; 
 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA ; 
 import static net . minecraftforge . common . ForgeVersion . Status . BETA _ OUTDATED ; 
 - import java . util . Random ; 
 - import javax . imageio . ImageIO ; 
 import net . minecraft . block . Block ; 
 - import net . minecraft . block . BlockBed ; 
 - import net . minecraft . block . BlockLiquid ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . audio . ISound ; 
 import net . minecraft . client . audio . SoundEventAccessorComposite ; 
 import net . minecraft . client . audio . SoundManager ; 
 - import net . minecraft . client . entity . EntityPlayerSP ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraft . client . gui . GuiScreen ; 
 import net . minecraft . client . model . ModelBase ; 
 - import net . minecraft . client . model . ModelBiped ; 
 import net . minecraft . client . renderer . EntityRenderer ; 
 - import net . minecraft . client . renderer . GlStateManager ; 
 import net . minecraft . client . renderer . RenderGlobal ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . renderer . texture . TextureManager ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . resources . I18n ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . client . settings . GameSettings ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . entity . EntityLivingBase ; 
 - import net . minecraft . entity . item . EntityItem ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . BlockPos ; 
 - import net . minecraft . util . ChatComponentTranslation ; 
 import net . minecraft . util . EnumChatFormatting ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . MathHelper ; 
 + import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 @ @ - 45 , 6 + 35 , 7 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . EntityViewRenderEvent ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 import net . minecraftforge . client . event . GuiScreenEvent ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraftforge . client . event . RenderHandEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 @ @ - 54 , 14 + 45 , 9 @ @ import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 - import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 - import net . minecraftforge . fml . client . registry . RenderingRegistry ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import org . lwjgl . LWJGLException ; 
 - import org . lwjgl . opengl . Display ; 
 + 
 import org . lwjgl . opengl . GL11 ; 
 - import org . lwjgl . opengl . PixelFormat ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 / / import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 
 @ @ - 470 , 4 + 456 , 9 @ @ public class ForgeHooksClient 
 } 
 } 
 * / 
 + 
 + public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 new file mode 100644 
 index 0000000 . . 502454f 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 0 , 0 + 1 , 24 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + import net . minecraft . client . resources . model . ModelBakery ; 
 + import net . minecraft . client . resources . model . ModelManager ; 
 + import net . minecraft . util . IRegistry ; 
 + 
 + / * * 
 + * Fired when the ModelManager is notified of the resource manager reloading . 
 + * Called after model registry is setup , but before it ' s passed to BlockModelShapes . 
 + * / 
 + public class ModelBakeEvent extends Event 
 + { 
 + public final ModelManager modelManager ; 
 + public final IRegistry modelRegistry ; 
 + public final ModelBakery modelBakery ; 
 + 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + { 
 + this . modelManager = modelManager ; 
 + this . modelRegistry = modelRegistry ; 
 + this . modelBakery = modelBakery ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 new file mode 100644 
 index 0000000 . . 37dee84 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartBlockModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartBlockModel extends IBakedModel 
 + { 
 + IBakedModel handleBlockState ( IBlockState state ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 new file mode 100644 
 index 0000000 . . 7973271 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ISmartItemModel . java 
 @ @ - 0 , 0 + 1 , 9 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + 
 + public interface ISmartItemModel extends IBakedModel 
 + { 
 + IBakedModel handleItemState ( ItemStack stack ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . ef54140 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 138 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . base . Predicates ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . ImmutableTable ; 
 + import com . google . common . collect . Iterables ; 
 + 
 + public class ExtendedBlockState extends BlockState 
 + { 
 + private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; 
 + 
 + public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; 
 + ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > property : unlistedProperties ) 
 + { 
 + builder . add ( property ) ; 
 + } 
 + this . unlistedProperties = builder . build ( ) ; 
 + } 
 + 
 + private static ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > buildUnlistedMap ( IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + { 
 + ImmutableMap . Builder < IUnlistedProperty < ? > , Optional < ? > > builder = ImmutableMap . < IUnlistedProperty < ? > , Optional < ? > > builder ( ) ; 
 + for ( IUnlistedProperty < ? > p : unlistedProperties ) 
 + { 
 + builder . put ( p , Optional . absent ( ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + { 
 + return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 + } 
 + 
 + protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState 
 + { 
 + private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 + private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; 
 + 
 + protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + { 
 + super ( block , properties ) ; 
 + this . unlistedProperties = unlistedProperties ; 
 + this . propertyValueTable = table ; 
 + } 
 + 
 + @ Override 
 + public IBlockState withProperty ( IProperty property , Comparable value ) 
 + { 
 + if ( ! this . getProperties ( ) . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + else if ( ! property . getAllowedValues ( ) . contains ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + else 
 + { 
 + if ( this . getProperties ( ) . get ( property ) = = value ) 
 + { 
 + return this ; 
 + } 
 + if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties present , looking up in the normal table 
 + return super . withProperty ( property , value ) ; 
 + } 
 + Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 + map . put ( property , value ) ; 
 + ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 + table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 + return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) ; 
 + } 
 + } 
 + 
 + public < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + if ( ! property . isValid ( value ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot set unlisted property " + property + " to " + value + " on block " + Block . blockRegistry . getNameForObject ( getBlock ( ) ) + " , it is not an allowed value " ) ; 
 + } 
 + Map < IUnlistedProperty < ? > , Optional < ? > > newMap = new HashMap < IUnlistedProperty < ? > , Optional < ? > > ( unlistedProperties ) ; 
 + newMap . put ( property , Optional . fromNullable ( value ) ) ; 
 + if ( Iterables . all ( newMap . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 + { / / no dynamic properties , lookup normal state 
 + return ( IExtendedBlockState ) normalMap . get ( getProperties ( ) ) ; 
 + } 
 + return new ExtendedStateImplementation ( getBlock ( ) , getProperties ( ) , ImmutableMap . copyOf ( newMap ) , propertyValueTable ) ; 
 + } 
 + 
 + public Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) 
 + { 
 + return Collections . unmodifiableCollection ( unlistedProperties . keySet ( ) ) ; 
 + } 
 + 
 + public < V > V getValue ( IUnlistedProperty < V > property ) 
 + { 
 + if ( ! this . unlistedProperties . containsKey ( property ) ) 
 + { 
 + throw new IllegalArgumentException ( " Cannot get unlisted property " + property + " as it does not exist in " + getBlock ( ) . getBlockState ( ) ) ; 
 + } 
 + return property . getType ( ) . cast ( this . unlistedProperties . get ( property ) . orNull ( ) ) ; 
 + } 
 + 
 + public ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) 
 + { 
 + return unlistedProperties ; 
 + } 
 + 
 + @ Override 
 + public void buildPropertyValueTable ( Map map ) 
 + { 
 + this . normalMap = map ; 
 + super . buildPropertyValueTable ( map ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 new file mode 100644 
 index 0000000 . . 218e427 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IExtendedBlockState . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . util . Collection ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + 
 + import com . google . common . base . Optional ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + public interface IExtendedBlockState extends IBlockState 
 + { 
 + Collection < IUnlistedProperty < ? > > getUnlistedNames ( ) ; 
 + 
 + < V > V getValue ( IUnlistedProperty < V > property ) ; 
 + 
 + < V > IExtendedBlockState withProperty ( IUnlistedProperty < V > property , V value ) ; 
 + 
 + ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > getUnlistedProperties ( ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 new file mode 100644 
 index 0000000 . . da4b702 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / IUnlistedProperty . java 
 @ @ - 0 , 0 + 1 , 12 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + public interface IUnlistedProperty < V > 
 + { 
 + String getName ( ) ; 
 + 
 + boolean isValid ( V value ) ; 
 + 
 + Class < V > getType ( ) ; 
 + 
 + String valueToString ( V value ) ; 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java 
 new file mode 100644 
 index 0000000 . . b24e6be 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / common / property / Properties . java 
 @ @ - 0 , 0 + 1 , 45 @ @ 
 + package net . minecraftforge . common . property ; 
 + 
 + import java . lang . reflect . InvocationTargetException ; 
 + 
 + import net . minecraft . block . properties . IProperty ; 
 + 
 + import org . apache . commons . lang3 . reflect . ConstructorUtils ; 
 + 
 + public class Properties 
 + { 
 + public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) 
 + { 
 + return new PropertyAdapter ( property ) ; 
 + } 
 + 
 + public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > 
 + { 
 + private final IProperty parent ; 
 + 
 + public PropertyAdapter ( IProperty parent ) 
 + { 
 + this . parent = parent ; 
 + } 
 + 
 + public String getName ( ) 
 + { 
 + return parent . getName ( ) ; 
 + } 
 + 
 + public boolean isValid ( V value ) 
 + { 
 + return parent . getAllowedValues ( ) . contains ( value ) ; 
 + } 
 + 
 + public Class < V > getType ( ) 
 + { 
 + return parent . getValueClass ( ) ; 
 + } 
 + 
 + public String valueToString ( V value ) 
 + { 
 + return parent . getName ( value ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / resources / forge . exc b / src / main / resources / forge . exc 
 index c2381c6 . . f59ef26 100644 
 - - - a / src / main / resources / forge . exc 
 + + + b / src / main / resources / forge . exc 
 @ @ - 26 , 4 + 26 , 5 @ @ net / minecraft / block / BlockFire . tryCatchFire ( Lnet / minecraft / world / World ; Lnet / minec 
 net / minecraft / block / BlockSkull . getDrops ( Lnet / minecraft / world / IBlockAccess ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / block / state / IBlockState ; I ) Ljava / util / List ; = | p _ 180663 _ 1 _ , p _ 180663 _ 2 _ , p _ 180663 _ 3 _ , fortune 
 net / minecraft / item / ItemDye . applyBonemeal ( Lnet / minecraft / item / ItemStack ; Lnet / minecraft / world / World ; Lnet / minecraft / util / BlockPos ; Lnet / minecraft / entity / player / EntityPlayer ; ) Z = | p _ 179234 _ 0 _ , p _ 179234 _ 1 _ , p _ 179234 _ 2 _ , player 
 net / minecraft / server / management / ItemInWorldManager . removeBlock ( Lnet / minecraft / util / BlockPos ; Z ) Z = | p _ 180235 _ 1 _ , canHarvest 
 - net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 \ No newline at end of file 
 + net / minecraft / client / gui / GuiScreen . drawHoveringText ( Ljava / util / List ; IILnet / minecraft / client / gui / FontRenderer ; ) V = | p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , font 
 + net / minecraft / block / state / BlockState . < init > ( Lnet / minecraft / block / Block ; [ Lnet / minecraft / block / properties / IProperty ; Lcom / google / common / collect / ImmutableMap ; ) V = | p _ i45663 _ 1 _ , p _ i45663 _ 2 _ , unlistedProperties 
 diff - - git a / src / main / resources / forge _ at . cfg b / src / main / resources / forge _ at . cfg 
 index ff42e14 . . 6c78cf2 100644 
 - - - a / src / main / resources / forge _ at . cfg 
 + + + b / src / main / resources / forge _ at . cfg 
 @ @ - 119 , 4 + 119 , 7 @ @ public net . minecraft . world . gen . ChunkProviderServer field _ 73251 _ h # worldObj 
 # RenderEntityItem 
 protected net . minecraft . client . renderer . entity . RenderEntityItem func _ 177078 _ a ( Lnet / minecraft / item / ItemStack ; ) I # getMiniItemCount 
 public net . minecraft . item . crafting . RecipesBanners $ RecipeAddPattern 
 - public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 \ No newline at end of file 
 + public net . minecraft . item . crafting . RecipesBanners $ RecipeDuplicatePattern 
 + protected net . minecraft . block . state . BlockState $ StateImplementation 
 + protected net . minecraft . block . state . BlockState $ StateImplementation < init > ( Lnet / minecraft / block / Block ; Lcom / google / common / collect / ImmutableMap ; ) V 
 + protected net . minecraft . block . state . BlockState $ StateImplementation field _ 177238 _ c # propertyValueTable 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 new file mode 100644 
 index 0000000 . . c8de9a4 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 0 , 0 + 1 , 354 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . block . BlockContainer ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . properties . IProperty ; 
 + import net . minecraft . block . properties . PropertyInteger ; 
 + import net . minecraft . block . state . BlockState ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . BlockPos ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . Vec3 ; 
 + import net . minecraft . world . IBlockAccess ; 
 + import net . minecraft . world . World ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . common . property . ExtendedBlockState ; 
 + import net . minecraftforge . common . property . IExtendedBlockState ; 
 + import net . minecraftforge . common . property . IUnlistedProperty ; 
 + import net . minecraftforge . common . property . Properties ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + @ Mod ( modid = ModelBakeEventDebug . MODID , version = ModelBakeEventDebug . VERSION ) 
 + public class ModelBakeEventDebug 
 + { 
 + public static final String MODID = " ForgeDebugModelBakeEvent " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + public static final int cubeSize = 3 ; 
 + 
 + private static String blockName = MODID . toLowerCase ( ) + " : " + CustomModelBlock . name ; 
 + 
 + public static final IUnlistedProperty < Integer > [ ] properties = new IUnlistedProperty [ 6 ] ; 
 + 
 + static 
 + { 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + properties [ f . ordinal ( ) ] = Properties . toUnlisted ( PropertyInteger . create ( f . getName ( ) , 0 , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ) ; 
 + } 
 + } 
 + 
 + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ModelBakeEventDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ModelBakeEventDebug $ ClientProxy " ) 
 + public static CommonProxy proxy ; 
 + 
 + @ EventHandler 
 + public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 + 
 + @ EventHandler 
 + public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + 
 + public static class CommonProxy 
 + { 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 + GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 + } 
 + 
 + public void postInit ( FMLPostInitializationEvent event ) { } 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + 
 + @ Override 
 + public void init ( FMLInitializationEvent event ) 
 + { 
 + super . init ( event ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 + } 
 + 
 + @ Override 
 + public void postInit ( FMLPostInitializationEvent event ) { 
 + super . postInit ( event ) ; 
 + Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 + RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 + if ( renderItem ! = null ) 
 + { 
 + renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 + public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 + { 
 + return modelLocation ; 
 + } 
 + } ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class BakeEventHandler 
 + { 
 + public static final BakeEventHandler instance = new BakeEventHandler ( ) ; 
 + 
 + private BakeEventHandler ( ) { } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( ModelBakeEvent event ) 
 + { 
 + TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 + TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 + event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + } 
 + } 
 + 
 + public static class CustomModelBlock extends BlockContainer 
 + { 
 + public static final CustomModelBlock instance = new CustomModelBlock ( ) ; 
 + public static final String name = " custom _ model _ block " ; 
 + 
 + private CustomModelBlock ( ) 
 + { 
 + super ( Material . iron ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + } 
 + 
 + @ Override 
 + public int getRenderType ( ) { return 3 ; } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isFullCube ( ) { return false ; } 
 + 
 + @ Override 
 + public boolean isVisuallyOpaque ( ) { return false ; } 
 + 
 + @ Override 
 + public TileEntity createNewTileEntity ( World world , int meta ) 
 + { 
 + return new CustomTileEntity ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean onBlockActivated ( World world , BlockPos pos , IBlockState state , EntityPlayer player , EnumFacing side , float hitX , float hitY , float hitZ ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + Vec3 vec = revRotate ( new Vec3 ( hitX - . 5 , hitY - . 5 , hitZ - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + IUnlistedProperty property = properties [ side . ordinal ( ) ] ; 
 + Integer value = ( Integer ) cte . getState ( ) . getValue ( property ) ; 
 + if ( value = = null ) value = 0 ; 
 + value ^ = ( 1 < < ( cubeSize * ( ( int ) ( vec . xCoord * ( cubeSize - . 0001 ) ) ) + ( ( int ) ( vec . zCoord * ( cubeSize - . 0001 ) ) ) ) ) ; 
 + cte . setState ( cte . getState ( ) . withProperty ( property , value ) ) ; 
 + world . markBlockRangeForRenderUpdate ( pos , pos ) ; 
 + } 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 + { 
 + TileEntity te = world . getTileEntity ( pos ) ; 
 + if ( te instanceof CustomTileEntity ) 
 + { 
 + CustomTileEntity cte = ( CustomTileEntity ) te ; 
 + return cte . getState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + @ Override 
 + protected BlockState createBlockState ( ) 
 + { 
 + return new ExtendedBlockState ( this , new IProperty [ 0 ] , properties ) ; 
 + } 
 + } 
 + 
 + public static class CustomTileEntity extends TileEntity 
 + { 
 + private IExtendedBlockState state ; 
 + public CustomTileEntity ( ) { } 
 + 
 + public IExtendedBlockState getState ( ) 
 + { 
 + if ( state = = null ) 
 + { 
 + state = ( IExtendedBlockState ) getBlockType ( ) . getDefaultState ( ) ; 
 + } 
 + return state ; 
 + } 
 + 
 + public void setState ( IExtendedBlockState state ) 
 + { 
 + this . state = state ; 
 + } 
 + } 
 + 
 + public static class CustomModel implements IBakedModel , ISmartBlockModel , ISmartItemModel 
 + { 
 + private final TextureAtlasSprite base , overlay ; 
 + private boolean hasStateSet = false ; 
 + private final IExtendedBlockState state ; 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay ) 
 + { 
 + this ( base , overlay , null ) ; 
 + } 
 + 
 + public CustomModel ( TextureAtlasSprite base , TextureAtlasSprite overlay , IExtendedBlockState state ) 
 + { 
 + this . base = base ; 
 + this . overlay = overlay ; 
 + this . state = state ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + private int [ ] vertexToInts ( float x , float y , float z , int color , TextureAtlasSprite texture , float u , float v ) 
 + { 
 + return new int [ ] { 
 + Float . floatToRawIntBits ( x ) , 
 + Float . floatToRawIntBits ( y ) , 
 + Float . floatToRawIntBits ( z ) , 
 + color , 
 + Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 + Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 + 0 
 + } ; 
 + } 
 + 
 + private BakedQuad createSidedBakedQuad ( float x1 , float x2 , float z1 , float z2 , float y , TextureAtlasSprite texture , EnumFacing side ) 
 + { 
 + Vec3 v1 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v2 = rotate ( new Vec3 ( x1 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v3 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z2 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + Vec3 v4 = rotate ( new Vec3 ( x2 - . 5 , y - . 5 , z1 - . 5 ) , side ) . addVector ( . 5 , . 5 , . 5 ) ; 
 + return new BakedQuad ( Ints . concat ( 
 + vertexToInts ( ( float ) v1 . xCoord , ( float ) v1 . yCoord , ( float ) v1 . zCoord , - 1 , texture , 0 , 0 ) , 
 + vertexToInts ( ( float ) v2 . xCoord , ( float ) v2 . yCoord , ( float ) v2 . zCoord , - 1 , texture , 0 , 16 ) , 
 + vertexToInts ( ( float ) v3 . xCoord , ( float ) v3 . yCoord , ( float ) v3 . zCoord , - 1 , texture , 16 , 16 ) , 
 + vertexToInts ( ( float ) v4 . xCoord , ( float ) v4 . yCoord , ( float ) v4 . zCoord , - 1 , texture , 16 , 0 ) 
 + ) , - 1 , side ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + int len = cubeSize * 5 + 1 ; 
 + List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 + for ( EnumFacing f : EnumFacing . values ( ) ) 
 + { 
 + ret . add ( createSidedBakedQuad ( 0 , 1 , 0 , 1 , 1 , base , f ) ) ; 
 + for ( int i = 0 ; i < cubeSize ; i + + ) 
 + { 
 + for ( int j = 0 ; j < cubeSize ; j + + ) 
 + { 
 + if ( state ! = null ) 
 + { 
 + Integer value = ( Integer ) state . getValue ( properties [ f . ordinal ( ) ] ) ; 
 + if ( value ! = null & & ( value & ( 1 < < ( i * cubeSize + j ) ) ) ! = 0 ) 
 + { 
 + ret . add ( createSidedBakedQuad ( ( float ) ( 1 + i * 5 ) / len , ( float ) ( 5 + i * 5 ) / len , ( float ) ( 1 + j * 5 ) / len , ( float ) ( 5 + j * 5 ) / len , 1 . 0001f , overlay , f ) ) ; 
 + } 
 + } 
 + } 
 + } 
 + } 
 + return ret ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) { return this . base ; } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( IBlockState state ) 
 + { 
 + return new CustomModel ( base , overlay , ( IExtendedBlockState ) state ) ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleItemState ( ItemStack stack ) 
 + { 
 + IExtendedBlockState itemState = ( ( IExtendedBlockState ) CustomModelBlock . instance . getDefaultState ( ) ) . withProperty ( properties [ 1 ] , ( 1 < < ( cubeSize * cubeSize ) ) - 1 ) ; 
 + return new CustomModel ( base , overlay , itemState ) ; 
 + } 
 + } 
 + 
 + private static Vec3 rotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case WEST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + 
 + private static Vec3 revRotate ( Vec3 vec , EnumFacing side ) 
 + { 
 + switch ( side ) 
 + { 
 + case DOWN : return new Vec3 ( vec . xCoord , - vec . yCoord , - vec . zCoord ) ; 
 + case UP : return new Vec3 ( vec . xCoord , vec . yCoord , vec . zCoord ) ; 
 + case NORTH : return new Vec3 ( vec . xCoord , - vec . zCoord , vec . yCoord ) ; 
 + case SOUTH : return new Vec3 ( vec . xCoord , vec . zCoord , - vec . yCoord ) ; 
 + case WEST : return new Vec3 ( vec . yCoord , - vec . xCoord , vec . zCoord ) ; 
 + case EAST : return new Vec3 ( - vec . yCoord , vec . xCoord , vec . zCoord ) ; 
 + } 
 + return null ; 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . c2352ff 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 4 @ @ 
 + { 
 + " variants " : { 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 new file mode 100644 
 index 0000000 . . 43a272a 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + { 
 + " parent " : " builtin / entity " 
 + }
