BLEU SCORE: 0.05522397783539471

TEST MSG: Allow all Forge Registries to work with ObjectHolder
GENERATED MSG: Add Forge fluid handler test

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 763dffe . . da69d59 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 601 , 6 + 601 , 7 @ @ public class Loader <nl> FMLLog . warning ( " There were errors previously . Not beginning mod initialization phase " ) ; <nl> return ; <nl> } <nl> + PersistentRegistryManager . fireCreateRegistryEvents ( ) ; <nl> ObjectHolderRegistry . INSTANCE . findObjectHolders ( discoverer . getASMTable ( ) ) ; <nl> ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; <nl> CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java b / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java <nl> index a04d9ff . . b9e1ac7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java <nl> @ @ - 20 , 17 + 20 , 15 @ @ <nl> package net . minecraftforge . fml . common . registry ; <nl> <nl> import java . lang . reflect . Field ; <nl> - import java . lang . reflect . Method ; <nl> - import java . lang . reflect . Modifier ; <nl> + import java . util . Collections ; <nl> + import java . util . LinkedList ; <nl> + import java . util . Queue ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Throwables ; <nl> <nl> - import net . minecraft . block . Block ; <nl> - import net . minecraft . init . Blocks ; <nl> - import net . minecraft . item . Item ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> <nl> @ @ - 44 , 15 + 42 , 16 @ @ import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; <nl> class ObjectHolderRef { <nl> private Field field ; <nl> private ResourceLocation injectedObject ; <nl> - private boolean isBlock ; <nl> - private boolean isItem ; <nl> + private boolean isValid ; <nl> + private IForgeRegistry registry ; <nl> <nl> <nl> ObjectHolderRef ( Field field , ResourceLocation injectedObject , boolean extractFromExistingValues ) <nl> { <nl> + registry = getRegistryForType ( field ) ; <nl> + <nl> this . field = field ; <nl> - this . isBlock = Block . class . isAssignableFrom ( field . getType ( ) ) ; <nl> - this . isItem = Item . class . isAssignableFrom ( field . getType ( ) ) ; <nl> + this . isValid = registry ! = null ; <nl> if ( extractFromExistingValues ) <nl> { <nl> try <nl> @ @ - 63 , 14 + 62 , 15 @ @ class ObjectHolderRef { <nl> { <nl> this . injectedObject = null ; <nl> this . field = null ; <nl> - this . isBlock = false ; <nl> - this . isItem = false ; <nl> + this . isValid = false ; <nl> return ; <nl> } <nl> else <nl> { <nl> - ResourceLocation tmp = isBlock ? ForgeRegistries . BLOCKS . getKey ( ( Block ) existing ) : <nl> - isItem ? ForgeRegistries . ITEMS . getKey ( ( Item ) existing ) : null ; <nl> + ResourceLocation tmp = null ; <nl> + if ( registry ! = null ) { <nl> + tmp = registry . getKey ( ( IForgeRegistryEntry ) existing ) ; <nl> + } <nl> this . injectedObject = tmp ; <nl> } <nl> } catch ( Exception e ) <nl> @ @ - 85 , 7 + 85 , 7 @ @ class ObjectHolderRef { <nl> <nl> if ( this . injectedObject = = null | | ! isValid ( ) ) <nl> { <nl> - throw new IllegalStateException ( String . format ( " The ObjectHolder annotation cannot apply to a field that is not an Item or Block ( found : % s at % s . % s ) " , field . getType ( ) . getName ( ) , field . getClass ( ) . getName ( ) , field . getName ( ) ) ) ; <nl> + throw new IllegalStateException ( String . format ( " The ObjectHolder annotation cannot apply to a field that does not map to a registry . Ensure the registry was created during the RegistryEvent . NewRegistry event . ( found : % s at % s . % s ) " , field . getType ( ) . getName ( ) , field . getClass ( ) . getName ( ) , field . getName ( ) ) ) ; <nl> } <nl> try <nl> { <nl> @ @ - 97 , 24 + 97 , 37 @ @ class ObjectHolderRef { <nl> } <nl> } <nl> <nl> + private IForgeRegistry getRegistryForType ( Field field ) <nl> + { <nl> + Queue < Class < ? > > typesToExamine = new LinkedList < Class < ? > > ( ) ; <nl> + typesToExamine . add ( field . getType ( ) ) ; <nl> + IForgeRegistry registry = null ; <nl> + while ( ! typesToExamine . isEmpty ( ) & & registry = = null ) { <nl> + Class < ? > type = typesToExamine . remove ( ) ; <nl> + Collections . addAll ( typesToExamine , type . getInterfaces ( ) ) ; <nl> + if ( IForgeRegistryEntry . class . isAssignableFrom ( type ) ) <nl> + { <nl> + registry = PersistentRegistryManager . findRegistryByType ( ( Class < IForgeRegistryEntry > ) type ) ; <nl> + final Class < ? > parentType = type . getSuperclass ( ) ; <nl> + if ( parentType ! = null ) <nl> + { <nl> + typesToExamine . add ( parentType ) ; <nl> + } <nl> + } <nl> + } <nl> + return registry ; <nl> + } <nl> + <nl> public boolean isValid ( ) <nl> { <nl> - return isBlock | | isItem ; <nl> + return isValid ; <nl> } <nl> public void apply ( ) <nl> { <nl> Object thing ; <nl> - if ( isBlock ) <nl> - { <nl> - thing = ForgeRegistries . BLOCKS . getValue ( injectedObject ) ; <nl> - if ( thing = = Blocks . AIR ) <nl> - { <nl> - thing = null ; <nl> - } <nl> - } <nl> - else if ( isItem ) <nl> + if ( isValid & & registry . containsKey ( injectedObject ) ) <nl> { <nl> - thing = ForgeRegistries . ITEMS . getValue ( injectedObject ) ; <nl> + thing = registry . getValue ( injectedObject ) ; <nl> } <nl> else <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 71010a3 . . 545dcb2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 67 , 10 + 67 , 12 @ @ import com . google . common . collect . Sets . SetView ; <nl> @ SuppressWarnings ( " WeakerAccess " ) <nl> public class PersistentRegistryManager <nl> { <nl> - public static void fireRegistryEvents ( ) <nl> - { <nl> + public static void fireCreateRegistryEvents ( ) { <nl> MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; <nl> + } <nl> <nl> + public static void fireRegistryEvents ( ) <nl> + { <nl> List < ResourceLocation > registryKeys = Lists . newArrayList ( PersistentRegistry . ACTIVE . registries . keySet ( ) ) ; <nl> Collections . sort ( registryKeys , new Comparator < ResourceLocation > ( ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java <nl> new file mode 100644 <nl> index 0000000 . . 67ea19b <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java <nl> @ @ - 0 , 0 + 1 , 131 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . potion . Potion ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . SoundEvent ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . common . registry . IForgeRegistry ; <nl> + import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; <nl> + import net . minecraftforge . fml . common . registry . RegistryBuilder ; <nl> + <nl> + @ Mod ( modid = ObjectHolderTest . MODID , name = " ObjectHolderTests " , version = " 1 . 0 " ) <nl> + public class ObjectHolderTest <nl> + { <nl> + public static final String MODID = " objectholdertest " ; <nl> + public static IForgeRegistry registry ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void init ( FMLInitializationEvent event ) { <nl> + / / verifies @ ObjectHolder with custom id <nl> + assert VanillaObjectHolder . uiButtonClick ! = null ; <nl> + / / verifies modded items work <nl> + assert ForgeObjectHolder . forgePotion ! = null ; <nl> + / / verifies minecraft : air is now resolvable <nl> + assert VanillaObjectHolder . air ! = null ; <nl> + / / verifies unexpected name should not have defaulted to AIR . <nl> + assert VanillaObjectHolder . nonExistentBlock = = null ; <nl> + / / verifies custom registries <nl> + assert CustomRegistryObjectHolder . customEntry ! = null ; <nl> + / / verifies interfaces are supported <nl> + assert CustomRegistryObjectHolder . customEntryByInterface ! = null ; <nl> + <nl> + } <nl> + <nl> + protected static class PotionForge extends Potion { <nl> + protected PotionForge ( ResourceLocation location , boolean badEffect , int potionColor ) { <nl> + super ( badEffect , potionColor ) ; <nl> + setPotionName ( " potion . " + location . getResourcePath ( ) ) ; <nl> + setRegistryName ( location ) ; <nl> + } <nl> + } <nl> + <nl> + @ Mod . EventBusSubscriber <nl> + public static class Registration { <nl> + @ SubscribeEvent <nl> + public static void newRegistry ( RegistryEvent . NewRegistry event ) { <nl> + new RegistryBuilder ( ) <nl> + . setType ( ICustomRegistryEntry . class ) <nl> + . setName ( new ResourceLocation ( " ObjectHolderTestCustomRegistry " ) ) <nl> + . setIDRange ( 0 , 255 ) <nl> + . create ( ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerPotions ( RegistryEvent . Register < Potion > event ) { <nl> + event . getRegistry ( ) . register ( <nl> + new ObjectHolderTest . PotionForge ( new ResourceLocation ( ObjectHolderTest . MODID , " forgePotion " ) , false , 0xff00ff ) / / test automatic id distribution <nl> + ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerInterfaceRegistryForge ( RegistryEvent . Register < ICustomRegistryEntry > event ) { <nl> + event . getRegistry ( ) . register ( <nl> + new CustomRegistryEntry ( ) . setRegistryName ( new ResourceLocation ( MODID , " customEntryByInterface " ) ) <nl> + ) ; <nl> + <nl> + event . getRegistry ( ) . register ( <nl> + new CustomRegistryEntry ( ) . setRegistryName ( new ResourceLocation ( MODID , " customEntry " ) ) <nl> + ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + class CustomRegistryEntry implements ICustomRegistryEntry <nl> + { <nl> + private ResourceLocation name ; <nl> + <nl> + @ Override <nl> + public ICustomRegistryEntry setRegistryName ( ResourceLocation name ) <nl> + { <nl> + this . name = name ; <nl> + return this ; <nl> + } <nl> + <nl> + @ Override <nl> + public ResourceLocation getRegistryName ( ) <nl> + { <nl> + return name ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < ? super ICustomRegistryEntry > getRegistryType ( ) <nl> + { <nl> + return ICustomRegistryEntry . class ; <nl> + } <nl> + } <nl> + <nl> + interface ICustomRegistryEntry extends IForgeRegistryEntry < ICustomRegistryEntry > { <nl> + <nl> + } <nl> + <nl> + @ GameRegistry . ObjectHolder ( " minecraft " ) <nl> + class VanillaObjectHolder <nl> + { <nl> + / / Tests importing vanilla objects that need the @ ObjectHolder annotation to get a valid ResourceLocation <nl> + @ GameRegistry . ObjectHolder ( " ui . button . click " ) <nl> + public static final SoundEvent uiButtonClick = null ; <nl> + public static final Block air = null ; <nl> + public static final Block nonExistentBlock = null ; <nl> + } <nl> + <nl> + @ GameRegistry . ObjectHolder ( ObjectHolderTest . MODID ) <nl> + class ForgeObjectHolder <nl> + { <nl> + / / Tests using subclasses for injections <nl> + public static final ObjectHolderTest . PotionForge forgePotion = null ; <nl> + } <nl> + <nl> + @ GameRegistry . ObjectHolder ( ObjectHolderTest . MODID ) <nl> + class CustomRegistryObjectHolder <nl> + { <nl> + / / Tests whether custom registries can be used <nl> + public static final ICustomRegistryEntry customEntry = null ; <nl> + <nl> + / / Tests whether interfaces can be used <nl> + public static final ICustomRegistryEntry customEntryByInterface = null ; <nl> + }
NEAREST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index e38452f . . ba06fcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest <nl> private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; <nl> private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; <nl> <nl> + private static final boolean ENABLE = false ; <nl> + <nl> static <nl> { <nl> - FluidRegistry . enableUniversalBucket ( ) ; <nl> + if ( ENABLE ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> } <nl> <nl> @ SidedProxy <nl> @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> GameRegistry . register ( new TestItem ( ) , testItemName ) ; <nl> Block tank = new BlockSimpleTank ( ) ; <nl> GameRegistry . register ( tank , simpleTankName ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> index 9d92565 . . ccbfb40 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug <nl> public static final String MODID = " ForgeDebugModelFluid " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> <nl> + public static final boolean ENABLE = false ; <nl> + <nl> @ SidedProxy <nl> public static CommonProxy proxy ; <nl> <nl> public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; <nl> <nl> @ EventHandler <nl> - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> <nl> public static class CommonProxy <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed4331 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) <nl> + public class FluidHandlerTest <nl> + { <nl> + 	 public static final boolean ENABLE = false ; <nl> + <nl> + 	 @ Mod . EventHandler <nl> + 	 public void loadComplete ( FMLLoadCompleteEvent event ) <nl> + 	 { <nl> + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) <nl> + 	 	 	 return ; <nl> + <nl> + 	 	 for ( ItemStack stack : getAllItems ( ) ) <nl> + 	 	 { <nl> + 	 	 	 testFluidContainer ( stack ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static void testFluidContainer ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 ItemStack drainedStack = stack . copy ( ) ; <nl> + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; <nl> + 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 { <nl> + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; <nl> + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; <nl> + <nl> + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; <nl> + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; <nl> + 	 	 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 	 	 { <nl> + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; <nl> + 	 	 	 	 	 if ( filled > 0 ) <nl> + 	 	 	 	 	 { <nl> + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; <nl> + 	 	 	 	 	 } <nl> + 	 	 	 	 } <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String fluidString ( FluidStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null ) <nl> + 	 	 { <nl> + 	 	 	 return " no fluid " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String stackString ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) <nl> + 	 	 { <nl> + 	 	 	 return " no item " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 String resourceDomain ; <nl> + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = " unknown " ; <nl> + 	 	 	 } <nl> + 	 	 	 else <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; <nl> + 	 	 	 } <nl> + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static List < ItemStack > getAllItems ( ) <nl> + 	 { <nl> + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; <nl> + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + 	 	 { <nl> + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 item . getSubItems ( item , tab , list ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 	 return list ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 763dffe . . da69d59 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 601 , 6 + 601 , 7 @ @ public class Loader 
 FMLLog . warning ( " There were errors previously . Not beginning mod initialization phase " ) ; 
 return ; 
 } 
 + PersistentRegistryManager . fireCreateRegistryEvents ( ) ; 
 ObjectHolderRegistry . INSTANCE . findObjectHolders ( discoverer . getASMTable ( ) ) ; 
 ItemStackHolderInjector . INSTANCE . findHolders ( discoverer . getASMTable ( ) ) ; 
 CapabilityManager . INSTANCE . injectCapabilities ( discoverer . getASMTable ( ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java b / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java 
 index a04d9ff . . b9e1ac7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / ObjectHolderRef . java 
 @ @ - 20 , 17 + 20 , 15 @ @ 
 package net . minecraftforge . fml . common . registry ; 
 
 import java . lang . reflect . Field ; 
 - import java . lang . reflect . Method ; 
 - import java . lang . reflect . Modifier ; 
 + import java . util . Collections ; 
 + import java . util . LinkedList ; 
 + import java . util . Queue ; 
 
 import net . minecraft . util . ResourceLocation ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Throwables ; 
 
 - import net . minecraft . block . Block ; 
 - import net . minecraft . init . Blocks ; 
 - import net . minecraft . item . Item ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 
 @ @ - 44 , 15 + 42 , 16 @ @ import net . minecraftforge . fml . common . registry . GameRegistry . ObjectHolder ; 
 class ObjectHolderRef { 
 private Field field ; 
 private ResourceLocation injectedObject ; 
 - private boolean isBlock ; 
 - private boolean isItem ; 
 + private boolean isValid ; 
 + private IForgeRegistry registry ; 
 
 
 ObjectHolderRef ( Field field , ResourceLocation injectedObject , boolean extractFromExistingValues ) 
 { 
 + registry = getRegistryForType ( field ) ; 
 + 
 this . field = field ; 
 - this . isBlock = Block . class . isAssignableFrom ( field . getType ( ) ) ; 
 - this . isItem = Item . class . isAssignableFrom ( field . getType ( ) ) ; 
 + this . isValid = registry ! = null ; 
 if ( extractFromExistingValues ) 
 { 
 try 
 @ @ - 63 , 14 + 62 , 15 @ @ class ObjectHolderRef { 
 { 
 this . injectedObject = null ; 
 this . field = null ; 
 - this . isBlock = false ; 
 - this . isItem = false ; 
 + this . isValid = false ; 
 return ; 
 } 
 else 
 { 
 - ResourceLocation tmp = isBlock ? ForgeRegistries . BLOCKS . getKey ( ( Block ) existing ) : 
 - isItem ? ForgeRegistries . ITEMS . getKey ( ( Item ) existing ) : null ; 
 + ResourceLocation tmp = null ; 
 + if ( registry ! = null ) { 
 + tmp = registry . getKey ( ( IForgeRegistryEntry ) existing ) ; 
 + } 
 this . injectedObject = tmp ; 
 } 
 } catch ( Exception e ) 
 @ @ - 85 , 7 + 85 , 7 @ @ class ObjectHolderRef { 
 
 if ( this . injectedObject = = null | | ! isValid ( ) ) 
 { 
 - throw new IllegalStateException ( String . format ( " The ObjectHolder annotation cannot apply to a field that is not an Item or Block ( found : % s at % s . % s ) " , field . getType ( ) . getName ( ) , field . getClass ( ) . getName ( ) , field . getName ( ) ) ) ; 
 + throw new IllegalStateException ( String . format ( " The ObjectHolder annotation cannot apply to a field that does not map to a registry . Ensure the registry was created during the RegistryEvent . NewRegistry event . ( found : % s at % s . % s ) " , field . getType ( ) . getName ( ) , field . getClass ( ) . getName ( ) , field . getName ( ) ) ) ; 
 } 
 try 
 { 
 @ @ - 97 , 24 + 97 , 37 @ @ class ObjectHolderRef { 
 } 
 } 
 
 + private IForgeRegistry getRegistryForType ( Field field ) 
 + { 
 + Queue < Class < ? > > typesToExamine = new LinkedList < Class < ? > > ( ) ; 
 + typesToExamine . add ( field . getType ( ) ) ; 
 + IForgeRegistry registry = null ; 
 + while ( ! typesToExamine . isEmpty ( ) & & registry = = null ) { 
 + Class < ? > type = typesToExamine . remove ( ) ; 
 + Collections . addAll ( typesToExamine , type . getInterfaces ( ) ) ; 
 + if ( IForgeRegistryEntry . class . isAssignableFrom ( type ) ) 
 + { 
 + registry = PersistentRegistryManager . findRegistryByType ( ( Class < IForgeRegistryEntry > ) type ) ; 
 + final Class < ? > parentType = type . getSuperclass ( ) ; 
 + if ( parentType ! = null ) 
 + { 
 + typesToExamine . add ( parentType ) ; 
 + } 
 + } 
 + } 
 + return registry ; 
 + } 
 + 
 public boolean isValid ( ) 
 { 
 - return isBlock | | isItem ; 
 + return isValid ; 
 } 
 public void apply ( ) 
 { 
 Object thing ; 
 - if ( isBlock ) 
 - { 
 - thing = ForgeRegistries . BLOCKS . getValue ( injectedObject ) ; 
 - if ( thing = = Blocks . AIR ) 
 - { 
 - thing = null ; 
 - } 
 - } 
 - else if ( isItem ) 
 + if ( isValid & & registry . containsKey ( injectedObject ) ) 
 { 
 - thing = ForgeRegistries . ITEMS . getValue ( injectedObject ) ; 
 + thing = registry . getValue ( injectedObject ) ; 
 } 
 else 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 71010a3 . . 545dcb2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 67 , 10 + 67 , 12 @ @ import com . google . common . collect . Sets . SetView ; 
 @ SuppressWarnings ( " WeakerAccess " ) 
 public class PersistentRegistryManager 
 { 
 - public static void fireRegistryEvents ( ) 
 - { 
 + public static void fireCreateRegistryEvents ( ) { 
 MinecraftForge . EVENT _ BUS . post ( new RegistryEvent . NewRegistry ( ) ) ; 
 + } 
 
 + public static void fireRegistryEvents ( ) 
 + { 
 List < ResourceLocation > registryKeys = Lists . newArrayList ( PersistentRegistry . ACTIVE . registries . keySet ( ) ) ; 
 Collections . sort ( registryKeys , new Comparator < ResourceLocation > ( ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java 
 new file mode 100644 
 index 0000000 . . 67ea19b 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ObjectHolderTest . java 
 @ @ - 0 , 0 + 1 , 131 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . potion . Potion ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . SoundEvent ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . common . registry . IForgeRegistry ; 
 + import net . minecraftforge . fml . common . registry . IForgeRegistryEntry ; 
 + import net . minecraftforge . fml . common . registry . RegistryBuilder ; 
 + 
 + @ Mod ( modid = ObjectHolderTest . MODID , name = " ObjectHolderTests " , version = " 1 . 0 " ) 
 + public class ObjectHolderTest 
 + { 
 + public static final String MODID = " objectholdertest " ; 
 + public static IForgeRegistry registry ; 
 + 
 + @ Mod . EventHandler 
 + public void init ( FMLInitializationEvent event ) { 
 + / / verifies @ ObjectHolder with custom id 
 + assert VanillaObjectHolder . uiButtonClick ! = null ; 
 + / / verifies modded items work 
 + assert ForgeObjectHolder . forgePotion ! = null ; 
 + / / verifies minecraft : air is now resolvable 
 + assert VanillaObjectHolder . air ! = null ; 
 + / / verifies unexpected name should not have defaulted to AIR . 
 + assert VanillaObjectHolder . nonExistentBlock = = null ; 
 + / / verifies custom registries 
 + assert CustomRegistryObjectHolder . customEntry ! = null ; 
 + / / verifies interfaces are supported 
 + assert CustomRegistryObjectHolder . customEntryByInterface ! = null ; 
 + 
 + } 
 + 
 + protected static class PotionForge extends Potion { 
 + protected PotionForge ( ResourceLocation location , boolean badEffect , int potionColor ) { 
 + super ( badEffect , potionColor ) ; 
 + setPotionName ( " potion . " + location . getResourcePath ( ) ) ; 
 + setRegistryName ( location ) ; 
 + } 
 + } 
 + 
 + @ Mod . EventBusSubscriber 
 + public static class Registration { 
 + @ SubscribeEvent 
 + public static void newRegistry ( RegistryEvent . NewRegistry event ) { 
 + new RegistryBuilder ( ) 
 + . setType ( ICustomRegistryEntry . class ) 
 + . setName ( new ResourceLocation ( " ObjectHolderTestCustomRegistry " ) ) 
 + . setIDRange ( 0 , 255 ) 
 + . create ( ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerPotions ( RegistryEvent . Register < Potion > event ) { 
 + event . getRegistry ( ) . register ( 
 + new ObjectHolderTest . PotionForge ( new ResourceLocation ( ObjectHolderTest . MODID , " forgePotion " ) , false , 0xff00ff ) / / test automatic id distribution 
 + ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerInterfaceRegistryForge ( RegistryEvent . Register < ICustomRegistryEntry > event ) { 
 + event . getRegistry ( ) . register ( 
 + new CustomRegistryEntry ( ) . setRegistryName ( new ResourceLocation ( MODID , " customEntryByInterface " ) ) 
 + ) ; 
 + 
 + event . getRegistry ( ) . register ( 
 + new CustomRegistryEntry ( ) . setRegistryName ( new ResourceLocation ( MODID , " customEntry " ) ) 
 + ) ; 
 + } 
 + } 
 + } 
 + 
 + class CustomRegistryEntry implements ICustomRegistryEntry 
 + { 
 + private ResourceLocation name ; 
 + 
 + @ Override 
 + public ICustomRegistryEntry setRegistryName ( ResourceLocation name ) 
 + { 
 + this . name = name ; 
 + return this ; 
 + } 
 + 
 + @ Override 
 + public ResourceLocation getRegistryName ( ) 
 + { 
 + return name ; 
 + } 
 + 
 + @ Override 
 + public Class < ? super ICustomRegistryEntry > getRegistryType ( ) 
 + { 
 + return ICustomRegistryEntry . class ; 
 + } 
 + } 
 + 
 + interface ICustomRegistryEntry extends IForgeRegistryEntry < ICustomRegistryEntry > { 
 + 
 + } 
 + 
 + @ GameRegistry . ObjectHolder ( " minecraft " ) 
 + class VanillaObjectHolder 
 + { 
 + / / Tests importing vanilla objects that need the @ ObjectHolder annotation to get a valid ResourceLocation 
 + @ GameRegistry . ObjectHolder ( " ui . button . click " ) 
 + public static final SoundEvent uiButtonClick = null ; 
 + public static final Block air = null ; 
 + public static final Block nonExistentBlock = null ; 
 + } 
 + 
 + @ GameRegistry . ObjectHolder ( ObjectHolderTest . MODID ) 
 + class ForgeObjectHolder 
 + { 
 + / / Tests using subclasses for injections 
 + public static final ObjectHolderTest . PotionForge forgePotion = null ; 
 + } 
 + 
 + @ GameRegistry . ObjectHolder ( ObjectHolderTest . MODID ) 
 + class CustomRegistryObjectHolder 
 + { 
 + / / Tests whether custom registries can be used 
 + public static final ICustomRegistryEntry customEntry = null ; 
 + 
 + / / Tests whether interfaces can be used 
 + public static final ICustomRegistryEntry customEntryByInterface = null ; 
 + }

NEAREST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index e38452f . . ba06fcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest 
 private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; 
 private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; 
 
 + private static final boolean ENABLE = false ; 
 + 
 static 
 { 
 - FluidRegistry . enableUniversalBucket ( ) ; 
 + if ( ENABLE ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 } 
 
 @ SidedProxy 
 @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 GameRegistry . register ( new TestItem ( ) , testItemName ) ; 
 Block tank = new BlockSimpleTank ( ) ; 
 GameRegistry . register ( tank , simpleTankName ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 index 9d92565 . . ccbfb40 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug 
 public static final String MODID = " ForgeDebugModelFluid " ; 
 public static final String VERSION = " 1 . 0 " ; 
 
 + public static final boolean ENABLE = false ; 
 + 
 @ SidedProxy 
 public static CommonProxy proxy ; 
 
 public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; 
 
 @ EventHandler 
 - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 
 public static class CommonProxy 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 0ed4331 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) 
 + public class FluidHandlerTest 
 + { 
 + 	 public static final boolean ENABLE = false ; 
 + 
 + 	 @ Mod . EventHandler 
 + 	 public void loadComplete ( FMLLoadCompleteEvent event ) 
 + 	 { 
 + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) 
 + 	 	 	 return ; 
 + 
 + 	 	 for ( ItemStack stack : getAllItems ( ) ) 
 + 	 	 { 
 + 	 	 	 testFluidContainer ( stack ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static void testFluidContainer ( ItemStack stack ) 
 + 	 { 
 + 	 	 ItemStack drainedStack = stack . copy ( ) ; 
 + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; 
 + 	 	 if ( fluidHandler ! = null ) 
 + 	 	 { 
 + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; 
 + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; 
 + 
 + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; 
 + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; 
 + 	 	 	 	 if ( fluidHandler ! = null ) 
 + 	 	 	 	 { 
 + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; 
 + 	 	 	 	 	 if ( filled > 0 ) 
 + 	 	 	 	 	 { 
 + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; 
 + 	 	 	 	 	 } 
 + 	 	 	 	 } 
 + 	 	 	 } 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String fluidString ( FluidStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null ) 
 + 	 	 { 
 + 	 	 	 return " no fluid " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String stackString ( ItemStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) 
 + 	 	 { 
 + 	 	 	 return " no item " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 String resourceDomain ; 
 + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = " unknown " ; 
 + 	 	 	 } 
 + 	 	 	 else 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; 
 + 	 	 	 } 
 + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static List < ItemStack > getAllItems ( ) 
 + 	 { 
 + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; 
 + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + 	 	 { 
 + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 item . getSubItems ( item , tab , list ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 	 	 return list ; 
 + 	 } 
 + }
