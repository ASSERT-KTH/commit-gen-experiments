BLEU SCORE: 0.031247197904994937

TEST MSG: Server run profile , also setup logging for client profile .
GENERATED MSG: Tweak library locating code . Works well on vanilla and dev now .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 9b625d0 . . ceb1167 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 163 , 6 + 163 , 8 @ @ project ( ' : forge ' ) { <nl> installer ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' <nl> installer ' net . jodah : typetools : 0 . 5 . 0 ' <nl> installer ' java3d : vecmath : 1 . 5 . 2 ' <nl> + installer ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' <nl> + installer ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' <nl> } <nl> <nl> task runclient ( type : JavaExec , dependsOn : [ " : forge : downloadAssets " , " : forge : extractNatives " ] ) { <nl> @ @ - 344 , 7 + 346 , 16 @ @ project ( ' : forge ' ) { <nl> type : ' release ' , <nl> mainClass : ' cpw . mods . modlauncher . Launcher ' , <nl> inheritsFrom : MC _ VERSION , <nl> - logging : [ : ] , <nl> + logging : [ client : [ <nl> + argument : ' - Dlog4j . configurationFile = $ { path } ' , <nl> + file : [ <nl> + id : ' client - 1 . 12 . xml ' , <nl> + sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , <nl> + size : 877 , <nl> + url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' <nl> + ] , <nl> + type : ' log4j2 - xml ' <nl> + ] ] , <nl> arguments : [ <nl> game : [ ' - - launchTarget ' , ' fmlclient ' ] <nl> ] , <nl> @ @ - 545 , 7 + 556 , 9 @ @ project ( ' : forge ' ) { <nl> artifacts . each { key , lib - > <nl> classpath + = " libraries / $ { lib . downloads . artifact . path } " <nl> } <nl> - classpath + = " minecraft _ server . $ { MC _ VERSION } . jar " <nl> + classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - data . jar " <nl> + classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - extra . jar " <nl> + <nl> <nl> manifest . attributes ( [ <nl> ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , <nl> diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch <nl> new file mode 100644 <nl> index 0000000 . . e777bfa <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - a / net / minecraft / client / gui / GuiConnecting . java <nl> + + + + b / net / minecraft / client / gui / GuiConnecting . java <nl> + @ @ - 62 , 6 + 62 , 7 @ @ <nl> + GuiConnecting . this . field _ 146371 _ g . func _ 150719 _ a ( new NetHandlerLoginClient ( GuiConnecting . this . field _ 146371 _ g , GuiConnecting . this . field _ 146297 _ k , GuiConnecting . this . field _ 146374 _ i , ( p _ 209549 _ 1 _ ) - > { <nl> + GuiConnecting . this . func _ 209514 _ a ( p _ 209549 _ 1 _ ) ; <nl> + } ) ) ; <nl> + + net . minecraftforge . fml . network . NetworkHooks . registerClientLoginChannel ( GuiConnecting . this . field _ 146371 _ g ) ; <nl> + GuiConnecting . this . field _ 146371 _ g . func _ 179290 _ a ( new CPacketHandshake ( p _ 146367 _ 1 _ , p _ 146367 _ 2 _ , EnumConnectionState . LOGIN ) ) ; <nl> + GuiConnecting . this . field _ 146371 _ g . func _ 179290 _ a ( new CPacketLoginStart ( GuiConnecting . this . field _ 146297 _ k . func _ 110432 _ I ( ) . func _ 148256 _ e ( ) ) ) ; <nl> + } catch ( UnknownHostException unknownhostexception ) { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java <nl> new file mode 100644 <nl> index 0000000 . . 161c0c0 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java <nl> @ @ - 0 , 0 + 1 , 81 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . loading ; <nl> + <nl> + import cpw . mods . modlauncher . api . IEnvironment ; <nl> + import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> + import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> + import net . minecraftforge . api . distmarker . Dist ; <nl> + import net . minecraftforge . versions . forge . ForgeVersion ; <nl> + import net . minecraftforge . versions . mcp . MCPVersion ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . concurrent . Callable ; <nl> + <nl> + public class FMLServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> + { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> + <nl> + @ Override <nl> + public String name ( ) <nl> + { <nl> + return " fmlserver " ; <nl> + } <nl> + <nl> + @ Override <nl> + public Path [ ] identifyTransformationTargets ( ) <nl> + { <nl> + Path libsPath = findLibsPath ( ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; <nl> + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " server " , MCPVersion . getMCPandMCVersion ( ) , " server - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> + LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> + LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; <nl> + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { <nl> + throw new RuntimeException ( " Failed to find patched jars " ) ; <nl> + } <nl> + return new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ; <nl> + } <nl> + <nl> + @ Override <nl> + public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> + { <nl> + return ( ) - > { <nl> + super . beforeStart ( launchClassLoader ) ; <nl> + launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> + Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> + return null ; <nl> + } ; <nl> + } <nl> + <nl> + @ Override <nl> + public void setup ( final IEnvironment environment ) { <nl> + } <nl> + <nl> + @ Override <nl> + public Dist getDist ( ) <nl> + { <nl> + return Dist . DEDICATED _ SERVER ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / server / ServerMain . java b / src / main / java / net / minecraftforge / server / ServerMain . java <nl> new file mode 100644 <nl> index 0000000 . . c5fe81d <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / ServerMain . java <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + package net . minecraftforge . server ; <nl> + <nl> + import com . google . common . collect . ObjectArrays ; <nl> + import cpw . mods . modlauncher . Launcher ; <nl> + <nl> + public class ServerMain { <nl> + public static void main ( String [ ] args ) { <nl> + final String [ ] argArray = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , " fmlserver " , " - - gameDir " , " . " } , args , String . class ) ; <nl> + Launcher . main ( argArray ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService b / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService <nl> index d0168ed . . 744c350 100644 <nl> - - - a / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService <nl> + + + b / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService <nl> @ @ - 1 , 3 + 1 , 4 @ @ <nl> net . minecraftforge . fml . loading . FMLClientLaunchProvider <nl> + net . minecraftforge . fml . loading . FMLServerLaunchProvider <nl> net . minecraftforge . fml . loading . FMLDevClientLaunchProvider <nl> net . minecraftforge . fml . loading . FMLDevServerLaunchProvider <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index d36f519 . . d520016 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer <nl> try <nl> { <nl> modClass = Class . forName ( className , true , modClassLoader ) ; <nl> - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> } <nl> catch ( Throwable e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 375764e . . bfa8e30 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> import org . apache . logging . log4j . LogManager ; <nl> @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - private static final Path forgePath ; <nl> - private static final Path patchedBinariesPath ; <nl> - private static final Path srgMcPath ; <nl> <nl> - static { <nl> - Path forgePath1 = null ; <nl> - Path patchedBinariesPath1 = null ; <nl> - Path srgMcPath1 = null ; <nl> - try { <nl> - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> - } catch ( URISyntaxException e ) { <nl> - <nl> - } <nl> - forgePath = forgePath1 ; <nl> - patchedBinariesPath = patchedBinariesPath1 ; <nl> - srgMcPath = srgMcPath1 ; <nl> - } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> + Path libsPath = findLibsPath ( ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; <nl> + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; <nl> - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { <nl> + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; <nl> + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { <nl> throw new RuntimeException ( " Failed to find patched jars " ) ; <nl> } <nl> - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> - super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> index 94f8d4f . . 76ad5be 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> @ @ - 19 , 25 + 19 , 38 @ @ <nl> <nl> package net . minecraftforge . fml . loading ; <nl> <nl> + import com . google . common . collect . ObjectArrays ; <nl> import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . net . URI ; <nl> + import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . function . Predicate ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> public abstract class FMLCommonLaunchHandler <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> / / standard libs <nl> - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , <nl> " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , <nl> " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " <nl> ) ; <nl> <nl> + private Path forgePath ; <nl> + <nl> protected Predicate < String > getPackagePredicate ( ) { <nl> return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; <nl> } <nl> @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler <nl> <nl> } <nl> <nl> + Path findLibsPath ( ) { <nl> + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; <nl> + / / go up SIX parents to find the libs dir <nl> + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; <nl> + return libs ; <nl> + } <nl> + Path findJarPathFor ( final String className , final String jarName ) { <nl> + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; <nl> + try { <nl> + Path path ; <nl> + final URI uri = resource . toURI ( ) ; <nl> + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { <nl> + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; <nl> + } else { <nl> + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; <nl> + } <nl> + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; <nl> + return path ; <nl> + } catch ( URISyntaxException e ) { <nl> + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; <nl> + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; <nl> + } <nl> + } <nl> + Path [ ] commonLibPaths ( Path [ ] extras ) { <nl> + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; <nl> + return ObjectArrays . concat ( extras , realms ) ; <nl> + } <nl> + <nl> + Path getForgePath ( ) { <nl> + if ( forgePath = = null ) { <nl> + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; <nl> + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; <nl> + } <nl> + return forgePath ; <nl> + } <nl> public abstract Dist getDist ( ) ; <nl> <nl> - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) <nl> + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) <nl> { <nl> - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; <nl> + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> index 27d441d . . 3a025d3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevclient " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> index 7c0da5a . . 2aea0e2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; <nl> <nl> public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> - <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> @ Override <nl> @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevserver " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; <nl> Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 9b625d0 . . ceb1167 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 163 , 6 + 163 , 8 @ @ project ( ' : forge ' ) { 
 installer ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' 
 installer ' net . jodah : typetools : 0 . 5 . 0 ' 
 installer ' java3d : vecmath : 1 . 5 . 2 ' 
 + installer ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' 
 + installer ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' 
 } 
 
 task runclient ( type : JavaExec , dependsOn : [ " : forge : downloadAssets " , " : forge : extractNatives " ] ) { 
 @ @ - 344 , 7 + 346 , 16 @ @ project ( ' : forge ' ) { 
 type : ' release ' , 
 mainClass : ' cpw . mods . modlauncher . Launcher ' , 
 inheritsFrom : MC _ VERSION , 
 - logging : [ : ] , 
 + logging : [ client : [ 
 + argument : ' - Dlog4j . configurationFile = $ { path } ' , 
 + file : [ 
 + id : ' client - 1 . 12 . xml ' , 
 + sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , 
 + size : 877 , 
 + url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' 
 + ] , 
 + type : ' log4j2 - xml ' 
 + ] ] , 
 arguments : [ 
 game : [ ' - - launchTarget ' , ' fmlclient ' ] 
 ] , 
 @ @ - 545 , 7 + 556 , 9 @ @ project ( ' : forge ' ) { 
 artifacts . each { key , lib - > 
 classpath + = " libraries / $ { lib . downloads . artifact . path } " 
 } 
 - classpath + = " minecraft _ server . $ { MC _ VERSION } . jar " 
 + classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - data . jar " 
 + classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - extra . jar " 
 + 
 
 manifest . attributes ( [ 
 ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , 
 diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch 
 new file mode 100644 
 index 0000000 . . e777bfa 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiConnecting . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - a / net / minecraft / client / gui / GuiConnecting . java 
 + + + + b / net / minecraft / client / gui / GuiConnecting . java 
 + @ @ - 62 , 6 + 62 , 7 @ @ 
 + GuiConnecting . this . field _ 146371 _ g . func _ 150719 _ a ( new NetHandlerLoginClient ( GuiConnecting . this . field _ 146371 _ g , GuiConnecting . this . field _ 146297 _ k , GuiConnecting . this . field _ 146374 _ i , ( p _ 209549 _ 1 _ ) - > { 
 + GuiConnecting . this . func _ 209514 _ a ( p _ 209549 _ 1 _ ) ; 
 + } ) ) ; 
 + + net . minecraftforge . fml . network . NetworkHooks . registerClientLoginChannel ( GuiConnecting . this . field _ 146371 _ g ) ; 
 + GuiConnecting . this . field _ 146371 _ g . func _ 179290 _ a ( new CPacketHandshake ( p _ 146367 _ 1 _ , p _ 146367 _ 2 _ , EnumConnectionState . LOGIN ) ) ; 
 + GuiConnecting . this . field _ 146371 _ g . func _ 179290 _ a ( new CPacketLoginStart ( GuiConnecting . this . field _ 146297 _ k . func _ 110432 _ I ( ) . func _ 148256 _ e ( ) ) ) ; 
 + } catch ( UnknownHostException unknownhostexception ) { 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java 
 new file mode 100644 
 index 0000000 . . 161c0c0 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java 
 @ @ - 0 , 0 + 1 , 81 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . loading ; 
 + 
 + import cpw . mods . modlauncher . api . IEnvironment ; 
 + import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 + import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 + import net . minecraftforge . api . distmarker . Dist ; 
 + import net . minecraftforge . versions . forge . ForgeVersion ; 
 + import net . minecraftforge . versions . mcp . MCPVersion ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . concurrent . Callable ; 
 + 
 + public class FMLServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 + { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 + 
 + @ Override 
 + public String name ( ) 
 + { 
 + return " fmlserver " ; 
 + } 
 + 
 + @ Override 
 + public Path [ ] identifyTransformationTargets ( ) 
 + { 
 + Path libsPath = findLibsPath ( ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; 
 + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " server " , MCPVersion . getMCPandMCVersion ( ) , " server - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 + LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 + LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; 
 + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { 
 + throw new RuntimeException ( " Failed to find patched jars " ) ; 
 + } 
 + return new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ; 
 + } 
 + 
 + @ Override 
 + public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 + { 
 + return ( ) - > { 
 + super . beforeStart ( launchClassLoader ) ; 
 + launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 + Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 + return null ; 
 + } ; 
 + } 
 + 
 + @ Override 
 + public void setup ( final IEnvironment environment ) { 
 + } 
 + 
 + @ Override 
 + public Dist getDist ( ) 
 + { 
 + return Dist . DEDICATED _ SERVER ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / server / ServerMain . java b / src / main / java / net / minecraftforge / server / ServerMain . java 
 new file mode 100644 
 index 0000000 . . c5fe81d 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / ServerMain . java 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + package net . minecraftforge . server ; 
 + 
 + import com . google . common . collect . ObjectArrays ; 
 + import cpw . mods . modlauncher . Launcher ; 
 + 
 + public class ServerMain { 
 + public static void main ( String [ ] args ) { 
 + final String [ ] argArray = ObjectArrays . concat ( new String [ ] { " - - launchTarget " , " fmlserver " , " - - gameDir " , " . " } , args , String . class ) ; 
 + Launcher . main ( argArray ) ; 
 + } 
 + } 
 diff - - git a / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService b / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService 
 index d0168ed . . 744c350 100644 
 - - - a / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService 
 + + + b / src / main / resources / META - INF / services / cpw . mods . modlauncher . api . ILaunchHandlerService 
 @ @ - 1 , 3 + 1 , 4 @ @ 
 net . minecraftforge . fml . loading . FMLClientLaunchProvider 
 + net . minecraftforge . fml . loading . FMLServerLaunchProvider 
 net . minecraftforge . fml . loading . FMLDevClientLaunchProvider 
 net . minecraftforge . fml . loading . FMLDevServerLaunchProvider 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index d36f519 . . d520016 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer 
 try 
 { 
 modClass = Class . forName ( className , true , modClassLoader ) ; 
 - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 } 
 catch ( Throwable e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 375764e . . bfa8e30 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 import org . apache . logging . log4j . LogManager ; 
 @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - private static final Path forgePath ; 
 - private static final Path patchedBinariesPath ; 
 - private static final Path srgMcPath ; 
 
 - static { 
 - Path forgePath1 = null ; 
 - Path patchedBinariesPath1 = null ; 
 - Path srgMcPath1 = null ; 
 - try { 
 - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 - } catch ( URISyntaxException e ) { 
 - 
 - } 
 - forgePath = forgePath1 ; 
 - patchedBinariesPath = patchedBinariesPath1 ; 
 - srgMcPath = srgMcPath1 ; 
 - } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 + Path libsPath = findLibsPath ( ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; 
 + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; 
 - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { 
 + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; 
 + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { 
 throw new RuntimeException ( " Failed to find patched jars " ) ; 
 } 
 - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 - super . beforeStart ( launchClassLoader , forgePath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 index 94f8d4f . . 76ad5be 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 @ @ - 19 , 25 + 19 , 38 @ @ 
 
 package net . minecraftforge . fml . loading ; 
 
 + import com . google . common . collect . ObjectArrays ; 
 import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 
 + import java . net . URI ; 
 + import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . function . Predicate ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 public abstract class FMLCommonLaunchHandler 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 / / standard libs 
 - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , 
 " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , 
 " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " 
 ) ; 
 
 + private Path forgePath ; 
 + 
 protected Predicate < String > getPackagePredicate ( ) { 
 return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; 
 } 
 @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler 
 
 } 
 
 + Path findLibsPath ( ) { 
 + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; 
 + / / go up SIX parents to find the libs dir 
 + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; 
 + return libs ; 
 + } 
 + Path findJarPathFor ( final String className , final String jarName ) { 
 + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; 
 + try { 
 + Path path ; 
 + final URI uri = resource . toURI ( ) ; 
 + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { 
 + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; 
 + } else { 
 + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; 
 + } 
 + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; 
 + return path ; 
 + } catch ( URISyntaxException e ) { 
 + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; 
 + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; 
 + } 
 + } 
 + Path [ ] commonLibPaths ( Path [ ] extras ) { 
 + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; 
 + return ObjectArrays . concat ( extras , realms ) ; 
 + } 
 + 
 + Path getForgePath ( ) { 
 + if ( forgePath = = null ) { 
 + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; 
 + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; 
 + } 
 + return forgePath ; 
 + } 
 public abstract Dist getDist ( ) ; 
 
 - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) 
 + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) 
 { 
 - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; 
 + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 index 27d441d . . 3a025d3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevclient " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 index 7c0da5a . . 2aea0e2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; 
 
 public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 - 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 @ Override 
 @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevserver " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; 
 Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;
