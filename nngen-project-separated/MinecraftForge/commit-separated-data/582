BLEU SCORE: 0.00579985691748475

TEST MSG: Improve the default isItemValid ( ) and getItemStackLimit ( ) implementations in SlotItemHandler . You can now properly swap the player ' s held itemstack with the slot ' s itemstack .
GENERATED MSG: Fix CombinedInvWrapper accessing incorrect slots

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / items / SlotItemHandler . java b / src / main / java / net / minecraftforge / items / SlotItemHandler . java <nl> index e186aff . . 8a0ee59 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / SlotItemHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / SlotItemHandler . java <nl> @ @ - 43 , 7 + 43 , 24 @ @ public class SlotItemHandler extends Slot <nl> { <nl> if ( stack = = null ) <nl> return false ; <nl> - ItemStack remainder = this . getItemHandler ( ) . insertItem ( index , stack , true ) ; <nl> + <nl> + IItemHandler handler = this . getItemHandler ( ) ; <nl> + ItemStack remainder ; <nl> + if ( handler instanceof IItemHandlerModifiable ) <nl> + { <nl> + IItemHandlerModifiable handlerModifiable = ( IItemHandlerModifiable ) handler ; <nl> + ItemStack currentStack = handlerModifiable . getStackInSlot ( index ) ; <nl> + <nl> + handlerModifiable . setStackInSlot ( index , null ) ; <nl> + <nl> + remainder = handlerModifiable . insertItem ( index , stack , true ) ; <nl> + <nl> + handlerModifiable . setStackInSlot ( index , currentStack ) ; <nl> + } <nl> + else <nl> + { <nl> + remainder = handler . insertItem ( index , stack , true ) ; <nl> + } <nl> return remainder = = null | | remainder . stackSize < stack . stackSize ; <nl> } <nl> <nl> @ @ - 71 , 13 + 88 , 30 @ @ public class SlotItemHandler extends Slot <nl> public int getItemStackLimit ( ItemStack stack ) <nl> { <nl> ItemStack maxAdd = stack . copy ( ) ; <nl> - maxAdd . stackSize = maxAdd . getMaxStackSize ( ) ; <nl> - ItemStack currentStack = this . getItemHandler ( ) . getStackInSlot ( index ) ; <nl> - ItemStack remainder = this . getItemHandler ( ) . insertItem ( index , maxAdd , true ) ; <nl> + int maxInput = stack . getMaxStackSize ( ) ; <nl> + maxAdd . stackSize = maxInput ; <nl> + <nl> + IItemHandler handler = this . getItemHandler ( ) ; <nl> + ItemStack currentStack = handler . getStackInSlot ( index ) ; <nl> + if ( handler instanceof IItemHandlerModifiable ) { <nl> + IItemHandlerModifiable handlerModifiable = ( IItemHandlerModifiable ) handler ; <nl> + <nl> + handlerModifiable . setStackInSlot ( index , null ) ; <nl> + <nl> + ItemStack remainder = handlerModifiable . insertItem ( index , maxAdd , true ) ; <nl> + <nl> + handlerModifiable . setStackInSlot ( index , currentStack ) ; <nl> + <nl> + return maxInput - ( remainder ! = null ? remainder . stackSize : 0 ) ; <nl> + } <nl> + else <nl> + { <nl> + ItemStack remainder = handler . insertItem ( index , maxAdd , true ) ; <nl> <nl> - int current = currentStack = = null ? 0 : currentStack . stackSize ; <nl> - int added = maxAdd . stackSize - ( remainder ! = null ? remainder . stackSize : 0 ) ; <nl> - return current + added ; <nl> + int current = currentStack = = null ? 0 : currentStack . stackSize ; <nl> + int added = maxInput - ( remainder ! = null ? remainder . stackSize : 0 ) ; <nl> + return current + added ; <nl> + } <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> index 4ffc4bb . . 11e9596 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java <nl> @ @ - 49 , 13 + 49 , 13 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> return itemHandler [ index ] ; <nl> } <nl> <nl> - protected int getSlotFromIndex ( int index ) <nl> + protected int getSlotFromIndex ( int slot , int index ) <nl> { <nl> if ( index < = 0 | | index > = baseIndex . length ) <nl> { <nl> - return 0 ; <nl> + return slot ; <nl> } <nl> - return baseIndex [ index - 1 ] ; <nl> + return slot - baseIndex [ index - 1 ] ; <nl> } <nl> <nl> @ Override <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> { <nl> int index = getIndexForSlot ( slot ) ; <nl> IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; <nl> - slot = slot - getSlotFromIndex ( index ) ; <nl> + slot = getSlotFromIndex ( slot , index ) ; <nl> handler . setStackInSlot ( slot , stack ) ; <nl> } <nl> <nl> @ @ - 78 , 7 + 78 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> { <nl> int index = getIndexForSlot ( slot ) ; <nl> IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; <nl> - slot = getSlotFromIndex ( index ) ; <nl> + slot = getSlotFromIndex ( slot , index ) ; <nl> return handler . getStackInSlot ( slot ) ; <nl> } <nl> <nl> @ @ - 87 , 7 + 87 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> { <nl> int index = getIndexForSlot ( slot ) ; <nl> IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; <nl> - slot = getSlotFromIndex ( index ) ; <nl> + slot = getSlotFromIndex ( slot , index ) ; <nl> return handler . insertItem ( slot , stack , simulate ) ; <nl> } <nl> <nl> @ @ - 96 , 7 + 96 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable <nl> { <nl> int index = getIndexForSlot ( slot ) ; <nl> IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; <nl> - slot = getSlotFromIndex ( index ) ; <nl> + slot = getSlotFromIndex ( slot , index ) ; <nl> return handler . extractItem ( slot , amount , simulate ) ; <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index 74f8645 . . e93adcb 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 8 , 6 + 8 , 7 @ @ import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . init . Blocks ; <nl> import net . minecraft . init . Items ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> @ @ - 33 , 6 + 34 , 9 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . items . IItemHandler ; <nl> + import net . minecraftforge . items . ItemStackHandler ; <nl> + import net . minecraftforge . items . wrapper . CombinedInvWrapper ; <nl> <nl> import java . util . List ; <nl> <nl> @ @ - 84 , 6 + 88 , 7 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + GameRegistry . registerItem ( new TestItem ( ) , " testitem " ) ; <nl> GameRegistry . registerBlock ( new BlockSimpleTank ( ) , " simpletank " ) ; <nl> GameRegistry . registerTileEntity ( TileSimpleTank . class , " simpletank " ) ; <nl> <nl> @ @ - 151 , 6 + 156 , 45 @ @ public class DynBucketTest <nl> } <nl> } <nl> <nl> + public static class TestItem extends Item { <nl> + @ Override <nl> + public ItemStack onItemRightClick ( ItemStack itemStackIn , World worldIn , EntityPlayer playerIn ) <nl> + { <nl> + if ( worldIn . isRemote ) <nl> + return itemStackIn ; <nl> + <nl> + ItemStackHandler handler = new ItemStackHandler ( 5 ) ; <nl> + ItemStackHandler handler2 = new ItemStackHandler ( 5 ) ; <nl> + IItemHandler joined = new CombinedInvWrapper ( handler , handler2 ) ; <nl> + <nl> + handler . setStackInSlot ( 0 , new ItemStack ( Blocks . stone ) ) ; <nl> + handler . setStackInSlot ( 1 , new ItemStack ( Blocks . grass ) ) ; <nl> + handler . setStackInSlot ( 2 , new ItemStack ( Blocks . dirt ) ) ; <nl> + handler . setStackInSlot ( 3 , new ItemStack ( Blocks . glass ) ) ; <nl> + handler . setStackInSlot ( 4 , new ItemStack ( Blocks . sand ) ) ; <nl> + <nl> + handler2 . setStackInSlot ( 0 , new ItemStack ( Blocks . slime _ block ) ) ; <nl> + handler2 . setStackInSlot ( 1 , new ItemStack ( Blocks . tnt ) ) ; <nl> + handler2 . setStackInSlot ( 2 , new ItemStack ( Blocks . planks ) ) ; <nl> + handler2 . setStackInSlot ( 3 , new ItemStack ( Blocks . log ) ) ; <nl> + handler2 . setStackInSlot ( 4 , new ItemStack ( Blocks . diamond _ block ) ) ; <nl> + <nl> + for ( int i = 0 ; i < handler . getSlots ( ) ; i + + ) { <nl> + System . out . println ( " Expected 1 : " + handler . getStackInSlot ( i ) ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < handler2 . getSlots ( ) ; i + + ) { <nl> + System . out . println ( " Expected 2 : " + handler2 . getStackInSlot ( i ) ) ; <nl> + } <nl> + <nl> + for ( int i = 0 ; i < joined . getSlots ( ) ; i + + ) { <nl> + System . out . println ( " Joined : " + joined . getStackInSlot ( i ) ) ; <nl> + } <nl> + <nl> + return itemStackIn ; <nl> + } <nl> + } <nl> + <nl> public static class DynBucket extends Item <nl> { <nl> public DynBucket ( )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / items / SlotItemHandler . java b / src / main / java / net / minecraftforge / items / SlotItemHandler . java 
 index e186aff . . 8a0ee59 100644 
 - - - a / src / main / java / net / minecraftforge / items / SlotItemHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / SlotItemHandler . java 
 @ @ - 43 , 7 + 43 , 24 @ @ public class SlotItemHandler extends Slot 
 { 
 if ( stack = = null ) 
 return false ; 
 - ItemStack remainder = this . getItemHandler ( ) . insertItem ( index , stack , true ) ; 
 + 
 + IItemHandler handler = this . getItemHandler ( ) ; 
 + ItemStack remainder ; 
 + if ( handler instanceof IItemHandlerModifiable ) 
 + { 
 + IItemHandlerModifiable handlerModifiable = ( IItemHandlerModifiable ) handler ; 
 + ItemStack currentStack = handlerModifiable . getStackInSlot ( index ) ; 
 + 
 + handlerModifiable . setStackInSlot ( index , null ) ; 
 + 
 + remainder = handlerModifiable . insertItem ( index , stack , true ) ; 
 + 
 + handlerModifiable . setStackInSlot ( index , currentStack ) ; 
 + } 
 + else 
 + { 
 + remainder = handler . insertItem ( index , stack , true ) ; 
 + } 
 return remainder = = null | | remainder . stackSize < stack . stackSize ; 
 } 
 
 @ @ - 71 , 13 + 88 , 30 @ @ public class SlotItemHandler extends Slot 
 public int getItemStackLimit ( ItemStack stack ) 
 { 
 ItemStack maxAdd = stack . copy ( ) ; 
 - maxAdd . stackSize = maxAdd . getMaxStackSize ( ) ; 
 - ItemStack currentStack = this . getItemHandler ( ) . getStackInSlot ( index ) ; 
 - ItemStack remainder = this . getItemHandler ( ) . insertItem ( index , maxAdd , true ) ; 
 + int maxInput = stack . getMaxStackSize ( ) ; 
 + maxAdd . stackSize = maxInput ; 
 + 
 + IItemHandler handler = this . getItemHandler ( ) ; 
 + ItemStack currentStack = handler . getStackInSlot ( index ) ; 
 + if ( handler instanceof IItemHandlerModifiable ) { 
 + IItemHandlerModifiable handlerModifiable = ( IItemHandlerModifiable ) handler ; 
 + 
 + handlerModifiable . setStackInSlot ( index , null ) ; 
 + 
 + ItemStack remainder = handlerModifiable . insertItem ( index , maxAdd , true ) ; 
 + 
 + handlerModifiable . setStackInSlot ( index , currentStack ) ; 
 + 
 + return maxInput - ( remainder ! = null ? remainder . stackSize : 0 ) ; 
 + } 
 + else 
 + { 
 + ItemStack remainder = handler . insertItem ( index , maxAdd , true ) ; 
 
 - int current = currentStack = = null ? 0 : currentStack . stackSize ; 
 - int added = maxAdd . stackSize - ( remainder ! = null ? remainder . stackSize : 0 ) ; 
 - return current + added ; 
 + int current = currentStack = = null ? 0 : currentStack . stackSize ; 
 + int added = maxInput - ( remainder ! = null ? remainder . stackSize : 0 ) ; 
 + return current + added ; 
 + } 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 index 4ffc4bb . . 11e9596 100644 
 - - - a / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 + + + b / src / main / java / net / minecraftforge / items / wrapper / CombinedInvWrapper . java 
 @ @ - 49 , 13 + 49 , 13 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 return itemHandler [ index ] ; 
 } 
 
 - protected int getSlotFromIndex ( int index ) 
 + protected int getSlotFromIndex ( int slot , int index ) 
 { 
 if ( index < = 0 | | index > = baseIndex . length ) 
 { 
 - return 0 ; 
 + return slot ; 
 } 
 - return baseIndex [ index - 1 ] ; 
 + return slot - baseIndex [ index - 1 ] ; 
 } 
 
 @ Override 
 @ @ - 63 , 7 + 63 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 { 
 int index = getIndexForSlot ( slot ) ; 
 IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; 
 - slot = slot - getSlotFromIndex ( index ) ; 
 + slot = getSlotFromIndex ( slot , index ) ; 
 handler . setStackInSlot ( slot , stack ) ; 
 } 
 
 @ @ - 78 , 7 + 78 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 { 
 int index = getIndexForSlot ( slot ) ; 
 IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; 
 - slot = getSlotFromIndex ( index ) ; 
 + slot = getSlotFromIndex ( slot , index ) ; 
 return handler . getStackInSlot ( slot ) ; 
 } 
 
 @ @ - 87 , 7 + 87 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 { 
 int index = getIndexForSlot ( slot ) ; 
 IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; 
 - slot = getSlotFromIndex ( index ) ; 
 + slot = getSlotFromIndex ( slot , index ) ; 
 return handler . insertItem ( slot , stack , simulate ) ; 
 } 
 
 @ @ - 96 , 7 + 96 , 7 @ @ public class CombinedInvWrapper implements IItemHandlerModifiable 
 { 
 int index = getIndexForSlot ( slot ) ; 
 IItemHandlerModifiable handler = getHandlerFromIndex ( index ) ; 
 - slot = getSlotFromIndex ( index ) ; 
 + slot = getSlotFromIndex ( slot , index ) ; 
 return handler . extractItem ( slot , amount , simulate ) ; 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index 74f8645 . . e93adcb 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 8 , 6 + 8 , 7 @ @ import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . init . Blocks ; 
 import net . minecraft . init . Items ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 @ @ - 33 , 6 + 34 , 9 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . items . IItemHandler ; 
 + import net . minecraftforge . items . ItemStackHandler ; 
 + import net . minecraftforge . items . wrapper . CombinedInvWrapper ; 
 
 import java . util . List ; 
 
 @ @ - 84 , 6 + 88 , 7 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + GameRegistry . registerItem ( new TestItem ( ) , " testitem " ) ; 
 GameRegistry . registerBlock ( new BlockSimpleTank ( ) , " simpletank " ) ; 
 GameRegistry . registerTileEntity ( TileSimpleTank . class , " simpletank " ) ; 
 
 @ @ - 151 , 6 + 156 , 45 @ @ public class DynBucketTest 
 } 
 } 
 
 + public static class TestItem extends Item { 
 + @ Override 
 + public ItemStack onItemRightClick ( ItemStack itemStackIn , World worldIn , EntityPlayer playerIn ) 
 + { 
 + if ( worldIn . isRemote ) 
 + return itemStackIn ; 
 + 
 + ItemStackHandler handler = new ItemStackHandler ( 5 ) ; 
 + ItemStackHandler handler2 = new ItemStackHandler ( 5 ) ; 
 + IItemHandler joined = new CombinedInvWrapper ( handler , handler2 ) ; 
 + 
 + handler . setStackInSlot ( 0 , new ItemStack ( Blocks . stone ) ) ; 
 + handler . setStackInSlot ( 1 , new ItemStack ( Blocks . grass ) ) ; 
 + handler . setStackInSlot ( 2 , new ItemStack ( Blocks . dirt ) ) ; 
 + handler . setStackInSlot ( 3 , new ItemStack ( Blocks . glass ) ) ; 
 + handler . setStackInSlot ( 4 , new ItemStack ( Blocks . sand ) ) ; 
 + 
 + handler2 . setStackInSlot ( 0 , new ItemStack ( Blocks . slime _ block ) ) ; 
 + handler2 . setStackInSlot ( 1 , new ItemStack ( Blocks . tnt ) ) ; 
 + handler2 . setStackInSlot ( 2 , new ItemStack ( Blocks . planks ) ) ; 
 + handler2 . setStackInSlot ( 3 , new ItemStack ( Blocks . log ) ) ; 
 + handler2 . setStackInSlot ( 4 , new ItemStack ( Blocks . diamond _ block ) ) ; 
 + 
 + for ( int i = 0 ; i < handler . getSlots ( ) ; i + + ) { 
 + System . out . println ( " Expected 1 : " + handler . getStackInSlot ( i ) ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < handler2 . getSlots ( ) ; i + + ) { 
 + System . out . println ( " Expected 2 : " + handler2 . getStackInSlot ( i ) ) ; 
 + } 
 + 
 + for ( int i = 0 ; i < joined . getSlots ( ) ; i + + ) { 
 + System . out . println ( " Joined : " + joined . getStackInSlot ( i ) ) ; 
 + } 
 + 
 + return itemStackIn ; 
 + } 
 + } 
 + 
 public static class DynBucket extends Item 
 { 
 public DynBucket ( )
