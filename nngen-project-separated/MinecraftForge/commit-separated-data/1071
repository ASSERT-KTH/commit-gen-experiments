BLEU SCORE: 0.020943469770777077

TEST MSG: Adds some new Ore querying functionality .
GENERATED MSG: Null check the Item in the supplied stack as well as the stack itself .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> index fe1b46b . . 5b50060 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> @ @ - 34 , 10 + 34 , 10 @ @ public class OreDictionary <nl> { <nl> private static boolean hasInit = false ; <nl> private static List < String > idToName = new ArrayList < String > ( ) ; <nl> - private static Map < String , Integer > nameToId = new HashMap < String , Integer > ( ) ; <nl> + private static Map < String , Integer > nameToId = new HashMap < String , Integer > ( 128 ) ; <nl> private static List < ArrayList < ItemStack > > idToStack = Lists . newArrayList ( ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } <nl> private static List < ArrayList < ItemStack > > idToStackUn = Lists . newArrayList ( ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } <nl> - private static Map < Integer , List < Integer > > stackToId = Maps . newHashMap ( ) ; <nl> + private static Map < Integer , List < Integer > > stackToId = Maps . newHashMapWithExpectedSize ( 96 ) ; / / Calculated from 128 * 0 . 75 <nl> public static final ArrayList < ItemStack > EMPTY _ LIST = new UnmodifiableArrayList ( Lists . newArrayList ( ) ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } <nl> <nl> / * * <nl> @ @ - 348 , 6 + 348 , 44 @ @ public class OreDictionary <nl> } <nl> <nl> / * * <nl> + * Retrieves the List of items that are registered to this ore type at this instant . <nl> + * If the flag is TRUE , then it will create the list as empty if it did not exist . <nl> + * <nl> + * This option should be used by modders who are doing blanket scans in postInit . <nl> + * It greatly reduces clutter in the OreDictionary is the responsible and proper <nl> + * way to use the dictionary in a large number of cases . <nl> + * <nl> + * The other function above is utilized in OreRecipe and is required for the <nl> + * operation of that code . <nl> + * <nl> + * @ param name The ore name , directly calls getOreID if the flag is TRUE <nl> + * @ param alwaysCreateEntry Flag - should a new entry be created if empty <nl> + * @ return An arraylist containing ItemStacks registered for this ore <nl> + * / <nl> + public static List < ItemStack > getOres ( String name , boolean alwaysCreateEntry ) <nl> + { <nl> + 	 if ( alwaysCreateEntry ) { <nl> + 	 	 return getOres ( getOreID ( name ) ) ; <nl> + 	 } <nl> + 	 return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns whether or not an oreName exists in the dictionary . <nl> + * This function can be used to safely query the Ore Dictionary without <nl> + * adding needless clutter to the underlying map structure . <nl> + * <nl> + * Please use this when possible and appropriate . <nl> + * <nl> + * @ param name The ore name <nl> + * @ return Whether or not that name is in the Ore Dictionary . <nl> + * / <nl> + public static boolean doesOreNameExist ( String name ) <nl> + { <nl> + 	 return nameToId . get ( name ) ! = null ; <nl> + } <nl> + <nl> + / * * <nl> * Retrieves a list of all unique ore names that are already registered . <nl> * <nl> * @ return All unique ore names that are currently registered .
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> index ea316ab . . 1330bad 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> @ @ - 295 , 7 + 295 , 7 @ @ public class OreDictionary <nl> @ Deprecated / / Use getOreIds below for more accuracy <nl> public static int getOreID ( ItemStack stack ) <nl> { <nl> - if ( stack = = null ) return - 1 ; <nl> + if ( stack = = null | | stack . getItem ( ) = = null ) return - 1 ; <nl> <nl> int id = Item . getIdFromItem ( stack . getItem ( ) ) ; <nl> List < Integer > ids = stackToId . get ( id ) ; / / Try the wildcard first <nl> @ @ - 315 , 7 + 315 , 7 @ @ public class OreDictionary <nl> * / <nl> public static int [ ] getOreIDs ( ItemStack stack ) <nl> { <nl> - if ( stack = = null ) return new int [ 0 ] ; <nl> + if ( stack = = null | | stack . getItem ( ) = = null ) return new int [ 0 ] ; <nl> <nl> Set < Integer > set = new HashSet < Integer > ( ) ; <nl> <nl> @ @ - 335 , 8 + 335 , 8 @ @ public class OreDictionary <nl> / * * <nl> * Retrieves the ArrayList of items that are registered to this ore type . <nl> * Creates the list as empty if it did not exist . <nl> - * <nl> - * The returned List is unmodifiable , but will be updated if a new ore <nl> + * <nl> + * The returned List is unmodifiable , but will be updated if a new ore <nl> * is registered using registerOre <nl> * <nl> * @ param name The ore name , directly calls getOreID <nl> @ @ - 360 , 8 + 360 , 8 @ @ public class OreDictionary <nl> / * * <nl> * Retrieves the ArrayList of items that are registered to this ore type . <nl> * Creates the list as empty if it did not exist . <nl> - * <nl> - * Warning : In 1 . 8 , the return value will become a immutible list , <nl> + * <nl> + * Warning : In 1 . 8 , the return value will become a immutible list , <nl> * and this function WILL NOT create the entry if the ID doesn ' t exist , <nl> * IDs are intended to be internal OreDictionary things and modders <nl> * should not ever code them in . <nl> @ @ - 537 , 7 + 537 , 7 @ @ public class OreDictionary <nl> public < T > T [ ] toArray ( T [ ] a ) { return list . toArray ( a ) ; } <nl> public String toString ( ) { return list . toString ( ) ; } <nl> public boolean containsAll ( Collection < ? > coll ) { return list . containsAll ( coll ) ; } <nl> - <nl> + <nl> public E set ( int index , E element ) { throw new UnsupportedOperationException ( ) ; } <nl> public void add ( int index , E element ) { throw new UnsupportedOperationException ( ) ; } <nl> public E remove ( int index ) { throw new UnsupportedOperationException ( ) ; }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 index fe1b46b . . 5b50060 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 @ @ - 34 , 10 + 34 , 10 @ @ public class OreDictionary 
 { 
 private static boolean hasInit = false ; 
 private static List < String > idToName = new ArrayList < String > ( ) ; 
 - private static Map < String , Integer > nameToId = new HashMap < String , Integer > ( ) ; 
 + private static Map < String , Integer > nameToId = new HashMap < String , Integer > ( 128 ) ; 
 private static List < ArrayList < ItemStack > > idToStack = Lists . newArrayList ( ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } 
 private static List < ArrayList < ItemStack > > idToStackUn = Lists . newArrayList ( ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } 
 - private static Map < Integer , List < Integer > > stackToId = Maps . newHashMap ( ) ; 
 + private static Map < Integer , List < Integer > > stackToId = Maps . newHashMapWithExpectedSize ( 96 ) ; / / Calculated from 128 * 0 . 75 
 public static final ArrayList < ItemStack > EMPTY _ LIST = new UnmodifiableArrayList ( Lists . newArrayList ( ) ) ; / / ToDo : Unqualify to List when possible { 1 . 8 } 
 
 / * * 
 @ @ - 348 , 6 + 348 , 44 @ @ public class OreDictionary 
 } 
 
 / * * 
 + * Retrieves the List of items that are registered to this ore type at this instant . 
 + * If the flag is TRUE , then it will create the list as empty if it did not exist . 
 + * 
 + * This option should be used by modders who are doing blanket scans in postInit . 
 + * It greatly reduces clutter in the OreDictionary is the responsible and proper 
 + * way to use the dictionary in a large number of cases . 
 + * 
 + * The other function above is utilized in OreRecipe and is required for the 
 + * operation of that code . 
 + * 
 + * @ param name The ore name , directly calls getOreID if the flag is TRUE 
 + * @ param alwaysCreateEntry Flag - should a new entry be created if empty 
 + * @ return An arraylist containing ItemStacks registered for this ore 
 + * / 
 + public static List < ItemStack > getOres ( String name , boolean alwaysCreateEntry ) 
 + { 
 + 	 if ( alwaysCreateEntry ) { 
 + 	 	 return getOres ( getOreID ( name ) ) ; 
 + 	 } 
 + 	 return nameToId . get ( name ) ! = null ? getOres ( getOreID ( name ) ) : EMPTY _ LIST ; 
 + } 
 + 
 + / * * 
 + * Returns whether or not an oreName exists in the dictionary . 
 + * This function can be used to safely query the Ore Dictionary without 
 + * adding needless clutter to the underlying map structure . 
 + * 
 + * Please use this when possible and appropriate . 
 + * 
 + * @ param name The ore name 
 + * @ return Whether or not that name is in the Ore Dictionary . 
 + * / 
 + public static boolean doesOreNameExist ( String name ) 
 + { 
 + 	 return nameToId . get ( name ) ! = null ; 
 + } 
 + 
 + / * * 
 * Retrieves a list of all unique ore names that are already registered . 
 * 
 * @ return All unique ore names that are currently registered .

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 index ea316ab . . 1330bad 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 + + + b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 @ @ - 295 , 7 + 295 , 7 @ @ public class OreDictionary 
 @ Deprecated / / Use getOreIds below for more accuracy 
 public static int getOreID ( ItemStack stack ) 
 { 
 - if ( stack = = null ) return - 1 ; 
 + if ( stack = = null | | stack . getItem ( ) = = null ) return - 1 ; 
 
 int id = Item . getIdFromItem ( stack . getItem ( ) ) ; 
 List < Integer > ids = stackToId . get ( id ) ; / / Try the wildcard first 
 @ @ - 315 , 7 + 315 , 7 @ @ public class OreDictionary 
 * / 
 public static int [ ] getOreIDs ( ItemStack stack ) 
 { 
 - if ( stack = = null ) return new int [ 0 ] ; 
 + if ( stack = = null | | stack . getItem ( ) = = null ) return new int [ 0 ] ; 
 
 Set < Integer > set = new HashSet < Integer > ( ) ; 
 
 @ @ - 335 , 8 + 335 , 8 @ @ public class OreDictionary 
 / * * 
 * Retrieves the ArrayList of items that are registered to this ore type . 
 * Creates the list as empty if it did not exist . 
 - * 
 - * The returned List is unmodifiable , but will be updated if a new ore 
 + * 
 + * The returned List is unmodifiable , but will be updated if a new ore 
 * is registered using registerOre 
 * 
 * @ param name The ore name , directly calls getOreID 
 @ @ - 360 , 8 + 360 , 8 @ @ public class OreDictionary 
 / * * 
 * Retrieves the ArrayList of items that are registered to this ore type . 
 * Creates the list as empty if it did not exist . 
 - * 
 - * Warning : In 1 . 8 , the return value will become a immutible list , 
 + * 
 + * Warning : In 1 . 8 , the return value will become a immutible list , 
 * and this function WILL NOT create the entry if the ID doesn ' t exist , 
 * IDs are intended to be internal OreDictionary things and modders 
 * should not ever code them in . 
 @ @ - 537 , 7 + 537 , 7 @ @ public class OreDictionary 
 public < T > T [ ] toArray ( T [ ] a ) { return list . toArray ( a ) ; } 
 public String toString ( ) { return list . toString ( ) ; } 
 public boolean containsAll ( Collection < ? > coll ) { return list . containsAll ( coll ) ; } 
 - 
 + 
 public E set ( int index , E element ) { throw new UnsupportedOperationException ( ) ; } 
 public void add ( int index , E element ) { throw new UnsupportedOperationException ( ) ; } 
 public E remove ( int index ) { throw new UnsupportedOperationException ( ) ; }
