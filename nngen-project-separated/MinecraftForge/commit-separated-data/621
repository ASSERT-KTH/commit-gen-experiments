BLEU SCORE: 0.046410334343489214

TEST MSG: Second pass at fixing ' Dissapearing Doors ' This now more robustly fixes ALL uses of get and has slight performance improvements for itterable states . Closes # 3139
GENERATED MSG: Automatically register BlockStates when block is initally registered , and clear the list when new snapshots are injected . Modders DO NOT touch the registry in Block directly . Closes # 537

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch b / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch <nl> deleted file mode 100644 <nl> index 4f02a5c . . 0000000 <nl> - - - a / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch <nl> + + + / dev / null <nl> @ @ - 1 , 16 + 0 , 0 @ @ <nl> - - - - . . / src - base / minecraft / net / minecraft / world / chunk / BlockStateContainer . java <nl> - + + + . . / src - work / minecraft / net / minecraft / world / chunk / BlockStateContainer . java <nl> - @ @ - 123 , 7 + 123 , 12 @ @ <nl> - <nl> - for ( int i = 0 ; i < 4096 ; + + i ) <nl> - { <nl> - - int j = Block . field _ 176229 _ d . func _ 148747 _ b ( this . func _ 186015 _ a ( i ) ) ; <nl> - + IBlockState state = this . func _ 186015 _ a ( i ) ; <nl> - + int j = Block . field _ 176229 _ d . func _ 148747 _ b ( state ) ; <nl> - + / / Forge : Because some blocks place weirdly to things that don ' t match serializeable states <nl> - + if ( j = = - 1 & & state ! = null ) <nl> - + j = Block . field _ 176229 _ d . func _ 148747 _ b ( state . func _ 177230 _ c ( ) . func _ 176203 _ a ( state . func _ 177230 _ c ( ) . func _ 176201 _ c ( state ) ) ) ; <nl> - + <nl> - int k = i & 15 ; <nl> - int l = i > > 8 & 15 ; <nl> - int i1 = i > > 4 & 15 ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 7d36b9f . . 438da4b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 290 , 12 + 290 , 23 @ @ public class GameData <nl> public void onAdd ( Block block , int blockId , Map < ResourceLocation , ? > slaves ) <nl> { <nl> ClearableObjectIntIdentityMap < IBlockState > blockstateMap = ( ClearableObjectIntIdentityMap < IBlockState > ) slaves . get ( BLOCKSTATE _ TO _ ID ) ; <nl> + <nl> + / / So , due to blocks having more in - world states then metadata allows , we have to turn the map into a semi - milti - bimap . <nl> + / / We can do this however because the implementation of the map is last set wins . So we can add all states , then fix the meta bimap . <nl> + / / Multiple states - > meta . But meta to CORRECT state . <nl> + <nl> + final boolean [ ] usedMeta = new boolean [ 16 ] ; / / Hold a list of known meta from all states . <nl> for ( IBlockState state : block . getBlockState ( ) . getValidStates ( ) ) <nl> { <nl> - final int meta = block . getMetaFromState ( state ) ; / / meta value the block assigns for the state <nl> - final int bsmeta = blockId < < 4 | meta ; / / computed blockstateid for that meta <nl> - final IBlockState blockState = block . getStateFromMeta ( meta ) ; / / state that the block assigns for the meta value <nl> - blockstateMap . put ( blockState , bsmeta ) ; / / store assigned state with computed blockstateid <nl> + final int meta = block . getMetaFromState ( state ) ; <nl> + blockstateMap . put ( state , blockId < < 4 | meta ) ; / / Add ALL the things ! <nl> + usedMeta [ meta ] = true ; <nl> + } <nl> + <nl> + for ( int meta = 0 ; meta < 16 ; meta + + ) <nl> + { <nl> + if ( usedMeta [ meta ] ) <nl> + blockstateMap . put ( block . getStateFromMeta ( meta ) , blockId < < 4 | meta ) ; / / Put the CORRECT thing ! <nl> } <nl> } <nl> <nl> @ @ - 329 , 7 + 340 , 20 @ @ public class GameData <nl> @ Override <nl> public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) <nl> { <nl> - final ClearableObjectIntIdentityMap < Block > idMap = new ClearableObjectIntIdentityMap < Block > ( ) ; <nl> + final ClearableObjectIntIdentityMap < IBlockState > idMap = new ClearableObjectIntIdentityMap < IBlockState > ( ) <nl> + { <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Override <nl> + public int get ( IBlockState key ) <nl> + { <nl> + Integer integer = ( Integer ) this . identityMap . get ( key ) ; <nl> + / / There are some cases where this map is queried to serialize a state that is valid , <nl> + / / but somehow not in this list , so attempt to get real metadata . Doing this hear saves us 7 patches <nl> + if ( integer = = null & & key ! = null ) <nl> + integer = this . identityMap . get ( key . getBlock ( ) . getStateFromMeta ( key . getBlock ( ) . getMetaFromState ( key ) ) ) ; <nl> + return integer = = null ? - 1 : integer . intValue ( ) ; <nl> + } <nl> + } ; <nl> ( ( Map < ResourceLocation , Object > ) slaveset ) . put ( BLOCKSTATE _ TO _ ID , idMap ) ; <nl> final HashBiMap < Block , Item > map = HashBiMap . create ( ) ; <nl> ( ( Map < ResourceLocation , Object > ) slaveset ) . put ( BLOCK _ TO _ ITEM , map ) ;
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / block / Block . java . patch b / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> index 2fc80de . . 60c590e 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / block / Block . java . patch <nl> @ @ - 1 , 15 + 1 , 18 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / block / Block . java <nl> + + + . . / src - work / minecraft / net / minecraft / block / Block . java <nl> - @ @ - 39 , 7 + 39 , 7 @ @ <nl> + @ @ - 39 , 8 + 39 , 9 @ @ <nl> public class Block <nl> { <nl> private static final ResourceLocation field _ 176230 _ a = new ResourceLocation ( " air " ) ; <nl> - public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = new RegistryNamespacedDefaultedByKey ( field _ 176230 _ a ) ; <nl> + - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; <nl> + public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = net . minecraftforge . fml . common . registry . GameData . getBlockRegistry ( ) ; <nl> - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; <nl> + + @ Deprecated / / Modders : DO NOT use this ! Use GameRegistry <nl> + + public static final ObjectIntIdentityMap field _ 176229 _ d = net . minecraftforge . fml . common . registry . GameData . getBlockStateIDMap ( ) ; <nl> private CreativeTabs field _ 149772 _ a ; <nl> public static final Block . SoundType field _ 149769 _ e = new Block . SoundType ( " stone " , 1 . 0F , 1 . 0F ) ; <nl> - @ @ - 124 , 6 + 124 , 9 @ @ <nl> + public static final Block . SoundType field _ 149766 _ f = new Block . SoundType ( " wood " , 1 . 0F , 1 . 0F ) ; <nl> + @ @ - 124 , 6 + 125 , 9 @ @ <nl> private String field _ 149770 _ b ; <nl> private static final String _ _ OBFID = " CL _ 00000199 " ; <nl> <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 02da755 . . 9ffb22a 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 26 , 9 + 26 , 11 @ @ import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> import net . minecraft . block . Block ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . ObjectIntIdentityMap ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 384 , 6 + 386 , 10 @ @ public class GameData { <nl> } <nl> } <nl> } <nl> + <nl> + / / Clear State map for it ' s ready for us to register below . <nl> + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; <nl> + <nl> / / process blocks and items in the world , blocks in the first pass , items in the second <nl> / / blocks need to be added first for proper ItemBlock handling <nl> for ( int pass = 0 ; pass < 2 ; pass + + ) <nl> @ @ - 484 , 6 + 490 , 17 @ @ public class GameData { <nl> Loader . instance ( ) . fireRemapEvent ( remaps ) ; <nl> / / The id map changed , ensure we apply object holders <nl> ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; <nl> + <nl> + / / Rebuild the state map for all blocks . TODO : Clean this up to a better system when Block . BLOCK _ STATE _ IDS is cleaned up . <nl> + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; <nl> + for ( Block block : getMain ( ) . iBlockRegistry . typeSafeIterable ( ) ) <nl> + { <nl> + int id = getMain ( ) . iBlockRegistry . getId ( block ) ; <nl> + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) <nl> + { <nl> + GameData . BLOCKSTATE _ TO _ ID . put ( state , id < < 4 | block . getMetaFromState ( state ) ) ; <nl> + } <nl> + } <nl> return ImmutableList . of ( ) ; <nl> } <nl> <nl> @ @ - 789 , 6 + 806 , 12 @ @ public class GameData { <nl> <nl> useSlot ( blockId ) ; <nl> ( ( RegistryDelegate . Delegate < Block > ) block . delegate ) . setName ( name ) ; <nl> + <nl> + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) <nl> + { <nl> + GameData . BLOCKSTATE _ TO _ ID . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; <nl> + } <nl> + <nl> return blockId ; <nl> } <nl> <nl> @ @ - 933 , 4 + 956 , 21 @ @ public class GameData { <nl> { <nl> return BLOCK _ TO _ ITEM ; <nl> } <nl> + <nl> + private static ClearableObjectIntIdentityMap BLOCKSTATE _ TO _ ID = new ClearableObjectIntIdentityMap ( ) ; <nl> + / / Internal : DO NOT USE , will change without warning . <nl> + public static ObjectIntIdentityMap getBlockStateIDMap ( ) <nl> + { <nl> + return BLOCKSTATE _ TO _ ID ; <nl> + } <nl> + <nl> + / / Lets us clear the map so we can rebuild it . <nl> + private static class ClearableObjectIntIdentityMap extends ObjectIntIdentityMap <nl> + { <nl> + private void clear ( ) <nl> + { <nl> + this . field _ 148749 _ a . clear ( ) ; <nl> + this . field _ 148748 _ b . clear ( ) ; <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch b / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch 
 deleted file mode 100644 
 index 4f02a5c . . 0000000 
 - - - a / patches / minecraft / net / minecraft / world / chunk / BlockStateContainer . java . patch 
 + + + / dev / null 
 @ @ - 1 , 16 + 0 , 0 @ @ 
 - - - - . . / src - base / minecraft / net / minecraft / world / chunk / BlockStateContainer . java 
 - + + + . . / src - work / minecraft / net / minecraft / world / chunk / BlockStateContainer . java 
 - @ @ - 123 , 7 + 123 , 12 @ @ 
 - 
 - for ( int i = 0 ; i < 4096 ; + + i ) 
 - { 
 - - int j = Block . field _ 176229 _ d . func _ 148747 _ b ( this . func _ 186015 _ a ( i ) ) ; 
 - + IBlockState state = this . func _ 186015 _ a ( i ) ; 
 - + int j = Block . field _ 176229 _ d . func _ 148747 _ b ( state ) ; 
 - + / / Forge : Because some blocks place weirdly to things that don ' t match serializeable states 
 - + if ( j = = - 1 & & state ! = null ) 
 - + j = Block . field _ 176229 _ d . func _ 148747 _ b ( state . func _ 177230 _ c ( ) . func _ 176203 _ a ( state . func _ 177230 _ c ( ) . func _ 176201 _ c ( state ) ) ) ; 
 - + 
 - int k = i & 15 ; 
 - int l = i > > 8 & 15 ; 
 - int i1 = i > > 4 & 15 ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 7d36b9f . . 438da4b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 290 , 12 + 290 , 23 @ @ public class GameData 
 public void onAdd ( Block block , int blockId , Map < ResourceLocation , ? > slaves ) 
 { 
 ClearableObjectIntIdentityMap < IBlockState > blockstateMap = ( ClearableObjectIntIdentityMap < IBlockState > ) slaves . get ( BLOCKSTATE _ TO _ ID ) ; 
 + 
 + / / So , due to blocks having more in - world states then metadata allows , we have to turn the map into a semi - milti - bimap . 
 + / / We can do this however because the implementation of the map is last set wins . So we can add all states , then fix the meta bimap . 
 + / / Multiple states - > meta . But meta to CORRECT state . 
 + 
 + final boolean [ ] usedMeta = new boolean [ 16 ] ; / / Hold a list of known meta from all states . 
 for ( IBlockState state : block . getBlockState ( ) . getValidStates ( ) ) 
 { 
 - final int meta = block . getMetaFromState ( state ) ; / / meta value the block assigns for the state 
 - final int bsmeta = blockId < < 4 | meta ; / / computed blockstateid for that meta 
 - final IBlockState blockState = block . getStateFromMeta ( meta ) ; / / state that the block assigns for the meta value 
 - blockstateMap . put ( blockState , bsmeta ) ; / / store assigned state with computed blockstateid 
 + final int meta = block . getMetaFromState ( state ) ; 
 + blockstateMap . put ( state , blockId < < 4 | meta ) ; / / Add ALL the things ! 
 + usedMeta [ meta ] = true ; 
 + } 
 + 
 + for ( int meta = 0 ; meta < 16 ; meta + + ) 
 + { 
 + if ( usedMeta [ meta ] ) 
 + blockstateMap . put ( block . getStateFromMeta ( meta ) , blockId < < 4 | meta ) ; / / Put the CORRECT thing ! 
 } 
 } 
 
 @ @ - 329 , 7 + 340 , 20 @ @ public class GameData 
 @ Override 
 public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) 
 { 
 - final ClearableObjectIntIdentityMap < Block > idMap = new ClearableObjectIntIdentityMap < Block > ( ) ; 
 + final ClearableObjectIntIdentityMap < IBlockState > idMap = new ClearableObjectIntIdentityMap < IBlockState > ( ) 
 + { 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Override 
 + public int get ( IBlockState key ) 
 + { 
 + Integer integer = ( Integer ) this . identityMap . get ( key ) ; 
 + / / There are some cases where this map is queried to serialize a state that is valid , 
 + / / but somehow not in this list , so attempt to get real metadata . Doing this hear saves us 7 patches 
 + if ( integer = = null & & key ! = null ) 
 + integer = this . identityMap . get ( key . getBlock ( ) . getStateFromMeta ( key . getBlock ( ) . getMetaFromState ( key ) ) ) ; 
 + return integer = = null ? - 1 : integer . intValue ( ) ; 
 + } 
 + } ; 
 ( ( Map < ResourceLocation , Object > ) slaveset ) . put ( BLOCKSTATE _ TO _ ID , idMap ) ; 
 final HashBiMap < Block , Item > map = HashBiMap . create ( ) ; 
 ( ( Map < ResourceLocation , Object > ) slaveset ) . put ( BLOCK _ TO _ ITEM , map ) ;

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / block / Block . java . patch b / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 index 2fc80de . . 60c590e 100644 
 - - - a / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / block / Block . java . patch 
 @ @ - 1 , 15 + 1 , 18 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / block / Block . java 
 + + + . . / src - work / minecraft / net / minecraft / block / Block . java 
 - @ @ - 39 , 7 + 39 , 7 @ @ 
 + @ @ - 39 , 8 + 39 , 9 @ @ 
 public class Block 
 { 
 private static final ResourceLocation field _ 176230 _ a = new ResourceLocation ( " air " ) ; 
 - public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = new RegistryNamespacedDefaultedByKey ( field _ 176230 _ a ) ; 
 + - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; 
 + public static final RegistryNamespacedDefaultedByKey field _ 149771 _ c = net . minecraftforge . fml . common . registry . GameData . getBlockRegistry ( ) ; 
 - public static final ObjectIntIdentityMap field _ 176229 _ d = new ObjectIntIdentityMap ( ) ; 
 + + @ Deprecated / / Modders : DO NOT use this ! Use GameRegistry 
 + + public static final ObjectIntIdentityMap field _ 176229 _ d = net . minecraftforge . fml . common . registry . GameData . getBlockStateIDMap ( ) ; 
 private CreativeTabs field _ 149772 _ a ; 
 public static final Block . SoundType field _ 149769 _ e = new Block . SoundType ( " stone " , 1 . 0F , 1 . 0F ) ; 
 - @ @ - 124 , 6 + 124 , 9 @ @ 
 + public static final Block . SoundType field _ 149766 _ f = new Block . SoundType ( " wood " , 1 . 0F , 1 . 0F ) ; 
 + @ @ - 124 , 6 + 125 , 9 @ @ 
 private String field _ 149770 _ b ; 
 private static final String _ _ OBFID = " CL _ 00000199 " ; 
 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 02da755 . . 9ffb22a 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 26 , 9 + 26 , 11 @ @ import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 import net . minecraft . block . Block ; 
 + import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . ObjectIntIdentityMap ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 384 , 6 + 386 , 10 @ @ public class GameData { 
 } 
 } 
 } 
 + 
 + / / Clear State map for it ' s ready for us to register below . 
 + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; 
 + 
 / / process blocks and items in the world , blocks in the first pass , items in the second 
 / / blocks need to be added first for proper ItemBlock handling 
 for ( int pass = 0 ; pass < 2 ; pass + + ) 
 @ @ - 484 , 6 + 490 , 17 @ @ public class GameData { 
 Loader . instance ( ) . fireRemapEvent ( remaps ) ; 
 / / The id map changed , ensure we apply object holders 
 ObjectHolderRegistry . INSTANCE . applyObjectHolders ( ) ; 
 + 
 + / / Rebuild the state map for all blocks . TODO : Clean this up to a better system when Block . BLOCK _ STATE _ IDS is cleaned up . 
 + GameData . BLOCKSTATE _ TO _ ID . clear ( ) ; 
 + for ( Block block : getMain ( ) . iBlockRegistry . typeSafeIterable ( ) ) 
 + { 
 + int id = getMain ( ) . iBlockRegistry . getId ( block ) ; 
 + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) 
 + { 
 + GameData . BLOCKSTATE _ TO _ ID . put ( state , id < < 4 | block . getMetaFromState ( state ) ) ; 
 + } 
 + } 
 return ImmutableList . of ( ) ; 
 } 
 
 @ @ - 789 , 6 + 806 , 12 @ @ public class GameData { 
 
 useSlot ( blockId ) ; 
 ( ( RegistryDelegate . Delegate < Block > ) block . delegate ) . setName ( name ) ; 
 + 
 + for ( IBlockState state : ( ( List < IBlockState > ) block . getBlockState ( ) . getValidStates ( ) ) ) 
 + { 
 + GameData . BLOCKSTATE _ TO _ ID . put ( state , blockId < < 4 | block . getMetaFromState ( state ) ) ; 
 + } 
 + 
 return blockId ; 
 } 
 
 @ @ - 933 , 4 + 956 , 21 @ @ public class GameData { 
 { 
 return BLOCK _ TO _ ITEM ; 
 } 
 + 
 + private static ClearableObjectIntIdentityMap BLOCKSTATE _ TO _ ID = new ClearableObjectIntIdentityMap ( ) ; 
 + / / Internal : DO NOT USE , will change without warning . 
 + public static ObjectIntIdentityMap getBlockStateIDMap ( ) 
 + { 
 + return BLOCKSTATE _ TO _ ID ; 
 + } 
 + 
 + / / Lets us clear the map so we can rebuild it . 
 + private static class ClearableObjectIntIdentityMap extends ObjectIntIdentityMap 
 + { 
 + private void clear ( ) 
 + { 
 + this . field _ 148749 _ a . clear ( ) ; 
 + this . field _ 148748 _ b . clear ( ) ; 
 + } 
 + } 
 }
