BLEU SCORE: 4.559409827772581E-4

TEST MSG: Command fixups
GENERATED MSG: Fixed hard references in WorldGenBigTree and ForgeCommand that caused worlds to leak in the client .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> index bd2b2eb . . 1f133aa 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> @ @ - 17 , 12 + 17 , 6 @ @ import net . minecraftforge . server . ForgeTimeTracker ; <nl> public class ForgeCommand extends CommandBase { <nl> <nl> private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; <nl> - private WeakReference < MinecraftServer > server ; <nl> - <nl> - public ForgeCommand ( MinecraftServer server ) <nl> - { <nl> - this . server = new WeakReference < MinecraftServer > ( server ) ; <nl> - } <nl> <nl> @ Override <nl> public String getCommandName ( ) <nl> @ @ - 42 , 7 + 36 , 7 @ @ public class ForgeCommand extends CommandBase { <nl> return 2 ; <nl> } <nl> @ Override <nl> - public void processCommand ( ICommandSender sender , String [ ] args ) throws CommandException <nl> + public void func _ 184881 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> { <nl> if ( args . length = = 0 ) <nl> { <nl> @ @ - 54 , 15 + 48 , 15 @ @ public class ForgeCommand extends CommandBase { <nl> } <nl> else if ( " tps " . equals ( args [ 0 ] ) ) <nl> { <nl> - displayTPS ( sender , args ) ; <nl> + displayTPS ( server , sender , args ) ; <nl> } <nl> else if ( " tpslog " . equals ( args [ 0 ] ) ) <nl> { <nl> - doTPSLog ( sender , args ) ; <nl> + doTPSLog ( server , sender , args ) ; <nl> } <nl> else if ( " track " . equals ( args [ 0 ] ) ) <nl> { <nl> - handleTracking ( sender , args ) ; <nl> + handleTracking ( server , sender , args ) ; <nl> } <nl> else <nl> { <nl> @ @ - 71 , 7 + 65 , 7 @ @ public class ForgeCommand extends CommandBase { <nl> } <nl> <nl> @ Override <nl> - public List < String > addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) <nl> + public List < String > func _ 184883 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args , BlockPos pos ) <nl> { <nl> if ( args . length = = 1 ) <nl> { <nl> @ @ - 80 , 7 + 74 , 7 @ @ public class ForgeCommand extends CommandBase { <nl> else if ( args . length = = 2 ) <nl> { <nl> if ( " tps " . equals ( args [ 0 ] ) ) { <nl> - return getListOfStringsMatchingLastWord ( args , getServer ( ) . worldTickTimes . keySet ( ) ) ; <nl> + return getListOfStringsMatchingLastWord ( args , server . worldTickTimes . keySet ( ) ) ; <nl> } <nl> else if ( " track " . equals ( args [ 0 ] ) ) <nl> { <nl> @ @ - 90 , 7 + 84 , 7 @ @ public class ForgeCommand extends CommandBase { <nl> return null ; <nl> } <nl> <nl> - private void handleTracking ( ICommandSender sender , String [ ] args ) throws CommandException <nl> + private void handleTracking ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> { <nl> if ( args . length ! = 3 ) <nl> { <nl> @ @ - 101 , 7 + 95 , 7 @ @ public class ForgeCommand extends CommandBase { <nl> <nl> if ( " te " . equals ( type ) ) <nl> { <nl> - doTurnOnTileEntityTracking ( sender , duration ) ; <nl> + doTurnOnTileEntityTracking ( server , sender , duration ) ; <nl> } <nl> else <nl> { <nl> @ @ - 109 , 19 + 103 , 19 @ @ public class ForgeCommand extends CommandBase { <nl> } <nl> } <nl> <nl> - private void doTurnOnTileEntityTracking ( ICommandSender sender , int duration ) <nl> + private void doTurnOnTileEntityTracking ( MinecraftServer server , ICommandSender sender , int duration ) <nl> { <nl> ForgeTimeTracker . tileEntityTrackingDuration = duration ; <nl> ForgeTimeTracker . tileEntityTracking = true ; <nl> sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tracking . te . enabled " , duration ) ) ; <nl> } <nl> <nl> - private void doTPSLog ( ICommandSender sender , String [ ] args ) <nl> + private void doTPSLog ( MinecraftServer server , ICommandSender sender , String [ ] args ) <nl> { <nl> <nl> } <nl> <nl> - private void displayTPS ( ICommandSender sender , String [ ] args ) throws CommandException <nl> + private void displayTPS ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> { <nl> int dim = 0 ; <nl> boolean summary = true ; <nl> @ @ - 134 , 17 + 128 , 17 @ @ public class ForgeCommand extends CommandBase { <nl> { <nl> for ( Integer dimId : DimensionManager . getIDs ( ) ) <nl> { <nl> - double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; <nl> + double worldTickTime = ForgeCommand . mean ( server . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; <nl> double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; <nl> sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dimId ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; <nl> } <nl> - double meanTickTime = ForgeCommand . mean ( this . getServer ( ) . tickTimeArray ) * 1 . 0E - 6D ; <nl> + double meanTickTime = ForgeCommand . mean ( server . tickTimeArray ) * 1 . 0E - 6D ; <nl> double meanTPS = Math . min ( 1000 . 0 / meanTickTime , 20 ) ; <nl> sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , " Overall " , timeFormatter . format ( meanTickTime ) , timeFormatter . format ( meanTPS ) ) ) ; <nl> } <nl> else <nl> { <nl> - double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; <nl> + double worldTickTime = ForgeCommand . mean ( server . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; <nl> double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; <nl> sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dim ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; <nl> } <nl> @ @ - 160 , 9 + 154 , 4 @ @ public class ForgeCommand extends CommandBase { <nl> <nl> return sum / values . length ; <nl> } <nl> - <nl> - private MinecraftServer getServer ( ) <nl> - { <nl> - return this . server . get ( ) ; <nl> - } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java b / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java <nl> index 89ab4ac . . 9b46bc6 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java <nl> + + + b / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java <nl> @ @ - 47 , 8 + 47 , 8 @ @ public final class ConsoleCommandCompleter implements Completer <nl> @ Override <nl> public List < String > call ( ) throws Exception <nl> { <nl> - return ConsoleCommandCompleter . this . server . getTabCompletions ( ConsoleCommandCompleter . this . server , input , <nl> - ConsoleCommandCompleter . this . server . getPosition ( ) ) ; <nl> + return ConsoleCommandCompleter . this . server . func _ 184104 _ a ( ConsoleCommandCompleter . this . server , input , <nl> + ConsoleCommandCompleter . this . server . getPosition ( ) , false / * we ' re not a command block * / ) ; <nl> } <nl> } ) ; <nl> try
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch b / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch <nl> index 9b8c327 . . 765db1e 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch <nl> @ @ - 41 , 3 + 41 , 19 @ @ <nl> { <nl> return false ; <nl> } <nl> + @ @ - 443 , 6 + 446 , 7 @ @ <nl> + <nl> + if ( ! this . func _ 76497 _ e ( ) ) <nl> + { <nl> + + this . field _ 76506 _ c = null ; / / Fix vanilla Mem leak , holds latest world <nl> + return false ; <nl> + } <nl> + else <nl> + @ @ - 451 , 6 + 455 , 7 @ @ <nl> + this . func _ 76498 _ b ( ) ; <nl> + this . func _ 76499 _ c ( ) ; <nl> + this . func _ 76494 _ d ( ) ; <nl> + + this . field _ 76506 _ c = null ; / / Fix vanilla Mem leak , holds latest world <nl> + return true ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> index c71d172 . . 01b7260 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java <nl> @ @ - 1 , 5 + 1 , 6 @ @ <nl> package net . minecraftforge . server . command ; <nl> <nl> + import java . lang . ref . WeakReference ; <nl> import java . text . DecimalFormat ; <nl> import net . minecraft . command . CommandBase ; <nl> import net . minecraft . command . ICommandSender ; <nl> @ @ - 11 , 13 + 12 , 13 @ @ import net . minecraftforge . server . ForgeTimeTracker ; <nl> <nl> public class ForgeCommand extends CommandBase { <nl> <nl> - private MinecraftServer server ; <nl> + private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; <nl> + private WeakReference < MinecraftServer > server ; <nl> <nl> public ForgeCommand ( MinecraftServer server ) <nl> { <nl> - this . server = server ; <nl> + this . server = new WeakReference ( server ) ; <nl> } <nl> - private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; <nl> <nl> @ Override <nl> public String getCommandName ( ) <nl> @ @ - 109 , 17 + 110 , 17 @ @ public class ForgeCommand extends CommandBase { <nl> { <nl> for ( Integer dimId : DimensionManager . getIDs ( ) ) <nl> { <nl> - double worldTickTime = ForgeCommand . mean ( this . server . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; <nl> + double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; <nl> double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; <nl> sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dimId ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; <nl> } <nl> - double meanTickTime = ForgeCommand . mean ( this . server . tickTimeArray ) * 1 . 0E - 6D ; <nl> + double meanTickTime = ForgeCommand . mean ( this . getServer ( ) . tickTimeArray ) * 1 . 0E - 6D ; <nl> double meanTPS = Math . min ( 1000 . 0 / meanTickTime , 20 ) ; <nl> sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , " Overall " , timeFormatter . format ( meanTickTime ) , timeFormatter . format ( meanTPS ) ) ) ; <nl> } <nl> else <nl> { <nl> - double worldTickTime = ForgeCommand . mean ( this . server . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; <nl> + double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; <nl> double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; <nl> sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dim ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; <nl> } <nl> @ @ - 135 , 4 + 136 , 9 @ @ public class ForgeCommand extends CommandBase { <nl> <nl> return sum / values . length ; <nl> } <nl> + <nl> + private MinecraftServer getServer ( ) <nl> + { <nl> + return this . server . get ( ) ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 index bd2b2eb . . 1f133aa 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 @ @ - 17 , 12 + 17 , 6 @ @ import net . minecraftforge . server . ForgeTimeTracker ; 
 public class ForgeCommand extends CommandBase { 
 
 private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; 
 - private WeakReference < MinecraftServer > server ; 
 - 
 - public ForgeCommand ( MinecraftServer server ) 
 - { 
 - this . server = new WeakReference < MinecraftServer > ( server ) ; 
 - } 
 
 @ Override 
 public String getCommandName ( ) 
 @ @ - 42 , 7 + 36 , 7 @ @ public class ForgeCommand extends CommandBase { 
 return 2 ; 
 } 
 @ Override 
 - public void processCommand ( ICommandSender sender , String [ ] args ) throws CommandException 
 + public void func _ 184881 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 { 
 if ( args . length = = 0 ) 
 { 
 @ @ - 54 , 15 + 48 , 15 @ @ public class ForgeCommand extends CommandBase { 
 } 
 else if ( " tps " . equals ( args [ 0 ] ) ) 
 { 
 - displayTPS ( sender , args ) ; 
 + displayTPS ( server , sender , args ) ; 
 } 
 else if ( " tpslog " . equals ( args [ 0 ] ) ) 
 { 
 - doTPSLog ( sender , args ) ; 
 + doTPSLog ( server , sender , args ) ; 
 } 
 else if ( " track " . equals ( args [ 0 ] ) ) 
 { 
 - handleTracking ( sender , args ) ; 
 + handleTracking ( server , sender , args ) ; 
 } 
 else 
 { 
 @ @ - 71 , 7 + 65 , 7 @ @ public class ForgeCommand extends CommandBase { 
 } 
 
 @ Override 
 - public List < String > addTabCompletionOptions ( ICommandSender sender , String [ ] args , BlockPos pos ) 
 + public List < String > func _ 184883 _ a ( MinecraftServer server , ICommandSender sender , String [ ] args , BlockPos pos ) 
 { 
 if ( args . length = = 1 ) 
 { 
 @ @ - 80 , 7 + 74 , 7 @ @ public class ForgeCommand extends CommandBase { 
 else if ( args . length = = 2 ) 
 { 
 if ( " tps " . equals ( args [ 0 ] ) ) { 
 - return getListOfStringsMatchingLastWord ( args , getServer ( ) . worldTickTimes . keySet ( ) ) ; 
 + return getListOfStringsMatchingLastWord ( args , server . worldTickTimes . keySet ( ) ) ; 
 } 
 else if ( " track " . equals ( args [ 0 ] ) ) 
 { 
 @ @ - 90 , 7 + 84 , 7 @ @ public class ForgeCommand extends CommandBase { 
 return null ; 
 } 
 
 - private void handleTracking ( ICommandSender sender , String [ ] args ) throws CommandException 
 + private void handleTracking ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 { 
 if ( args . length ! = 3 ) 
 { 
 @ @ - 101 , 7 + 95 , 7 @ @ public class ForgeCommand extends CommandBase { 
 
 if ( " te " . equals ( type ) ) 
 { 
 - doTurnOnTileEntityTracking ( sender , duration ) ; 
 + doTurnOnTileEntityTracking ( server , sender , duration ) ; 
 } 
 else 
 { 
 @ @ - 109 , 19 + 103 , 19 @ @ public class ForgeCommand extends CommandBase { 
 } 
 } 
 
 - private void doTurnOnTileEntityTracking ( ICommandSender sender , int duration ) 
 + private void doTurnOnTileEntityTracking ( MinecraftServer server , ICommandSender sender , int duration ) 
 { 
 ForgeTimeTracker . tileEntityTrackingDuration = duration ; 
 ForgeTimeTracker . tileEntityTracking = true ; 
 sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tracking . te . enabled " , duration ) ) ; 
 } 
 
 - private void doTPSLog ( ICommandSender sender , String [ ] args ) 
 + private void doTPSLog ( MinecraftServer server , ICommandSender sender , String [ ] args ) 
 { 
 
 } 
 
 - private void displayTPS ( ICommandSender sender , String [ ] args ) throws CommandException 
 + private void displayTPS ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 { 
 int dim = 0 ; 
 boolean summary = true ; 
 @ @ - 134 , 17 + 128 , 17 @ @ public class ForgeCommand extends CommandBase { 
 { 
 for ( Integer dimId : DimensionManager . getIDs ( ) ) 
 { 
 - double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; 
 + double worldTickTime = ForgeCommand . mean ( server . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; 
 double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; 
 sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dimId ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; 
 } 
 - double meanTickTime = ForgeCommand . mean ( this . getServer ( ) . tickTimeArray ) * 1 . 0E - 6D ; 
 + double meanTickTime = ForgeCommand . mean ( server . tickTimeArray ) * 1 . 0E - 6D ; 
 double meanTPS = Math . min ( 1000 . 0 / meanTickTime , 20 ) ; 
 sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , " Overall " , timeFormatter . format ( meanTickTime ) , timeFormatter . format ( meanTPS ) ) ) ; 
 } 
 else 
 { 
 - double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; 
 + double worldTickTime = ForgeCommand . mean ( server . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; 
 double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; 
 sender . addChatMessage ( new TextComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dim ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; 
 } 
 @ @ - 160 , 9 + 154 , 4 @ @ public class ForgeCommand extends CommandBase { 
 
 return sum / values . length ; 
 } 
 - 
 - private MinecraftServer getServer ( ) 
 - { 
 - return this . server . get ( ) ; 
 - } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java b / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java 
 index 89ab4ac . . 9b46bc6 100644 
 - - - a / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java 
 + + + b / src / main / java / net / minecraftforge / server / console / ConsoleCommandCompleter . java 
 @ @ - 47 , 8 + 47 , 8 @ @ public final class ConsoleCommandCompleter implements Completer 
 @ Override 
 public List < String > call ( ) throws Exception 
 { 
 - return ConsoleCommandCompleter . this . server . getTabCompletions ( ConsoleCommandCompleter . this . server , input , 
 - ConsoleCommandCompleter . this . server . getPosition ( ) ) ; 
 + return ConsoleCommandCompleter . this . server . func _ 184104 _ a ( ConsoleCommandCompleter . this . server , input , 
 + ConsoleCommandCompleter . this . server . getPosition ( ) , false / * we ' re not a command block * / ) ; 
 } 
 } ) ; 
 try

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch b / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch 
 index 9b8c327 . . 765db1e 100644 
 - - - a / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / gen / feature / WorldGenBigTree . java . patch 
 @ @ - 41 , 3 + 41 , 19 @ @ 
 { 
 return false ; 
 } 
 + @ @ - 443 , 6 + 446 , 7 @ @ 
 + 
 + if ( ! this . func _ 76497 _ e ( ) ) 
 + { 
 + + this . field _ 76506 _ c = null ; / / Fix vanilla Mem leak , holds latest world 
 + return false ; 
 + } 
 + else 
 + @ @ - 451 , 6 + 455 , 7 @ @ 
 + this . func _ 76498 _ b ( ) ; 
 + this . func _ 76499 _ c ( ) ; 
 + this . func _ 76494 _ d ( ) ; 
 + + this . field _ 76506 _ c = null ; / / Fix vanilla Mem leak , holds latest world 
 + return true ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 index c71d172 . . 01b7260 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 + + + b / src / main / java / net / minecraftforge / server / command / ForgeCommand . java 
 @ @ - 1 , 5 + 1 , 6 @ @ 
 package net . minecraftforge . server . command ; 
 
 + import java . lang . ref . WeakReference ; 
 import java . text . DecimalFormat ; 
 import net . minecraft . command . CommandBase ; 
 import net . minecraft . command . ICommandSender ; 
 @ @ - 11 , 13 + 12 , 13 @ @ import net . minecraftforge . server . ForgeTimeTracker ; 
 
 public class ForgeCommand extends CommandBase { 
 
 - private MinecraftServer server ; 
 + private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; 
 + private WeakReference < MinecraftServer > server ; 
 
 public ForgeCommand ( MinecraftServer server ) 
 { 
 - this . server = server ; 
 + this . server = new WeakReference ( server ) ; 
 } 
 - private static final DecimalFormat timeFormatter = new DecimalFormat ( " # # # # # # # # 0 . 000 " ) ; 
 
 @ Override 
 public String getCommandName ( ) 
 @ @ - 109 , 17 + 110 , 17 @ @ public class ForgeCommand extends CommandBase { 
 { 
 for ( Integer dimId : DimensionManager . getIDs ( ) ) 
 { 
 - double worldTickTime = ForgeCommand . mean ( this . server . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; 
 + double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dimId ) ) * 1 . 0E - 6D ; 
 double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; 
 sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dimId ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; 
 } 
 - double meanTickTime = ForgeCommand . mean ( this . server . tickTimeArray ) * 1 . 0E - 6D ; 
 + double meanTickTime = ForgeCommand . mean ( this . getServer ( ) . tickTimeArray ) * 1 . 0E - 6D ; 
 double meanTPS = Math . min ( 1000 . 0 / meanTickTime , 20 ) ; 
 sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , " Overall " , timeFormatter . format ( meanTickTime ) , timeFormatter . format ( meanTPS ) ) ) ; 
 } 
 else 
 { 
 - double worldTickTime = ForgeCommand . mean ( this . server . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; 
 + double worldTickTime = ForgeCommand . mean ( this . getServer ( ) . worldTickTimes . get ( dim ) ) * 1 . 0E - 6D ; 
 double worldTPS = Math . min ( 1000 . 0 / worldTickTime , 20 ) ; 
 sender . addChatMessage ( new ChatComponentTranslation ( " commands . forge . tps . summary " , String . format ( " Dim % d " , dim ) , timeFormatter . format ( worldTickTime ) , timeFormatter . format ( worldTPS ) ) ) ; 
 } 
 @ @ - 135 , 4 + 136 , 9 @ @ public class ForgeCommand extends CommandBase { 
 
 return sum / values . length ; 
 } 
 + 
 + private MinecraftServer getServer ( ) 
 + { 
 + return this . server . get ( ) ; 
 + } 
 }
