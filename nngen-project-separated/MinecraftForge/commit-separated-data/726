BLEU SCORE: 0.019146030690102508

TEST MSG: Expose a central place to access all of Vanilla and Forge ' s registries using the new registry API .
GENERATED MSG: OK , this is finally actually working , I think . . .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> index d92e7fc . . 397266b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkCheckHandler ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> import net . minecraftforge . fml . common . registry . VillagerRegistry ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> @ @ - 84 , 8 + 85 , 9 @ @ public final class FMLContainer extends DummyModContainer implements WorldAccess <nl> @ Subscribe <nl> public void modPreinitialization ( FMLPreInitializationEvent evt ) <nl> { <nl> - / / Initialize the villager registry <nl> - VillagerRegistry . instance ( ) ; <nl> + / / Initialize all Forge / Vanilla registries { invoke the static init ) <nl> + if ( ForgeRegistries . ITEMS = = null ) <nl> + throw new RuntimeException ( " Something horrible went wrong in init , ForgeRegistres didn ' t create . . . " ) ; <nl> } <nl> <nl> @ NetworkCheckHandler <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java b / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java <nl> new file mode 100644 <nl> index 0000000 . . 74917b1 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . enchantment . Enchantment ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . potion . Potion ; <nl> + import net . minecraft . potion . PotionType ; <nl> + import net . minecraft . util . SoundEvent ; <nl> + import net . minecraft . world . biome . BiomeGenBase ; <nl> + import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; <nl> + <nl> + / * * <nl> + * A class that exposes static references to all vanilla and Forge registries . <nl> + * Created to have a central place to access the registries directly if modders need . <nl> + * It is still advised that if you are registering things to go through { @ link GameRegistry . register } but queries and iterations can use this . <nl> + * / <nl> + public class ForgeRegistries <nl> + { <nl> + static { init ( ) ; } / / This must be above the fields so we guarantee it ' s run before findRegistry is called . Yay static inializers <nl> + <nl> + public static final IForgeRegistry < Block > BLOCKS = GameRegistry . findRegistry ( Block . class ) ; <nl> + public static final IForgeRegistry < Item > ITEMS = GameRegistry . findRegistry ( Item . class ) ; <nl> + public static final IForgeRegistry < Potion > POTIONS = GameRegistry . findRegistry ( Potion . class ) ; <nl> + public static final IForgeRegistry < BiomeGenBase > BIOMES = GameRegistry . findRegistry ( BiomeGenBase . class ) ; <nl> + public static final IForgeRegistry < SoundEvent > SOUND _ EVENTS = GameRegistry . findRegistry ( SoundEvent . class ) ; <nl> + public static final IForgeRegistry < PotionType > POTION _ TYPES = GameRegistry . findRegistry ( PotionType . class ) ; <nl> + public static final IForgeRegistry < Enchantment > ENCHANTMENTS = GameRegistry . findRegistry ( Enchantment . class ) ; <nl> + public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = GameRegistry . findRegistry ( VillagerProfession . class ) ; <nl> + <nl> + <nl> + / * * <nl> + * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . <nl> + * / <nl> + private static void init ( ) <nl> + { <nl> + GameData . getMain ( ) ; <nl> + VillagerRegistry . instance ( ) ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index ab0d43e . . 232e605 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 185 , 6 + 185 , 19 @ @ public class GameRegistry <nl> } <nl> <nl> / * * <nl> + * Retrieves the registry associated with this super class type . <nl> + * If the return is non - null it is HIGHLY recommended that modders cache this <nl> + * value as the return will never change for a given type in a single run of Minecraft once set . <nl> + * <nl> + * @ param registryType The base class of items in this registry . <nl> + * @ return The registry , Null if none is registered . <nl> + * / <nl> + public static < K extends IForgeRegistryEntry < K > > IForgeRegistry < K > findRegistry ( Class < K > registryType ) <nl> + { <nl> + return PersistentRegistryManager . findRegistryByType ( registryType ) ; <nl> + } <nl> + <nl> + / * * <nl> * Add a forced persistent substitution alias for the block or item to another block or item . This will have <nl> * the effect of using the substituted block or item instead of the original , where ever it is <nl> * referenced . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 03e2257 . . 0001b42 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 152 , 6 + 152 , 11 @ @ public class PersistentRegistryManager <nl> return registry ; <nl> } <nl> <nl> + static < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > findRegistryByType ( Class < V > registryType ) <nl> + { <nl> + return PersistentRegistry . ACTIVE . getRegistry ( registryType ) ; <nl> + } <nl> + <nl> <nl> public static List < String > injectSnapshot ( GameDataSnapshot snapshot , boolean injectFrozenData , boolean isLocalWorld ) <nl> {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> index 0236046 . . bf2fd34 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java <nl> @ @ - 32 , 10 + 32 , 12 @ @ import net . minecraftforge . fml . client . FMLFileResourcePack ; <nl> import net . minecraftforge . fml . client . FMLFolderResourcePack ; <nl> import net . minecraftforge . fml . common . asm . FMLSanityChecker ; <nl> import net . minecraftforge . fml . common . event . FMLConstructionEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkCheckHandler ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . common . registry . VillagerRegistry ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 84 , 6 + 86 , 13 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai <nl> FMLNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; <nl> } <nl> <nl> + @ Subscribe <nl> + public void modPreinitialization ( FMLPreInitializationEvent evt ) <nl> + { <nl> + / / Initialize the villager registry <nl> + VillagerRegistry . instance ( ) ; <nl> + } <nl> + <nl> @ NetworkCheckHandler <nl> public boolean checkModLists ( Map < String , String > modList , Side side ) <nl> { <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index f1f0ee3 . . 7fd1bca 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 52 , 6 + 52 , 7 @ @ import com . google . common . base . Joiner . MapJoiner ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBasedTable ; <nl> import com . google . common . collect . HashBiMap ; <nl> + import com . google . common . collect . ImmutableBiMap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableListMultimap ; <nl> import com . google . common . collect . ImmutableMap ; <nl> @ @ - 709 , 15 + 710 , 18 @ @ public class GameData { <nl> <nl> int register ( Object obj , String name , int idHint ) / / from FMLControlledNamespacedRegistry . addObject <nl> { <nl> - / / tolerate extra name prefixes here since mc does it as well <nl> - name = addPrefix ( name ) ; <nl> - <nl> if ( obj instanceof Block ) <nl> { <nl> + / / tolerate extra name prefixes here since mc does it as well <nl> + name = addPrefix ( name ) ; <nl> + <nl> return registerBlock ( ( Block ) obj , name , idHint ) ; <nl> } <nl> else if ( obj instanceof Item ) <nl> { <nl> + / / tolerate extra name prefixes here since mc does it as well <nl> + name = addPrefix ( name ) ; <nl> + <nl> return registerItem ( ( Item ) obj , name , idHint ) ; <nl> } <nl> else <nl> @ @ - 963 , 7 + 967 , 7 @ @ public class GameData { <nl> } <nl> else <nl> { <nl> - throw new RuntimeException ( " WHAT ? " ) ; <nl> + return ImmutableBiMap . of ( ) ; <nl> } <nl> } <nl> <nl> @ @ - 1058 , 6 + 1062 , 12 @ @ public class GameData { <nl> String regName = e . getKey ( ) ; <nl> FMLControlledNamespacedRegistry < ? > registry = e . getValue ( ) ; <nl> FMLControlledNamespacedRegistry < ? > newRegistry = genericRegistries . get ( regName ) ; <nl> + if ( newRegistry = = null ) <nl> + { <nl> + newRegistry = registry . makeShallowCopy ( ) ; <nl> + genericRegistries . put ( regName , newRegistry ) ; <nl> + } <nl> + <nl> GameDataSnapshot . Entry regSnap = snapshot . entries . get ( " fmlgr : " + regName ) ; <nl> if ( regSnap = = null ) { <nl> FMLLog . info ( " Weird , there was no registry data for registry % s found in the snapshot " , regName ) ; <nl> @ @ - 1081 , 7 + 1091 , 8 @ @ public class GameData { <nl> FMLLog . fine ( " Fixed registry % s id mismatch % s : % d ( init ) - > % d ( map ) . " , regName , entryName , currId , entryId ) ; <nl> } <nl> <nl> - newRegistry . register ( entryId , entryName , registry . getRaw ( entryName ) ) ; <nl> + <nl> + newRegistry . add ( entryId , entryName , registry . getRaw ( entryName ) ) ; <nl> <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 index d92e7fc . . 397266b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . network . NetworkCheckHandler ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 import net . minecraftforge . fml . common . registry . VillagerRegistry ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 @ @ - 84 , 8 + 85 , 9 @ @ public final class FMLContainer extends DummyModContainer implements WorldAccess 
 @ Subscribe 
 public void modPreinitialization ( FMLPreInitializationEvent evt ) 
 { 
 - / / Initialize the villager registry 
 - VillagerRegistry . instance ( ) ; 
 + / / Initialize all Forge / Vanilla registries { invoke the static init ) 
 + if ( ForgeRegistries . ITEMS = = null ) 
 + throw new RuntimeException ( " Something horrible went wrong in init , ForgeRegistres didn ' t create . . . " ) ; 
 } 
 
 @ NetworkCheckHandler 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java b / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java 
 new file mode 100644 
 index 0000000 . . 74917b1 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / ForgeRegistries . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . enchantment . Enchantment ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . potion . Potion ; 
 + import net . minecraft . potion . PotionType ; 
 + import net . minecraft . util . SoundEvent ; 
 + import net . minecraft . world . biome . BiomeGenBase ; 
 + import net . minecraftforge . fml . common . registry . VillagerRegistry . VillagerProfession ; 
 + 
 + / * * 
 + * A class that exposes static references to all vanilla and Forge registries . 
 + * Created to have a central place to access the registries directly if modders need . 
 + * It is still advised that if you are registering things to go through { @ link GameRegistry . register } but queries and iterations can use this . 
 + * / 
 + public class ForgeRegistries 
 + { 
 + static { init ( ) ; } / / This must be above the fields so we guarantee it ' s run before findRegistry is called . Yay static inializers 
 + 
 + public static final IForgeRegistry < Block > BLOCKS = GameRegistry . findRegistry ( Block . class ) ; 
 + public static final IForgeRegistry < Item > ITEMS = GameRegistry . findRegistry ( Item . class ) ; 
 + public static final IForgeRegistry < Potion > POTIONS = GameRegistry . findRegistry ( Potion . class ) ; 
 + public static final IForgeRegistry < BiomeGenBase > BIOMES = GameRegistry . findRegistry ( BiomeGenBase . class ) ; 
 + public static final IForgeRegistry < SoundEvent > SOUND _ EVENTS = GameRegistry . findRegistry ( SoundEvent . class ) ; 
 + public static final IForgeRegistry < PotionType > POTION _ TYPES = GameRegistry . findRegistry ( PotionType . class ) ; 
 + public static final IForgeRegistry < Enchantment > ENCHANTMENTS = GameRegistry . findRegistry ( Enchantment . class ) ; 
 + public static final IForgeRegistry < VillagerProfession > VILLAGER _ PROFESSIONS = GameRegistry . findRegistry ( VillagerProfession . class ) ; 
 + 
 + 
 + / * * 
 + * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . 
 + * / 
 + private static void init ( ) 
 + { 
 + GameData . getMain ( ) ; 
 + VillagerRegistry . instance ( ) ; 
 + } 
 + 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index ab0d43e . . 232e605 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 185 , 6 + 185 , 19 @ @ public class GameRegistry 
 } 
 
 / * * 
 + * Retrieves the registry associated with this super class type . 
 + * If the return is non - null it is HIGHLY recommended that modders cache this 
 + * value as the return will never change for a given type in a single run of Minecraft once set . 
 + * 
 + * @ param registryType The base class of items in this registry . 
 + * @ return The registry , Null if none is registered . 
 + * / 
 + public static < K extends IForgeRegistryEntry < K > > IForgeRegistry < K > findRegistry ( Class < K > registryType ) 
 + { 
 + return PersistentRegistryManager . findRegistryByType ( registryType ) ; 
 + } 
 + 
 + / * * 
 * Add a forced persistent substitution alias for the block or item to another block or item . This will have 
 * the effect of using the substituted block or item instead of the original , where ever it is 
 * referenced . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 03e2257 . . 0001b42 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 152 , 6 + 152 , 11 @ @ public class PersistentRegistryManager 
 return registry ; 
 } 
 
 + static < V extends IForgeRegistryEntry < V > > IForgeRegistry < V > findRegistryByType ( Class < V > registryType ) 
 + { 
 + return PersistentRegistry . ACTIVE . getRegistry ( registryType ) ; 
 + } 
 + 
 
 public static List < String > injectSnapshot ( GameDataSnapshot snapshot , boolean injectFrozenData , boolean isLocalWorld ) 
 {

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 index 0236046 . . bf2fd34 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / FMLContainer . java 
 @ @ - 32 , 10 + 32 , 12 @ @ import net . minecraftforge . fml . client . FMLFileResourcePack ; 
 import net . minecraftforge . fml . client . FMLFolderResourcePack ; 
 import net . minecraftforge . fml . common . asm . FMLSanityChecker ; 
 import net . minecraftforge . fml . common . event . FMLConstructionEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . network . NetworkCheckHandler ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . common . registry . VillagerRegistry ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 import org . apache . logging . log4j . Level ; 
 @ @ - 84 , 6 + 86 , 13 @ @ public class FMLContainer extends DummyModContainer implements WorldAccessContai 
 FMLNetworkHandler . registerChannel ( this , evt . getSide ( ) ) ; 
 } 
 
 + @ Subscribe 
 + public void modPreinitialization ( FMLPreInitializationEvent evt ) 
 + { 
 + / / Initialize the villager registry 
 + VillagerRegistry . instance ( ) ; 
 + } 
 + 
 @ NetworkCheckHandler 
 public boolean checkModLists ( Map < String , String > modList , Side side ) 
 { 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index f1f0ee3 . . 7fd1bca 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 52 , 6 + 52 , 7 @ @ import com . google . common . base . Joiner . MapJoiner ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBasedTable ; 
 import com . google . common . collect . HashBiMap ; 
 + import com . google . common . collect . ImmutableBiMap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableListMultimap ; 
 import com . google . common . collect . ImmutableMap ; 
 @ @ - 709 , 15 + 710 , 18 @ @ public class GameData { 
 
 int register ( Object obj , String name , int idHint ) / / from FMLControlledNamespacedRegistry . addObject 
 { 
 - / / tolerate extra name prefixes here since mc does it as well 
 - name = addPrefix ( name ) ; 
 - 
 if ( obj instanceof Block ) 
 { 
 + / / tolerate extra name prefixes here since mc does it as well 
 + name = addPrefix ( name ) ; 
 + 
 return registerBlock ( ( Block ) obj , name , idHint ) ; 
 } 
 else if ( obj instanceof Item ) 
 { 
 + / / tolerate extra name prefixes here since mc does it as well 
 + name = addPrefix ( name ) ; 
 + 
 return registerItem ( ( Item ) obj , name , idHint ) ; 
 } 
 else 
 @ @ - 963 , 7 + 967 , 7 @ @ public class GameData { 
 } 
 else 
 { 
 - throw new RuntimeException ( " WHAT ? " ) ; 
 + return ImmutableBiMap . of ( ) ; 
 } 
 } 
 
 @ @ - 1058 , 6 + 1062 , 12 @ @ public class GameData { 
 String regName = e . getKey ( ) ; 
 FMLControlledNamespacedRegistry < ? > registry = e . getValue ( ) ; 
 FMLControlledNamespacedRegistry < ? > newRegistry = genericRegistries . get ( regName ) ; 
 + if ( newRegistry = = null ) 
 + { 
 + newRegistry = registry . makeShallowCopy ( ) ; 
 + genericRegistries . put ( regName , newRegistry ) ; 
 + } 
 + 
 GameDataSnapshot . Entry regSnap = snapshot . entries . get ( " fmlgr : " + regName ) ; 
 if ( regSnap = = null ) { 
 FMLLog . info ( " Weird , there was no registry data for registry % s found in the snapshot " , regName ) ; 
 @ @ - 1081 , 7 + 1091 , 8 @ @ public class GameData { 
 FMLLog . fine ( " Fixed registry % s id mismatch % s : % d ( init ) - > % d ( map ) . " , regName , entryName , currId , entryId ) ; 
 } 
 
 - newRegistry . register ( entryId , entryName , registry . getRaw ( entryName ) ) ; 
 + 
 + newRegistry . add ( entryId , entryName , registry . getRaw ( entryName ) ) ; 
 
 } 
 }
