BLEU SCORE: 0.04923026124015933

TEST MSG: ExtendedBlockState , Properties generic updates .
GENERATED MSG: Fix generics and error in the BlockState patch .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> index a0b5a31 . . 7711273 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 8 , 22 + 8 , 21 @ @ import java . util . Map ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . properties . IProperty ; <nl> import net . minecraft . block . state . BlockState ; <nl> - import net . minecraft . block . state . BlockState . StateImplementation ; <nl> import net . minecraft . block . state . IBlockState ; <nl> <nl> import com . google . common . base . Optional ; <nl> import com . google . common . base . Predicates ; <nl> - import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . ImmutableTable ; <nl> import com . google . common . collect . Iterables ; <nl> + import com . google . common . collect . Maps ; <nl> <nl> public class ExtendedBlockState extends BlockState <nl> { <nl> private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; <nl> <nl> - public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> + public ExtendedBlockState ( Block blockIn , @ SuppressWarnings ( " rawtypes " ) IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) <nl> { <nl> super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; <nl> ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; <nl> @ @ - 45 , 7 + 44 , 7 @ @ public class ExtendedBlockState extends BlockState <nl> } <nl> <nl> @ Override <nl> - protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + protected StateImplementation createState ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) <nl> { <nl> if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; <nl> return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; <nl> @ @ - 54 , 9 + 53 , 10 @ @ public class ExtendedBlockState extends BlockState <nl> protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState <nl> { <nl> private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> - private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; <nl> + @ SuppressWarnings ( " rawtypes " ) <nl> + private Map < Map < IProperty , Comparable > , BlockState . StateImplementation > normalMap ; <nl> <nl> - protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + protected ExtendedStateImplementation ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , @ SuppressWarnings ( " rawtypes " ) ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> { <nl> super ( block , properties ) ; <nl> this . unlistedProperties = unlistedProperties ; <nl> @ @ - 80 , 12 + 80 , 14 @ @ public class ExtendedBlockState extends BlockState <nl> { <nl> return this ; <nl> } <nl> - Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; <nl> + @ SuppressWarnings ( " rawtypes " ) <nl> + Map < IProperty , Comparable > map = Maps . newHashMap ( getProperties ( ) ) ; <nl> map . put ( property , value ) ; <nl> if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) <nl> { / / no dynamic properties present , looking up in the normal table <nl> return ( IExtendedBlockState ) normalMap . get ( map ) ; <nl> } <nl> + @ SuppressWarnings ( " rawtypes " ) <nl> ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; <nl> table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; <nl> return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; <nl> @ @ - 131 , 13 + 133 , 13 @ @ public class ExtendedBlockState extends BlockState <nl> } <nl> <nl> @ Override <nl> - public void buildPropertyValueTable ( Map map ) <nl> + public void buildPropertyValueTable ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) <nl> { <nl> this . normalMap = map ; <nl> super . buildPropertyValueTable ( map ) ; <nl> } <nl> <nl> - private ExtendedStateImplementation setMap ( Map < Map < IProperty , Comparable > , IBlockState > map ) <nl> + private ExtendedStateImplementation setMap ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) <nl> { <nl> this . normalMap = map ; <nl> return this ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> index b24e6be . . 5063da2 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / Properties . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / Properties . java <nl> @ @ - 1 , 23 + 1 , 19 @ @ <nl> package net . minecraftforge . common . property ; <nl> <nl> - import java . lang . reflect . InvocationTargetException ; <nl> - <nl> import net . minecraft . block . properties . IProperty ; <nl> <nl> - import org . apache . commons . lang3 . reflect . ConstructorUtils ; <nl> - <nl> public class Properties <nl> { <nl> - public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) <nl> + public static < V extends Comparable < V > > IUnlistedProperty < V > toUnlisted ( IProperty < V > property ) <nl> { <nl> - return new PropertyAdapter ( property ) ; <nl> + return new PropertyAdapter < V > ( property ) ; <nl> } <nl> <nl> - public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > <nl> + public static class PropertyAdapter < V extends Comparable < V > > implements IUnlistedProperty < V > <nl> { <nl> - private final IProperty parent ; <nl> + private final IProperty < V > parent ; <nl> <nl> - public PropertyAdapter ( IProperty parent ) <nl> + public PropertyAdapter ( IProperty < V > parent ) <nl> { <nl> this . parent = parent ; <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> index e2a202b . . 5d82d56 100644 <nl> - - - a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch <nl> @ @ - 7 , 12 + 7 , 12 @ @ <nl> + this ( blockIn , properties , null ) ; <nl> + } <nl> + <nl> - + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) <nl> + + protected StateImplementation createState ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) <nl> + { <nl> + return new StateImplementation ( block , properties ) ; <nl> + } <nl> + <nl> - + protected BlockState ( Block blockIn , IProperty [ ] properties , ImmutableMap unlistedProperties ) <nl> + + protected BlockState ( Block blockIn , IProperty [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) <nl> + { <nl> this . block = blockIn ; <nl> Arrays . sort ( properties , new Comparator < IProperty > ( ) <nl> @ @ - 22 , 7 + 22 , 7 @ @ <nl> { <nl> Map < IProperty , Comparable > map1 = MapPopulator . < IProperty , Comparable > createMap ( this . properties , list1 ) ; <nl> - BlockState . StateImplementation blockstate $ stateimplementation = new BlockState . StateImplementation ( blockIn , ImmutableMap . copyOf ( map1 ) ) ; <nl> - + BlockState . StateImplementation blockstate $ stateimplementation = createState ( blockIn , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; <nl> + + BlockState . StateImplementation blockstate $ stateimplementation = createState ( blockIn , ImmutableMap . copyOf ( map1 ) , unlistedProperties ) ; <nl> map . put ( map1 , blockstate $ stateimplementation ) ; <nl> list . add ( blockstate $ stateimplementation ) ; <nl> } <nl> @ @ - 30 , 7 + 30 , 7 @ @ <nl> } <nl> } <nl> <nl> - + protected StateImplementation ( Block blockIn , ImmutableMap propertiesIn , ImmutableTable propertyValueTable ) <nl> + + protected StateImplementation ( Block blockIn , ImmutableMap < IProperty , Comparable > propertiesIn , ImmutableTable < IProperty , Comparable , IBlockState > propertyValueTable ) <nl> + { <nl> + this . block = blockIn ; <nl> + this . properties = propertiesIn ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> index c299e3f . . a0b5a31 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java <nl> @ @ - 56 , 7 + 56 , 7 @ @ public class ExtendedBlockState extends BlockState <nl> private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; <nl> private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; <nl> <nl> - protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> + protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) <nl> { <nl> super ( block , properties ) ; <nl> this . unlistedProperties = unlistedProperties ; <nl> @ @ - 64 , 7 + 64 , 7 @ @ public class ExtendedBlockState extends BlockState <nl> } <nl> <nl> @ Override <nl> - public IBlockState withProperty ( IProperty property , Comparable value ) <nl> + public < T extends Comparable < T > , V extends T > IBlockState withProperty ( IProperty < T > property , V value ) <nl> { <nl> if ( ! this . getProperties ( ) . containsKey ( property ) ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 index a0b5a31 . . 7711273 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 8 , 22 + 8 , 21 @ @ import java . util . Map ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . properties . IProperty ; 
 import net . minecraft . block . state . BlockState ; 
 - import net . minecraft . block . state . BlockState . StateImplementation ; 
 import net . minecraft . block . state . IBlockState ; 
 
 import com . google . common . base . Optional ; 
 import com . google . common . base . Predicates ; 
 - import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . ImmutableTable ; 
 import com . google . common . collect . Iterables ; 
 + import com . google . common . collect . Maps ; 
 
 public class ExtendedBlockState extends BlockState 
 { 
 private final ImmutableSet < IUnlistedProperty < ? > > unlistedProperties ; 
 
 - public ExtendedBlockState ( Block blockIn , IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 + public ExtendedBlockState ( Block blockIn , @ SuppressWarnings ( " rawtypes " ) IProperty [ ] properties , IUnlistedProperty < ? > [ ] unlistedProperties ) 
 { 
 super ( blockIn , properties , buildUnlistedMap ( unlistedProperties ) ) ; 
 ImmutableSet . Builder < IUnlistedProperty < ? > > builder = ImmutableSet . < IUnlistedProperty < ? > > builder ( ) ; 
 @ @ - 45 , 7 + 44 , 7 @ @ public class ExtendedBlockState extends BlockState 
 } 
 
 @ Override 
 - protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + protected StateImplementation createState ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ) 
 { 
 if ( unlistedProperties = = null | | unlistedProperties . isEmpty ( ) ) return super . createState ( block , properties , unlistedProperties ) ; 
 return new ExtendedStateImplementation ( block , properties , unlistedProperties , null ) ; 
 @ @ - 54 , 9 + 53 , 10 @ @ public class ExtendedBlockState extends BlockState 
 protected static class ExtendedStateImplementation extends StateImplementation implements IExtendedBlockState 
 { 
 private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 - private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; 
 + @ SuppressWarnings ( " rawtypes " ) 
 + private Map < Map < IProperty , Comparable > , BlockState . StateImplementation > normalMap ; 
 
 - protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + protected ExtendedStateImplementation ( Block block , @ SuppressWarnings ( " rawtypes " ) ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , @ SuppressWarnings ( " rawtypes " ) ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 { 
 super ( block , properties ) ; 
 this . unlistedProperties = unlistedProperties ; 
 @ @ - 80 , 12 + 80 , 14 @ @ public class ExtendedBlockState extends BlockState 
 { 
 return this ; 
 } 
 - Map < IProperty , Comparable > map = new HashMap < IProperty , Comparable > ( getProperties ( ) ) ; 
 + @ SuppressWarnings ( " rawtypes " ) 
 + Map < IProperty , Comparable > map = Maps . newHashMap ( getProperties ( ) ) ; 
 map . put ( property , value ) ; 
 if ( Iterables . all ( unlistedProperties . values ( ) , Predicates . < Optional < ? > > equalTo ( Optional . absent ( ) ) ) ) 
 { / / no dynamic properties present , looking up in the normal table 
 return ( IExtendedBlockState ) normalMap . get ( map ) ; 
 } 
 + @ SuppressWarnings ( " rawtypes " ) 
 ImmutableTable < IProperty , Comparable , IBlockState > table = propertyValueTable ; 
 table = ( ( StateImplementation ) table . get ( property , value ) ) . getPropertyValueTable ( ) ; 
 return new ExtendedStateImplementation ( getBlock ( ) , ImmutableMap . copyOf ( map ) , unlistedProperties , table ) . setMap ( this . normalMap ) ; 
 @ @ - 131 , 13 + 133 , 13 @ @ public class ExtendedBlockState extends BlockState 
 } 
 
 @ Override 
 - public void buildPropertyValueTable ( Map map ) 
 + public void buildPropertyValueTable ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) 
 { 
 this . normalMap = map ; 
 super . buildPropertyValueTable ( map ) ; 
 } 
 
 - private ExtendedStateImplementation setMap ( Map < Map < IProperty , Comparable > , IBlockState > map ) 
 + private ExtendedStateImplementation setMap ( @ SuppressWarnings ( " rawtypes " ) Map < Map < IProperty , Comparable > , BlockState . StateImplementation > map ) 
 { 
 this . normalMap = map ; 
 return this ; 
 diff - - git a / src / main / java / net / minecraftforge / common / property / Properties . java b / src / main / java / net / minecraftforge / common / property / Properties . java 
 index b24e6be . . 5063da2 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / Properties . java 
 + + + b / src / main / java / net / minecraftforge / common / property / Properties . java 
 @ @ - 1 , 23 + 1 , 19 @ @ 
 package net . minecraftforge . common . property ; 
 
 - import java . lang . reflect . InvocationTargetException ; 
 - 
 import net . minecraft . block . properties . IProperty ; 
 
 - import org . apache . commons . lang3 . reflect . ConstructorUtils ; 
 - 
 public class Properties 
 { 
 - public static < P extends IProperty , V > IUnlistedProperty < V > toUnlisted ( P property ) 
 + public static < V extends Comparable < V > > IUnlistedProperty < V > toUnlisted ( IProperty < V > property ) 
 { 
 - return new PropertyAdapter ( property ) ; 
 + return new PropertyAdapter < V > ( property ) ; 
 } 
 
 - public static class PropertyAdapter < V extends Comparable > implements IUnlistedProperty < V > 
 + public static class PropertyAdapter < V extends Comparable < V > > implements IUnlistedProperty < V > 
 { 
 - private final IProperty parent ; 
 + private final IProperty < V > parent ; 
 
 - public PropertyAdapter ( IProperty parent ) 
 + public PropertyAdapter ( IProperty < V > parent ) 
 { 
 this . parent = parent ; 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 index e2a202b . . 5d82d56 100644 
 - - - a / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 + + + b / patches / minecraft / net / minecraft / block / state / BlockState . java . patch 
 @ @ - 7 , 12 + 7 , 12 @ @ 
 + this ( blockIn , properties , null ) ; 
 + } 
 + 
 - + protected StateImplementation createState ( Block block , ImmutableMap properties , ImmutableMap unlistedProperties ) 
 + + protected StateImplementation createState ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) 
 + { 
 + return new StateImplementation ( block , properties ) ; 
 + } 
 + 
 - + protected BlockState ( Block blockIn , IProperty [ ] properties , ImmutableMap unlistedProperties ) 
 + + protected BlockState ( Block blockIn , IProperty [ ] properties , ImmutableMap < net . minecraftforge . common . property . IUnlistedProperty < ? > , com . google . common . base . Optional < ? > > unlistedProperties ) 
 + { 
 this . block = blockIn ; 
 Arrays . sort ( properties , new Comparator < IProperty > ( ) 
 @ @ - 22 , 7 + 22 , 7 @ @ 
 { 
 Map < IProperty , Comparable > map1 = MapPopulator . < IProperty , Comparable > createMap ( this . properties , list1 ) ; 
 - BlockState . StateImplementation blockstate $ stateimplementation = new BlockState . StateImplementation ( blockIn , ImmutableMap . copyOf ( map1 ) ) ; 
 - + BlockState . StateImplementation blockstate $ stateimplementation = createState ( blockIn , ImmutableMap . copyOf ( map ) , unlistedProperties ) ; 
 + + BlockState . StateImplementation blockstate $ stateimplementation = createState ( blockIn , ImmutableMap . copyOf ( map1 ) , unlistedProperties ) ; 
 map . put ( map1 , blockstate $ stateimplementation ) ; 
 list . add ( blockstate $ stateimplementation ) ; 
 } 
 @ @ - 30 , 7 + 30 , 7 @ @ 
 } 
 } 
 
 - + protected StateImplementation ( Block blockIn , ImmutableMap propertiesIn , ImmutableTable propertyValueTable ) 
 + + protected StateImplementation ( Block blockIn , ImmutableMap < IProperty , Comparable > propertiesIn , ImmutableTable < IProperty , Comparable , IBlockState > propertyValueTable ) 
 + { 
 + this . block = blockIn ; 
 + this . properties = propertiesIn ; 
 diff - - git a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 index c299e3f . . a0b5a31 100644 
 - - - a / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 + + + b / src / main / java / net / minecraftforge / common / property / ExtendedBlockState . java 
 @ @ - 56 , 7 + 56 , 7 @ @ public class ExtendedBlockState extends BlockState 
 private final ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties ; 
 private Map < Map < IProperty , Comparable > , IBlockState > normalMap ; 
 
 - protected ExtendedStateImplementation ( Block block , ImmutableMap properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 + protected ExtendedStateImplementation ( Block block , ImmutableMap < IProperty , Comparable > properties , ImmutableMap < IUnlistedProperty < ? > , Optional < ? > > unlistedProperties , ImmutableTable < IProperty , Comparable , IBlockState > table ) 
 { 
 super ( block , properties ) ; 
 this . unlistedProperties = unlistedProperties ; 
 @ @ - 64 , 7 + 64 , 7 @ @ public class ExtendedBlockState extends BlockState 
 } 
 
 @ Override 
 - public IBlockState withProperty ( IProperty property , Comparable value ) 
 + public < T extends Comparable < T > , V extends T > IBlockState withProperty ( IProperty < T > property , V value ) 
 { 
 if ( ! this . getProperties ( ) . containsKey ( property ) ) 
 {
