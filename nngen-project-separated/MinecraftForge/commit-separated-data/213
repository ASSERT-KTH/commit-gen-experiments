BLEU SCORE: 0.027611988917697356

TEST MSG: Restore original license headers in Maven versioning package
GENERATED MSG: Introduce a proxy side loader for mod use

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java <nl> index d78b2bf . . eb721ad 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java <nl> @ @ - 16 , 15 + 16 , 12 @ @ <nl> * License along with this library ; if not , write to the Free Software <nl> * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> * / <nl> - <nl> package net . minecraftforge . fml . common . versioning ; <nl> <nl> - / * * <nl> - * Describes an artifact version in terms of its components , converts it to / from a string and <nl> - * compares two versions . <nl> - * <nl> - * @ author < a href = " mailto : brett @ apache . org " > Brett Porter < / a > <nl> - * / <nl> + / / I beleive this is a unique class except that it uses the same name so that ComparibleVersion can stay the same . <nl> + / / Best reference I could find : https : / / github . com / apache / maven / blob / 3501485ed2280e30ba74eb9f0e1c6422b68a3228 / maven - artifact / src / main / java / org / apache / maven / artifact / versioning / ArtifactVersion . java <nl> + / / This entire package * should * be removed and updated to normal maven - artifact library in 1 . 13 . <nl> + <nl> public interface ArtifactVersion <nl> extends Comparable < ArtifactVersion > <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java <nl> index ff4f45e . . f892b9e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java <nl> @ @ - 1 , 24 + 1 , 27 @ @ <nl> / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> + * Repackaged and some modifications done by Forge , see in - line comments . <nl> + * / <nl> + package net . minecraftforge . fml . common . versioning ; <nl> + <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> * / <nl> <nl> - package net . minecraftforge . fml . common . versioning ; <nl> - <nl> import java . math . BigInteger ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> @ @ - 102 , 19 + 105 , 19 @ @ public class ComparableVersion <nl> this . value = new BigInteger ( str ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int getType ( ) <nl> { <nl> return INTEGER _ ITEM ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public boolean isNull ( ) <nl> { <nl> return BigInteger _ ZERO . equals ( value ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int compareTo ( Item item ) <nl> { <nl> if ( item = = null ) <nl> @ @ - 138 , 7 + 141 , 7 @ @ public class ComparableVersion <nl> } <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public String toString ( ) <nl> { <nl> return value . toString ( ) ; <nl> @ @ - 192 , 13 + 195 , 13 @ @ public class ComparableVersion <nl> this . value = ALIASES . getProperty ( value , value ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int getType ( ) <nl> { <nl> return STRING _ ITEM ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public boolean isNull ( ) <nl> { <nl> return ( comparableQualifier ( value ) . compareTo ( RELEASE _ VERSION _ INDEX ) = = 0 ) ; <nl> @ @ - 223 , 7 + 226 , 7 @ @ public class ComparableVersion <nl> return i = = - 1 ? ( _ QUALIFIERS . size ( ) + " - " + qualifier ) : String . valueOf ( i ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int compareTo ( Item item ) <nl> { <nl> if ( item = = null ) <nl> @ @ - 247 , 7 + 250 , 7 @ @ public class ComparableVersion <nl> } <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public String toString ( ) <nl> { <nl> return value ; <nl> @ @ - 262 , 18 + 265 , 15 @ @ public class ComparableVersion <nl> extends ArrayList < Item > <nl> implements Item <nl> { <nl> - / * * <nl> - * <nl> - * / <nl> - private static final long serialVersionUID = 1L ; <nl> + private static final long serialVersionUID = 1L ; / / Forge : added to quiet warnings . <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int getType ( ) <nl> { <nl> return LIST _ ITEM ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public boolean isNull ( ) <nl> { <nl> return ( size ( ) = = 0 ) ; <nl> @ @ - 295 , 7 + 295 , 7 @ @ public class ComparableVersion <nl> } <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int compareTo ( Item item ) <nl> { <nl> if ( item = = null ) <nl> @ @ - 340 , 7 + 340 , 7 @ @ public class ComparableVersion <nl> } <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public String toString ( ) <nl> { <nl> StringBuilder buffer = new StringBuilder ( " ( " ) ; <nl> @ @ - 462 , 25 + 462 , 25 @ @ public class ComparableVersion <nl> return isDigit ? new IntegerItem ( buf ) : new StringItem ( buf , false ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int compareTo ( ComparableVersion o ) <nl> { <nl> return items . compareTo ( o . items ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public String toString ( ) <nl> { <nl> return value ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public boolean equals ( Object o ) <nl> { <nl> return ( o instanceof ComparableVersion ) & & canonical . equals ( ( ( ComparableVersion ) o ) . canonical ) ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Add @ Override <nl> public int hashCode ( ) <nl> { <nl> return canonical . hashCode ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> index ec0d0e3 . . c2a9f35 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java <nl> @ @ - 16 , 7 + 16 , 6 @ @ <nl> * License along with this library ; if not , write to the Free Software <nl> * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> * / <nl> - <nl> package net . minecraftforge . fml . common . versioning ; <nl> <nl> public class DefaultArtifactVersion implements ArtifactVersion <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java b / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java <nl> index b9eec55 . . 7f24bcd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java <nl> @ @ - 1 , 24 + 1 , 27 @ @ <nl> / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> + * Repackaged by Forge , otherwise unchangeed <nl> + * / <nl> + package net . minecraftforge . fml . common . versioning ; <nl> + <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> * / <nl> <nl> - package net . minecraftforge . fml . common . versioning ; <nl> - <nl> / * * <nl> * Occurs when a version is invalid . <nl> * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> index 0e19bb8 . . 7ab25c1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java <nl> @ @ - 1 , 26 + 1 , 28 @ @ <nl> / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * Repackaged and some modifications done by Forge , see in - line comments . <nl> * / <nl> - <nl> package net . minecraftforge . fml . common . versioning ; <nl> <nl> - import net . minecraft . util . text . translation . I18n ; <nl> + / * <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> + * / <nl> <nl> + import net . minecraft . util . text . translation . I18n ; / / Forge : Added imports <nl> import javax . annotation . Nullable ; <nl> <nl> / * * <nl> @ @ - 40 , 7 + 42 , 7 @ @ public class Restriction <nl> <nl> public static final Restriction EVERYTHING = new Restriction ( null , false , null , false ) ; <nl> <nl> - public Restriction ( @ Nullable ArtifactVersion lowerBound , boolean lowerBoundInclusive , @ Nullable ArtifactVersion upperBound , <nl> + public Restriction ( @ Nullable ArtifactVersion lowerBound , boolean lowerBoundInclusive , @ Nullable ArtifactVersion upperBound , / / Forge : Added @ Nullable <nl> boolean upperBoundInclusive ) <nl> { <nl> this . lowerBound = lowerBound ; <nl> @ @ - 49 , 7 + 51 , 7 @ @ public class Restriction <nl> this . upperBoundInclusive = upperBoundInclusive ; <nl> } <nl> <nl> - @ Nullable <nl> + @ Nullable / / Forge : Added @ Nullable <nl> public ArtifactVersion getLowerBound ( ) <nl> { <nl> return lowerBound ; <nl> @ @ - 60 , 7 + 62 , 7 @ @ public class Restriction <nl> return lowerBoundInclusive ; <nl> } <nl> <nl> - @ Nullable <nl> + @ Nullable / / Forge : Added @ Nullable <nl> public ArtifactVersion getUpperBound ( ) <nl> { <nl> return upperBound ; <nl> @ @ - 184 , 7 + 186 , 7 @ @ public class Restriction <nl> return true ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Added @ Override <nl> public String toString ( ) <nl> { <nl> StringBuilder buf = new StringBuilder ( ) ; <nl> @ @ - 204 , 6 + 206 , 7 @ @ public class Restriction <nl> return buf . toString ( ) ; <nl> } <nl> <nl> + / / Forge : Added toStringFriendly , uses Minecraft ' s localization engine to create user friendly localized message . <nl> public String toStringFriendly ( ) <nl> { <nl> if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> index 4f1ea56 . . a9e42e6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java <nl> @ @ - 1 , 25 + 1 , 25 @ @ <nl> / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * Repackaged and some modifications done by Forge , see in - line comments . <nl> * / <nl> - <nl> package net . minecraftforge . fml . common . versioning ; <nl> + <nl> / * <nl> - * Modifications by cpw under LGPL 2 . 1 or later <nl> + * Licensed to the Apache Software Foundation ( ASF ) under one <nl> + * or more contributor license agreements . See the NOTICE file <nl> + * distributed with this work for additional information <nl> + * regarding copyright ownership . The ASF licenses this file <nl> + * to you under the Apache License , Version 2 . 0 ( the <nl> + * " License " ) ; you may not use this file except in compliance <nl> + * with the License . You may obtain a copy of the License at <nl> + * <nl> + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 <nl> + * <nl> + * Unless required by applicable law or agreed to in writing , <nl> + * software distributed under the License is distributed on an <nl> + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY <nl> + * KIND , either express or implied . See the License for the <nl> + * specific language governing permissions and limitations <nl> + * under the License . <nl> * / <nl> <nl> import java . util . ArrayList ; <nl> @ @ - 27 , 8 + 27 , 7 @ @ import java . util . Collections ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> <nl> - import com . google . common . base . Joiner ; <nl> - <nl> + import com . google . common . base . Joiner ; / / Forge : Add Imports <nl> import javax . annotation . Nullable ; <nl> <nl> / * * <nl> @ @ - 75 , 7 + 74 , 8 @ @ public class VersionRange <nl> <nl> return new VersionRange ( recommendedVersion , copiedRestrictions ) ; <nl> } <nl> - <nl> + <nl> + / / Forge : Added factory function <nl> / * * <nl> * Factory method , for custom versioning schemes <nl> * @ param version version <nl> @ @ - 86 , 6 + 86 , 7 @ @ public class VersionRange <nl> { <nl> return new VersionRange ( version , restrictions ) ; <nl> } <nl> + <nl> / * * <nl> * Create a version range from a string representation <nl> * < p / > <nl> @ @ - 103 , 7 + 104 , 7 @ @ public class VersionRange <nl> * @ throws InvalidVersionSpecificationException <nl> * <nl> * / <nl> - public static VersionRange createFromVersionSpec ( @ Nullable String spec ) <nl> + public static VersionRange createFromVersionSpec ( @ Nullable String spec ) / / Forge : Added @ Nullable <nl> throws InvalidVersionSpecificationException <nl> { <nl> if ( spec = = null ) <nl> @ @ - 230 , 14 + 231 , 10 @ @ public class VersionRange <nl> return restriction ; <nl> } <nl> <nl> - public static VersionRange createFromVersion ( String version , ArtifactVersion existing ) <nl> + public static VersionRange createFromVersion ( String version , ArtifactVersion existing ) / / Forge : Added existing argument <nl> { <nl> List < Restriction > restrictions = Collections . emptyList ( ) ; <nl> - if ( existing = = null ) <nl> - { <nl> - existing = new DefaultArtifactVersion ( version ) ; <nl> - } <nl> - return new VersionRange ( existing , restrictions ) ; <nl> + return new VersionRange ( existing ! = null ? existing : new DefaultArtifactVersion ( version ) , restrictions ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 472 , 20 + 469 , 24 @ @ public class VersionRange <nl> <nl> return restrictions ; <nl> } <nl> + <nl> + <nl> + / / Forge : Removed getSelectedVersion and isSelectedVersion <nl> <nl> - @ Override <nl> + @ Override / / Forge : Added @ Override <nl> public String toString ( ) <nl> { <nl> if ( recommendedVersion ! = null ) <nl> { <nl> - return recommendedVersion . getVersionString ( ) ; <nl> + return recommendedVersion . getVersionString ( ) ; / / Forge : Version string specifically . <nl> } <nl> else <nl> { <nl> - return Joiner . on ( ' , ' ) . join ( restrictions ) ; <nl> + return Joiner . on ( ' , ' ) . join ( restrictions ) ; / / Forge : Changeed from iterator loop to joiner . <nl> } <nl> } <nl> <nl> + / / Forge : Added friendly { localized } toString <nl> public String toStringFriendly ( ) <nl> { <nl> if ( recommendedVersion ! = null ) <nl> @ @ - 539 , 7 + 540 , 7 @ @ public class VersionRange <nl> return ! restrictions . isEmpty ( ) & & recommendedVersion = = null ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Added @ Override <nl> public boolean equals ( Object obj ) <nl> { <nl> if ( this = = obj ) <nl> @ @ - 561 , 7 + 562 , 7 @ @ public class VersionRange <nl> return equals ; <nl> } <nl> <nl> - @ Override <nl> + @ Override / / Forge : Added @ Override <nl> public int hashCode ( ) <nl> { <nl> int hash = 7 ; <nl> @ @ - 570 , 11 + 571 , 13 @ @ public class VersionRange <nl> return hash ; <nl> } <nl> <nl> + / / Forge : Added @ isUnboundedAbove <nl> public boolean isUnboundedAbove ( ) <nl> { <nl> return restrictions . size ( ) = = 1 & & restrictions . get ( 0 ) . getUpperBound ( ) = = null & & ! restrictions . get ( 0 ) . isUpperBoundInclusive ( ) ; <nl> } <nl> <nl> + / / Forge : Added @ getLowerBoundString <nl> public String getLowerBoundString ( ) <nl> { <nl> return restrictions . size ( ) = = 1 ? restrictions . get ( 0 ) . getLowerBound ( ) . getVersionString ( ) : " " ;
NEAREST DIFF (one line): diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> index 338a95f . . f954507 100644 <nl> - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 70 , 6 + 70 , 7 @ @ import net . minecraft . src . RenderBlocks ; <nl> import net . minecraft . src . RenderEngine ; <nl> import net . minecraft . src . RenderManager ; <nl> import net . minecraft . src . RenderPlayer ; <nl> + import net . minecraft . src . SidedProxy ; <nl> import net . minecraft . src . StringTranslate ; <nl> import net . minecraft . src . TextureFX ; <nl> import net . minecraft . src . TexturePackBase ; <nl> @ @ - 85 , 7 + 86 , 9 @ @ import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . ModContainer . TickType ; <nl> import cpw . mods . fml . common . ModMetadata ; <nl> + import cpw . mods . fml . common . ProxyInjector ; <nl> import cpw . mods . fml . common . ReflectionHelper ; <nl> + import cpw . mods . fml . common . Side ; <nl> import cpw . mods . fml . common . modloader . ModLoaderHelper ; <nl> import cpw . mods . fml . common . modloader . ModLoaderModContainer ; <nl> import cpw . mods . fml . common . modloader . ModProperty ; <nl> @ @ - 581 , 24 + 584 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> } <nl> } <nl> <nl> - / * * <nl> - * Are we a server ? <nl> - * / <nl> - @ Override <nl> - public boolean isServer ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - / * * <nl> - * Are we a client ? <nl> - * / <nl> - @ Override <nl> - public boolean isClient ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> @ Override <nl> public File getMinecraftRootDirectory ( ) <nl> { <nl> @ @ - 1126 , 4 + 1111 , 24 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> return Collections . emptyList ( ) ; <nl> } <nl> } <nl> + <nl> + @ Override <nl> + public Side getSide ( ) <nl> + { <nl> + return Side . CLIENT ; <nl> + } <nl> + <nl> + @ Override <nl> + public ProxyInjector findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod mod ) <nl> + { <nl> + for ( Field f : mod . getClass ( ) . getDeclaredFields ( ) ) <nl> + { <nl> + if ( f . isAnnotationPresent ( SidedProxy . class ) ) <nl> + { <nl> + SidedProxy sp = f . getAnnotation ( SidedProxy . class ) ; <nl> + return new ProxyInjector ( sp . clientSide ( ) , sp . serverSide ( ) , sp . bukkitSide ( ) , f ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / fml / client / cpw / mods / fml / client / OptifineModContainer . java b / fml / client / cpw / mods / fml / client / OptifineModContainer . java <nl> index 40ae4af . . 944dca9 100644 <nl> - - - a / fml / client / cpw / mods / fml / client / OptifineModContainer . java <nl> + + + b / fml / client / cpw / mods / fml / client / OptifineModContainer . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> + import cpw . mods . fml . common . FMLModContainer ; <nl> import cpw . mods . fml . common . IConsoleHandler ; <nl> import cpw . mods . fml . common . ICraftingHandler ; <nl> import cpw . mods . fml . common . IDispenseHandler ; <nl> @ @ - 34 , 7 + 35 , 7 @ @ import cpw . mods . fml . common . ModMetadata ; <nl> * @ author cpw <nl> * <nl> * / <nl> - public class OptifineModContainer implements ModContainer <nl> + public class OptifineModContainer extends FMLModContainer <nl> { <nl> private String optifineVersion ; <nl> private ModMetadata metadata ; <nl> @ @ - 43 , 6 + 44 , 7 @ @ public class OptifineModContainer implements ModContainer <nl> * / <nl> public OptifineModContainer ( Class < ? > optifineConfig ) <nl> { <nl> + super ( " Optifine " ) ; <nl> try <nl> { <nl> optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; <nl> @ @ - 54 , 245 + 56 , 10 @ @ public class OptifineModContainer implements ModContainer <nl> } <nl> <nl> @ Override <nl> - public boolean wantsPreInit ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsPostInit ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public void preInit ( ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public void init ( ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public void postInit ( ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> public String getName ( ) <nl> { <nl> return " Optifine " ; <nl> } <nl> - <nl> - @ Override <nl> - public ModState getModState ( ) <nl> - { <nl> - return ModState . AVAILABLE ; <nl> - } <nl> - <nl> - @ Override <nl> - public void nextState ( ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public void tickStart ( TickType tick , Object . . . data ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public void tickEnd ( TickType tick , Object . . . data ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public boolean matches ( Object mod ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public File getSource ( ) <nl> - { <nl> - return new File ( " . " ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public String getSortingRules ( ) <nl> - { <nl> - return " " ; <nl> - } <nl> - <nl> - @ Override <nl> - public Object getMod ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean generatesWorld ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public IWorldGenerator getWorldGenerator ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public int lookupFuelValue ( int itemId , int itemDamage ) <nl> - { <nl> - return 0 ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsPickupNotification ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public IPickupNotifier getPickupNotifier ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsToDispense ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public IDispenseHandler getDispenseHandler ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsCraftingNotification ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public ICraftingHandler getCraftingHandler ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < String > getDependencies ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < String > getPreDepends ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < String > getPostDepends ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsNetworkPackets ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public INetworkHandler getNetworkHandler ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean ownsNetworkChannel ( String channel ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsConsoleCommands ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public IConsoleHandler getConsoleHandler ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public boolean wantsPlayerTracking ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> - @ Override <nl> - public IPlayerTracker getPlayerTracker ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < IKeyHandler > getKeys ( ) <nl> - { <nl> - return null ; <nl> - } <nl> - <nl> - @ Override <nl> - public SourceType getSourceType ( ) <nl> - { <nl> - return SourceType . CLASSPATH ; <nl> - } <nl> - <nl> - @ Override <nl> - public void setSourceType ( SourceType type ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public ModMetadata getMetadata ( ) <nl> - { <nl> - return metadata ; <nl> - } <nl> - <nl> - @ Override <nl> - public void setMetadata ( ModMetadata meta ) <nl> - { <nl> - this . metadata = meta ; <nl> - } <nl> - <nl> - @ Override <nl> - public void gatherRenderers ( Map renderers ) <nl> - { <nl> - <nl> - } <nl> - <nl> - @ Override <nl> - public void requestAnimations ( ) <nl> - { <nl> - <nl> - } <nl> - <nl> @ Override <nl> public String getVersion ( ) <nl> { <nl> diff - - git a / fml / client / net / minecraft / src / SidedProxy . java b / fml / client / net / minecraft / src / SidedProxy . java <nl> new file mode 100644 <nl> index 0000000 . . 008d63d <nl> - - - / dev / null <nl> + + + b / fml / client / net / minecraft / src / SidedProxy . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * The FML Forge Mod Loader suite . <nl> + * Copyright ( C ) 2012 cpw <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 <nl> + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraft . src ; <nl> + <nl> + / * * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public @ interface SidedProxy <nl> + { <nl> + / * * <nl> + * The name of the client side class to load and populate <nl> + * @ return <nl> + * / <nl> + String clientSide ( ) default " " ; <nl> + <nl> + / * * <nl> + * The name of the server side class to load and populate <nl> + * @ return <nl> + * / <nl> + String serverSide ( ) default " " ; <nl> + <nl> + / * * <nl> + * The name of the a special bukkit plugin class to load and populate <nl> + * / <nl> + String bukkitSide ( ) default " " ; <nl> + } <nl> diff - - git a / fml / common / cpw / mods / fml / common / FMLCommonHandler . java b / fml / common / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 94b2b20 . . 108cc12 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / common / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 371 , 20 + 371 , 9 @ @ public class FMLCommonHandler <nl> languagePack . putAll ( langPack ) ; <nl> } <nl> <nl> - / * * <nl> - * @ return <nl> - * / <nl> - public boolean isServer ( ) <nl> - { <nl> - return sidedDelegate . isServer ( ) ; <nl> - } <nl> - <nl> - / * * <nl> - * @ return <nl> - * / <nl> - public boolean isClient ( ) <nl> + public Side getSide ( ) <nl> { <nl> - return sidedDelegate . isClient ( ) ; <nl> + return sidedDelegate . getSide ( ) ; <nl> } <nl> <nl> public void addAuxilliaryModContainer ( ModContainer ticker ) <nl> @ @ - 514 , 4 + 503 , 16 @ @ public class FMLCommonHandler <nl> return sidedDelegate ; <nl> } <nl> <nl> + / * * <nl> + * @ param mod <nl> + * / <nl> + public void injectSidedProxyDelegate ( ModContainer mod ) <nl> + { <nl> + ProxyInjector injector = mod . findSidedProxy ( ) ; <nl> + if ( injector ! = null ) <nl> + { <nl> + injector . inject ( mod , sidedDelegate . getSide ( ) ) ; <nl> + } <nl> + } <nl> + <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / FMLModContainer . java b / fml / common / cpw / mods / fml / common / FMLModContainer . java <nl> index cb6ae44 . . b6f74a5 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / FMLModContainer . java <nl> + + + b / fml / common / cpw / mods / fml / common / FMLModContainer . java <nl> @ @ - 397 , 4 + 397 , 13 @ @ public class FMLModContainer implements ModContainer <nl> / / TODO Auto - generated method stub <nl> return null ; <nl> } <nl> + / * ( non - Javadoc ) <nl> + * @ see cpw . mods . fml . common . ModContainer # findSidedProxy ( ) <nl> + * / <nl> + @ Override <nl> + public ProxyInjector findSidedProxy ( ) <nl> + { <nl> + / / TODO Auto - generated method stub <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java <nl> index ad1124c . . 2724bce 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java <nl> + + + b / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java <nl> @ @ - 7 , 6 + 7 , 7 @ @ import java . util . List ; <nl> import java . util . Properties ; <nl> import java . util . logging . Logger ; <nl> <nl> + import cpw . mods . fml . common . modloader . BaseMod ; <nl> import cpw . mods . fml . common . modloader . ModProperty ; <nl> <nl> public interface IFMLSidedHandler <nl> @ @ - 15 , 8 + 16 , 6 @ @ public interface IFMLSidedHandler <nl> File getMinecraftRootDirectory ( ) ; <nl> boolean isModLoaderMod ( Class < ? > clazz ) ; <nl> ModContainer loadBaseModMod ( Class < ? > clazz , File canonicalFile ) ; <nl> - boolean isServer ( ) ; <nl> - boolean isClient ( ) ; <nl> Object getMinecraftInstance ( ) ; <nl> String getCurrentLanguage ( ) ; <nl> Properties getCurrentLanguageTable ( ) ; <nl> @ @ - 26 , 4 + 25 , 6 @ @ public interface IFMLSidedHandler <nl> void profileEnd ( ) ; <nl> ModProperty getModLoaderPropertyFor ( Field f ) ; <nl> List < String > getAdditionalBrandingInformation ( ) ; <nl> + Side getSide ( ) ; <nl> + ProxyInjector findSidedProxyOn ( BaseMod mod ) ; <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / Loader . java b / fml / common / cpw / mods / fml / common / Loader . java <nl> index 487fbe6 . . 24f5b98 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / common / cpw / mods / fml / common / Loader . java <nl> @ @ - 242 , 6 + 242 , 8 @ @ public class Loader <nl> if ( mod . getMetadata ( ) ! = null ) { <nl> mod . getMetadata ( ) . associate ( namedMods ) ; <nl> } <nl> + <nl> + FMLCommonHandler . instance ( ) . injectSidedProxyDelegate ( mod ) ; <nl> } <nl> log . fine ( " Mod pre - initialization complete " ) ; <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / ModContainer . java b / fml / common / cpw / mods / fml / common / ModContainer . java <nl> index b461a8d . . 675c0e5 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / ModContainer . java <nl> + + + b / fml / common / cpw / mods / fml / common / ModContainer . java <nl> @ @ - 241 , 4 + 241 , 8 @ @ public interface ModContainer <nl> * @ return <nl> * / <nl> String getVersion ( ) ; <nl> + / * * <nl> + * @ return <nl> + * / <nl> + ProxyInjector findSidedProxy ( ) ; <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / ProxyInjector . java b / fml / common / cpw / mods / fml / common / ProxyInjector . java <nl> new file mode 100644 <nl> index 0000000 . . 6ef5564 <nl> - - - / dev / null <nl> + + + b / fml / common / cpw / mods / fml / common / ProxyInjector . java <nl> @ @ - 0 , 0 + 1 , 76 @ @ <nl> + / * <nl> + * The FML Forge Mod Loader suite . <nl> + * Copyright ( C ) 2012 cpw <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 <nl> + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package cpw . mods . fml . common ; <nl> + <nl> + import java . lang . reflect . Field ; <nl> + <nl> + / * * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public class ProxyInjector <nl> + { <nl> + private String clientName ; <nl> + private String serverName ; <nl> + private String bukkitName ; <nl> + private Field target ; <nl> + <nl> + public ProxyInjector ( String clientName , String serverName , String bukkitName , Field target ) <nl> + { <nl> + this . clientName = clientName ; <nl> + this . serverName = serverName ; <nl> + this . bukkitName = bukkitName ; <nl> + this . target = target ; <nl> + } <nl> + <nl> + public boolean isValidFor ( Side type ) <nl> + { <nl> + if ( type = = Side . CLIENT ) <nl> + { <nl> + return ! this . clientName . isEmpty ( ) ; <nl> + } <nl> + else if ( type = = Side . SERVER ) <nl> + { <nl> + return ! this . serverName . isEmpty ( ) ; <nl> + } <nl> + else if ( type = = Side . BUKKIT ) <nl> + { <nl> + return ! this . bukkitName . isEmpty ( ) ; <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + public void inject ( ModContainer mod , Side side ) <nl> + { <nl> + String targetType = side = = Side . CLIENT ? clientName : serverName ; <nl> + try <nl> + { <nl> + Object proxy = Class . forName ( targetType , false , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; <nl> + if ( target . getType ( ) . isAssignableFrom ( proxy . getClass ( ) ) ) <nl> + { <nl> + target . set ( mod . getMod ( ) , proxy ) ; <nl> + } else { <nl> + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . severe ( String . format ( " Attempted to load a proxy type % s into % s , but the types don ' t match " , targetType , target . getName ( ) ) ) ; <nl> + throw new LoaderException ( ) ; <nl> + } <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . severe ( String . format ( " An error occured trying to load a proxy type % s into % s " , targetType , target . getName ( ) ) ) ; <nl> + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . throwing ( " ProxyInjector " , " inject " , e ) ; <nl> + throw new LoaderException ( e ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / fml / common / cpw / mods / fml / common / Side . java b / fml / common / cpw / mods / fml / common / Side . java <nl> new file mode 100644 <nl> index 0000000 . . 18e3ba7 <nl> - - - / dev / null <nl> + + + b / fml / common / cpw / mods / fml / common / Side . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * <nl> + * The FML Forge Mod Loader suite . <nl> + * Copyright ( C ) 2012 cpw <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 <nl> + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package cpw . mods . fml . common ; <nl> + <nl> + public enum Side { <nl> + CLIENT , SERVER , BUKKIT ; <nl> + <nl> + / * * <nl> + * @ return <nl> + * / <nl> + public boolean isServer ( ) <nl> + { <nl> + return ! isClient ( ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return <nl> + * / <nl> + public boolean isClient ( ) <nl> + { <nl> + return this = = CLIENT ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java b / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java <nl> index c9d0cb5 . . 26006b5 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java <nl> + + + b / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java <nl> @ @ - 34 , 13 + 34 , 13 @ @ public class ModLoaderHelper <nl> ModLoaderModContainer mlmc = findOrBuildModContainer ( mod ) ; <nl> EnumSet < TickType > ticks = mlmc . getTickTypes ( ) ; <nl> / / If we ' re enabled and we don ' t want clock ticks we get render ticks <nl> - if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . isClient ( ) ) { <nl> + if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . getSide ( ) . isClient ( ) ) { <nl> ticks . add ( TickType . RENDER ) ; <nl> } else { <nl> ticks . remove ( TickType . RENDER ) ; <nl> } <nl> / / If we ' re enabled but we want clock ticks , or we ' re server side we get world ticks <nl> - if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . isServer ( ) ) ) { <nl> + if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . getSide ( ) . isServer ( ) ) ) { <nl> ticks . add ( TickType . WORLD ) ; <nl> } else { <nl> ticks . remove ( TickType . WORLD ) ; <nl> @ @ - 56 , 13 + 56 , 13 @ @ public class ModLoaderHelper <nl> ModLoaderModContainer mlmc = findOrBuildModContainer ( mod ) ; <nl> EnumSet < TickType > ticks = mlmc . getTickTypes ( ) ; <nl> / / If we ' re enabled and we don ' t want clock ticks we get render ticks <nl> - if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . isClient ( ) ) { <nl> + if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . getSide ( ) . isClient ( ) ) { <nl> ticks . add ( TickType . GUI ) ; <nl> } else { <nl> ticks . remove ( TickType . GUI ) ; <nl> } <nl> / / If we ' re enabled but we want clock ticks , or we ' re server side we get world ticks <nl> - if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . isServer ( ) ) ) { <nl> + if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . getSide ( ) . isServer ( ) ) ) { <nl> ticks . add ( TickType . WORLDGUI ) ; <nl> } else { <nl> ticks . remove ( TickType . WORLDGUI ) ; <nl> diff - - git a / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java b / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java <nl> index 2a81a5c . . d5fc329 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java <nl> + + + b / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java <nl> @ @ - 47 , 6 + 47 , 7 @ @ import cpw . mods . fml . common . ModContainer . ModState ; <nl> import cpw . mods . fml . common . ModContainer . SourceType ; <nl> import cpw . mods . fml . common . ModContainer . TickType ; <nl> import cpw . mods . fml . common . ModMetadata ; <nl> + import cpw . mods . fml . common . ProxyInjector ; <nl> <nl> public class ModLoaderModContainer implements ModContainer <nl> { <nl> @ @ - 681 , 4 + 682 , 13 @ @ public class ModLoaderModContainer implements ModContainer <nl> { <nl> return mod ! = null ? mod . getVersion ( ) : " Not available " ; <nl> } <nl> + <nl> + / * ( non - Javadoc ) <nl> + * @ see cpw . mods . fml . common . ModContainer # findSidedProxy ( ) <nl> + * / <nl> + @ Override <nl> + public ProxyInjector findSidedProxy ( ) <nl> + { <nl> + return FMLCommonHandler . instance ( ) . getSidedDelegate ( ) . findSidedProxyOn ( mod ) ; <nl> + } <nl> } <nl> diff - - git a / fml / server / cpw / mods / fml / server / FMLServerHandler . java b / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> index 9fca2b8 . . b857418 100644 <nl> - - - a / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / server / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 42 , 6 + 42 , 7 @ @ import net . minecraft . src . Packet250CustomPayload ; <nl> import net . minecraft . src . Packet3Chat ; <nl> import net . minecraft . src . Profiler ; <nl> import net . minecraft . src . ServerRegistry ; <nl> + import net . minecraft . src . SidedProxy ; <nl> import net . minecraft . src . StringTranslate ; <nl> import net . minecraft . src . World ; <nl> import net . minecraft . src . WorldType ; <nl> @ @ - 50 , 7 + 51 , 9 @ @ import cpw . mods . fml . common . IFMLSidedHandler ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . ModMetadata ; <nl> + import cpw . mods . fml . common . ProxyInjector ; <nl> import cpw . mods . fml . common . ReflectionHelper ; <nl> + import cpw . mods . fml . common . Side ; <nl> import cpw . mods . fml . common . modloader . ModLoaderModContainer ; <nl> import cpw . mods . fml . common . modloader . ModProperty ; <nl> import cpw . mods . fml . common . registry . FMLRegistry ; <nl> @ @ - 478 , 24 + 481 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> } <nl> <nl> - / * * <nl> - * Are we a server ? <nl> - * / <nl> - @ Override <nl> - public boolean isServer ( ) <nl> - { <nl> - return true ; <nl> - } <nl> - <nl> - / * * <nl> - * Are we a client ? <nl> - * / <nl> - @ Override <nl> - public boolean isClient ( ) <nl> - { <nl> - return false ; <nl> - } <nl> - <nl> @ Override <nl> public File getMinecraftRootDirectory ( ) <nl> { <nl> @ @ - 645 , 4 + 630 , 30 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> return null ; <nl> } <nl> + <nl> + / * ( non - Javadoc ) <nl> + * @ see cpw . mods . fml . common . IFMLSidedHandler # getSide ( ) <nl> + * / <nl> + @ Override <nl> + public Side getSide ( ) <nl> + { <nl> + return Side . SERVER ; <nl> + } <nl> + <nl> + / * ( non - Javadoc ) <nl> + * @ see cpw . mods . fml . common . IFMLSidedHandler # findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod ) <nl> + * / <nl> + @ Override <nl> + public ProxyInjector findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod mod ) <nl> + { <nl> + for ( Field f : mod . getClass ( ) . getDeclaredFields ( ) ) <nl> + { <nl> + if ( f . isAnnotationPresent ( SidedProxy . class ) ) <nl> + { <nl> + SidedProxy sp = f . getAnnotation ( SidedProxy . class ) ; <nl> + return new ProxyInjector ( sp . clientSide ( ) , sp . serverSide ( ) , sp . bukkitSide ( ) , f ) ; <nl> + } <nl> + } <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / fml / server / net / minecraft / src / SidedProxy . java b / fml / server / net / minecraft / src / SidedProxy . java <nl> new file mode 100644 <nl> index 0000000 . . 008d63d <nl> - - - / dev / null <nl> + + + b / fml / server / net / minecraft / src / SidedProxy . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * The FML Forge Mod Loader suite . <nl> + * Copyright ( C ) 2012 cpw <nl> + * <nl> + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free <nl> + * Software Foundation ; either version 2 . 1 of the License , or any later version . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR <nl> + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 <nl> + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraft . src ; <nl> + <nl> + / * * <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public @ interface SidedProxy <nl> + { <nl> + / * * <nl> + * The name of the client side class to load and populate <nl> + * @ return <nl> + * / <nl> + String clientSide ( ) default " " ; <nl> + <nl> + / * * <nl> + * The name of the server side class to load and populate <nl> + * @ return <nl> + * / <nl> + String serverSide ( ) default " " ; <nl> + <nl> + / * * <nl> + * The name of the a special bukkit plugin class to load and populate <nl> + * / <nl> + String bukkitSide ( ) default " " ; <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java 
 index d78b2bf . . eb721ad 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / ArtifactVersion . java 
 @ @ - 16 , 15 + 16 , 12 @ @ 
 * License along with this library ; if not , write to the Free Software 
 * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 * / 
 - 
 package net . minecraftforge . fml . common . versioning ; 
 
 - / * * 
 - * Describes an artifact version in terms of its components , converts it to / from a string and 
 - * compares two versions . 
 - * 
 - * @ author < a href = " mailto : brett @ apache . org " > Brett Porter < / a > 
 - * / 
 + / / I beleive this is a unique class except that it uses the same name so that ComparibleVersion can stay the same . 
 + / / Best reference I could find : https : / / github . com / apache / maven / blob / 3501485ed2280e30ba74eb9f0e1c6422b68a3228 / maven - artifact / src / main / java / org / apache / maven / artifact / versioning / ArtifactVersion . java 
 + / / This entire package * should * be removed and updated to normal maven - artifact library in 1 . 13 . 
 + 
 public interface ArtifactVersion 
 extends Comparable < ArtifactVersion > 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java 
 index ff4f45e . . f892b9e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / ComparableVersion . java 
 @ @ - 1 , 24 + 1 , 27 @ @ 
 / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 + * Repackaged and some modifications done by Forge , see in - line comments . 
 + * / 
 + package net . minecraftforge . fml . common . versioning ; 
 + 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 * / 
 
 - package net . minecraftforge . fml . common . versioning ; 
 - 
 import java . math . BigInteger ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 @ @ - 102 , 19 + 105 , 19 @ @ public class ComparableVersion 
 this . value = new BigInteger ( str ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int getType ( ) 
 { 
 return INTEGER _ ITEM ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public boolean isNull ( ) 
 { 
 return BigInteger _ ZERO . equals ( value ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int compareTo ( Item item ) 
 { 
 if ( item = = null ) 
 @ @ - 138 , 7 + 141 , 7 @ @ public class ComparableVersion 
 } 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public String toString ( ) 
 { 
 return value . toString ( ) ; 
 @ @ - 192 , 13 + 195 , 13 @ @ public class ComparableVersion 
 this . value = ALIASES . getProperty ( value , value ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int getType ( ) 
 { 
 return STRING _ ITEM ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public boolean isNull ( ) 
 { 
 return ( comparableQualifier ( value ) . compareTo ( RELEASE _ VERSION _ INDEX ) = = 0 ) ; 
 @ @ - 223 , 7 + 226 , 7 @ @ public class ComparableVersion 
 return i = = - 1 ? ( _ QUALIFIERS . size ( ) + " - " + qualifier ) : String . valueOf ( i ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int compareTo ( Item item ) 
 { 
 if ( item = = null ) 
 @ @ - 247 , 7 + 250 , 7 @ @ public class ComparableVersion 
 } 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public String toString ( ) 
 { 
 return value ; 
 @ @ - 262 , 18 + 265 , 15 @ @ public class ComparableVersion 
 extends ArrayList < Item > 
 implements Item 
 { 
 - / * * 
 - * 
 - * / 
 - private static final long serialVersionUID = 1L ; 
 + private static final long serialVersionUID = 1L ; / / Forge : added to quiet warnings . 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int getType ( ) 
 { 
 return LIST _ ITEM ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public boolean isNull ( ) 
 { 
 return ( size ( ) = = 0 ) ; 
 @ @ - 295 , 7 + 295 , 7 @ @ public class ComparableVersion 
 } 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int compareTo ( Item item ) 
 { 
 if ( item = = null ) 
 @ @ - 340 , 7 + 340 , 7 @ @ public class ComparableVersion 
 } 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public String toString ( ) 
 { 
 StringBuilder buffer = new StringBuilder ( " ( " ) ; 
 @ @ - 462 , 25 + 462 , 25 @ @ public class ComparableVersion 
 return isDigit ? new IntegerItem ( buf ) : new StringItem ( buf , false ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int compareTo ( ComparableVersion o ) 
 { 
 return items . compareTo ( o . items ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public String toString ( ) 
 { 
 return value ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public boolean equals ( Object o ) 
 { 
 return ( o instanceof ComparableVersion ) & & canonical . equals ( ( ( ComparableVersion ) o ) . canonical ) ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Add @ Override 
 public int hashCode ( ) 
 { 
 return canonical . hashCode ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 index ec0d0e3 . . c2a9f35 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / DefaultArtifactVersion . java 
 @ @ - 16 , 7 + 16 , 6 @ @ 
 * License along with this library ; if not , write to the Free Software 
 * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 * / 
 - 
 package net . minecraftforge . fml . common . versioning ; 
 
 public class DefaultArtifactVersion implements ArtifactVersion 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java b / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java 
 index b9eec55 . . 7f24bcd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java 
 @ @ - 1 , 24 + 1 , 27 @ @ 
 / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 + * Repackaged by Forge , otherwise unchangeed 
 + * / 
 + package net . minecraftforge . fml . common . versioning ; 
 + 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 * / 
 
 - package net . minecraftforge . fml . common . versioning ; 
 - 
 / * * 
 * Occurs when a version is invalid . 
 * 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 index 0e19bb8 . . 7ab25c1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / Restriction . java 
 @ @ - 1 , 26 + 1 , 28 @ @ 
 / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * Repackaged and some modifications done by Forge , see in - line comments . 
 * / 
 - 
 package net . minecraftforge . fml . common . versioning ; 
 
 - import net . minecraft . util . text . translation . I18n ; 
 + / * 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 + * / 
 
 + import net . minecraft . util . text . translation . I18n ; / / Forge : Added imports 
 import javax . annotation . Nullable ; 
 
 / * * 
 @ @ - 40 , 7 + 42 , 7 @ @ public class Restriction 
 
 public static final Restriction EVERYTHING = new Restriction ( null , false , null , false ) ; 
 
 - public Restriction ( @ Nullable ArtifactVersion lowerBound , boolean lowerBoundInclusive , @ Nullable ArtifactVersion upperBound , 
 + public Restriction ( @ Nullable ArtifactVersion lowerBound , boolean lowerBoundInclusive , @ Nullable ArtifactVersion upperBound , / / Forge : Added @ Nullable 
 boolean upperBoundInclusive ) 
 { 
 this . lowerBound = lowerBound ; 
 @ @ - 49 , 7 + 51 , 7 @ @ public class Restriction 
 this . upperBoundInclusive = upperBoundInclusive ; 
 } 
 
 - @ Nullable 
 + @ Nullable / / Forge : Added @ Nullable 
 public ArtifactVersion getLowerBound ( ) 
 { 
 return lowerBound ; 
 @ @ - 60 , 7 + 62 , 7 @ @ public class Restriction 
 return lowerBoundInclusive ; 
 } 
 
 - @ Nullable 
 + @ Nullable / / Forge : Added @ Nullable 
 public ArtifactVersion getUpperBound ( ) 
 { 
 return upperBound ; 
 @ @ - 184 , 7 + 186 , 7 @ @ public class Restriction 
 return true ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Added @ Override 
 public String toString ( ) 
 { 
 StringBuilder buf = new StringBuilder ( ) ; 
 @ @ - 204 , 6 + 206 , 7 @ @ public class Restriction 
 return buf . toString ( ) ; 
 } 
 
 + / / Forge : Added toStringFriendly , uses Minecraft ' s localization engine to create user friendly localized message . 
 public String toStringFriendly ( ) 
 { 
 if ( getLowerBound ( ) = = null & & getUpperBound ( ) = = null ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 index 4f1ea56 . . a9e42e6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / versioning / VersionRange . java 
 @ @ - 1 , 25 + 1 , 25 @ @ 
 / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * Repackaged and some modifications done by Forge , see in - line comments . 
 * / 
 - 
 package net . minecraftforge . fml . common . versioning ; 
 + 
 / * 
 - * Modifications by cpw under LGPL 2 . 1 or later 
 + * Licensed to the Apache Software Foundation ( ASF ) under one 
 + * or more contributor license agreements . See the NOTICE file 
 + * distributed with this work for additional information 
 + * regarding copyright ownership . The ASF licenses this file 
 + * to you under the Apache License , Version 2 . 0 ( the 
 + * " License " ) ; you may not use this file except in compliance 
 + * with the License . You may obtain a copy of the License at 
 + * 
 + * http : / / www . apache . org / licenses / LICENSE - 2 . 0 
 + * 
 + * Unless required by applicable law or agreed to in writing , 
 + * software distributed under the License is distributed on an 
 + * " AS IS " BASIS , WITHOUT WARRANTIES OR CONDITIONS OF ANY 
 + * KIND , either express or implied . See the License for the 
 + * specific language governing permissions and limitations 
 + * under the License . 
 * / 
 
 import java . util . ArrayList ; 
 @ @ - 27 , 8 + 27 , 7 @ @ import java . util . Collections ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 
 - import com . google . common . base . Joiner ; 
 - 
 + import com . google . common . base . Joiner ; / / Forge : Add Imports 
 import javax . annotation . Nullable ; 
 
 / * * 
 @ @ - 75 , 7 + 74 , 8 @ @ public class VersionRange 
 
 return new VersionRange ( recommendedVersion , copiedRestrictions ) ; 
 } 
 - 
 + 
 + / / Forge : Added factory function 
 / * * 
 * Factory method , for custom versioning schemes 
 * @ param version version 
 @ @ - 86 , 6 + 86 , 7 @ @ public class VersionRange 
 { 
 return new VersionRange ( version , restrictions ) ; 
 } 
 + 
 / * * 
 * Create a version range from a string representation 
 * < p / > 
 @ @ - 103 , 7 + 104 , 7 @ @ public class VersionRange 
 * @ throws InvalidVersionSpecificationException 
 * 
 * / 
 - public static VersionRange createFromVersionSpec ( @ Nullable String spec ) 
 + public static VersionRange createFromVersionSpec ( @ Nullable String spec ) / / Forge : Added @ Nullable 
 throws InvalidVersionSpecificationException 
 { 
 if ( spec = = null ) 
 @ @ - 230 , 14 + 231 , 10 @ @ public class VersionRange 
 return restriction ; 
 } 
 
 - public static VersionRange createFromVersion ( String version , ArtifactVersion existing ) 
 + public static VersionRange createFromVersion ( String version , ArtifactVersion existing ) / / Forge : Added existing argument 
 { 
 List < Restriction > restrictions = Collections . emptyList ( ) ; 
 - if ( existing = = null ) 
 - { 
 - existing = new DefaultArtifactVersion ( version ) ; 
 - } 
 - return new VersionRange ( existing , restrictions ) ; 
 + return new VersionRange ( existing ! = null ? existing : new DefaultArtifactVersion ( version ) , restrictions ) ; 
 } 
 
 / * * 
 @ @ - 472 , 20 + 469 , 24 @ @ public class VersionRange 
 
 return restrictions ; 
 } 
 + 
 + 
 + / / Forge : Removed getSelectedVersion and isSelectedVersion 
 
 - @ Override 
 + @ Override / / Forge : Added @ Override 
 public String toString ( ) 
 { 
 if ( recommendedVersion ! = null ) 
 { 
 - return recommendedVersion . getVersionString ( ) ; 
 + return recommendedVersion . getVersionString ( ) ; / / Forge : Version string specifically . 
 } 
 else 
 { 
 - return Joiner . on ( ' , ' ) . join ( restrictions ) ; 
 + return Joiner . on ( ' , ' ) . join ( restrictions ) ; / / Forge : Changeed from iterator loop to joiner . 
 } 
 } 
 
 + / / Forge : Added friendly { localized } toString 
 public String toStringFriendly ( ) 
 { 
 if ( recommendedVersion ! = null ) 
 @ @ - 539 , 7 + 540 , 7 @ @ public class VersionRange 
 return ! restrictions . isEmpty ( ) & & recommendedVersion = = null ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Added @ Override 
 public boolean equals ( Object obj ) 
 { 
 if ( this = = obj ) 
 @ @ - 561 , 7 + 562 , 7 @ @ public class VersionRange 
 return equals ; 
 } 
 
 - @ Override 
 + @ Override / / Forge : Added @ Override 
 public int hashCode ( ) 
 { 
 int hash = 7 ; 
 @ @ - 570 , 11 + 571 , 13 @ @ public class VersionRange 
 return hash ; 
 } 
 
 + / / Forge : Added @ isUnboundedAbove 
 public boolean isUnboundedAbove ( ) 
 { 
 return restrictions . size ( ) = = 1 & & restrictions . get ( 0 ) . getUpperBound ( ) = = null & & ! restrictions . get ( 0 ) . isUpperBoundInclusive ( ) ; 
 } 
 
 + / / Forge : Added @ getLowerBoundString 
 public String getLowerBoundString ( ) 
 { 
 return restrictions . size ( ) = = 1 ? restrictions . get ( 0 ) . getLowerBound ( ) . getVersionString ( ) : " " ;

NEAREST DIFF:
diff - - git a / fml / client / cpw / mods / fml / client / FMLClientHandler . java b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 index 338a95f . . f954507 100644 
 - - - a / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / client / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 70 , 6 + 70 , 7 @ @ import net . minecraft . src . RenderBlocks ; 
 import net . minecraft . src . RenderEngine ; 
 import net . minecraft . src . RenderManager ; 
 import net . minecraft . src . RenderPlayer ; 
 + import net . minecraft . src . SidedProxy ; 
 import net . minecraft . src . StringTranslate ; 
 import net . minecraft . src . TextureFX ; 
 import net . minecraft . src . TexturePackBase ; 
 @ @ - 85 , 7 + 86 , 9 @ @ import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . ModContainer . TickType ; 
 import cpw . mods . fml . common . ModMetadata ; 
 + import cpw . mods . fml . common . ProxyInjector ; 
 import cpw . mods . fml . common . ReflectionHelper ; 
 + import cpw . mods . fml . common . Side ; 
 import cpw . mods . fml . common . modloader . ModLoaderHelper ; 
 import cpw . mods . fml . common . modloader . ModLoaderModContainer ; 
 import cpw . mods . fml . common . modloader . ModProperty ; 
 @ @ - 581 , 24 + 584 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 } 
 } 
 
 - / * * 
 - * Are we a server ? 
 - * / 
 - @ Override 
 - public boolean isServer ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - / * * 
 - * Are we a client ? 
 - * / 
 - @ Override 
 - public boolean isClient ( ) 
 - { 
 - return true ; 
 - } 
 - 
 @ Override 
 public File getMinecraftRootDirectory ( ) 
 { 
 @ @ - 1126 , 4 + 1111 , 24 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 return Collections . emptyList ( ) ; 
 } 
 } 
 + 
 + @ Override 
 + public Side getSide ( ) 
 + { 
 + return Side . CLIENT ; 
 + } 
 + 
 + @ Override 
 + public ProxyInjector findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod mod ) 
 + { 
 + for ( Field f : mod . getClass ( ) . getDeclaredFields ( ) ) 
 + { 
 + if ( f . isAnnotationPresent ( SidedProxy . class ) ) 
 + { 
 + SidedProxy sp = f . getAnnotation ( SidedProxy . class ) ; 
 + return new ProxyInjector ( sp . clientSide ( ) , sp . serverSide ( ) , sp . bukkitSide ( ) , f ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 } 
 diff - - git a / fml / client / cpw / mods / fml / client / OptifineModContainer . java b / fml / client / cpw / mods / fml / client / OptifineModContainer . java 
 index 40ae4af . . 944dca9 100644 
 - - - a / fml / client / cpw / mods / fml / client / OptifineModContainer . java 
 + + + b / fml / client / cpw / mods / fml / client / OptifineModContainer . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 + import cpw . mods . fml . common . FMLModContainer ; 
 import cpw . mods . fml . common . IConsoleHandler ; 
 import cpw . mods . fml . common . ICraftingHandler ; 
 import cpw . mods . fml . common . IDispenseHandler ; 
 @ @ - 34 , 7 + 35 , 7 @ @ import cpw . mods . fml . common . ModMetadata ; 
 * @ author cpw 
 * 
 * / 
 - public class OptifineModContainer implements ModContainer 
 + public class OptifineModContainer extends FMLModContainer 
 { 
 private String optifineVersion ; 
 private ModMetadata metadata ; 
 @ @ - 43 , 6 + 44 , 7 @ @ public class OptifineModContainer implements ModContainer 
 * / 
 public OptifineModContainer ( Class < ? > optifineConfig ) 
 { 
 + super ( " Optifine " ) ; 
 try 
 { 
 optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; 
 @ @ - 54 , 245 + 56 , 10 @ @ public class OptifineModContainer implements ModContainer 
 } 
 
 @ Override 
 - public boolean wantsPreInit ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsPostInit ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public void preInit ( ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public void init ( ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public void postInit ( ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 public String getName ( ) 
 { 
 return " Optifine " ; 
 } 
 - 
 - @ Override 
 - public ModState getModState ( ) 
 - { 
 - return ModState . AVAILABLE ; 
 - } 
 - 
 - @ Override 
 - public void nextState ( ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public void tickStart ( TickType tick , Object . . . data ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public void tickEnd ( TickType tick , Object . . . data ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public boolean matches ( Object mod ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public File getSource ( ) 
 - { 
 - return new File ( " . " ) ; 
 - } 
 - 
 - @ Override 
 - public String getSortingRules ( ) 
 - { 
 - return " " ; 
 - } 
 - 
 - @ Override 
 - public Object getMod ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public boolean generatesWorld ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public IWorldGenerator getWorldGenerator ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public int lookupFuelValue ( int itemId , int itemDamage ) 
 - { 
 - return 0 ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsPickupNotification ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public IPickupNotifier getPickupNotifier ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsToDispense ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public IDispenseHandler getDispenseHandler ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsCraftingNotification ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public ICraftingHandler getCraftingHandler ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public List < String > getDependencies ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public List < String > getPreDepends ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public List < String > getPostDepends ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsNetworkPackets ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public INetworkHandler getNetworkHandler ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public boolean ownsNetworkChannel ( String channel ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsConsoleCommands ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public IConsoleHandler getConsoleHandler ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public boolean wantsPlayerTracking ( ) 
 - { 
 - return false ; 
 - } 
 - 
 - @ Override 
 - public IPlayerTracker getPlayerTracker ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public List < IKeyHandler > getKeys ( ) 
 - { 
 - return null ; 
 - } 
 - 
 - @ Override 
 - public SourceType getSourceType ( ) 
 - { 
 - return SourceType . CLASSPATH ; 
 - } 
 - 
 - @ Override 
 - public void setSourceType ( SourceType type ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public ModMetadata getMetadata ( ) 
 - { 
 - return metadata ; 
 - } 
 - 
 - @ Override 
 - public void setMetadata ( ModMetadata meta ) 
 - { 
 - this . metadata = meta ; 
 - } 
 - 
 - @ Override 
 - public void gatherRenderers ( Map renderers ) 
 - { 
 - 
 - } 
 - 
 - @ Override 
 - public void requestAnimations ( ) 
 - { 
 - 
 - } 
 - 
 @ Override 
 public String getVersion ( ) 
 { 
 diff - - git a / fml / client / net / minecraft / src / SidedProxy . java b / fml / client / net / minecraft / src / SidedProxy . java 
 new file mode 100644 
 index 0000000 . . 008d63d 
 - - - / dev / null 
 + + + b / fml / client / net / minecraft / src / SidedProxy . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * The FML Forge Mod Loader suite . 
 + * Copyright ( C ) 2012 cpw 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 
 + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraft . src ; 
 + 
 + / * * 
 + * @ author cpw 
 + * 
 + * / 
 + public @ interface SidedProxy 
 + { 
 + / * * 
 + * The name of the client side class to load and populate 
 + * @ return 
 + * / 
 + String clientSide ( ) default " " ; 
 + 
 + / * * 
 + * The name of the server side class to load and populate 
 + * @ return 
 + * / 
 + String serverSide ( ) default " " ; 
 + 
 + / * * 
 + * The name of the a special bukkit plugin class to load and populate 
 + * / 
 + String bukkitSide ( ) default " " ; 
 + } 
 diff - - git a / fml / common / cpw / mods / fml / common / FMLCommonHandler . java b / fml / common / cpw / mods / fml / common / FMLCommonHandler . java 
 index 94b2b20 . . 108cc12 100644 
 - - - a / fml / common / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / common / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 371 , 20 + 371 , 9 @ @ public class FMLCommonHandler 
 languagePack . putAll ( langPack ) ; 
 } 
 
 - / * * 
 - * @ return 
 - * / 
 - public boolean isServer ( ) 
 - { 
 - return sidedDelegate . isServer ( ) ; 
 - } 
 - 
 - / * * 
 - * @ return 
 - * / 
 - public boolean isClient ( ) 
 + public Side getSide ( ) 
 { 
 - return sidedDelegate . isClient ( ) ; 
 + return sidedDelegate . getSide ( ) ; 
 } 
 
 public void addAuxilliaryModContainer ( ModContainer ticker ) 
 @ @ - 514 , 4 + 503 , 16 @ @ public class FMLCommonHandler 
 return sidedDelegate ; 
 } 
 
 + / * * 
 + * @ param mod 
 + * / 
 + public void injectSidedProxyDelegate ( ModContainer mod ) 
 + { 
 + ProxyInjector injector = mod . findSidedProxy ( ) ; 
 + if ( injector ! = null ) 
 + { 
 + injector . inject ( mod , sidedDelegate . getSide ( ) ) ; 
 + } 
 + } 
 + 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / FMLModContainer . java b / fml / common / cpw / mods / fml / common / FMLModContainer . java 
 index cb6ae44 . . b6f74a5 100644 
 - - - a / fml / common / cpw / mods / fml / common / FMLModContainer . java 
 + + + b / fml / common / cpw / mods / fml / common / FMLModContainer . java 
 @ @ - 397 , 4 + 397 , 13 @ @ public class FMLModContainer implements ModContainer 
 / / TODO Auto - generated method stub 
 return null ; 
 } 
 + / * ( non - Javadoc ) 
 + * @ see cpw . mods . fml . common . ModContainer # findSidedProxy ( ) 
 + * / 
 + @ Override 
 + public ProxyInjector findSidedProxy ( ) 
 + { 
 + / / TODO Auto - generated method stub 
 + return null ; 
 + } 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java b / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java 
 index ad1124c . . 2724bce 100644 
 - - - a / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java 
 + + + b / fml / common / cpw / mods / fml / common / IFMLSidedHandler . java 
 @ @ - 7 , 6 + 7 , 7 @ @ import java . util . List ; 
 import java . util . Properties ; 
 import java . util . logging . Logger ; 
 
 + import cpw . mods . fml . common . modloader . BaseMod ; 
 import cpw . mods . fml . common . modloader . ModProperty ; 
 
 public interface IFMLSidedHandler 
 @ @ - 15 , 8 + 16 , 6 @ @ public interface IFMLSidedHandler 
 File getMinecraftRootDirectory ( ) ; 
 boolean isModLoaderMod ( Class < ? > clazz ) ; 
 ModContainer loadBaseModMod ( Class < ? > clazz , File canonicalFile ) ; 
 - boolean isServer ( ) ; 
 - boolean isClient ( ) ; 
 Object getMinecraftInstance ( ) ; 
 String getCurrentLanguage ( ) ; 
 Properties getCurrentLanguageTable ( ) ; 
 @ @ - 26 , 4 + 25 , 6 @ @ public interface IFMLSidedHandler 
 void profileEnd ( ) ; 
 ModProperty getModLoaderPropertyFor ( Field f ) ; 
 List < String > getAdditionalBrandingInformation ( ) ; 
 + Side getSide ( ) ; 
 + ProxyInjector findSidedProxyOn ( BaseMod mod ) ; 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / Loader . java b / fml / common / cpw / mods / fml / common / Loader . java 
 index 487fbe6 . . 24f5b98 100644 
 - - - a / fml / common / cpw / mods / fml / common / Loader . java 
 + + + b / fml / common / cpw / mods / fml / common / Loader . java 
 @ @ - 242 , 6 + 242 , 8 @ @ public class Loader 
 if ( mod . getMetadata ( ) ! = null ) { 
 mod . getMetadata ( ) . associate ( namedMods ) ; 
 } 
 + 
 + FMLCommonHandler . instance ( ) . injectSidedProxyDelegate ( mod ) ; 
 } 
 log . fine ( " Mod pre - initialization complete " ) ; 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / ModContainer . java b / fml / common / cpw / mods / fml / common / ModContainer . java 
 index b461a8d . . 675c0e5 100644 
 - - - a / fml / common / cpw / mods / fml / common / ModContainer . java 
 + + + b / fml / common / cpw / mods / fml / common / ModContainer . java 
 @ @ - 241 , 4 + 241 , 8 @ @ public interface ModContainer 
 * @ return 
 * / 
 String getVersion ( ) ; 
 + / * * 
 + * @ return 
 + * / 
 + ProxyInjector findSidedProxy ( ) ; 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / ProxyInjector . java b / fml / common / cpw / mods / fml / common / ProxyInjector . java 
 new file mode 100644 
 index 0000000 . . 6ef5564 
 - - - / dev / null 
 + + + b / fml / common / cpw / mods / fml / common / ProxyInjector . java 
 @ @ - 0 , 0 + 1 , 76 @ @ 
 + / * 
 + * The FML Forge Mod Loader suite . 
 + * Copyright ( C ) 2012 cpw 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 
 + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package cpw . mods . fml . common ; 
 + 
 + import java . lang . reflect . Field ; 
 + 
 + / * * 
 + * @ author cpw 
 + * 
 + * / 
 + public class ProxyInjector 
 + { 
 + private String clientName ; 
 + private String serverName ; 
 + private String bukkitName ; 
 + private Field target ; 
 + 
 + public ProxyInjector ( String clientName , String serverName , String bukkitName , Field target ) 
 + { 
 + this . clientName = clientName ; 
 + this . serverName = serverName ; 
 + this . bukkitName = bukkitName ; 
 + this . target = target ; 
 + } 
 + 
 + public boolean isValidFor ( Side type ) 
 + { 
 + if ( type = = Side . CLIENT ) 
 + { 
 + return ! this . clientName . isEmpty ( ) ; 
 + } 
 + else if ( type = = Side . SERVER ) 
 + { 
 + return ! this . serverName . isEmpty ( ) ; 
 + } 
 + else if ( type = = Side . BUKKIT ) 
 + { 
 + return ! this . bukkitName . isEmpty ( ) ; 
 + } 
 + return false ; 
 + } 
 + 
 + public void inject ( ModContainer mod , Side side ) 
 + { 
 + String targetType = side = = Side . CLIENT ? clientName : serverName ; 
 + try 
 + { 
 + Object proxy = Class . forName ( targetType , false , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; 
 + if ( target . getType ( ) . isAssignableFrom ( proxy . getClass ( ) ) ) 
 + { 
 + target . set ( mod . getMod ( ) , proxy ) ; 
 + } else { 
 + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . severe ( String . format ( " Attempted to load a proxy type % s into % s , but the types don ' t match " , targetType , target . getName ( ) ) ) ; 
 + throw new LoaderException ( ) ; 
 + } 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . severe ( String . format ( " An error occured trying to load a proxy type % s into % s " , targetType , target . getName ( ) ) ) ; 
 + FMLCommonHandler . instance ( ) . getFMLLogger ( ) . throwing ( " ProxyInjector " , " inject " , e ) ; 
 + throw new LoaderException ( e ) ; 
 + } 
 + } 
 + } 
 diff - - git a / fml / common / cpw / mods / fml / common / Side . java b / fml / common / cpw / mods / fml / common / Side . java 
 new file mode 100644 
 index 0000000 . . 18e3ba7 
 - - - / dev / null 
 + + + b / fml / common / cpw / mods / fml / common / Side . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * 
 + * The FML Forge Mod Loader suite . 
 + * Copyright ( C ) 2012 cpw 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 
 + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package cpw . mods . fml . common ; 
 + 
 + public enum Side { 
 + CLIENT , SERVER , BUKKIT ; 
 + 
 + / * * 
 + * @ return 
 + * / 
 + public boolean isServer ( ) 
 + { 
 + return ! isClient ( ) ; 
 + } 
 + 
 + / * * 
 + * @ return 
 + * / 
 + public boolean isClient ( ) 
 + { 
 + return this = = CLIENT ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java b / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java 
 index c9d0cb5 . . 26006b5 100644 
 - - - a / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java 
 + + + b / fml / common / cpw / mods / fml / common / modloader / ModLoaderHelper . java 
 @ @ - 34 , 13 + 34 , 13 @ @ public class ModLoaderHelper 
 ModLoaderModContainer mlmc = findOrBuildModContainer ( mod ) ; 
 EnumSet < TickType > ticks = mlmc . getTickTypes ( ) ; 
 / / If we ' re enabled and we don ' t want clock ticks we get render ticks 
 - if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . isClient ( ) ) { 
 + if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . getSide ( ) . isClient ( ) ) { 
 ticks . add ( TickType . RENDER ) ; 
 } else { 
 ticks . remove ( TickType . RENDER ) ; 
 } 
 / / If we ' re enabled but we want clock ticks , or we ' re server side we get world ticks 
 - if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . isServer ( ) ) ) { 
 + if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . getSide ( ) . isServer ( ) ) ) { 
 ticks . add ( TickType . WORLD ) ; 
 } else { 
 ticks . remove ( TickType . WORLD ) ; 
 @ @ - 56 , 13 + 56 , 13 @ @ public class ModLoaderHelper 
 ModLoaderModContainer mlmc = findOrBuildModContainer ( mod ) ; 
 EnumSet < TickType > ticks = mlmc . getTickTypes ( ) ; 
 / / If we ' re enabled and we don ' t want clock ticks we get render ticks 
 - if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . isClient ( ) ) { 
 + if ( enable & & ! useClock & & FMLCommonHandler . instance ( ) . getSide ( ) . isClient ( ) ) { 
 ticks . add ( TickType . GUI ) ; 
 } else { 
 ticks . remove ( TickType . GUI ) ; 
 } 
 / / If we ' re enabled but we want clock ticks , or we ' re server side we get world ticks 
 - if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . isServer ( ) ) ) { 
 + if ( enable & & ( useClock | | FMLCommonHandler . instance ( ) . getSide ( ) . isServer ( ) ) ) { 
 ticks . add ( TickType . WORLDGUI ) ; 
 } else { 
 ticks . remove ( TickType . WORLDGUI ) ; 
 diff - - git a / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java b / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java 
 index 2a81a5c . . d5fc329 100644 
 - - - a / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java 
 + + + b / fml / common / cpw / mods / fml / common / modloader / ModLoaderModContainer . java 
 @ @ - 47 , 6 + 47 , 7 @ @ import cpw . mods . fml . common . ModContainer . ModState ; 
 import cpw . mods . fml . common . ModContainer . SourceType ; 
 import cpw . mods . fml . common . ModContainer . TickType ; 
 import cpw . mods . fml . common . ModMetadata ; 
 + import cpw . mods . fml . common . ProxyInjector ; 
 
 public class ModLoaderModContainer implements ModContainer 
 { 
 @ @ - 681 , 4 + 682 , 13 @ @ public class ModLoaderModContainer implements ModContainer 
 { 
 return mod ! = null ? mod . getVersion ( ) : " Not available " ; 
 } 
 + 
 + / * ( non - Javadoc ) 
 + * @ see cpw . mods . fml . common . ModContainer # findSidedProxy ( ) 
 + * / 
 + @ Override 
 + public ProxyInjector findSidedProxy ( ) 
 + { 
 + return FMLCommonHandler . instance ( ) . getSidedDelegate ( ) . findSidedProxyOn ( mod ) ; 
 + } 
 } 
 diff - - git a / fml / server / cpw / mods / fml / server / FMLServerHandler . java b / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 index 9fca2b8 . . b857418 100644 
 - - - a / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / server / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 42 , 6 + 42 , 7 @ @ import net . minecraft . src . Packet250CustomPayload ; 
 import net . minecraft . src . Packet3Chat ; 
 import net . minecraft . src . Profiler ; 
 import net . minecraft . src . ServerRegistry ; 
 + import net . minecraft . src . SidedProxy ; 
 import net . minecraft . src . StringTranslate ; 
 import net . minecraft . src . World ; 
 import net . minecraft . src . WorldType ; 
 @ @ - 50 , 7 + 51 , 9 @ @ import cpw . mods . fml . common . IFMLSidedHandler ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . ModMetadata ; 
 + import cpw . mods . fml . common . ProxyInjector ; 
 import cpw . mods . fml . common . ReflectionHelper ; 
 + import cpw . mods . fml . common . Side ; 
 import cpw . mods . fml . common . modloader . ModLoaderModContainer ; 
 import cpw . mods . fml . common . modloader . ModProperty ; 
 import cpw . mods . fml . common . registry . FMLRegistry ; 
 @ @ - 478 , 24 + 481 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 } 
 
 - / * * 
 - * Are we a server ? 
 - * / 
 - @ Override 
 - public boolean isServer ( ) 
 - { 
 - return true ; 
 - } 
 - 
 - / * * 
 - * Are we a client ? 
 - * / 
 - @ Override 
 - public boolean isClient ( ) 
 - { 
 - return false ; 
 - } 
 - 
 @ Override 
 public File getMinecraftRootDirectory ( ) 
 { 
 @ @ - 645 , 4 + 630 , 30 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 return null ; 
 } 
 + 
 + / * ( non - Javadoc ) 
 + * @ see cpw . mods . fml . common . IFMLSidedHandler # getSide ( ) 
 + * / 
 + @ Override 
 + public Side getSide ( ) 
 + { 
 + return Side . SERVER ; 
 + } 
 + 
 + / * ( non - Javadoc ) 
 + * @ see cpw . mods . fml . common . IFMLSidedHandler # findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod ) 
 + * / 
 + @ Override 
 + public ProxyInjector findSidedProxyOn ( cpw . mods . fml . common . modloader . BaseMod mod ) 
 + { 
 + for ( Field f : mod . getClass ( ) . getDeclaredFields ( ) ) 
 + { 
 + if ( f . isAnnotationPresent ( SidedProxy . class ) ) 
 + { 
 + SidedProxy sp = f . getAnnotation ( SidedProxy . class ) ; 
 + return new ProxyInjector ( sp . clientSide ( ) , sp . serverSide ( ) , sp . bukkitSide ( ) , f ) ; 
 + } 
 + } 
 + return null ; 
 + } 
 } 
 diff - - git a / fml / server / net / minecraft / src / SidedProxy . java b / fml / server / net / minecraft / src / SidedProxy . java 
 new file mode 100644 
 index 0000000 . . 008d63d 
 - - - / dev / null 
 + + + b / fml / server / net / minecraft / src / SidedProxy . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * The FML Forge Mod Loader suite . 
 + * Copyright ( C ) 2012 cpw 
 + * 
 + * This library is free software ; you can redistribute it and / or modify it under the terms of the GNU Lesser General Public License as published by the Free 
 + * Software Foundation ; either version 2 . 1 of the License , or any later version . 
 + * 
 + * This library is distributed in the hope that it will be useful , but WITHOUT ANY WARRANTY ; without even the implied warranty of MERCHANTABILITY or FITNESS FOR 
 + * A PARTICULAR PURPOSE . See the GNU Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public License along with this library ; if not , write to the Free Software Foundation , Inc . , 51 
 + * Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraft . src ; 
 + 
 + / * * 
 + * @ author cpw 
 + * 
 + * / 
 + public @ interface SidedProxy 
 + { 
 + / * * 
 + * The name of the client side class to load and populate 
 + * @ return 
 + * / 
 + String clientSide ( ) default " " ; 
 + 
 + / * * 
 + * The name of the server side class to load and populate 
 + * @ return 
 + * / 
 + String serverSide ( ) default " " ; 
 + 
 + / * * 
 + * The name of the a special bukkit plugin class to load and populate 
 + * / 
 + String bukkitSide ( ) default " " ; 
 + }
