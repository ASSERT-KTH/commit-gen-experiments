BLEU SCORE: 0.016932492841722675

TEST MSG: Fix # 2961 Capability data is not preserved by fluid handler interactions
GENERATED MSG: - Added drainFluidContainer ( ) and getContainerCapacity ( ) helper methods .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> index f03e828 . . a5c02a6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> @ @ - 170 , 9 + 170 , 7 @ @ public class FluidUtil <nl> ItemStack filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; <nl> if ( filledReal ! = null ) <nl> { <nl> - container . setItem ( filledReal . getItem ( ) ) ; <nl> - container . setTagCompound ( filledReal . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( filledReal . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( filledReal . serializeNBT ( ) ) ; <nl> return true ; <nl> } <nl> } <nl> @ @ - 243 , 9 + 241 , 7 @ @ public class FluidUtil <nl> } <nl> else <nl> { <nl> - container . setItem ( emptiedReal . getItem ( ) ) ; <nl> - container . setTagCompound ( emptiedReal . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( emptiedReal . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( emptiedReal . serializeNBT ( ) ) ; <nl> } <nl> return true ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> index 4e646ed . . 87bc18c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java <nl> @ @ - 280 , 8 + 280 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem <nl> { <nl> if ( doFill ) <nl> { <nl> - container . setItem ( Items . WATER _ BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . WATER _ BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> return getCapacity ( ) ; <nl> } <nl> @ @ - 289 , 8 + 288 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem <nl> { <nl> if ( doFill ) <nl> { <nl> - container . setItem ( Items . LAVA _ BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . LAVA _ BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> return getCapacity ( ) ; <nl> } <nl> @ @ - 318 , 9 + 316 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem <nl> { <nl> if ( getEmpty ( ) ! = null ) <nl> { <nl> - container . setItem ( getEmpty ( ) . getItem ( ) ) ; <nl> - container . setTagCompound ( getEmpty ( ) . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( getEmpty ( ) . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( getEmpty ( ) . serializeNBT ( ) ) ; <nl> } <nl> else { <nl> container . stackSize = 0 ; <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java <nl> index 305aeac . . 8b70f59 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java <nl> @ @ - 221 , 9 + 221 , 7 @ @ public class FluidHandlerItemStack implements IFluidHandler , ICapabilityProvider <nl> protected void setContainerToEmpty ( ) <nl> { <nl> super . setContainerToEmpty ( ) ; <nl> - container . setItem ( emptyContainer . getItem ( ) ) ; <nl> - container . setTagCompound ( emptyContainer . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( emptyContainer . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java <nl> index 46090ce . . 9dca0c2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java <nl> @ @ - 198 , 9 + 198 , 7 @ @ public class FluidHandlerItemStackSimple implements IFluidHandler , ICapabilityPr <nl> protected void setContainerToEmpty ( ) <nl> { <nl> super . setContainerToEmpty ( ) ; <nl> - container . setItem ( emptyContainer . getItem ( ) ) ; <nl> - container . setTagCompound ( emptyContainer . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( emptyContainer . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java <nl> index 16525cc . . 0bb3e09 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java <nl> @ @ - 69 , 34 + 69 , 24 @ @ public class FluidBucketWrapper implements IFluidHandler , ICapabilityProvider <nl> protected void setFluid ( Fluid fluid ) { <nl> if ( fluid = = null ) <nl> { <nl> - container . setItem ( Items . BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> - container . setItemDamage ( 0 ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> else if ( fluid = = FluidRegistry . WATER ) <nl> { <nl> - container . setItem ( Items . WATER _ BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> - container . setItemDamage ( 0 ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . WATER _ BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> else if ( fluid = = FluidRegistry . LAVA ) <nl> { <nl> - container . setItem ( Items . LAVA _ BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> - container . setItemDamage ( 0 ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . LAVA _ BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> else if ( fluid . getName ( ) . equals ( " milk " ) ) <nl> { <nl> - container . setItem ( Items . MILK _ BUCKET ) ; <nl> - container . setTagCompound ( null ) ; <nl> - container . setItemDamage ( 0 ) ; <nl> + container . deserializeNBT ( new ItemStack ( Items . MILK _ BUCKET ) . serializeNBT ( ) ) ; <nl> } <nl> else if ( FluidRegistry . isUniversalBucketEnabled ( ) & & FluidRegistry . getBucketFluids ( ) . contains ( fluid ) ) <nl> { <nl> ItemStack filledBucket = UniversalBucket . getFilledBucket ( ForgeModContainer . getInstance ( ) . universalBucket , fluid ) ; <nl> - container . setItem ( filledBucket . getItem ( ) ) ; <nl> - container . setTagCompound ( filledBucket . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( filledBucket . getItemDamage ( ) ) ; <nl> + container . deserializeNBT ( filledBucket . serializeNBT ( ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java <nl> index 09894e3 . . c6f1214 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java <nl> @ @ - 28 , 14 + 28 , 6 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability <nl> this . container = container ; <nl> } <nl> <nl> - private void updateContainer ( ItemStack newContainerData ) <nl> - { <nl> - container . setItem ( newContainerData . getItem ( ) ) ; <nl> - container . setTagCompound ( newContainerData . getTagCompound ( ) ) ; <nl> - container . setItemDamage ( newContainerData . getItemDamage ( ) ) ; <nl> - container . stackSize = newContainerData . stackSize ; <nl> - } <nl> - <nl> @ Override <nl> public IFluidTankProperties [ ] getTankProperties ( ) <nl> { <nl> @ @ - 62 , 7 + 54 , 7 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability <nl> <nl> if ( doFill ) <nl> { <nl> - updateContainer ( result ) ; <nl> + container . deserializeNBT ( result . serializeNBT ( ) ) ; <nl> } <nl> <nl> FluidStack newContained = FluidContainerRegistry . getFluidForFilledItem ( result ) ; <nl> @ @ - 113 , 7 + 105 , 7 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability <nl> { <nl> emptyContainer . stackSize = 0 ; <nl> } <nl> - updateContainer ( emptyContainer ) ; <nl> + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; <nl> } <nl> return contained ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> index 779292b . . 043267c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> @ @ - 227 , 6 + 227 , 81 @ @ public abstract class FluidContainerRegistry <nl> } <nl> <nl> / * * <nl> + * Attempts to empty a full container . <nl> + * <nl> + * @ param container <nl> + * ItemStack representing the full container . <nl> + * @ return Empty container if successful , otherwise null . <nl> + * / <nl> + public static ItemStack drainFluidContainer ( ItemStack container ) <nl> + { <nl> + if ( container = = null ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + FluidContainerData data = containerFluidMap . get ( new ContainerKey ( container ) ) ; <nl> + if ( data ! = null ) <nl> + { <nl> + return data . emptyContainer . copy ( ) ; <nl> + } <nl> + <nl> + return null ; <nl> + } <nl> + <nl> + / * * <nl> + * Determines the capacity of a full container . <nl> + * <nl> + * @ param container <nl> + * The full container . <nl> + * @ return The containers capacity , or 0 if the ItemStack does not represent <nl> + * a registered container . <nl> + * / <nl> + public static int getContainerCapacity ( ItemStack container ) <nl> + { <nl> + return getContainerCapacity ( null , container ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Determines the capacity of a container . <nl> + * <nl> + * @ param fluid <nl> + * FluidStack containing the type of fluid the capacity should be <nl> + * determined for ( ignored for full containers ) . <nl> + * @ param container <nl> + * The container ( full or empty ) . <nl> + * @ return The containers capacity , or 0 if the ItemStack does not represent <nl> + * a registered container or the FluidStack is not registered with <nl> + * the empty container . <nl> + * / <nl> + public static int getContainerCapacity ( FluidStack fluid , ItemStack container ) <nl> + { <nl> + if ( container = = null ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + FluidContainerData data = containerFluidMap . get ( new ContainerKey ( container ) ) ; <nl> + <nl> + if ( data ! = null ) <nl> + { <nl> + return data . fluid . amount ; <nl> + } <nl> + <nl> + if ( fluid ! = null ) <nl> + { <nl> + data = filledContainerMap . get ( new ContainerKey ( container , fluid ) ) ; <nl> + <nl> + if ( data ! = null ) <nl> + { <nl> + return data . fluid . amount ; <nl> + } <nl> + } <nl> + <nl> + return 0 ; <nl> + } <nl> + <nl> + / * * <nl> * Determines if a container holds a specific fluid . <nl> * / <nl> public static boolean containsFluid ( ItemStack container , FluidStack fluid )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 index f03e828 . . a5c02a6 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 @ @ - 170 , 9 + 170 , 7 @ @ public class FluidUtil 
 ItemStack filledReal = tryFillContainer ( container , fluidSource , maxAmount , player , true ) ; 
 if ( filledReal ! = null ) 
 { 
 - container . setItem ( filledReal . getItem ( ) ) ; 
 - container . setTagCompound ( filledReal . getTagCompound ( ) ) ; 
 - container . setItemDamage ( filledReal . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( filledReal . serializeNBT ( ) ) ; 
 return true ; 
 } 
 } 
 @ @ - 243 , 9 + 241 , 7 @ @ public class FluidUtil 
 } 
 else 
 { 
 - container . setItem ( emptiedReal . getItem ( ) ) ; 
 - container . setTagCompound ( emptiedReal . getTagCompound ( ) ) ; 
 - container . setItemDamage ( emptiedReal . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( emptiedReal . serializeNBT ( ) ) ; 
 } 
 return true ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 index 4e646ed . . 87bc18c 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 + + + b / src / main / java / net / minecraftforge / fluids / UniversalBucket . java 
 @ @ - 280 , 8 + 280 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem 
 { 
 if ( doFill ) 
 { 
 - container . setItem ( Items . WATER _ BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . WATER _ BUCKET ) . serializeNBT ( ) ) ; 
 } 
 return getCapacity ( ) ; 
 } 
 @ @ - 289 , 8 + 288 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem 
 { 
 if ( doFill ) 
 { 
 - container . setItem ( Items . LAVA _ BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . LAVA _ BUCKET ) . serializeNBT ( ) ) ; 
 } 
 return getCapacity ( ) ; 
 } 
 @ @ - 318 , 9 + 316 , 7 @ @ public class UniversalBucket extends Item implements IFluidContainerItem 
 { 
 if ( getEmpty ( ) ! = null ) 
 { 
 - container . setItem ( getEmpty ( ) . getItem ( ) ) ; 
 - container . setTagCompound ( getEmpty ( ) . getTagCompound ( ) ) ; 
 - container . setItemDamage ( getEmpty ( ) . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( getEmpty ( ) . serializeNBT ( ) ) ; 
 } 
 else { 
 container . stackSize = 0 ; 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java 
 index 305aeac . . 8b70f59 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStack . java 
 @ @ - 221 , 9 + 221 , 7 @ @ public class FluidHandlerItemStack implements IFluidHandler , ICapabilityProvider 
 protected void setContainerToEmpty ( ) 
 { 
 super . setContainerToEmpty ( ) ; 
 - container . setItem ( emptyContainer . getItem ( ) ) ; 
 - container . setTagCompound ( emptyContainer . getTagCompound ( ) ) ; 
 - container . setItemDamage ( emptyContainer . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java 
 index 46090ce . . 9dca0c2 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / templates / FluidHandlerItemStackSimple . java 
 @ @ - 198 , 9 + 198 , 7 @ @ public class FluidHandlerItemStackSimple implements IFluidHandler , ICapabilityPr 
 protected void setContainerToEmpty ( ) 
 { 
 super . setContainerToEmpty ( ) ; 
 - container . setItem ( emptyContainer . getItem ( ) ) ; 
 - container . setTagCompound ( emptyContainer . getTagCompound ( ) ) ; 
 - container . setItemDamage ( emptyContainer . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java 
 index 16525cc . . 0bb3e09 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidBucketWrapper . java 
 @ @ - 69 , 34 + 69 , 24 @ @ public class FluidBucketWrapper implements IFluidHandler , ICapabilityProvider 
 protected void setFluid ( Fluid fluid ) { 
 if ( fluid = = null ) 
 { 
 - container . setItem ( Items . BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 - container . setItemDamage ( 0 ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . BUCKET ) . serializeNBT ( ) ) ; 
 } 
 else if ( fluid = = FluidRegistry . WATER ) 
 { 
 - container . setItem ( Items . WATER _ BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 - container . setItemDamage ( 0 ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . WATER _ BUCKET ) . serializeNBT ( ) ) ; 
 } 
 else if ( fluid = = FluidRegistry . LAVA ) 
 { 
 - container . setItem ( Items . LAVA _ BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 - container . setItemDamage ( 0 ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . LAVA _ BUCKET ) . serializeNBT ( ) ) ; 
 } 
 else if ( fluid . getName ( ) . equals ( " milk " ) ) 
 { 
 - container . setItem ( Items . MILK _ BUCKET ) ; 
 - container . setTagCompound ( null ) ; 
 - container . setItemDamage ( 0 ) ; 
 + container . deserializeNBT ( new ItemStack ( Items . MILK _ BUCKET ) . serializeNBT ( ) ) ; 
 } 
 else if ( FluidRegistry . isUniversalBucketEnabled ( ) & & FluidRegistry . getBucketFluids ( ) . contains ( fluid ) ) 
 { 
 ItemStack filledBucket = UniversalBucket . getFilledBucket ( ForgeModContainer . getInstance ( ) . universalBucket , fluid ) ; 
 - container . setItem ( filledBucket . getItem ( ) ) ; 
 - container . setTagCompound ( filledBucket . getTagCompound ( ) ) ; 
 - container . setItemDamage ( filledBucket . getItemDamage ( ) ) ; 
 + container . deserializeNBT ( filledBucket . serializeNBT ( ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java 
 index 09894e3 . . c6f1214 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / wrappers / FluidContainerRegistryWrapper . java 
 @ @ - 28 , 14 + 28 , 6 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability 
 this . container = container ; 
 } 
 
 - private void updateContainer ( ItemStack newContainerData ) 
 - { 
 - container . setItem ( newContainerData . getItem ( ) ) ; 
 - container . setTagCompound ( newContainerData . getTagCompound ( ) ) ; 
 - container . setItemDamage ( newContainerData . getItemDamage ( ) ) ; 
 - container . stackSize = newContainerData . stackSize ; 
 - } 
 - 
 @ Override 
 public IFluidTankProperties [ ] getTankProperties ( ) 
 { 
 @ @ - 62 , 7 + 54 , 7 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability 
 
 if ( doFill ) 
 { 
 - updateContainer ( result ) ; 
 + container . deserializeNBT ( result . serializeNBT ( ) ) ; 
 } 
 
 FluidStack newContained = FluidContainerRegistry . getFluidForFilledItem ( result ) ; 
 @ @ - 113 , 7 + 105 , 7 @ @ public class FluidContainerRegistryWrapper implements IFluidHandler , ICapability 
 { 
 emptyContainer . stackSize = 0 ; 
 } 
 - updateContainer ( emptyContainer ) ; 
 + container . deserializeNBT ( emptyContainer . serializeNBT ( ) ) ; 
 } 
 return contained ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 index 779292b . . 043267c 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 @ @ - 227 , 6 + 227 , 81 @ @ public abstract class FluidContainerRegistry 
 } 
 
 / * * 
 + * Attempts to empty a full container . 
 + * 
 + * @ param container 
 + * ItemStack representing the full container . 
 + * @ return Empty container if successful , otherwise null . 
 + * / 
 + public static ItemStack drainFluidContainer ( ItemStack container ) 
 + { 
 + if ( container = = null ) 
 + { 
 + return null ; 
 + } 
 + 
 + FluidContainerData data = containerFluidMap . get ( new ContainerKey ( container ) ) ; 
 + if ( data ! = null ) 
 + { 
 + return data . emptyContainer . copy ( ) ; 
 + } 
 + 
 + return null ; 
 + } 
 + 
 + / * * 
 + * Determines the capacity of a full container . 
 + * 
 + * @ param container 
 + * The full container . 
 + * @ return The containers capacity , or 0 if the ItemStack does not represent 
 + * a registered container . 
 + * / 
 + public static int getContainerCapacity ( ItemStack container ) 
 + { 
 + return getContainerCapacity ( null , container ) ; 
 + } 
 + 
 + / * * 
 + * Determines the capacity of a container . 
 + * 
 + * @ param fluid 
 + * FluidStack containing the type of fluid the capacity should be 
 + * determined for ( ignored for full containers ) . 
 + * @ param container 
 + * The container ( full or empty ) . 
 + * @ return The containers capacity , or 0 if the ItemStack does not represent 
 + * a registered container or the FluidStack is not registered with 
 + * the empty container . 
 + * / 
 + public static int getContainerCapacity ( FluidStack fluid , ItemStack container ) 
 + { 
 + if ( container = = null ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + FluidContainerData data = containerFluidMap . get ( new ContainerKey ( container ) ) ; 
 + 
 + if ( data ! = null ) 
 + { 
 + return data . fluid . amount ; 
 + } 
 + 
 + if ( fluid ! = null ) 
 + { 
 + data = filledContainerMap . get ( new ContainerKey ( container , fluid ) ) ; 
 + 
 + if ( data ! = null ) 
 + { 
 + return data . fluid . amount ; 
 + } 
 + } 
 + 
 + return 0 ; 
 + } 
 + 
 + / * * 
 * Determines if a container holds a specific fluid . 
 * / 
 public static boolean containsFluid ( ItemStack container , FluidStack fluid )
