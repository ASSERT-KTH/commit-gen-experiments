BLEU SCORE: 0.018543295278285157

TEST MSG: Catch and log exceptions during model baking
GENERATED MSG: Fix dependency resolution for models with custom data / textures .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index bfa12c3 . . 97b0ef2 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 180 , 14 + 180 , 23 @ @ public final class ModelLoader extends ModelBakery <nl> <nl> for ( IModel model : models . keySet ( ) ) <nl> { <nl> - bakeBar . step ( " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ) ; <nl> + String modelLocations = " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ; <nl> + bakeBar . step ( modelLocations ) ; <nl> if ( model = = getMissingModel ( ) ) <nl> { <nl> bakedModels . put ( model , missingBaked ) ; <nl> } <nl> else <nl> { <nl> - bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . INSTANCE ) ) ; <nl> + try <nl> + { <nl> + bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . INSTANCE ) ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + FMLLog . log . error ( " Exception baking model for location ( s ) { } : " , modelLocations , e ) ; <nl> + bakedModels . put ( model , missingBaked ) ; <nl> + } <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index f0b4850 . . b4c8dc5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery <nl> try <nl> { <nl> IModel model = ModelLoaderRegistry . getModel ( location ) ; <nl> - for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> - { <nl> - if ( dep instanceof ModelResourceLocation ) <nl> - { <nl> - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> - } <nl> - else <nl> - { <nl> - getModel ( dep ) ; <nl> - } <nl> - } <nl> - textures . addAll ( model . getTextures ( ) ) ; <nl> + resolveDependencies ( model ) ; <nl> } <nl> finally <nl> { <nl> @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> + private void resolveDependencies ( IModel model ) throws IOException <nl> + { <nl> + for ( ResourceLocation dep : model . getDependencies ( ) ) <nl> + { <nl> + if ( dep instanceof ModelResourceLocation ) <nl> + { <nl> + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; <nl> + } <nl> + else <nl> + { <nl> + getModel ( dep ) ; <nl> + } <nl> + } <nl> + textures . addAll ( model . getTextures ( ) ) ; <nl> + } <nl> + <nl> private class VanillaModelWrapper implements IRetexturableModel <nl> { <nl> private final ResourceLocation location ; <nl> @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery <nl> if ( v instanceof ISmartVariant ) <nl> { <nl> model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; <nl> + try <nl> + { <nl> + resolveDependencies ( model ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; <nl> + } <nl> textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index bfa12c3 . . 97b0ef2 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 180 , 14 + 180 , 23 @ @ public final class ModelLoader extends ModelBakery 
 
 for ( IModel model : models . keySet ( ) ) 
 { 
 - bakeBar . step ( " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ) ; 
 + String modelLocations = " [ " + Joiner . on ( " , " ) . join ( models . get ( model ) ) + " ] " ; 
 + bakeBar . step ( modelLocations ) ; 
 if ( model = = getMissingModel ( ) ) 
 { 
 bakedModels . put ( model , missingBaked ) ; 
 } 
 else 
 { 
 - bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . INSTANCE ) ) ; 
 + try 
 + { 
 + bakedModels . put ( model , model . bake ( model . getDefaultState ( ) , DefaultVertexFormats . ITEM , DefaultTextureGetter . INSTANCE ) ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + FMLLog . log . error ( " Exception baking model for location ( s ) { } : " , modelLocations , e ) ; 
 + bakedModels . put ( model , missingBaked ) ; 
 + } 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index f0b4850 . . b4c8dc5 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 225 , 18 + 225 , 7 @ @ public class ModelLoader extends ModelBakery 
 try 
 { 
 IModel model = ModelLoaderRegistry . getModel ( location ) ; 
 - for ( ResourceLocation dep : model . getDependencies ( ) ) 
 - { 
 - if ( dep instanceof ModelResourceLocation ) 
 - { 
 - loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 - } 
 - else 
 - { 
 - getModel ( dep ) ; 
 - } 
 - } 
 - textures . addAll ( model . getTextures ( ) ) ; 
 + resolveDependencies ( model ) ; 
 } 
 finally 
 { 
 @ @ - 244 , 6 + 233 , 22 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 + private void resolveDependencies ( IModel model ) throws IOException 
 + { 
 + for ( ResourceLocation dep : model . getDependencies ( ) ) 
 + { 
 + if ( dep instanceof ModelResourceLocation ) 
 + { 
 + loadVariants ( ImmutableList . of ( ( ModelResourceLocation ) dep ) ) ; 
 + } 
 + else 
 + { 
 + getModel ( dep ) ; 
 + } 
 + } 
 + textures . addAll ( model . getTextures ( ) ) ; 
 + } 
 + 
 private class VanillaModelWrapper implements IRetexturableModel 
 { 
 private final ResourceLocation location ; 
 @ @ - 563 , 6 + 568 , 14 @ @ public class ModelLoader extends ModelBakery 
 if ( v instanceof ISmartVariant ) 
 { 
 model = ( ( ISmartVariant ) v ) . process ( model , ModelLoader . this ) ; 
 + try 
 + { 
 + resolveDependencies ( model ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . getLogger ( ) . error ( " Exception resolving indirect dependencies for model " + loc , e ) ; 
 + } 
 textures . addAll ( model . getTextures ( ) ) ; / / Kick this , just in case . 
 } 

