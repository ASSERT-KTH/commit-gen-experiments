BLEU SCORE: 0.020980574531482755

TEST MSG: Added getCommandMap ( ) & getSortedCommandList ( ) in CommandTreeBase
GENERATED MSG: Update tweaker login to use authlib .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java <nl> index 3c7911c . . 0cb324a 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> <nl> / * * <nl> * Base class for commands that has subcommands . <nl> @ @ - 42 , 7 + 43 , 7 @ @ import java . util . List ; <nl> * / <nl> public abstract class CommandTreeBase extends CommandBase <nl> { <nl> - private final HashMap < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; <nl> + private final Map < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; <nl> <nl> public void addSubcommand ( ICommand c ) <nl> { <nl> @ @ - 51 , 7 + 52 , 19 @ @ public abstract class CommandTreeBase extends CommandBase <nl> <nl> public Collection < ICommand > getSubCommands ( ) <nl> { <nl> - return Collections . unmodifiableCollection ( commandMap . values ( ) ) ; <nl> + return getCommandMap ( ) . values ( ) ; <nl> + } <nl> + <nl> + public Map < String , ICommand > getCommandMap ( ) <nl> + { <nl> + return Collections . unmodifiableMap ( commandMap ) ; <nl> + } <nl> + <nl> + public List < ICommand > getSortedCommandList ( ) <nl> + { <nl> + List < ICommand > list = new ArrayList < ICommand > ( getSubCommands ( ) ) ; <nl> + Collections . sort ( list ) ; <nl> + return list ; <nl> } <nl> <nl> private static String [ ] shiftArgs ( String [ ] s ) <nl> @ @ - 73 , 7 + 86 , 7 @ @ public abstract class CommandTreeBase extends CommandBase <nl> { <nl> List < String > keys = new ArrayList < String > ( ) ; <nl> <nl> - for ( ICommand c : commandMap . values ( ) ) <nl> + for ( ICommand c : getCommandMap ( ) . values ( ) ) <nl> { <nl> if ( c . checkPermission ( server , sender ) ) <nl> { <nl> @ @ - 85 , 7 + 98 , 7 @ @ public abstract class CommandTreeBase extends CommandBase <nl> return getListOfStringsMatchingLastWord ( args , keys ) ; <nl> } <nl> <nl> - ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; <nl> <nl> if ( cmd ! = null ) <nl> { <nl> @ @ - 100 , 7 + 113 , 7 @ @ public abstract class CommandTreeBase extends CommandBase <nl> { <nl> if ( index > 0 & & args . length > 1 ) <nl> { <nl> - ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; <nl> if ( cmd ! = null ) <nl> { <nl> return cmd . isUsernameIndex ( shiftArgs ( args ) , index - 1 ) ; <nl> @ @ - 119 , 7 + 132 , 7 @ @ public abstract class CommandTreeBase extends CommandBase <nl> } <nl> else <nl> { <nl> - ICommand cmd = commandMap . get ( args [ 0 ] ) ; <nl> + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; <nl> <nl> if ( cmd = = null ) <nl> {
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java b / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java <nl> index a8975e3 . . dc42c14 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java <nl> @ @ - 6 , 127 + 6 , 49 @ @ import java . io . InputStream ; <nl> import java . io . OutputStream ; <nl> import java . net . HttpURLConnection ; <nl> import java . net . MalformedURLException ; <nl> + import java . net . Proxy ; <nl> import java . net . URL ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> import org . apache . commons . io . IOUtils ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> <nl> import com . google . common . base . Charsets ; <nl> + import com . google . common . base . Throwables ; <nl> import com . google . gson . Gson ; <nl> import com . google . gson . GsonBuilder ; <nl> + import com . mojang . authlib . Agent ; <nl> + import com . mojang . authlib . exceptions . * ; <nl> + import com . mojang . authlib . yggdrasil . * ; <nl> <nl> / * * <nl> * Basic implementation of Mojang ' s ' Yggdrasil ' login system , purely intended as a dev time bare bones login . <nl> * Login errors are not handled . <nl> * / <nl> - @ SuppressWarnings ( " unused " ) <nl> - public class Yggdrasil { <nl> - private static class Request { <nl> - Agent agent = new Agent ( ) ; <nl> - String username ; <nl> - String password ; <nl> - String clientToken = null ; <nl> - boolean requestUser = true ; <nl> - <nl> - public Request ( String username , String password ) { <nl> - this . username = username ; <nl> - this . password = password ; <nl> - } <nl> - <nl> - private static class Agent { <nl> - String name = " Minecraft " ; <nl> - int version = 1 ; <nl> - } <nl> - } <nl> - <nl> - private static class Response { <nl> - String error ; <nl> - String errorMessage ; <nl> - String cause ; <nl> - String accessToken ; <nl> - String clientToken ; <nl> - Profile selectedProfile ; <nl> - Profile [ ] availableProfiles ; <nl> - User user ; <nl> - <nl> - private static class Profile { <nl> - String id ; <nl> - String name ; <nl> - boolean legacy ; <nl> - } <nl> - <nl> - private static class User { <nl> - String id ; <nl> - List < Property > properties ; <nl> - <nl> - private static class Property { <nl> - String name ; <nl> - String value ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - private static void close ( Closeable c ) <nl> - { <nl> - if ( c ! = null ) { <nl> - try { <nl> - c . close ( ) ; <nl> - } catch ( IOException e ) { } <nl> - } <nl> - } <nl> - <nl> + public class Yggdrasil <nl> + { <nl> public static void login ( Map < String , String > args ) <nl> { <nl> if ( ! args . containsKey ( " - - username " ) | | ! args . containsKey ( " - - password " ) ) return ; <nl> - <nl> - String username = args . get ( " - - username " ) ; <nl> - String password = args . remove ( " - - password " ) ; <nl> - <nl> - Gson GSON = new GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) ; <nl> - String request = GSON . toJson ( new Request ( username , password ) ) ; <nl> - <nl> - OutputStream out = null ; <nl> - InputStream in = null ; <nl> + YggdrasilUserAuthentication auth = ( YggdrasilUserAuthentication ) new YggdrasilAuthenticationService ( Proxy . NO _ PROXY , " 1 " ) . createUserAuthentication ( Agent . MINECRAFT ) ; <nl> + auth . setUsername ( args . get ( " - - username " ) ) ; <nl> + auth . setPassword ( args . remove ( " - - password " ) ) ; <nl> <nl> try <nl> { <nl> - HttpURLConnection con = ( HttpURLConnection ) ( new URL ( " https : / / authserver . mojang . com / authenticate " ) ) . openConnection ( ) ; <nl> - con . setConnectTimeout ( 15000 ) ; <nl> - con . setReadTimeout ( 15000 ) ; <nl> - con . setUseCaches ( false ) ; <nl> - <nl> - byte [ ] data = request . getBytes ( Charsets . UTF _ 8 ) ; <nl> - <nl> - con . setRequestProperty ( " Content - Type " , " application / json ; charset = utf - 8 " ) ; <nl> - con . setRequestProperty ( " Content - Length " , Integer . toString ( data . length ) ) ; <nl> - con . setDoOutput ( true ) ; <nl> - <nl> - out = con . getOutputStream ( ) ; <nl> - out . write ( data ) ; <nl> - <nl> - in = con . getInputStream ( ) ; <nl> - Response result = GSON . fromJson ( IOUtils . toString ( in , Charsets . UTF _ 8 ) , Response . class ) ; <nl> - <nl> - if ( result . selectedProfile ! = null ) <nl> - { <nl> - args . put ( " - - username " , result . selectedProfile . name ) ; <nl> - args . put ( " - - uuid " , result . selectedProfile . id ) ; <nl> - args . put ( " - - accessToken " , result . accessToken ) ; <nl> - } <nl> - } <nl> - catch ( MalformedURLException e ) <nl> - { <nl> - e . printStackTrace ( ) ; <nl> + auth . logIn ( ) ; <nl> } <nl> - catch ( IOException e ) <nl> + catch ( AuthenticationException e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> - } <nl> - finally <nl> - { <nl> - close ( out ) ; <nl> - close ( in ) ; <nl> + LogManager . getLogger ( " FMLTWEAK " ) . error ( " - - Login failed ! " + e . getMessage ( ) ) ; <nl> + Throwables . propagate ( e ) ; <nl> + return ; / / dont set other variables <nl> } <nl> + <nl> + args . put ( " - - username " , auth . getSelectedProfile ( ) . getName ( ) ) ; <nl> + args . put ( " - - uuid " , auth . getSelectedProfile ( ) . getId ( ) . toString ( ) . replace ( " - " , " " ) ) ; <nl> + args . put ( " - - accessToken " , auth . getAuthenticatedToken ( ) ) ; <nl> + args . put ( " - - userProperties " , auth . getUserProperties ( ) . toString ( ) ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java 
 index 3c7911c . . 0cb324a 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java 
 + + + b / src / main / java / net / minecraftforge / server / command / CommandTreeBase . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Map ; 
 
 / * * 
 * Base class for commands that has subcommands . 
 @ @ - 42 , 7 + 43 , 7 @ @ import java . util . List ; 
 * / 
 public abstract class CommandTreeBase extends CommandBase 
 { 
 - private final HashMap < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; 
 + private final Map < String , ICommand > commandMap = new HashMap < String , ICommand > ( ) ; 
 
 public void addSubcommand ( ICommand c ) 
 { 
 @ @ - 51 , 7 + 52 , 19 @ @ public abstract class CommandTreeBase extends CommandBase 
 
 public Collection < ICommand > getSubCommands ( ) 
 { 
 - return Collections . unmodifiableCollection ( commandMap . values ( ) ) ; 
 + return getCommandMap ( ) . values ( ) ; 
 + } 
 + 
 + public Map < String , ICommand > getCommandMap ( ) 
 + { 
 + return Collections . unmodifiableMap ( commandMap ) ; 
 + } 
 + 
 + public List < ICommand > getSortedCommandList ( ) 
 + { 
 + List < ICommand > list = new ArrayList < ICommand > ( getSubCommands ( ) ) ; 
 + Collections . sort ( list ) ; 
 + return list ; 
 } 
 
 private static String [ ] shiftArgs ( String [ ] s ) 
 @ @ - 73 , 7 + 86 , 7 @ @ public abstract class CommandTreeBase extends CommandBase 
 { 
 List < String > keys = new ArrayList < String > ( ) ; 
 
 - for ( ICommand c : commandMap . values ( ) ) 
 + for ( ICommand c : getCommandMap ( ) . values ( ) ) 
 { 
 if ( c . checkPermission ( server , sender ) ) 
 { 
 @ @ - 85 , 7 + 98 , 7 @ @ public abstract class CommandTreeBase extends CommandBase 
 return getListOfStringsMatchingLastWord ( args , keys ) ; 
 } 
 
 - ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; 
 
 if ( cmd ! = null ) 
 { 
 @ @ - 100 , 7 + 113 , 7 @ @ public abstract class CommandTreeBase extends CommandBase 
 { 
 if ( index > 0 & & args . length > 1 ) 
 { 
 - ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; 
 if ( cmd ! = null ) 
 { 
 return cmd . isUsernameIndex ( shiftArgs ( args ) , index - 1 ) ; 
 @ @ - 119 , 7 + 132 , 7 @ @ public abstract class CommandTreeBase extends CommandBase 
 } 
 else 
 { 
 - ICommand cmd = commandMap . get ( args [ 0 ] ) ; 
 + ICommand cmd = getCommandMap ( ) . get ( args [ 0 ] ) ; 
 
 if ( cmd = = null ) 
 {

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java b / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java 
 index a8975e3 . . dc42c14 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / launcher / Yggdrasil . java 
 @ @ - 6 , 127 + 6 , 49 @ @ import java . io . InputStream ; 
 import java . io . OutputStream ; 
 import java . net . HttpURLConnection ; 
 import java . net . MalformedURLException ; 
 + import java . net . Proxy ; 
 import java . net . URL ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 import org . apache . commons . io . IOUtils ; 
 + import org . apache . logging . log4j . LogManager ; 
 
 import com . google . common . base . Charsets ; 
 + import com . google . common . base . Throwables ; 
 import com . google . gson . Gson ; 
 import com . google . gson . GsonBuilder ; 
 + import com . mojang . authlib . Agent ; 
 + import com . mojang . authlib . exceptions . * ; 
 + import com . mojang . authlib . yggdrasil . * ; 
 
 / * * 
 * Basic implementation of Mojang ' s ' Yggdrasil ' login system , purely intended as a dev time bare bones login . 
 * Login errors are not handled . 
 * / 
 - @ SuppressWarnings ( " unused " ) 
 - public class Yggdrasil { 
 - private static class Request { 
 - Agent agent = new Agent ( ) ; 
 - String username ; 
 - String password ; 
 - String clientToken = null ; 
 - boolean requestUser = true ; 
 - 
 - public Request ( String username , String password ) { 
 - this . username = username ; 
 - this . password = password ; 
 - } 
 - 
 - private static class Agent { 
 - String name = " Minecraft " ; 
 - int version = 1 ; 
 - } 
 - } 
 - 
 - private static class Response { 
 - String error ; 
 - String errorMessage ; 
 - String cause ; 
 - String accessToken ; 
 - String clientToken ; 
 - Profile selectedProfile ; 
 - Profile [ ] availableProfiles ; 
 - User user ; 
 - 
 - private static class Profile { 
 - String id ; 
 - String name ; 
 - boolean legacy ; 
 - } 
 - 
 - private static class User { 
 - String id ; 
 - List < Property > properties ; 
 - 
 - private static class Property { 
 - String name ; 
 - String value ; 
 - } 
 - } 
 - } 
 - 
 - private static void close ( Closeable c ) 
 - { 
 - if ( c ! = null ) { 
 - try { 
 - c . close ( ) ; 
 - } catch ( IOException e ) { } 
 - } 
 - } 
 - 
 + public class Yggdrasil 
 + { 
 public static void login ( Map < String , String > args ) 
 { 
 if ( ! args . containsKey ( " - - username " ) | | ! args . containsKey ( " - - password " ) ) return ; 
 - 
 - String username = args . get ( " - - username " ) ; 
 - String password = args . remove ( " - - password " ) ; 
 - 
 - Gson GSON = new GsonBuilder ( ) . setPrettyPrinting ( ) . create ( ) ; 
 - String request = GSON . toJson ( new Request ( username , password ) ) ; 
 - 
 - OutputStream out = null ; 
 - InputStream in = null ; 
 + YggdrasilUserAuthentication auth = ( YggdrasilUserAuthentication ) new YggdrasilAuthenticationService ( Proxy . NO _ PROXY , " 1 " ) . createUserAuthentication ( Agent . MINECRAFT ) ; 
 + auth . setUsername ( args . get ( " - - username " ) ) ; 
 + auth . setPassword ( args . remove ( " - - password " ) ) ; 
 
 try 
 { 
 - HttpURLConnection con = ( HttpURLConnection ) ( new URL ( " https : / / authserver . mojang . com / authenticate " ) ) . openConnection ( ) ; 
 - con . setConnectTimeout ( 15000 ) ; 
 - con . setReadTimeout ( 15000 ) ; 
 - con . setUseCaches ( false ) ; 
 - 
 - byte [ ] data = request . getBytes ( Charsets . UTF _ 8 ) ; 
 - 
 - con . setRequestProperty ( " Content - Type " , " application / json ; charset = utf - 8 " ) ; 
 - con . setRequestProperty ( " Content - Length " , Integer . toString ( data . length ) ) ; 
 - con . setDoOutput ( true ) ; 
 - 
 - out = con . getOutputStream ( ) ; 
 - out . write ( data ) ; 
 - 
 - in = con . getInputStream ( ) ; 
 - Response result = GSON . fromJson ( IOUtils . toString ( in , Charsets . UTF _ 8 ) , Response . class ) ; 
 - 
 - if ( result . selectedProfile ! = null ) 
 - { 
 - args . put ( " - - username " , result . selectedProfile . name ) ; 
 - args . put ( " - - uuid " , result . selectedProfile . id ) ; 
 - args . put ( " - - accessToken " , result . accessToken ) ; 
 - } 
 - } 
 - catch ( MalformedURLException e ) 
 - { 
 - e . printStackTrace ( ) ; 
 + auth . logIn ( ) ; 
 } 
 - catch ( IOException e ) 
 + catch ( AuthenticationException e ) 
 { 
 - e . printStackTrace ( ) ; 
 - } 
 - finally 
 - { 
 - close ( out ) ; 
 - close ( in ) ; 
 + LogManager . getLogger ( " FMLTWEAK " ) . error ( " - - Login failed ! " + e . getMessage ( ) ) ; 
 + Throwables . propagate ( e ) ; 
 + return ; / / dont set other variables 
 } 
 + 
 + args . put ( " - - username " , auth . getSelectedProfile ( ) . getName ( ) ) ; 
 + args . put ( " - - uuid " , auth . getSelectedProfile ( ) . getId ( ) . toString ( ) . replace ( " - " , " " ) ) ; 
 + args . put ( " - - accessToken " , auth . getAuthenticatedToken ( ) ) ; 
 + args . put ( " - - userProperties " , auth . getUserProperties ( ) . toString ( ) ) ; 
 } 
 }
