BLEU SCORE: 0.015996686545912898

TEST MSG: Fix async race condition on new chunks ( closes # 3020 )
GENERATED MSG: Warn when chunks are being self - recursively loaded . This can cause serious issues . Modders should watch out .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> index e063f01 . . 4064693 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> @ @ - 8 , 7 + 8 , 7 @ @ <nl> <nl> public ChunkProviderServer ( WorldServer p _ i46838 _ 1 _ , IChunkLoader p _ i46838 _ 2 _ , IChunkGenerator p _ i46838 _ 3 _ ) <nl> { <nl> - @ @ - 82 , 20 + 83 , 50 @ @ <nl> + @ @ - 82 , 20 + 83 , 47 @ @ <nl> @ Nullable <nl> public Chunk func _ 186028 _ c ( int p _ 186028 _ 1 _ , int p _ 186028 _ 2 _ ) <nl> { <nl> @ @ - 44 , 16 + 44 , 13 @ @ <nl> + else <nl> + { <nl> + net . minecraft . world . chunk . storage . AnvilChunkLoader loader = ( net . minecraft . world . chunk . storage . AnvilChunkLoader ) this . field _ 73247 _ e ; <nl> - + <nl> - + / / We can only use the queue for already generated chunks <nl> - + if ( loader . chunkExists ( this . field _ 73251 _ h , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ) <nl> + + if ( runnable = = null ) <nl> + + chunk = net . minecraftforge . common . chunkio . ChunkIOExecutor . syncChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ; <nl> + + else if ( loader . chunkExists ( this . field _ 73251 _ h , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ) <nl> + { <nl> - + if ( runnable ! = null ) <nl> - + { <nl> - + net . minecraftforge . common . chunkio . ChunkIOExecutor . queueChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ , runnable ) ; <nl> - + return null ; <nl> - + } <nl> - + else chunk = net . minecraftforge . common . chunkio . ChunkIOExecutor . syncChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ; <nl> + + / / We can only use the async queue for already generated chunks <nl> + + net . minecraftforge . common . chunkio . ChunkIOExecutor . queueChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ , runnable ) ; <nl> + + return null ; <nl> + } <nl> + } <nl> } <nl> @ @ - 63 , 7 + 60 , 7 @ @ <nl> return chunk ; <nl> } <nl> <nl> - @ @ - 221 , 6 + 252 , 11 @ @ <nl> + @ @ - 221 , 6 + 249 , 11 @ @ <nl> { <nl> if ( ! this . field _ 73248 _ b . isEmpty ( ) ) <nl> { <nl> @ @ - 75 , 7 + 72 , 7 @ @ <nl> Iterator < Long > iterator = this . field _ 73248 _ b . iterator ( ) ; <nl> <nl> for ( int i = 0 ; i < 100 & & iterator . hasNext ( ) ; iterator . remove ( ) ) <nl> - @ @ - 235 , 6 + 271 , 11 @ @ <nl> + @ @ - 235 , 6 + 268 , 11 @ @ <nl> this . func _ 73243 _ a ( chunk ) ; <nl> this . field _ 73244 _ f . remove ( olong ) ; <nl> + + i ;
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> index 413d8cf . . 73d867f 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> @ @ - 9 , 7 + 9 , 15 @ @ <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> - @ @ - 55 , 7 + 57 , 7 @ @ <nl> + @ @ - 38 , 6 + 40 , 7 @ @ <nl> + private LongHashMap field _ 73244 _ f = new LongHashMap ( ) ; <nl> + private List field _ 73245 _ g = new ArrayList ( ) ; <nl> + private WorldServer field _ 73251 _ h ; <nl> + + private Set < Long > loadingChunks = com . google . common . collect . Sets . newHashSet ( ) ; <nl> + private static final String _ _ OBFID = " CL _ 00001436 " ; <nl> + <nl> + public ChunkProviderServer ( WorldServer p _ i1520 _ 1 _ , IChunkLoader p _ i1520 _ 2 _ , IChunkProvider p _ i1520 _ 3 _ ) <nl> + @ @ - 55 , 7 + 58 , 7 @ @ <nl> <nl> public void func _ 73241 _ b ( int p _ 73241 _ 1 _ , int p _ 73241 _ 2 _ ) <nl> { <nl> @ @ - 18 , 11 + 26 , 16 @ @ <nl> { <nl> ChunkCoordinates chunkcoordinates = this . field _ 73251 _ h . func _ 72861 _ E ( ) ; <nl> int k = p _ 73241 _ 1 _ * 16 + 8 - chunkcoordinates . field _ 71574 _ a ; <nl> - @ @ - 92 , 7 + 94 , 11 @ @ <nl> + @ @ - 92 , 7 + 95 , 16 @ @ <nl> <nl> if ( chunk = = null ) <nl> { <nl> - chunk = this . func _ 73239 _ e ( p _ 73158 _ 1 _ , p _ 73158 _ 2 _ ) ; <nl> + + boolean added = loadingChunks . add ( k ) ; <nl> + + if ( ! added ) <nl> + + { <nl> + + cpw . mods . fml . common . FMLLog . bigWarning ( " There is an attempt to load a chunk ( % d , % d ) in dimension % d that is already being loaded . This will cause weird chunk breakages . " , p _ 73158 _ 1 _ , p _ 73158 _ 2 _ , field _ 73251 _ h . field _ 73011 _ w . field _ 76574 _ g ) ; <nl> + + } <nl> + chunk = ForgeChunkManager . fetchDormantChunk ( k , this . field _ 73251 _ h ) ; <nl> + if ( chunk = = null ) <nl> + { <nl> @ @ - 31 , 7 + 44 , 15 @ @ <nl> <nl> if ( chunk = = null ) <nl> { <nl> - @ @ - 258 , 6 + 264 , 11 @ @ <nl> + @ @ - 120 , 6 + 132 , 7 @ @ <nl> + <nl> + this . field _ 73244 _ f . func _ 76163 _ a ( k , chunk ) ; <nl> + this . field _ 73245 _ g . add ( chunk ) ; <nl> + + loadingChunks . remove ( k ) ; <nl> + chunk . func _ 76631 _ c ( ) ; <nl> + chunk . func _ 76624 _ a ( this , this , p _ 73158 _ 1 _ , p _ 73158 _ 2 _ ) ; <nl> + } <nl> + @ @ - 258 , 6 + 271 , 11 @ @ <nl> { <nl> if ( ! this . field _ 73251 _ h . field _ 73058 _ d ) <nl> { <nl> @ @ - 43 , 7 + 64 , 7 @ @ <nl> for ( int i = 0 ; i < 100 ; + + i ) <nl> { <nl> if ( ! this . field _ 73248 _ b . isEmpty ( ) ) <nl> - @ @ - 270 , 6 + 281 , 11 @ @ <nl> + @ @ - 270 , 6 + 288 , 11 @ @ <nl> this . field _ 73248 _ b . remove ( olong ) ; <nl> this . field _ 73244 _ f . func _ 76159 _ d ( olong . longValue ( ) ) ; <nl> this . field _ 73245 _ g . remove ( chunk ) ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 index e063f01 . . 4064693 100644 
 - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 @ @ - 8 , 7 + 8 , 7 @ @ 
 
 public ChunkProviderServer ( WorldServer p _ i46838 _ 1 _ , IChunkLoader p _ i46838 _ 2 _ , IChunkGenerator p _ i46838 _ 3 _ ) 
 { 
 - @ @ - 82 , 20 + 83 , 50 @ @ 
 + @ @ - 82 , 20 + 83 , 47 @ @ 
 @ Nullable 
 public Chunk func _ 186028 _ c ( int p _ 186028 _ 1 _ , int p _ 186028 _ 2 _ ) 
 { 
 @ @ - 44 , 16 + 44 , 13 @ @ 
 + else 
 + { 
 + net . minecraft . world . chunk . storage . AnvilChunkLoader loader = ( net . minecraft . world . chunk . storage . AnvilChunkLoader ) this . field _ 73247 _ e ; 
 - + 
 - + / / We can only use the queue for already generated chunks 
 - + if ( loader . chunkExists ( this . field _ 73251 _ h , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ) 
 + + if ( runnable = = null ) 
 + + chunk = net . minecraftforge . common . chunkio . ChunkIOExecutor . syncChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ; 
 + + else if ( loader . chunkExists ( this . field _ 73251 _ h , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ) 
 + { 
 - + if ( runnable ! = null ) 
 - + { 
 - + net . minecraftforge . common . chunkio . ChunkIOExecutor . queueChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ , runnable ) ; 
 - + return null ; 
 - + } 
 - + else chunk = net . minecraftforge . common . chunkio . ChunkIOExecutor . syncChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ ) ; 
 + + / / We can only use the async queue for already generated chunks 
 + + net . minecraftforge . common . chunkio . ChunkIOExecutor . queueChunkLoad ( this . field _ 73251 _ h , loader , this , p _ 186028 _ 1 _ , p _ 186028 _ 2 _ , runnable ) ; 
 + + return null ; 
 + } 
 + } 
 } 
 @ @ - 63 , 7 + 60 , 7 @ @ 
 return chunk ; 
 } 
 
 - @ @ - 221 , 6 + 252 , 11 @ @ 
 + @ @ - 221 , 6 + 249 , 11 @ @ 
 { 
 if ( ! this . field _ 73248 _ b . isEmpty ( ) ) 
 { 
 @ @ - 75 , 7 + 72 , 7 @ @ 
 Iterator < Long > iterator = this . field _ 73248 _ b . iterator ( ) ; 
 
 for ( int i = 0 ; i < 100 & & iterator . hasNext ( ) ; iterator . remove ( ) ) 
 - @ @ - 235 , 6 + 271 , 11 @ @ 
 + @ @ - 235 , 6 + 268 , 11 @ @ 
 this . func _ 73243 _ a ( chunk ) ; 
 this . field _ 73244 _ f . remove ( olong ) ; 
 + + i ;

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 index 413d8cf . . 73d867f 100644 
 - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 @ @ - 9 , 7 + 9 , 15 @ @ 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 - @ @ - 55 , 7 + 57 , 7 @ @ 
 + @ @ - 38 , 6 + 40 , 7 @ @ 
 + private LongHashMap field _ 73244 _ f = new LongHashMap ( ) ; 
 + private List field _ 73245 _ g = new ArrayList ( ) ; 
 + private WorldServer field _ 73251 _ h ; 
 + + private Set < Long > loadingChunks = com . google . common . collect . Sets . newHashSet ( ) ; 
 + private static final String _ _ OBFID = " CL _ 00001436 " ; 
 + 
 + public ChunkProviderServer ( WorldServer p _ i1520 _ 1 _ , IChunkLoader p _ i1520 _ 2 _ , IChunkProvider p _ i1520 _ 3 _ ) 
 + @ @ - 55 , 7 + 58 , 7 @ @ 
 
 public void func _ 73241 _ b ( int p _ 73241 _ 1 _ , int p _ 73241 _ 2 _ ) 
 { 
 @ @ - 18 , 11 + 26 , 16 @ @ 
 { 
 ChunkCoordinates chunkcoordinates = this . field _ 73251 _ h . func _ 72861 _ E ( ) ; 
 int k = p _ 73241 _ 1 _ * 16 + 8 - chunkcoordinates . field _ 71574 _ a ; 
 - @ @ - 92 , 7 + 94 , 11 @ @ 
 + @ @ - 92 , 7 + 95 , 16 @ @ 
 
 if ( chunk = = null ) 
 { 
 - chunk = this . func _ 73239 _ e ( p _ 73158 _ 1 _ , p _ 73158 _ 2 _ ) ; 
 + + boolean added = loadingChunks . add ( k ) ; 
 + + if ( ! added ) 
 + + { 
 + + cpw . mods . fml . common . FMLLog . bigWarning ( " There is an attempt to load a chunk ( % d , % d ) in dimension % d that is already being loaded . This will cause weird chunk breakages . " , p _ 73158 _ 1 _ , p _ 73158 _ 2 _ , field _ 73251 _ h . field _ 73011 _ w . field _ 76574 _ g ) ; 
 + + } 
 + chunk = ForgeChunkManager . fetchDormantChunk ( k , this . field _ 73251 _ h ) ; 
 + if ( chunk = = null ) 
 + { 
 @ @ - 31 , 7 + 44 , 15 @ @ 
 
 if ( chunk = = null ) 
 { 
 - @ @ - 258 , 6 + 264 , 11 @ @ 
 + @ @ - 120 , 6 + 132 , 7 @ @ 
 + 
 + this . field _ 73244 _ f . func _ 76163 _ a ( k , chunk ) ; 
 + this . field _ 73245 _ g . add ( chunk ) ; 
 + + loadingChunks . remove ( k ) ; 
 + chunk . func _ 76631 _ c ( ) ; 
 + chunk . func _ 76624 _ a ( this , this , p _ 73158 _ 1 _ , p _ 73158 _ 2 _ ) ; 
 + } 
 + @ @ - 258 , 6 + 271 , 11 @ @ 
 { 
 if ( ! this . field _ 73251 _ h . field _ 73058 _ d ) 
 { 
 @ @ - 43 , 7 + 64 , 7 @ @ 
 for ( int i = 0 ; i < 100 ; + + i ) 
 { 
 if ( ! this . field _ 73248 _ b . isEmpty ( ) ) 
 - @ @ - 270 , 6 + 281 , 11 @ @ 
 + @ @ - 270 , 6 + 288 , 11 @ @ 
 this . field _ 73248 _ b . remove ( olong ) ; 
 this . field _ 73244 _ f . func _ 76159 _ d ( olong . longValue ( ) ) ; 
 this . field _ 73245 _ g . remove ( chunk ) ;
