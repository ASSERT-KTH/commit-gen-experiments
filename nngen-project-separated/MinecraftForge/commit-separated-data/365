BLEU SCORE: 0.01898400888797787

TEST MSG: Fix vanilla map pixel data being used in various places
GENERATED MSG: Added Breaking Animation for Smart Models , Checking each layer .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> index 17b9d9a . . c258eb7 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemRenderer . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemRenderer . java <nl> + @ @ - 216 , 7 + 216 , 7 @ @ <nl> + bufferbuilder . func _ 181662 _ b ( 135 . 0D , - 7 . 0D , 0 . 0D ) . func _ 187315 _ a ( 1 . 0D , 0 . 0D ) . func _ 181675 _ d ( ) ; <nl> + bufferbuilder . func _ 181662 _ b ( - 7 . 0D , - 7 . 0D , 0 . 0D ) . func _ 187315 _ a ( 0 . 0D , 0 . 0D ) . func _ 181675 _ d ( ) ; <nl> + tessellator . func _ 78381 _ a ( ) ; <nl> + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( p _ 187461 _ 1 _ , this . field _ 78455 _ a . field _ 71441 _ e ) ; <nl> + + MapData mapdata = ( ( net . minecraft . item . ItemMap ) p _ 187461 _ 1 _ . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( p _ 187461 _ 1 _ , this . field _ 78455 _ a . field _ 71441 _ e ) ; <nl> + <nl> + if ( mapdata ! = null ) <nl> + { <nl> @ @ - 312 , 7 + 312 , 7 @ @ <nl> { <nl> ItemStack itemstack = abstractclientplayer . func _ 184607 _ cu ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch <nl> index b8ea55b . . 8b83223 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch <nl> @ @ - 1 , 5 + 1 , 14 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java <nl> + @ @ - 49 , 7 + 49 , 7 @ @ <nl> + ModelManager modelmanager = blockrendererdispatcher . func _ 175023 _ a ( ) . func _ 178126 _ b ( ) ; <nl> + IBakedModel ibakedmodel ; <nl> + <nl> + - if ( p _ 76986 _ 1 _ . func _ 82335 _ i ( ) . func _ 77973 _ b ( ) = = Items . field _ 151098 _ aY ) <nl> + + if ( p _ 76986 _ 1 _ . func _ 82335 _ i ( ) . func _ 77973 _ b ( ) instanceof net . minecraft . item . ItemMap ) <nl> + { <nl> + ibakedmodel = modelmanager . func _ 174953 _ a ( this . field _ 177073 _ g ) ; <nl> + } <nl> @ @ - 96 , 10 + 96 , 13 @ @ <nl> { <nl> GlStateManager . func _ 179094 _ E ( ) ; <nl> @ @ - 15 , 6 + 24 , 15 @ @ <nl> if ( flag ) <nl> { <nl> this . field _ 76990 _ c . field _ 78724 _ e . func _ 110577 _ a ( field _ 110789 _ a ) ; <nl> + @ @ - 107 , 7 + 110 , 7 @ @ <nl> + float f = 0 . 0078125F ; <nl> + GlStateManager . func _ 179152 _ a ( 0 . 0078125F , 0 . 0078125F , 0 . 0078125F ) ; <nl> + GlStateManager . func _ 179109 _ b ( - 64 . 0F , - 64 . 0F , 0 . 0F ) ; <nl> + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( itemstack , p _ 82402 _ 1 _ . field _ 70170 _ p ) ; <nl> + + MapData mapdata = ( ( net . minecraft . item . ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( itemstack , p _ 82402 _ 1 _ . field _ 70170 _ p ) ; <nl> + GlStateManager . func _ 179109 _ b ( 0 . 0F , 0 . 0F , - 1 . 0F ) ; <nl> + <nl> + if ( mapdata ! = null ) <nl> @ @ - 124 , 6 + 127 , 7 @ @ <nl> RenderHelper . func _ 74518 _ a ( ) ; <nl> GlStateManager . func _ 179099 _ b ( ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch b / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch <nl> index c6131f1 . . 9c189b9 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch <nl> @ @ - 1 , 5 + 1 , 21 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / entity / EntityTrackerEntry . java <nl> + + + . . / src - work / minecraft / net / minecraft / entity / EntityTrackerEntry . java <nl> + @ @ - 158 , 13 + 158 , 13 @ @ <nl> + <nl> + if ( itemstack . func _ 77973 _ b ( ) instanceof ItemMap ) <nl> + { <nl> + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p ) ; <nl> + + MapData mapdata = ( ( ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p ) ; <nl> + <nl> + for ( EntityPlayer entityplayer : p _ 73122 _ 1 _ ) <nl> + { <nl> + EntityPlayerMP entityplayermp = ( EntityPlayerMP ) entityplayer ; <nl> + mapdata . func _ 76191 _ a ( entityplayermp , itemstack ) ; <nl> + - Packet < ? > packet = Items . field _ 151098 _ aY . func _ 150911 _ c ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p , entityplayermp ) ; <nl> + + Packet < ? > packet = ( ( ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 150911 _ c ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p , entityplayermp ) ; <nl> + <nl> + if ( packet ! = null ) <nl> + { <nl> @ @ - 457 , 6 + 457 , 7 @ @ <nl> <nl> this . field _ 73132 _ a . func _ 184178 _ b ( p _ 73117 _ 1 _ ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemMap . java . patch b / patches / minecraft / net / minecraft / item / ItemMap . java . patch <nl> index cfd3a79 . . 9f3549c 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemMap . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemMap . java . patch <nl> @ @ - 27 , 3 + 27 , 15 @ @ <nl> { <nl> int i = 1 < < p _ 77872 _ 3 _ . field _ 76197 _ d ; <nl> int j = p _ 77872 _ 3 _ . field _ 76201 _ a ; <nl> + @ @ - 251 , 9 + 251 , 9 @ @ <nl> + <nl> + public static void func _ 190905 _ a ( World p _ 190905 _ 0 _ , ItemStack p _ 190905 _ 1 _ ) <nl> + { <nl> + - if ( p _ 190905 _ 1 _ . func _ 77973 _ b ( ) = = Items . field _ 151098 _ aY ) <nl> + + if ( p _ 190905 _ 1 _ . func _ 77973 _ b ( ) instanceof ItemMap ) <nl> + { <nl> + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( p _ 190905 _ 1 _ , p _ 190905 _ 0 _ ) ; <nl> + + MapData mapdata = ( ( ItemMap ) p _ 190905 _ 1 _ . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( p _ 190905 _ 1 _ , p _ 190905 _ 0 _ ) ; <nl> + <nl> + if ( mapdata ! = null ) <nl> + { <nl> diff - - git a / src / test / java / net / minecraftforge / debug / MapDataTest . java b / src / test / java / net / minecraftforge / debug / MapDataTest . java <nl> new file mode 100644 <nl> index 0000000 . . 8732d7d <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / MapDataTest . java <nl> @ @ - 0 , 0 + 1 , 249 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import io . netty . buffer . ByteBuf ; <nl> + import net . minecraft . block . material . MapColor ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . gui . MapItemRenderer ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemMap ; <nl> + import net . minecraft . item . ItemMapBase ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . network . Packet ; <nl> + import net . minecraft . network . PacketBuffer ; <nl> + import net . minecraft . network . play . server . SPacketMaps ; <nl> + import net . minecraft . stats . StatList ; <nl> + import net . minecraft . util . ActionResult ; <nl> + import net . minecraft . util . EnumActionResult ; <nl> + import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . world . World ; <nl> + import net . minecraft . world . storage . MapData ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . network . simpleimpl . IMessage ; <nl> + import net . minecraftforge . fml . common . network . simpleimpl . IMessageHandler ; <nl> + import net . minecraftforge . fml . common . network . simpleimpl . MessageContext ; <nl> + import net . minecraftforge . fml . common . network . simpleimpl . SimpleNetworkWrapper ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . io . IOException ; <nl> + import java . util . Arrays ; <nl> + <nl> + @ Mod ( modid = " mapdatatest " , name = " mapdatatest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + public class MapDataTest <nl> + { <nl> + @ GameRegistry . ObjectHolder ( " mapdatatest : custom _ map " ) <nl> + public static final Item CUSTOM _ MAP = null ; <nl> + <nl> + @ GameRegistry . ObjectHolder ( " mapdatatest : empty _ custom _ map " ) <nl> + public static final Item EMPTY _ CUSTOM _ MAP = null ; <nl> + <nl> + private static SimpleNetworkWrapper packetHandler ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void preInit ( FMLPreInitializationEvent evt ) <nl> + { <nl> + packetHandler = new SimpleNetworkWrapper ( " mapdatatest " ) ; <nl> + packetHandler . registerMessage ( CustomMapPacketHandler . class , CustomMapPacket . class , 0 , Side . CLIENT ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void registerModels ( ModelRegistryEvent evt ) <nl> + { <nl> + ModelLoader . setCustomModelResourceLocation ( EMPTY _ CUSTOM _ MAP , 0 , new ModelResourceLocation ( " map " , " inventory " ) ) ; <nl> + ModelLoader . setCustomMeshDefinition ( CUSTOM _ MAP , s - > new ModelResourceLocation ( " filled _ map " , " inventory " ) ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public void registerItems ( RegistryEvent . Register < Item > evt ) <nl> + { <nl> + evt . getRegistry ( ) . register ( new EmptyCustomMap ( ) . setUnlocalizedName ( " emptyCustomMap " ) . setRegistryName ( " mapdatatest " , " empty _ custom _ map " ) ) ; <nl> + evt . getRegistry ( ) . register ( new CustomMap ( ) . setUnlocalizedName ( " customMap " ) . setRegistryName ( " mapdatatest " , " custom _ map " ) ) ; <nl> + } <nl> + <nl> + public static class EmptyCustomMap extends ItemMapBase <nl> + { <nl> + / / copy of super , setting up our own map <nl> + @ Override <nl> + public ActionResult < ItemStack > onItemRightClick ( World worldIn , EntityPlayer playerIn , EnumHand handIn ) <nl> + { <nl> + ItemStack itemstack = CustomMap . setupNewMap ( worldIn , playerIn . posX , playerIn . posZ , ( byte ) 0 , true , false ) ; <nl> + ItemStack itemstack1 = playerIn . getHeldItem ( handIn ) ; <nl> + itemstack1 . shrink ( 1 ) ; <nl> + <nl> + if ( itemstack1 . isEmpty ( ) ) <nl> + { <nl> + return new ActionResult < > ( EnumActionResult . SUCCESS , itemstack ) ; <nl> + } else <nl> + { <nl> + if ( ! playerIn . inventory . addItemStackToInventory ( itemstack . copy ( ) ) ) <nl> + { <nl> + playerIn . dropItem ( itemstack , false ) ; <nl> + } <nl> + <nl> + playerIn . addStat ( StatList . getObjectUseStats ( this ) ) ; <nl> + return new ActionResult < > ( EnumActionResult . SUCCESS , itemstack1 ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class CustomMap extends ItemMap <nl> + { <nl> + private static final String PREFIX = " custommap " ; <nl> + <nl> + / / copy of super with own map prefix <nl> + public static ItemStack setupNewMap ( World worldIn , double worldX , double worldZ , byte scale , boolean trackingPosition , boolean unlimitedTracking ) <nl> + { <nl> + ItemStack itemstack = new ItemStack ( CUSTOM _ MAP , 1 , worldIn . getUniqueDataId ( PREFIX ) ) ; <nl> + String s = PREFIX + " _ " + itemstack . getMetadata ( ) ; <nl> + MapData mapdata = new CustomMapData ( s ) ; <nl> + worldIn . setData ( s , mapdata ) ; <nl> + mapdata . scale = scale ; <nl> + mapdata . calculateMapCenter ( worldX , worldZ , mapdata . scale ) ; <nl> + mapdata . dimension = worldIn . provider . getDimension ( ) ; <nl> + mapdata . trackingPosition = trackingPosition ; <nl> + mapdata . unlimitedTracking = unlimitedTracking ; <nl> + mapdata . markDirty ( ) ; <nl> + return itemstack ; <nl> + } <nl> + <nl> + / / copy of super with own map prefix and type <nl> + @ Nullable <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public static CustomMapData loadMapData ( int mapId , World worldIn ) <nl> + { <nl> + String s = PREFIX + " _ " + mapId ; <nl> + return ( CustomMapData ) worldIn . loadData ( CustomMapData . class , s ) ; <nl> + } <nl> + <nl> + / / copy of super with own map prefix and type <nl> + @ Nullable <nl> + @ Override <nl> + public CustomMapData getMapData ( ItemStack stack , World worldIn ) <nl> + { <nl> + String s = PREFIX + " _ " + stack . getMetadata ( ) ; <nl> + CustomMapData mapdata = ( CustomMapData ) worldIn . loadData ( CustomMapData . class , s ) ; <nl> + <nl> + if ( mapdata = = null & & ! worldIn . isRemote ) <nl> + { <nl> + stack . setItemDamage ( worldIn . getUniqueDataId ( PREFIX ) ) ; <nl> + s = PREFIX + " _ " + stack . getMetadata ( ) ; <nl> + mapdata = new CustomMapData ( s ) ; <nl> + mapdata . scale = 3 ; <nl> + mapdata . calculateMapCenter ( ( double ) worldIn . getWorldInfo ( ) . getSpawnX ( ) , ( double ) worldIn . getWorldInfo ( ) . getSpawnZ ( ) , mapdata . scale ) ; <nl> + mapdata . dimension = worldIn . provider . getDimension ( ) ; <nl> + mapdata . markDirty ( ) ; <nl> + worldIn . setData ( s , mapdata ) ; <nl> + } <nl> + <nl> + return mapdata ; <nl> + } <nl> + <nl> + @ Override <nl> + public void updateMapData ( World worldIn , Entity viewer , MapData data ) <nl> + { <nl> + / / Solid red <nl> + Arrays . fill ( data . colors , ( byte ) ( MapColor . RED . colorIndex * 4 + 1 ) ) ; <nl> + } <nl> + <nl> + / / rewrap vanilla packet with own , to sync CustomMapData ' s extra data <nl> + @ Override <nl> + public Packet < ? > createMapDataPacket ( ItemStack stack , World worldIn , EntityPlayer player ) <nl> + { <nl> + SPacketMaps vanillaPacket = ( SPacketMaps ) super . createMapDataPacket ( stack , worldIn , player ) ; <nl> + if ( vanillaPacket = = null ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + return packetHandler . getPacketFrom ( new CustomMapPacket ( vanillaPacket ) ) ; <nl> + } <nl> + } <nl> + <nl> + / / A custom subclass to distinguish from vanilla ' s type in the WorldSavedData <nl> + public static class CustomMapData extends MapData <nl> + { <nl> + public CustomMapData ( String mapname ) <nl> + { <nl> + super ( mapname ) ; <nl> + } <nl> + } <nl> + <nl> + / / Custom map packet wrapping vanilla ' s because the handler needs to use our custom type <nl> + public static class CustomMapPacket implements IMessage <nl> + { <nl> + public SPacketMaps vanillaPacket ; <nl> + <nl> + public CustomMapPacket ( ) { } <nl> + <nl> + public CustomMapPacket ( SPacketMaps vanillaPacket ) <nl> + { <nl> + this . vanillaPacket = vanillaPacket ; <nl> + } <nl> + <nl> + @ Override <nl> + public void fromBytes ( ByteBuf buf ) { <nl> + vanillaPacket = new SPacketMaps ( ) ; <nl> + try { <nl> + vanillaPacket . readPacketData ( new PacketBuffer ( buf ) ) ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void toBytes ( ByteBuf buf ) { <nl> + try { <nl> + vanillaPacket . writePacketData ( new PacketBuffer ( buf ) ) ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static class CustomMapPacketHandler implements IMessageHandler < CustomMapPacket , IMessage > <nl> + { <nl> + @ Nullable <nl> + @ Override <nl> + public IMessage onMessage ( CustomMapPacket message , MessageContext ctx ) { <nl> + / / Like NetHandlerPlayClient . handleMaps but using our custom type <nl> + Minecraft . getMinecraft ( ) . addScheduledTask ( ( ) - > <nl> + { <nl> + MapItemRenderer mapitemrenderer = Minecraft . getMinecraft ( ) . entityRenderer . getMapItemRenderer ( ) ; <nl> + MapData mapdata = CustomMap . loadMapData ( message . vanillaPacket . getMapId ( ) , Minecraft . getMinecraft ( ) . world ) ; <nl> + <nl> + if ( mapdata = = null ) { <nl> + String s = CustomMap . PREFIX + " _ " + message . vanillaPacket . getMapId ( ) ; <nl> + mapdata = new CustomMapData ( s ) ; <nl> + <nl> + if ( mapitemrenderer . getMapInstanceIfExists ( s ) ! = null ) { <nl> + MapData mapdata1 = mapitemrenderer . getData ( mapitemrenderer . getMapInstanceIfExists ( s ) ) ; <nl> + <nl> + if ( mapdata1 ! = null ) { <nl> + mapdata = mapdata1 ; <nl> + } <nl> + } <nl> + <nl> + Minecraft . getMinecraft ( ) . world . setData ( s , mapdata ) ; <nl> + } <nl> + <nl> + message . vanillaPacket . setMapdataTo ( mapdata ) ; <nl> + mapitemrenderer . updateMapTexture ( mapdata ) ; <nl> + } ) ; <nl> + <nl> + return null ; <nl> + } <nl> + } <nl> + <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> index a24be3d . . 2eef166 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 1 , 6 + 1 , 31 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> - @ @ - 129 , 6 + 129 , 12 @ @ <nl> + @ @ - 49 , 6 + 49 , 24 @ @ <nl> + { <nl> + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; <nl> + + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) <nl> + + { <nl> + + if ( block . canRenderInLayer ( layer ) ) <nl> + + { <nl> + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; <nl> + + <nl> + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + + } <nl> + + } <nl> + + return ; <nl> + + } <nl> + + <nl> + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + } <nl> + @ @ - 129 , 6 + 147 , 12 @ @ <nl> ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 593101c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> @ @ - 0 , 0 + 1 , 265 @ @ <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> + import net . minecraftforge . client . model . IModelPart ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> + public class LayerBreakingTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + public static TestBlock testBlock ; <nl> + <nl> + class TestBakedModel implements IFlexibleBakedModel <nl> + { <nl> + <nl> + TextureAtlasSprite texture ; <nl> + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> + <nl> + private int [ ] vertexToInts ( <nl> + float x , <nl> + float y , <nl> + float z , <nl> + int color , <nl> + TextureAtlasSprite texture , <nl> + int u , <nl> + int v ) <nl> + { <nl> + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> + } <nl> + <nl> + public TestBakedModel ( <nl> + TextureAtlasSprite sprite , <nl> + boolean top ) <nl> + { <nl> + texture = sprite ; <nl> + if ( top ) <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> + } <nl> + else <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return texture ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( <nl> + EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + return list ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class TestBlock extends Block <nl> + { <nl> + <nl> + protected TestBlock ( ) <nl> + { <nl> + super ( Material . glass ) ; <nl> + setHardness ( 7 ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isFullCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( <nl> + EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class SmartModel implements IBakedModel , ISmartBlockModel <nl> + { <nl> + <nl> + IFlexibleBakedModel solid ; <nl> + IFlexibleBakedModel translucent ; <nl> + <nl> + private class DefState implements IModelState <nl> + { <nl> + <nl> + @ Override <nl> + public TRSRTransformation apply ( <nl> + IModelPart part ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ Override <nl> + public List getFaceQuads ( <nl> + EnumFacing p _ 177551 _ 1 _ ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List getGeneralQuads ( ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( <nl> + IBlockState state ) <nl> + { <nl> + if ( solid = = null ) <nl> + { <nl> + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; <nl> + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; <nl> + <nl> + translucent = new TestBakedModel ( a , true ) ; <nl> + solid = new TestBakedModel ( b , false ) ; <nl> + } <nl> + <nl> + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) <nl> + { <nl> + return solid ; <nl> + } <nl> + else <nl> + { <nl> + return translucent ; <nl> + } <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( <nl> + ModelBakeEvent event ) <nl> + { <nl> + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void init ( <nl> + FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch b / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 index 17b9d9a . . c258eb7 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / ItemRenderer . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / ItemRenderer . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / ItemRenderer . java 
 + @ @ - 216 , 7 + 216 , 7 @ @ 
 + bufferbuilder . func _ 181662 _ b ( 135 . 0D , - 7 . 0D , 0 . 0D ) . func _ 187315 _ a ( 1 . 0D , 0 . 0D ) . func _ 181675 _ d ( ) ; 
 + bufferbuilder . func _ 181662 _ b ( - 7 . 0D , - 7 . 0D , 0 . 0D ) . func _ 187315 _ a ( 0 . 0D , 0 . 0D ) . func _ 181675 _ d ( ) ; 
 + tessellator . func _ 78381 _ a ( ) ; 
 + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( p _ 187461 _ 1 _ , this . field _ 78455 _ a . field _ 71441 _ e ) ; 
 + + MapData mapdata = ( ( net . minecraft . item . ItemMap ) p _ 187461 _ 1 _ . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( p _ 187461 _ 1 _ , this . field _ 78455 _ a . field _ 71441 _ e ) ; 
 + 
 + if ( mapdata ! = null ) 
 + { 
 @ @ - 312 , 7 + 312 , 7 @ @ 
 { 
 ItemStack itemstack = abstractclientplayer . func _ 184607 _ cu ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch 
 index b8ea55b . . 8b83223 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java . patch 
 @ @ - 1 , 5 + 1 , 14 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / entity / RenderItemFrame . java 
 + @ @ - 49 , 7 + 49 , 7 @ @ 
 + ModelManager modelmanager = blockrendererdispatcher . func _ 175023 _ a ( ) . func _ 178126 _ b ( ) ; 
 + IBakedModel ibakedmodel ; 
 + 
 + - if ( p _ 76986 _ 1 _ . func _ 82335 _ i ( ) . func _ 77973 _ b ( ) = = Items . field _ 151098 _ aY ) 
 + + if ( p _ 76986 _ 1 _ . func _ 82335 _ i ( ) . func _ 77973 _ b ( ) instanceof net . minecraft . item . ItemMap ) 
 + { 
 + ibakedmodel = modelmanager . func _ 174953 _ a ( this . field _ 177073 _ g ) ; 
 + } 
 @ @ - 96 , 10 + 96 , 13 @ @ 
 { 
 GlStateManager . func _ 179094 _ E ( ) ; 
 @ @ - 15 , 6 + 24 , 15 @ @ 
 if ( flag ) 
 { 
 this . field _ 76990 _ c . field _ 78724 _ e . func _ 110577 _ a ( field _ 110789 _ a ) ; 
 + @ @ - 107 , 7 + 110 , 7 @ @ 
 + float f = 0 . 0078125F ; 
 + GlStateManager . func _ 179152 _ a ( 0 . 0078125F , 0 . 0078125F , 0 . 0078125F ) ; 
 + GlStateManager . func _ 179109 _ b ( - 64 . 0F , - 64 . 0F , 0 . 0F ) ; 
 + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( itemstack , p _ 82402 _ 1 _ . field _ 70170 _ p ) ; 
 + + MapData mapdata = ( ( net . minecraft . item . ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( itemstack , p _ 82402 _ 1 _ . field _ 70170 _ p ) ; 
 + GlStateManager . func _ 179109 _ b ( 0 . 0F , 0 . 0F , - 1 . 0F ) ; 
 + 
 + if ( mapdata ! = null ) 
 @ @ - 124 , 6 + 127 , 7 @ @ 
 RenderHelper . func _ 74518 _ a ( ) ; 
 GlStateManager . func _ 179099 _ b ( ) ; 
 diff - - git a / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch b / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch 
 index c6131f1 . . 9c189b9 100644 
 - - - a / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / EntityTrackerEntry . java . patch 
 @ @ - 1 , 5 + 1 , 21 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / entity / EntityTrackerEntry . java 
 + + + . . / src - work / minecraft / net / minecraft / entity / EntityTrackerEntry . java 
 + @ @ - 158 , 13 + 158 , 13 @ @ 
 + 
 + if ( itemstack . func _ 77973 _ b ( ) instanceof ItemMap ) 
 + { 
 + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p ) ; 
 + + MapData mapdata = ( ( ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p ) ; 
 + 
 + for ( EntityPlayer entityplayer : p _ 73122 _ 1 _ ) 
 + { 
 + EntityPlayerMP entityplayermp = ( EntityPlayerMP ) entityplayer ; 
 + mapdata . func _ 76191 _ a ( entityplayermp , itemstack ) ; 
 + - Packet < ? > packet = Items . field _ 151098 _ aY . func _ 150911 _ c ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p , entityplayermp ) ; 
 + + Packet < ? > packet = ( ( ItemMap ) itemstack . func _ 77973 _ b ( ) ) . func _ 150911 _ c ( itemstack , this . field _ 73132 _ a . field _ 70170 _ p , entityplayermp ) ; 
 + 
 + if ( packet ! = null ) 
 + { 
 @ @ - 457 , 6 + 457 , 7 @ @ 
 
 this . field _ 73132 _ a . func _ 184178 _ b ( p _ 73117 _ 1 _ ) ; 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemMap . java . patch b / patches / minecraft / net / minecraft / item / ItemMap . java . patch 
 index cfd3a79 . . 9f3549c 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemMap . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemMap . java . patch 
 @ @ - 27 , 3 + 27 , 15 @ @ 
 { 
 int i = 1 < < p _ 77872 _ 3 _ . field _ 76197 _ d ; 
 int j = p _ 77872 _ 3 _ . field _ 76201 _ a ; 
 + @ @ - 251 , 9 + 251 , 9 @ @ 
 + 
 + public static void func _ 190905 _ a ( World p _ 190905 _ 0 _ , ItemStack p _ 190905 _ 1 _ ) 
 + { 
 + - if ( p _ 190905 _ 1 _ . func _ 77973 _ b ( ) = = Items . field _ 151098 _ aY ) 
 + + if ( p _ 190905 _ 1 _ . func _ 77973 _ b ( ) instanceof ItemMap ) 
 + { 
 + - MapData mapdata = Items . field _ 151098 _ aY . func _ 77873 _ a ( p _ 190905 _ 1 _ , p _ 190905 _ 0 _ ) ; 
 + + MapData mapdata = ( ( ItemMap ) p _ 190905 _ 1 _ . func _ 77973 _ b ( ) ) . func _ 77873 _ a ( p _ 190905 _ 1 _ , p _ 190905 _ 0 _ ) ; 
 + 
 + if ( mapdata ! = null ) 
 + { 
 diff - - git a / src / test / java / net / minecraftforge / debug / MapDataTest . java b / src / test / java / net / minecraftforge / debug / MapDataTest . java 
 new file mode 100644 
 index 0000000 . . 8732d7d 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / MapDataTest . java 
 @ @ - 0 , 0 + 1 , 249 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import io . netty . buffer . ByteBuf ; 
 + import net . minecraft . block . material . MapColor ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . gui . MapItemRenderer ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemMap ; 
 + import net . minecraft . item . ItemMapBase ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . network . Packet ; 
 + import net . minecraft . network . PacketBuffer ; 
 + import net . minecraft . network . play . server . SPacketMaps ; 
 + import net . minecraft . stats . StatList ; 
 + import net . minecraft . util . ActionResult ; 
 + import net . minecraft . util . EnumActionResult ; 
 + import net . minecraft . util . EnumHand ; 
 + import net . minecraft . world . World ; 
 + import net . minecraft . world . storage . MapData ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . network . simpleimpl . IMessage ; 
 + import net . minecraftforge . fml . common . network . simpleimpl . IMessageHandler ; 
 + import net . minecraftforge . fml . common . network . simpleimpl . MessageContext ; 
 + import net . minecraftforge . fml . common . network . simpleimpl . SimpleNetworkWrapper ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . io . IOException ; 
 + import java . util . Arrays ; 
 + 
 + @ Mod ( modid = " mapdatatest " , name = " mapdatatest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + public class MapDataTest 
 + { 
 + @ GameRegistry . ObjectHolder ( " mapdatatest : custom _ map " ) 
 + public static final Item CUSTOM _ MAP = null ; 
 + 
 + @ GameRegistry . ObjectHolder ( " mapdatatest : empty _ custom _ map " ) 
 + public static final Item EMPTY _ CUSTOM _ MAP = null ; 
 + 
 + private static SimpleNetworkWrapper packetHandler ; 
 + 
 + @ Mod . EventHandler 
 + public void preInit ( FMLPreInitializationEvent evt ) 
 + { 
 + packetHandler = new SimpleNetworkWrapper ( " mapdatatest " ) ; 
 + packetHandler . registerMessage ( CustomMapPacketHandler . class , CustomMapPacket . class , 0 , Side . CLIENT ) ; 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void registerModels ( ModelRegistryEvent evt ) 
 + { 
 + ModelLoader . setCustomModelResourceLocation ( EMPTY _ CUSTOM _ MAP , 0 , new ModelResourceLocation ( " map " , " inventory " ) ) ; 
 + ModelLoader . setCustomMeshDefinition ( CUSTOM _ MAP , s - > new ModelResourceLocation ( " filled _ map " , " inventory " ) ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public void registerItems ( RegistryEvent . Register < Item > evt ) 
 + { 
 + evt . getRegistry ( ) . register ( new EmptyCustomMap ( ) . setUnlocalizedName ( " emptyCustomMap " ) . setRegistryName ( " mapdatatest " , " empty _ custom _ map " ) ) ; 
 + evt . getRegistry ( ) . register ( new CustomMap ( ) . setUnlocalizedName ( " customMap " ) . setRegistryName ( " mapdatatest " , " custom _ map " ) ) ; 
 + } 
 + 
 + public static class EmptyCustomMap extends ItemMapBase 
 + { 
 + / / copy of super , setting up our own map 
 + @ Override 
 + public ActionResult < ItemStack > onItemRightClick ( World worldIn , EntityPlayer playerIn , EnumHand handIn ) 
 + { 
 + ItemStack itemstack = CustomMap . setupNewMap ( worldIn , playerIn . posX , playerIn . posZ , ( byte ) 0 , true , false ) ; 
 + ItemStack itemstack1 = playerIn . getHeldItem ( handIn ) ; 
 + itemstack1 . shrink ( 1 ) ; 
 + 
 + if ( itemstack1 . isEmpty ( ) ) 
 + { 
 + return new ActionResult < > ( EnumActionResult . SUCCESS , itemstack ) ; 
 + } else 
 + { 
 + if ( ! playerIn . inventory . addItemStackToInventory ( itemstack . copy ( ) ) ) 
 + { 
 + playerIn . dropItem ( itemstack , false ) ; 
 + } 
 + 
 + playerIn . addStat ( StatList . getObjectUseStats ( this ) ) ; 
 + return new ActionResult < > ( EnumActionResult . SUCCESS , itemstack1 ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class CustomMap extends ItemMap 
 + { 
 + private static final String PREFIX = " custommap " ; 
 + 
 + / / copy of super with own map prefix 
 + public static ItemStack setupNewMap ( World worldIn , double worldX , double worldZ , byte scale , boolean trackingPosition , boolean unlimitedTracking ) 
 + { 
 + ItemStack itemstack = new ItemStack ( CUSTOM _ MAP , 1 , worldIn . getUniqueDataId ( PREFIX ) ) ; 
 + String s = PREFIX + " _ " + itemstack . getMetadata ( ) ; 
 + MapData mapdata = new CustomMapData ( s ) ; 
 + worldIn . setData ( s , mapdata ) ; 
 + mapdata . scale = scale ; 
 + mapdata . calculateMapCenter ( worldX , worldZ , mapdata . scale ) ; 
 + mapdata . dimension = worldIn . provider . getDimension ( ) ; 
 + mapdata . trackingPosition = trackingPosition ; 
 + mapdata . unlimitedTracking = unlimitedTracking ; 
 + mapdata . markDirty ( ) ; 
 + return itemstack ; 
 + } 
 + 
 + / / copy of super with own map prefix and type 
 + @ Nullable 
 + @ SideOnly ( Side . CLIENT ) 
 + public static CustomMapData loadMapData ( int mapId , World worldIn ) 
 + { 
 + String s = PREFIX + " _ " + mapId ; 
 + return ( CustomMapData ) worldIn . loadData ( CustomMapData . class , s ) ; 
 + } 
 + 
 + / / copy of super with own map prefix and type 
 + @ Nullable 
 + @ Override 
 + public CustomMapData getMapData ( ItemStack stack , World worldIn ) 
 + { 
 + String s = PREFIX + " _ " + stack . getMetadata ( ) ; 
 + CustomMapData mapdata = ( CustomMapData ) worldIn . loadData ( CustomMapData . class , s ) ; 
 + 
 + if ( mapdata = = null & & ! worldIn . isRemote ) 
 + { 
 + stack . setItemDamage ( worldIn . getUniqueDataId ( PREFIX ) ) ; 
 + s = PREFIX + " _ " + stack . getMetadata ( ) ; 
 + mapdata = new CustomMapData ( s ) ; 
 + mapdata . scale = 3 ; 
 + mapdata . calculateMapCenter ( ( double ) worldIn . getWorldInfo ( ) . getSpawnX ( ) , ( double ) worldIn . getWorldInfo ( ) . getSpawnZ ( ) , mapdata . scale ) ; 
 + mapdata . dimension = worldIn . provider . getDimension ( ) ; 
 + mapdata . markDirty ( ) ; 
 + worldIn . setData ( s , mapdata ) ; 
 + } 
 + 
 + return mapdata ; 
 + } 
 + 
 + @ Override 
 + public void updateMapData ( World worldIn , Entity viewer , MapData data ) 
 + { 
 + / / Solid red 
 + Arrays . fill ( data . colors , ( byte ) ( MapColor . RED . colorIndex * 4 + 1 ) ) ; 
 + } 
 + 
 + / / rewrap vanilla packet with own , to sync CustomMapData ' s extra data 
 + @ Override 
 + public Packet < ? > createMapDataPacket ( ItemStack stack , World worldIn , EntityPlayer player ) 
 + { 
 + SPacketMaps vanillaPacket = ( SPacketMaps ) super . createMapDataPacket ( stack , worldIn , player ) ; 
 + if ( vanillaPacket = = null ) 
 + { 
 + return null ; 
 + } 
 + 
 + return packetHandler . getPacketFrom ( new CustomMapPacket ( vanillaPacket ) ) ; 
 + } 
 + } 
 + 
 + / / A custom subclass to distinguish from vanilla ' s type in the WorldSavedData 
 + public static class CustomMapData extends MapData 
 + { 
 + public CustomMapData ( String mapname ) 
 + { 
 + super ( mapname ) ; 
 + } 
 + } 
 + 
 + / / Custom map packet wrapping vanilla ' s because the handler needs to use our custom type 
 + public static class CustomMapPacket implements IMessage 
 + { 
 + public SPacketMaps vanillaPacket ; 
 + 
 + public CustomMapPacket ( ) { } 
 + 
 + public CustomMapPacket ( SPacketMaps vanillaPacket ) 
 + { 
 + this . vanillaPacket = vanillaPacket ; 
 + } 
 + 
 + @ Override 
 + public void fromBytes ( ByteBuf buf ) { 
 + vanillaPacket = new SPacketMaps ( ) ; 
 + try { 
 + vanillaPacket . readPacketData ( new PacketBuffer ( buf ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public void toBytes ( ByteBuf buf ) { 
 + try { 
 + vanillaPacket . writePacketData ( new PacketBuffer ( buf ) ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + } 
 + } 
 + 
 + public static class CustomMapPacketHandler implements IMessageHandler < CustomMapPacket , IMessage > 
 + { 
 + @ Nullable 
 + @ Override 
 + public IMessage onMessage ( CustomMapPacket message , MessageContext ctx ) { 
 + / / Like NetHandlerPlayClient . handleMaps but using our custom type 
 + Minecraft . getMinecraft ( ) . addScheduledTask ( ( ) - > 
 + { 
 + MapItemRenderer mapitemrenderer = Minecraft . getMinecraft ( ) . entityRenderer . getMapItemRenderer ( ) ; 
 + MapData mapdata = CustomMap . loadMapData ( message . vanillaPacket . getMapId ( ) , Minecraft . getMinecraft ( ) . world ) ; 
 + 
 + if ( mapdata = = null ) { 
 + String s = CustomMap . PREFIX + " _ " + message . vanillaPacket . getMapId ( ) ; 
 + mapdata = new CustomMapData ( s ) ; 
 + 
 + if ( mapitemrenderer . getMapInstanceIfExists ( s ) ! = null ) { 
 + MapData mapdata1 = mapitemrenderer . getData ( mapitemrenderer . getMapInstanceIfExists ( s ) ) ; 
 + 
 + if ( mapdata1 ! = null ) { 
 + mapdata = mapdata1 ; 
 + } 
 + } 
 + 
 + Minecraft . getMinecraft ( ) . world . setData ( s , mapdata ) ; 
 + } 
 + 
 + message . vanillaPacket . setMapdataTo ( mapdata ) ; 
 + mapitemrenderer . updateMapTexture ( mapdata ) ; 
 + } ) ; 
 + 
 + return null ; 
 + } 
 + } 
 + 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 index a24be3d . . 2eef166 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 1 , 6 + 1 , 31 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 - @ @ - 129 , 6 + 129 , 12 @ @ 
 + @ @ - 49 , 6 + 49 , 24 @ @ 
 + { 
 + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; 
 + + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) 
 + + { 
 + + if ( block . canRenderInLayer ( layer ) ) 
 + + { 
 + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; 
 + + 
 + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + + } 
 + + } 
 + + return ; 
 + + } 
 + + 
 + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + } 
 + @ @ - 129 , 6 + 147 , 12 @ @ 
 ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 new file mode 100644 
 index 0000000 . . 593101c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 @ @ - 0 , 0 + 1 , 265 @ @ 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 + import net . minecraftforge . client . model . IModelPart ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 + public class LayerBreakingTest 
 + { 
 + 
 + public static final boolean ENABLE = true ; 
 + public static TestBlock testBlock ; 
 + 
 + class TestBakedModel implements IFlexibleBakedModel 
 + { 
 + 
 + TextureAtlasSprite texture ; 
 + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 + 
 + private int [ ] vertexToInts ( 
 + float x , 
 + float y , 
 + float z , 
 + int color , 
 + TextureAtlasSprite texture , 
 + int u , 
 + int v ) 
 + { 
 + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 + } 
 + 
 + public TestBakedModel ( 
 + TextureAtlasSprite sprite , 
 + boolean top ) 
 + { 
 + texture = sprite ; 
 + if ( top ) 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 + } 
 + else 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return texture ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( 
 + EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + return list ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + } ; 
 + 
 + class TestBlock extends Block 
 + { 
 + 
 + protected TestBlock ( ) 
 + { 
 + super ( Material . glass ) ; 
 + setHardness ( 7 ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isFullCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( 
 + EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + 
 + } ; 
 + 
 + class SmartModel implements IBakedModel , ISmartBlockModel 
 + { 
 + 
 + IFlexibleBakedModel solid ; 
 + IFlexibleBakedModel translucent ; 
 + 
 + private class DefState implements IModelState 
 + { 
 + 
 + @ Override 
 + public TRSRTransformation apply ( 
 + IModelPart part ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + } ; 
 + 
 + @ Override 
 + public List getFaceQuads ( 
 + EnumFacing p _ 177551 _ 1 _ ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List getGeneralQuads ( ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( 
 + IBlockState state ) 
 + { 
 + if ( solid = = null ) 
 + { 
 + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; 
 + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; 
 + 
 + translucent = new TestBakedModel ( a , true ) ; 
 + solid = new TestBakedModel ( b , false ) ; 
 + } 
 + 
 + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) 
 + { 
 + return solid ; 
 + } 
 + else 
 + { 
 + return translucent ; 
 + } 
 + } 
 + 
 + } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( 
 + ModelBakeEvent event ) 
 + { 
 + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; 
 + } 
 + 
 + @ EventHandler 
 + public void init ( 
 + FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; 
 + } 
 + } 
 + 
 + }
