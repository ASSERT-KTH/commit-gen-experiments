BLEU SCORE: 0.037052472057637634

TEST MSG: Include project group in ForgeVersion and determine path to patched jar .
GENERATED MSG: Tweak library locating code . Works well on vanilla and dev now .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index 5cd0ef1 . . 7f1acda 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 86 , 7 + 86 , 8 @ @ project ( ' : forge ' ) { <nl> apply plugin : ' net . minecrell . licenser ' <nl> apply plugin : ' de . undercouch . download ' <nl> <nl> - compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . <nl> + compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . <nl> + group = ' net . minecraftforge . test ' / / TODO : remove test when we finish patches and want users to find it <nl> <nl> sourceSets { <nl> main { <nl> @ @ - 129 , 7 + 130 , 8 @ @ project ( ' : forge ' ) { <nl> ' mc . version ' : MC _ VERSION , <nl> ' mcp . version ' : MCP _ VERSION , <nl> ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , <nl> - ' forge . spec ' : SPEC _ VERSION <nl> + ' forge . spec ' : SPEC _ VERSION , <nl> + ' forge . group ' : project . group <nl> ] <nl> } <nl> serverRun { <nl> @ @ - 141 , 7 + 143 , 8 @ @ project ( ' : forge ' ) { <nl> ' mc . version ' : MC _ VERSION , <nl> ' mcp . version ' : MCP _ VERSION , <nl> ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , <nl> - ' forge . spec ' : SPEC _ VERSION <nl> + ' forge . spec ' : SPEC _ VERSION , <nl> + ' forge . group ' : project . group <nl> ] <nl> } <nl> } <nl> @ @ - 162 , 7 + 165 , 6 @ @ project ( ' : forge ' ) { <nl> return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " . toString ( ) / / Bake the response instead of making it dynamic <nl> } <nl> <nl> - group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working <nl> version = getVersion ( ) <nl> applyPatches { <nl> canonicalizeAccess true <nl> @ @ - 215 , 7 + 217 , 8 @ @ project ( ' : forge ' ) { <nl> " mc . version " : " $ { MC _ VERSION } " , <nl> " mcp . version " : " $ { MCP _ VERSION } " , <nl> " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , <nl> - " forge . spec " : " $ { SPEC _ VERSION } " <nl> + " forge . spec " : " $ { SPEC _ VERSION } " , <nl> + " forge . group " : project . group <nl> ] <nl> environment + = [ <nl> target : ' fmldevclient ' , <nl> @ @ - 242 , 7 + 245 , 8 @ @ project ( ' : forge ' ) { <nl> " mc . version " : " $ { MC _ VERSION } " , <nl> " mcp . version " : " $ { MCP _ VERSION } " , <nl> " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , <nl> - " forge . spec " : " $ { SPEC _ VERSION } " <nl> + " forge . spec " : " $ { SPEC _ VERSION } " , <nl> + " forge . group " : project . group <nl> ] <nl> environment target : ' fmldevserver ' <nl> workingDir ' runserver ' <nl> @ @ - 613 , 7 + 617 , 7 @ @ project ( ' : forge ' ) { <nl> ' Specification - Title ' : ' Forge ' , <nl> ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> ' Specification - Version ' : SPEC _ VERSION , <nl> - ' Implementation - Title ' : ' Forge ' , <nl> + ' Implementation - Title ' : project . group , <nl> ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> ' Implementation - Vendor ' : ' Forge Development LLC ' <nl> ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index bfa8e30 . . 30986ed 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 29 , 6 + 29 , 7 @ @ import net . minecraftforge . versions . mcp . MCPVersion ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . io . File ; <nl> import java . net . URISyntaxException ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> @ @ - 49 , 7 + 50 , 7 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> Path libsPath = findLibsPath ( ) ; <nl> - Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( ForgeVersion . getGroup ( ) . replace ( ' . ' , File . separatorChar ) , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; <nl> Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java <nl> index 161c0c0 . . 03285f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraftforge . versions . mcp . MCPVersion ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . io . File ; <nl> import java . nio . file . Files ; <nl> import java . nio . file . Path ; <nl> import java . nio . file . Paths ; <nl> @ @ - 47 , 7 + 48 , 7 @ @ public class FMLServerLaunchProvider extends FMLCommonLaunchHandler implements I <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> Path libsPath = findLibsPath ( ) ; <nl> - Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( ForgeVersion . getGroup ( ) . replace ( ' . ' , File . separatorChar ) , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; <nl> Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " server " , MCPVersion . getMCPandMCVersion ( ) , " server - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java b / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java <nl> index 0566c83 . . 05b40e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java <nl> @ @ - 38 , 8 + 38 , 8 @ @ public class ForgeVersion <nl> public static final String mcpVersion = " 9 . 42 " ; <nl> <nl> private static final String forgeVersion ; <nl> - <nl> private static final String forgeSpec ; <nl> + private static final String forgeGroup ; <nl> <nl> static { <nl> String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; <nl> @ @ - 52 , 10 + 52 , 19 @ @ public class ForgeVersion <nl> spec = System . getProperty ( " forge . spec " ) ; <nl> } <nl> if ( spec = = null ) throw new RuntimeException ( " Missing forge spec , cannot continue " ) ; <nl> + String group = ForgeVersion . class . getPackage ( ) . getImplementationTitle ( ) ; <nl> + if ( group = = null ) { <nl> + group = System . getProperty ( " forge . group " ) ; <nl> + } <nl> + if ( group = = null ) { <nl> + group = " net . minecraftforge " ; / / If all else fails , Our normal group <nl> + } <nl> forgeVersion = vers ; <nl> forgeSpec = spec ; <nl> + forgeGroup = group ; <nl> LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; <nl> LOGGER . info ( CORE , " Found Forge spec { } " , forgeSpec ) ; <nl> + LOGGER . info ( CORE , " Found Forge group { } " , forgeGroup ) ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> @ @ - 77 , 5 + 86 , 9 @ @ public class ForgeVersion <nl> public static String getSpec ( ) { <nl> return forgeSpec ; <nl> } <nl> + <nl> + public static String getGroup ( ) { <nl> + return forgeGroup ; <nl> + } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> index d36f519 . . d520016 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java <nl> @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer <nl> try <nl> { <nl> modClass = Class . forName ( className , true , modClassLoader ) ; <nl> - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; <nl> } <nl> catch ( Throwable e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 375764e . . bfa8e30 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; <nl> import net . minecraftforge . versions . forge . ForgeVersion ; <nl> import net . minecraftforge . versions . mcp . MCPVersion ; <nl> import org . apache . logging . log4j . LogManager ; <nl> @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> - private static final Path forgePath ; <nl> - private static final Path patchedBinariesPath ; <nl> - private static final Path srgMcPath ; <nl> <nl> - static { <nl> - Path forgePath1 = null ; <nl> - Path patchedBinariesPath1 = null ; <nl> - Path srgMcPath1 = null ; <nl> - try { <nl> - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; <nl> - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; <nl> - } catch ( URISyntaxException e ) { <nl> - <nl> - } <nl> - forgePath = forgePath1 ; <nl> - patchedBinariesPath = patchedBinariesPath1 ; <nl> - srgMcPath = srgMcPath1 ; <nl> - } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> + Path libsPath = findLibsPath ( ) ; <nl> + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; <nl> + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; <nl> LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; <nl> LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; <nl> - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; <nl> - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { <nl> + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; <nl> + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { <nl> throw new RuntimeException ( " Failed to find patched jars " ) ; <nl> } <nl> - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> - super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> index 94f8d4f . . 76ad5be 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java <nl> @ @ - 19 , 25 + 19 , 38 @ @ <nl> <nl> package net . minecraftforge . fml . loading ; <nl> <nl> + import com . google . common . collect . ObjectArrays ; <nl> import cpw . mods . modlauncher . api . IEnvironment ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> <nl> + import java . net . URI ; <nl> + import java . net . URISyntaxException ; <nl> + import java . net . URL ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . function . Predicate ; <nl> <nl> + import static net . minecraftforge . fml . Logging . CORE ; <nl> + <nl> public abstract class FMLCommonLaunchHandler <nl> { <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> / / standard libs <nl> - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , <nl> + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , <nl> " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , <nl> " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " <nl> ) ; <nl> <nl> + private Path forgePath ; <nl> + <nl> protected Predicate < String > getPackagePredicate ( ) { <nl> return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; <nl> } <nl> @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler <nl> <nl> } <nl> <nl> + Path findLibsPath ( ) { <nl> + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; <nl> + / / go up SIX parents to find the libs dir <nl> + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; <nl> + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; <nl> + return libs ; <nl> + } <nl> + Path findJarPathFor ( final String className , final String jarName ) { <nl> + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; <nl> + try { <nl> + Path path ; <nl> + final URI uri = resource . toURI ( ) ; <nl> + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { <nl> + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; <nl> + } else { <nl> + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; <nl> + } <nl> + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; <nl> + return path ; <nl> + } catch ( URISyntaxException e ) { <nl> + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; <nl> + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; <nl> + } <nl> + } <nl> + Path [ ] commonLibPaths ( Path [ ] extras ) { <nl> + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; <nl> + return ObjectArrays . concat ( extras , realms ) ; <nl> + } <nl> + <nl> + Path getForgePath ( ) { <nl> + if ( forgePath = = null ) { <nl> + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; <nl> + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; <nl> + } <nl> + return forgePath ; <nl> + } <nl> public abstract Dist getDist ( ) ; <nl> <nl> - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) <nl> + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) <nl> { <nl> - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; <nl> + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> index 27d441d . . 3a025d3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java <nl> @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevclient " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> index 7c0da5a . . 2aea0e2 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java <nl> @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; <nl> <nl> public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> - <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> @ Override <nl> @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> return " fmldevserver " ; <nl> } <nl> <nl> - private static final Path myPath ; <nl> - <nl> - static <nl> - { <nl> - try <nl> - { <nl> - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> - } <nl> - catch ( URISyntaxException e ) <nl> - { <nl> - throw new RuntimeException ( " HUH ? " ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ ] { myPath } ; <nl> + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement <nl> { <nl> return ( ) - > { <nl> LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; <nl> - super . beforeStart ( launchClassLoader , myPath ) ; <nl> + super . beforeStart ( launchClassLoader ) ; <nl> launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; <nl> Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; <nl> Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index 5cd0ef1 . . 7f1acda 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 86 , 7 + 86 , 8 @ @ project ( ' : forge ' ) { 
 apply plugin : ' net . minecrell . licenser ' 
 apply plugin : ' de . undercouch . download ' 
 
 - compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . 
 + compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . 
 + group = ' net . minecraftforge . test ' / / TODO : remove test when we finish patches and want users to find it 
 
 sourceSets { 
 main { 
 @ @ - 129 , 7 + 130 , 8 @ @ project ( ' : forge ' ) { 
 ' mc . version ' : MC _ VERSION , 
 ' mcp . version ' : MCP _ VERSION , 
 ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , 
 - ' forge . spec ' : SPEC _ VERSION 
 + ' forge . spec ' : SPEC _ VERSION , 
 + ' forge . group ' : project . group 
 ] 
 } 
 serverRun { 
 @ @ - 141 , 7 + 143 , 8 @ @ project ( ' : forge ' ) { 
 ' mc . version ' : MC _ VERSION , 
 ' mcp . version ' : MCP _ VERSION , 
 ' forge . version ' : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " . toString ( ) , 
 - ' forge . spec ' : SPEC _ VERSION 
 + ' forge . spec ' : SPEC _ VERSION , 
 + ' forge . group ' : project . group 
 ] 
 } 
 } 
 @ @ - 162 , 7 + 165 , 6 @ @ project ( ' : forge ' ) { 
 return " $ { MC _ VERSION } - $ { tag } . $ { offset } $ { t - > if ( branch ! = null ) t < < ' - ' + branch } " . toString ( ) / / Bake the response instead of making it dynamic 
 } 
 
 - group = ' net . minecraftforge . test ' / / TODO : remove when we jenkins is working 
 version = getVersion ( ) 
 applyPatches { 
 canonicalizeAccess true 
 @ @ - 215 , 7 + 217 , 8 @ @ project ( ' : forge ' ) { 
 " mc . version " : " $ { MC _ VERSION } " , 
 " mcp . version " : " $ { MCP _ VERSION } " , 
 " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , 
 - " forge . spec " : " $ { SPEC _ VERSION } " 
 + " forge . spec " : " $ { SPEC _ VERSION } " , 
 + " forge . group " : project . group 
 ] 
 environment + = [ 
 target : ' fmldevclient ' , 
 @ @ - 242 , 7 + 245 , 8 @ @ project ( ' : forge ' ) { 
 " mc . version " : " $ { MC _ VERSION } " , 
 " mcp . version " : " $ { MCP _ VERSION } " , 
 " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , 
 - " forge . spec " : " $ { SPEC _ VERSION } " 
 + " forge . spec " : " $ { SPEC _ VERSION } " , 
 + " forge . group " : project . group 
 ] 
 environment target : ' fmldevserver ' 
 workingDir ' runserver ' 
 @ @ - 613 , 7 + 617 , 7 @ @ project ( ' : forge ' ) { 
 ' Specification - Title ' : ' Forge ' , 
 ' Specification - Vendor ' : ' Forge Development LLC ' , 
 ' Specification - Version ' : SPEC _ VERSION , 
 - ' Implementation - Title ' : ' Forge ' , 
 + ' Implementation - Title ' : project . group , 
 ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 ' Implementation - Vendor ' : ' Forge Development LLC ' 
 ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index bfa8e30 . . 30986ed 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 29 , 6 + 29 , 7 @ @ import net . minecraftforge . versions . mcp . MCPVersion ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 + import java . io . File ; 
 import java . net . URISyntaxException ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 @ @ - 49 , 7 + 50 , 7 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 Path libsPath = findLibsPath ( ) ; 
 - Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( ForgeVersion . getGroup ( ) . replace ( ' . ' , File . separatorChar ) , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; 
 Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java 
 index 161c0c0 . . 03285f3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLServerLaunchProvider . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraftforge . versions . mcp . MCPVersion ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 + import java . io . File ; 
 import java . nio . file . Files ; 
 import java . nio . file . Path ; 
 import java . nio . file . Paths ; 
 @ @ - 47 , 7 + 48 , 7 @ @ public class FMLServerLaunchProvider extends FMLCommonLaunchHandler implements I 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 Path libsPath = findLibsPath ( ) ; 
 - Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( ForgeVersion . getGroup ( ) . replace ( ' . ' , File . separatorChar ) , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - server . jar " ) ) ; 
 Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " server " , MCPVersion . getMCPandMCVersion ( ) , " server - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 diff - - git a / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java b / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java 
 index 0566c83 . . 05b40e0 100644 
 - - - a / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / versions / forge / ForgeVersion . java 
 @ @ - 38 , 8 + 38 , 8 @ @ public class ForgeVersion 
 public static final String mcpVersion = " 9 . 42 " ; 
 
 private static final String forgeVersion ; 
 - 
 private static final String forgeSpec ; 
 + private static final String forgeGroup ; 
 
 static { 
 String vers = ForgeVersion . class . getPackage ( ) . getImplementationVersion ( ) ; 
 @ @ - 52 , 10 + 52 , 19 @ @ public class ForgeVersion 
 spec = System . getProperty ( " forge . spec " ) ; 
 } 
 if ( spec = = null ) throw new RuntimeException ( " Missing forge spec , cannot continue " ) ; 
 + String group = ForgeVersion . class . getPackage ( ) . getImplementationTitle ( ) ; 
 + if ( group = = null ) { 
 + group = System . getProperty ( " forge . group " ) ; 
 + } 
 + if ( group = = null ) { 
 + group = " net . minecraftforge " ; / / If all else fails , Our normal group 
 + } 
 forgeVersion = vers ; 
 forgeSpec = spec ; 
 + forgeGroup = group ; 
 LOGGER . info ( CORE , " Found Forge version { } " , forgeVersion ) ; 
 LOGGER . info ( CORE , " Found Forge spec { } " , forgeSpec ) ; 
 + LOGGER . info ( CORE , " Found Forge group { } " , forgeGroup ) ; 
 } 
 
 public static String getVersion ( ) 
 @ @ - 77 , 5 + 86 , 9 @ @ public class ForgeVersion 
 public static String getSpec ( ) { 
 return forgeSpec ; 
 } 
 + 
 + public static String getGroup ( ) { 
 + return forgeGroup ; 
 + } 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 index d36f519 . . d520016 100644 
 - - - a / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / javafmlmod / FMLModContainer . java 
 @ @ - 63 , 7 + 63 , 7 @ @ public class FMLModContainer extends ModContainer 
 try 
 { 
 modClass = Class . forName ( className , true , modClassLoader ) ; 
 - LOGGER . error ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 + LOGGER . debug ( LOADING , " Loaded modclass { } with { } " , modClass . getName ( ) , modClass . getClassLoader ( ) ) ; 
 } 
 catch ( Throwable e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 375764e . . bfa8e30 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import net . minecraftforge . fml . relauncher . libraries . LibraryManager ; 
 import net . minecraftforge . versions . forge . ForgeVersion ; 
 import net . minecraftforge . versions . mcp . MCPVersion ; 
 import org . apache . logging . log4j . LogManager ; 
 @ @ - 37 , 26 + 38 , 7 @ @ import java . util . concurrent . Callable ; 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 - private static final Path forgePath ; 
 - private static final Path patchedBinariesPath ; 
 - private static final Path srgMcPath ; 
 
 - static { 
 - Path forgePath1 = null ; 
 - Path patchedBinariesPath1 = null ; 
 - Path srgMcPath1 = null ; 
 - try { 
 - forgePath1 = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - patchedBinariesPath1 = forgePath1 . resolveSibling ( " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ; 
 - Path libs = forgePath1 . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 - srgMcPath1 = libs . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) . toAbsolutePath ( ) ; 
 - } catch ( URISyntaxException e ) { 
 - 
 - } 
 - forgePath = forgePath1 ; 
 - patchedBinariesPath = patchedBinariesPath1 ; 
 - srgMcPath = srgMcPath1 ; 
 - } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 66 , 20 + 48 , 23 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 + Path libsPath = findLibsPath ( ) ; 
 + Path patchedBinariesPath = libsPath . resolve ( Paths . get ( " net " , " minecraftforge " , " forge " , MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) , " forge - " + MCPVersion . getMCVersion ( ) + " - " + ForgeVersion . getVersion ( ) + " - client . jar " ) ) ; 
 + Path srgMcPath = libsPath . resolve ( Paths . get ( " net " , " minecraft " , " client " , MCPVersion . getMCPandMCVersion ( ) , " client - " + MCPVersion . getMCPandMCVersion ( ) + " - srg . jar " ) ) ; 
 LOGGER . info ( " SRG MC at { } is { } " , srgMcPath . toString ( ) , Files . exists ( srgMcPath ) ? " present " : " missing " ) ; 
 LOGGER . info ( " Forge patches at { } is { } " , patchedBinariesPath . toString ( ) , Files . exists ( patchedBinariesPath ) ? " present " : " missing " ) ; 
 - LOGGER . info ( " Forge at { } is { } " , forgePath . toString ( ) , Files . exists ( forgePath ) ? " present " : " missing " ) ; 
 - if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( forgePath ) ) ) { 
 + LOGGER . info ( " Forge at { } is { } " , getForgePath ( ) . toString ( ) , Files . exists ( getForgePath ( ) ) ? " present " : " missing " ) ; 
 + if ( ! ( Files . exists ( srgMcPath ) & & Files . exists ( patchedBinariesPath ) & & Files . exists ( getForgePath ( ) ) ) ) { 
 throw new RuntimeException ( " Failed to find patched jars " ) ; 
 } 
 - return new Path [ ] { forgePath , patchedBinariesPath , srgMcPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) , patchedBinariesPath , srgMcPath } ) ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 - super . beforeStart ( launchClassLoader , forgePath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 index 94f8d4f . . 76ad5be 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLCommonLaunchHandler . java 
 @ @ - 19 , 25 + 19 , 38 @ @ 
 
 package net . minecraftforge . fml . loading ; 
 
 + import com . google . common . collect . ObjectArrays ; 
 import cpw . mods . modlauncher . api . IEnvironment ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 
 + import java . net . URI ; 
 + import java . net . URISyntaxException ; 
 + import java . net . URL ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . function . Predicate ; 
 
 + import static net . minecraftforge . fml . Logging . CORE ; 
 + 
 public abstract class FMLCommonLaunchHandler 
 { 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 / / standard libs 
 - " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . guava . " , " com . google . " , " org . apache . commons . " , " io . netty . " , 
 + " org . apache . logging . log4j . " , " org . apache . http . " , " org . apache . maven . " , " org . objectweb . asm . " , 
 " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , " net . minecraftforge . versions . " , 
 " net . minecraftforge . eventbus . " , " net . minecraftforge . api . " 
 ) ; 
 
 + private Path forgePath ; 
 + 
 protected Predicate < String > getPackagePredicate ( ) { 
 return cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ; 
 } 
 @ @ - 47 , 10 + 60 , 46 @ @ public abstract class FMLCommonLaunchHandler 
 
 } 
 
 + Path findLibsPath ( ) { 
 + final Path asm = findJarPathFor ( " org / objectweb / asm / Opcodes . class " , " asm " ) ; 
 + / / go up SIX parents to find the libs dir 
 + final Path libs = asm . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) . getParent ( ) ; 
 + LOGGER . debug ( CORE , " Found probable library path { } " , libs ) ; 
 + return libs ; 
 + } 
 + Path findJarPathFor ( final String className , final String jarName ) { 
 + final URL resource = getClass ( ) . getClassLoader ( ) . getResource ( className ) ; 
 + try { 
 + Path path ; 
 + final URI uri = resource . toURI ( ) ; 
 + if ( uri . getSchemeSpecificPart ( ) . contains ( " ! " ) ) { 
 + path = Paths . get ( new URI ( uri . getSchemeSpecificPart ( ) . split ( " ! " ) [ 0 ] ) ) ; 
 + } else { 
 + path = Paths . get ( new URI ( " file : / / / " + uri . getSchemeSpecificPart ( ) . substring ( 0 , uri . getSchemeSpecificPart ( ) . length ( ) - className . length ( ) ) ) ) ; 
 + } 
 + LOGGER . debug ( CORE , " Found JAR { } at path { } " , jarName , path . toString ( ) ) ; 
 + return path ; 
 + } catch ( URISyntaxException e ) { 
 + LOGGER . error ( CORE , " Failed to find JAR for class { } - { } " , className , jarName ) ; 
 + throw new RuntimeException ( " Unable to locate " + className + " - " + jarName , e ) ; 
 + } 
 + } 
 + Path [ ] commonLibPaths ( Path [ ] extras ) { 
 + final Path realms = findJarPathFor ( " com / mojang / realmsclient / RealmsVersion . class " , " realms " ) ; 
 + return ObjectArrays . concat ( extras , realms ) ; 
 + } 
 + 
 + Path getForgePath ( ) { 
 + if ( forgePath = = null ) { 
 + forgePath = findJarPathFor ( " net / minecraftforge / versions / forge / ForgeVersion . class " , " forge " ) ; 
 + LOGGER . debug ( CORE , " Found forge path { } " , forgePath ) ; 
 + } 
 + return forgePath ; 
 + } 
 public abstract Dist getDist ( ) ; 
 
 - protected void beforeStart ( ITransformingClassLoader launchClassLoader , Path forgePath ) 
 + protected void beforeStart ( ITransformingClassLoader launchClassLoader ) 
 { 
 - FMLLoader . beforeStart ( launchClassLoader , forgePath ) ; 
 + FMLLoader . beforeStart ( launchClassLoader , getForgePath ( ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 index 27d441d . . 3a025d3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevClientLaunchProvider . java 
 @ @ - 47 , 24 + 47 , 10 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevclient " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 72 , 7 + 58 , 7 @ @ public class FMLDevClientLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 index 7c0da5a . . 2aea0e2 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLDevServerLaunchProvider . java 
 @ @ - 39 , 7 + 39 , 6 @ @ import static net . minecraftforge . fml . Logging . CORE ; 
 
 public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 - 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 @ Override 
 @ @ - 48 , 24 + 47 , 10 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 return " fmldevserver " ; 
 } 
 
 - private static final Path myPath ; 
 - 
 - static 
 - { 
 - try 
 - { 
 - myPath = Paths . get ( FMLDevServerLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 - } 
 - catch ( URISyntaxException e ) 
 - { 
 - throw new RuntimeException ( " HUH ? " ) ; 
 - } 
 - } 
 - 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ ] { myPath } ; 
 + return super . commonLibPaths ( new Path [ ] { getForgePath ( ) } ) ; 
 } 
 
 @ Override 
 @ @ - 73 , 7 + 58 , 7 @ @ public class FMLDevServerLaunchProvider extends FMLCommonLaunchHandler implement 
 { 
 return ( ) - > { 
 LOGGER . debug ( CORE , " Launching minecraft in { } with arguments { } " , launchClassLoader , arguments ) ; 
 - super . beforeStart ( launchClassLoader , myPath ) ; 
 + super . beforeStart ( launchClassLoader ) ; 
 launchClassLoader . addTargetPackageFilter ( getPackagePredicate ( ) ) ; 
 Thread . currentThread ( ) . setContextClassLoader ( launchClassLoader . getInstance ( ) ) ; 
 Class . forName ( " net . minecraft . server . MinecraftServer " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ;
