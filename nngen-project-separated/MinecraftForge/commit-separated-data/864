BLEU SCORE: 0.02318363625143846

TEST MSG: Clone FML packet indexes if channel is not open . Fixes potential threading issue .
GENERATED MSG: Finalize modded handshakes in the World tick thread . Prevents potential CMEs when login event takes to long to fire .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> index a31c38f . . cf37465 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 238 , 7 + 238 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> manager . closeChannel ( new ChatComponentText ( " Handshake Complete review log file for details . " ) ) ; <nl> scm . initializeConnectionToPlayer ( manager , player , serverHandler ) ; <nl> } <nl> - <nl> + <nl> @ Override <nl> protected void channelRead0 ( ChannelHandlerContext ctx , Packet msg ) throws Exception <nl> { <nl> @ @ - 430 , 6 + 430 , 8 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> <nl> public void sendProxy ( FMLProxyPacket msg ) <nl> { <nl> + if ( ! manager . isChannelOpen ( ) ) <nl> + msg = msg . copy ( ) ; <nl> manager . sendPacket ( msg ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> index fa215c3 . . 50aba05 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java <nl> @ @ - 186 , 4 + 186 , 13 @ @ public class FMLProxyPacket implements Packet < INetHandler > { <nl> { <nl> return target ; <nl> } <nl> + <nl> + public FMLProxyPacket copy ( ) <nl> + { <nl> + FMLProxyPacket pkt = new FMLProxyPacket ( new PacketBuffer ( payload . duplicate ( ) ) , channel ) ; <nl> + pkt . dispatcher = dispatcher ; <nl> + pkt . netHandler = netHandler ; <nl> + pkt . target = target ; <nl> + return pkt ; <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java b / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> index 4037fb7 . . f093ab3 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> @ @ - 19 , 7 + 19 , 7 @ @ public class WrongMinecraftVersionException extends RuntimeException <nl> <nl> public WrongMinecraftVersionException ( ModContainer mod ) <nl> { <nl> - super ( String . format ( " Wrong Minecraft vbersion for % s " , mod . getModId ( ) ) ) ; <nl> + super ( String . format ( " Wrong Minecraft version for % s " , mod . getModId ( ) ) ) ; <nl> this . mod = mod ; <nl> } <nl> <nl> diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> index 9f6a2e4 . . 2260b33 100644 <nl> - - - a / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 47 , 7 + 47 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; <nl> public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > implements ChannelOutboundHandler { <nl> private static boolean DEBUG _ HANDSHAKE = Boolean . parseBoolean ( System . getProperty ( " fml . debugNetworkHandshake " , " false " ) ) ; <nl> private static enum ConnectionState { <nl> - OPENING , AWAITING _ HANDSHAKE , HANDSHAKING , HANDSHAKECOMPLETE , CONNECTED ; <nl> + OPENING , AWAITING _ HANDSHAKE , HANDSHAKING , HANDSHAKECOMPLETE , FINALIZING , CONNECTED ; <nl> } <nl> <nl> private static enum ConnectionType { <nl> @ @ - 161 , 7 + 161 , 18 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> / / This will be ignored by vanilla clients <nl> this . state = ConnectionState . AWAITING _ HANDSHAKE ; <nl> / / Need to start the handler here , so we can send custompayload packets <nl> - serverHandler = new NetHandlerPlayServer ( scm . getServerInstance ( ) , manager , player ) ; <nl> + serverHandler = new NetHandlerPlayServer ( scm . getServerInstance ( ) , manager , player ) <nl> + { <nl> + @ Override <nl> + public void update ( ) <nl> + { <nl> + if ( NetworkDispatcher . this . state = = ConnectionState . FINALIZING ) <nl> + { <nl> + completeServerSideConnection ( ConnectionType . MODDED ) ; <nl> + } <nl> + super . update ( ) ; <nl> + } <nl> + } ; <nl> this . netHandler = serverHandler ; <nl> / / NULL the play server here - we restore it further on . If not , there are packets sent before the login <nl> player . playerNetServerHandler = null ; <nl> @ @ - 478 , 7 + 489 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple <nl> } <nl> else <nl> { <nl> - completeServerSideConnection ( ConnectionType . MODDED ) ; <nl> + this . state = ConnectionState . FINALIZING ; / / Delay and finalize in the world tick loop . <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 index a31c38f . . cf37465 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 238 , 7 + 238 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 manager . closeChannel ( new ChatComponentText ( " Handshake Complete review log file for details . " ) ) ; 
 scm . initializeConnectionToPlayer ( manager , player , serverHandler ) ; 
 } 
 - 
 + 
 @ Override 
 protected void channelRead0 ( ChannelHandlerContext ctx , Packet msg ) throws Exception 
 { 
 @ @ - 430 , 6 + 430 , 8 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 
 public void sendProxy ( FMLProxyPacket msg ) 
 { 
 + if ( ! manager . isChannelOpen ( ) ) 
 + msg = msg . copy ( ) ; 
 manager . sendPacket ( msg ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 index fa215c3 . . 50aba05 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / FMLProxyPacket . java 
 @ @ - 186 , 4 + 186 , 13 @ @ public class FMLProxyPacket implements Packet < INetHandler > { 
 { 
 return target ; 
 } 
 + 
 + public FMLProxyPacket copy ( ) 
 + { 
 + FMLProxyPacket pkt = new FMLProxyPacket ( new PacketBuffer ( payload . duplicate ( ) ) , channel ) ; 
 + pkt . dispatcher = dispatcher ; 
 + pkt . netHandler = netHandler ; 
 + pkt . target = target ; 
 + return pkt ; 
 + } 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java b / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 index 4037fb7 . . f093ab3 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 @ @ - 19 , 7 + 19 , 7 @ @ public class WrongMinecraftVersionException extends RuntimeException 
 
 public WrongMinecraftVersionException ( ModContainer mod ) 
 { 
 - super ( String . format ( " Wrong Minecraft vbersion for % s " , mod . getModId ( ) ) ) ; 
 + super ( String . format ( " Wrong Minecraft version for % s " , mod . getModId ( ) ) ) ; 
 this . mod = mod ; 
 } 
 
 diff - - git a / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 index 9f6a2e4 . . 2260b33 100644 
 - - - a / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / fml / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 47 , 7 + 47 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; 
 public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > implements ChannelOutboundHandler { 
 private static boolean DEBUG _ HANDSHAKE = Boolean . parseBoolean ( System . getProperty ( " fml . debugNetworkHandshake " , " false " ) ) ; 
 private static enum ConnectionState { 
 - OPENING , AWAITING _ HANDSHAKE , HANDSHAKING , HANDSHAKECOMPLETE , CONNECTED ; 
 + OPENING , AWAITING _ HANDSHAKE , HANDSHAKING , HANDSHAKECOMPLETE , FINALIZING , CONNECTED ; 
 } 
 
 private static enum ConnectionType { 
 @ @ - 161 , 7 + 161 , 18 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 / / This will be ignored by vanilla clients 
 this . state = ConnectionState . AWAITING _ HANDSHAKE ; 
 / / Need to start the handler here , so we can send custompayload packets 
 - serverHandler = new NetHandlerPlayServer ( scm . getServerInstance ( ) , manager , player ) ; 
 + serverHandler = new NetHandlerPlayServer ( scm . getServerInstance ( ) , manager , player ) 
 + { 
 + @ Override 
 + public void update ( ) 
 + { 
 + if ( NetworkDispatcher . this . state = = ConnectionState . FINALIZING ) 
 + { 
 + completeServerSideConnection ( ConnectionType . MODDED ) ; 
 + } 
 + super . update ( ) ; 
 + } 
 + } ; 
 this . netHandler = serverHandler ; 
 / / NULL the play server here - we restore it further on . If not , there are packets sent before the login 
 player . playerNetServerHandler = null ; 
 @ @ - 478 , 7 + 489 , 7 @ @ public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet > imple 
 } 
 else 
 { 
 - completeServerSideConnection ( ConnectionType . MODDED ) ; 
 + this . state = ConnectionState . FINALIZING ; / / Delay and finalize in the world tick loop . 
 } 
 } 

