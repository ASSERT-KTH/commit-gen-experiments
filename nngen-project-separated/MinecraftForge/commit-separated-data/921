BLEU SCORE: 7.341366154150284E-9

TEST MSG: Cleaning up some derpy names
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> index 80aef6c . . f6ea78e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java <nl> @ @ - 44 , 7 + 44 , 7 @ @ public class TracingPrintStream extends PrintStream { <nl> if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { <nl> elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . <nl> } else if ( elem . getClassName ( ) . startsWith ( " java . lang . Throwable " ) ) { <nl> - elem = elems [ BASE _ DEPTH + 1 ] ; <nl> + elem = elems [ BASE _ DEPTH + 2 ] ; <nl> } <nl> return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java <nl> index 105aaa6 . . 23432b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java <nl> @ @ - 23 , 7 + 23 , 6 @ @ import net . minecraftforge . fml . common . ModClassLoader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . relauncher . CoreModManager ; <nl> import net . minecraftforge . fml . relauncher . FileListHelper ; <nl> - import net . minecraftforge . fml . relauncher . ModListHelper ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 48 , 7 + 47 , 7 @ @ public class ModDiscoverer <nl> / / skip default libs <nl> . addAll ( modClassLoader . getDefaultLibraries ( ) ) <nl> / / skip loaded coremods <nl> - . addAll ( CoreModManager . getLoadedCoremods ( ) ) <nl> + . addAll ( CoreModManager . getIgnoredMods ( ) ) <nl> / / skip reparse coremods here <nl> . addAll ( CoreModManager . getReparseableCoremods ( ) ) <nl> . build ( ) ; <nl> @ @ - 98 , 7 + 97 , 7 @ @ public class ModDiscoverer <nl> for ( File modFile : modList ) <nl> { <nl> / / skip loaded coremods <nl> - if ( CoreModManager . getLoadedCoremods ( ) . contains ( modFile . getName ( ) ) ) <nl> + if ( CoreModManager . getIgnoredMods ( ) . contains ( modFile . getName ( ) ) ) <nl> { <nl> FMLLog . finer ( " Skipping already parsed coremod or tweaker % s " , modFile . getName ( ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 87c4449 . . 1da4ed3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 34 , 12 + 34 , 10 @ @ import java . util . jar . JarFile ; <nl> import net . minecraft . launchwrapper . ITweaker ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . asm . ASMTransformerWrapper ; <nl> import net . minecraftforge . fml . common . asm . transformers . ModAccessTransformer ; <nl> import net . minecraftforge . fml . common . launcher . FMLInjectionAndSortingTweaker ; <nl> import net . minecraftforge . fml . common . launcher . FMLTweaker ; <nl> - import net . minecraftforge . fml . common . toposort . TopologicalSort ; <nl> import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . DependsOn ; <nl> import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . MCVersion ; <nl> import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . Name ; <nl> @ @ - 62 , 13 + 60 , 13 @ @ public class CoreModManager { <nl> private static final Attributes . Name MODTYPE = new Attributes . Name ( " ModType " ) ; <nl> private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; <nl> private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> - private static List < String > loadedCoremods = Lists . newArrayList ( ) ; <nl> + private static List < String > ignoredModFiles = Lists . newArrayList ( ) ; <nl> private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; <nl> private static List < FMLPluginWrapper > loadPlugins ; <nl> private static boolean deobfuscatedEnvironment ; <nl> private static FMLTweaker tweaker ; <nl> private static File mcDir ; <nl> - private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; <nl> + private static List < String > candidateModFiles = Lists . newArrayList ( ) ; <nl> private static List < String > accessTransformers = Lists . newArrayList ( ) ; <nl> private static Set < String > rootNames = Sets . newHashSet ( ) ; <nl> <nl> @ @ - 196 , 6 + 194 , 7 @ @ public class CoreModManager { <nl> } <nl> catch ( IOException e1 ) <nl> { <nl> + / / NOOP <nl> } <nl> <nl> if ( ! deobfuscatedEnvironment ) <nl> @ @ - 360 , 7 + 359 , 7 @ @ public class CoreModManager { <nl> Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; <nl> sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; <nl> handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; <nl> - loadedCoremods . add ( coreMod . getName ( ) ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> continue ; <nl> } <nl> List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; <nl> @ @ - 368 , 14 + 367 , 14 @ @ public class CoreModManager { <nl> if ( ! modTypes . contains ( " FML " ) ) <nl> { <nl> FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; <nl> - loadedCoremods . add ( coreMod . getName ( ) ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> continue ; <nl> } <nl> String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; <nl> if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) <nl> { <nl> FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; <nl> - loadedCoremods . add ( coreMod . getName ( ) ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> continue ; <nl> } <nl> String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> @ @ - 392 , 13 + 391 , 13 @ @ public class CoreModManager { <nl> if ( ! mfAttributes . containsKey ( COREMODCONTAINSFMLMOD ) ) <nl> { <nl> FMLRelaunchLog . finer ( " Adding % s to the list of known coremods , it will not be examined again " , coreMod . getName ( ) ) ; <nl> - loadedCoremods . add ( coreMod . getName ( ) ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> } <nl> else <nl> { <nl> FMLRelaunchLog . finer ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , <nl> coreMod . getName ( ) ) ; <nl> - reparsedCoremods . add ( coreMod . getName ( ) ) ; <nl> + candidateModFiles . add ( coreMod . getName ( ) ) ; <nl> } <nl> } <nl> catch ( MalformedURLException e ) <nl> @ @ - 460 , 9 + 459 , 9 @ @ public class CoreModManager { <nl> return coreModDir ; <nl> } <nl> <nl> - public static List < String > getLoadedCoremods ( ) <nl> + public static List < String > getIgnoredMods ( ) <nl> { <nl> - return loadedCoremods ; <nl> + return ignoredModFiles ; <nl> } <nl> <nl> public static Map < String , List < String > > getTransformers ( ) <nl> @ @ - 472 , 7 + 471 , 7 @ @ public class CoreModManager { <nl> <nl> public static List < String > getReparseableCoremods ( ) <nl> { <nl> - return reparsedCoremods ; <nl> + return candidateModFiles ; <nl> } <nl> <nl> private static FMLPluginWrapper loadCoreMod ( LaunchClassLoader classLoader , String coreModClass , File location ) <nl> @ @ - 557 , 40 + 556 , 6 @ @ public class CoreModManager { <nl> return null ; <nl> } <nl> <nl> - private static void sortCoreMods ( ) <nl> - { <nl> - TopologicalSort . DirectedGraph < FMLPluginWrapper > sortGraph = new TopologicalSort . DirectedGraph < FMLPluginWrapper > ( ) ; <nl> - Map < String , FMLPluginWrapper > pluginMap = Maps . newHashMap ( ) ; <nl> - for ( FMLPluginWrapper plug : loadPlugins ) <nl> - { <nl> - sortGraph . addNode ( plug ) ; <nl> - pluginMap . put ( plug . name , plug ) ; <nl> - } <nl> - <nl> - for ( FMLPluginWrapper plug : loadPlugins ) <nl> - { <nl> - for ( String dep : plug . predepends ) <nl> - { <nl> - if ( ! pluginMap . containsKey ( dep ) ) <nl> - { <nl> - FMLRelaunchLog . log ( Level . ERROR , " Missing coremod dependency - the coremod % s depends on coremod % s which isn ' t present . " , plug . name , dep ) ; <nl> - throw new RuntimeException ( ) ; <nl> - } <nl> - sortGraph . addEdge ( plug , pluginMap . get ( dep ) ) ; <nl> - } <nl> - } <nl> - try <nl> - { <nl> - loadPlugins = TopologicalSort . topologicalSort ( sortGraph ) ; <nl> - FMLRelaunchLog . fine ( " Sorted coremod list % s " , loadPlugins ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - FMLLog . log ( Level . ERROR , e , " There was a problem performing the coremod sort " ) ; <nl> - throw Throwables . propagate ( e ) ; <nl> - } <nl> - } <nl> - <nl> public static void injectTransformers ( LaunchClassLoader classLoader ) <nl> { <nl> <nl> @ @ - 677 , 7 + 642 , 7 @ @ public class CoreModManager { <nl> <nl> public static void onCrash ( StringBuilder builder ) <nl> { <nl> - if ( ! loadedCoremods . isEmpty ( ) | | ! reparsedCoremods . isEmpty ( ) ) <nl> + if ( ! ignoredModFiles . isEmpty ( ) | | ! candidateModFiles . isEmpty ( ) ) <nl> { <nl> builder . append ( " \ nWARNING : coremods are present : \ n " ) ; <nl> for ( String coreMod : transformers . keySet ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java <nl> index 71506ed . . 6d9854e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java <nl> @ @ - 6 , 7 + 6 , 7 @ @ import java . util . Arrays ; <nl> import java . util . Comparator ; <nl> <nl> public final class FileListHelper { <nl> - private static enum CaseInsensitiveFileComparator implements Comparator < File > <nl> + private enum CaseInsensitiveFileComparator implements Comparator < File > <nl> { <nl> INSTANCE ; <nl> @ Override
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 index 80aef6c . . f6ea78e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / TracingPrintStream . java 
 @ @ - 44 , 7 + 44 , 7 @ @ public class TracingPrintStream extends PrintStream { 
 if ( elem . getClassName ( ) . startsWith ( " kotlin . io . " ) ) { 
 elem = elems [ BASE _ DEPTH + 2 ] ; / / Kotlins IoPackage masks origins 2 deeper in the stack . 
 } else if ( elem . getClassName ( ) . startsWith ( " java . lang . Throwable " ) ) { 
 - elem = elems [ BASE _ DEPTH + 1 ] ; 
 + elem = elems [ BASE _ DEPTH + 2 ] ; 
 } 
 return " [ " + elem . getClassName ( ) + " : " + elem . getMethodName ( ) + " : " + elem . getLineNumber ( ) + " ] : " ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java 
 index 105aaa6 . . 23432b9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / ModDiscoverer . java 
 @ @ - 23 , 7 + 23 , 6 @ @ import net . minecraftforge . fml . common . ModClassLoader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . relauncher . CoreModManager ; 
 import net . minecraftforge . fml . relauncher . FileListHelper ; 
 - import net . minecraftforge . fml . relauncher . ModListHelper ; 
 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 48 , 7 + 47 , 7 @ @ public class ModDiscoverer 
 / / skip default libs 
 . addAll ( modClassLoader . getDefaultLibraries ( ) ) 
 / / skip loaded coremods 
 - . addAll ( CoreModManager . getLoadedCoremods ( ) ) 
 + . addAll ( CoreModManager . getIgnoredMods ( ) ) 
 / / skip reparse coremods here 
 . addAll ( CoreModManager . getReparseableCoremods ( ) ) 
 . build ( ) ; 
 @ @ - 98 , 7 + 97 , 7 @ @ public class ModDiscoverer 
 for ( File modFile : modList ) 
 { 
 / / skip loaded coremods 
 - if ( CoreModManager . getLoadedCoremods ( ) . contains ( modFile . getName ( ) ) ) 
 + if ( CoreModManager . getIgnoredMods ( ) . contains ( modFile . getName ( ) ) ) 
 { 
 FMLLog . finer ( " Skipping already parsed coremod or tweaker % s " , modFile . getName ( ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 87c4449 . . 1da4ed3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 34 , 12 + 34 , 10 @ @ import java . util . jar . JarFile ; 
 import net . minecraft . launchwrapper . ITweaker ; 
 import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . asm . ASMTransformerWrapper ; 
 import net . minecraftforge . fml . common . asm . transformers . ModAccessTransformer ; 
 import net . minecraftforge . fml . common . launcher . FMLInjectionAndSortingTweaker ; 
 import net . minecraftforge . fml . common . launcher . FMLTweaker ; 
 - import net . minecraftforge . fml . common . toposort . TopologicalSort ; 
 import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . DependsOn ; 
 import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . MCVersion ; 
 import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . Name ; 
 @ @ - 62 , 13 + 60 , 13 @ @ public class CoreModManager { 
 private static final Attributes . Name MODTYPE = new Attributes . Name ( " ModType " ) ; 
 private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; 
 private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 - private static List < String > loadedCoremods = Lists . newArrayList ( ) ; 
 + private static List < String > ignoredModFiles = Lists . newArrayList ( ) ; 
 private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; 
 private static List < FMLPluginWrapper > loadPlugins ; 
 private static boolean deobfuscatedEnvironment ; 
 private static FMLTweaker tweaker ; 
 private static File mcDir ; 
 - private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; 
 + private static List < String > candidateModFiles = Lists . newArrayList ( ) ; 
 private static List < String > accessTransformers = Lists . newArrayList ( ) ; 
 private static Set < String > rootNames = Sets . newHashSet ( ) ; 
 
 @ @ - 196 , 6 + 194 , 7 @ @ public class CoreModManager { 
 } 
 catch ( IOException e1 ) 
 { 
 + / / NOOP 
 } 
 
 if ( ! deobfuscatedEnvironment ) 
 @ @ - 360 , 7 + 359 , 7 @ @ public class CoreModManager { 
 Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; 
 sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; 
 handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; 
 - loadedCoremods . add ( coreMod . getName ( ) ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 continue ; 
 } 
 List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; 
 @ @ - 368 , 14 + 367 , 14 @ @ public class CoreModManager { 
 if ( ! modTypes . contains ( " FML " ) ) 
 { 
 FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; 
 - loadedCoremods . add ( coreMod . getName ( ) ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 continue ; 
 } 
 String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; 
 if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) 
 { 
 FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; 
 - loadedCoremods . add ( coreMod . getName ( ) ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 continue ; 
 } 
 String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 @ @ - 392 , 13 + 391 , 13 @ @ public class CoreModManager { 
 if ( ! mfAttributes . containsKey ( COREMODCONTAINSFMLMOD ) ) 
 { 
 FMLRelaunchLog . finer ( " Adding % s to the list of known coremods , it will not be examined again " , coreMod . getName ( ) ) ; 
 - loadedCoremods . add ( coreMod . getName ( ) ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 } 
 else 
 { 
 FMLRelaunchLog . finer ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , 
 coreMod . getName ( ) ) ; 
 - reparsedCoremods . add ( coreMod . getName ( ) ) ; 
 + candidateModFiles . add ( coreMod . getName ( ) ) ; 
 } 
 } 
 catch ( MalformedURLException e ) 
 @ @ - 460 , 9 + 459 , 9 @ @ public class CoreModManager { 
 return coreModDir ; 
 } 
 
 - public static List < String > getLoadedCoremods ( ) 
 + public static List < String > getIgnoredMods ( ) 
 { 
 - return loadedCoremods ; 
 + return ignoredModFiles ; 
 } 
 
 public static Map < String , List < String > > getTransformers ( ) 
 @ @ - 472 , 7 + 471 , 7 @ @ public class CoreModManager { 
 
 public static List < String > getReparseableCoremods ( ) 
 { 
 - return reparsedCoremods ; 
 + return candidateModFiles ; 
 } 
 
 private static FMLPluginWrapper loadCoreMod ( LaunchClassLoader classLoader , String coreModClass , File location ) 
 @ @ - 557 , 40 + 556 , 6 @ @ public class CoreModManager { 
 return null ; 
 } 
 
 - private static void sortCoreMods ( ) 
 - { 
 - TopologicalSort . DirectedGraph < FMLPluginWrapper > sortGraph = new TopologicalSort . DirectedGraph < FMLPluginWrapper > ( ) ; 
 - Map < String , FMLPluginWrapper > pluginMap = Maps . newHashMap ( ) ; 
 - for ( FMLPluginWrapper plug : loadPlugins ) 
 - { 
 - sortGraph . addNode ( plug ) ; 
 - pluginMap . put ( plug . name , plug ) ; 
 - } 
 - 
 - for ( FMLPluginWrapper plug : loadPlugins ) 
 - { 
 - for ( String dep : plug . predepends ) 
 - { 
 - if ( ! pluginMap . containsKey ( dep ) ) 
 - { 
 - FMLRelaunchLog . log ( Level . ERROR , " Missing coremod dependency - the coremod % s depends on coremod % s which isn ' t present . " , plug . name , dep ) ; 
 - throw new RuntimeException ( ) ; 
 - } 
 - sortGraph . addEdge ( plug , pluginMap . get ( dep ) ) ; 
 - } 
 - } 
 - try 
 - { 
 - loadPlugins = TopologicalSort . topologicalSort ( sortGraph ) ; 
 - FMLRelaunchLog . fine ( " Sorted coremod list % s " , loadPlugins ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - FMLLog . log ( Level . ERROR , e , " There was a problem performing the coremod sort " ) ; 
 - throw Throwables . propagate ( e ) ; 
 - } 
 - } 
 - 
 public static void injectTransformers ( LaunchClassLoader classLoader ) 
 { 
 
 @ @ - 677 , 7 + 642 , 7 @ @ public class CoreModManager { 
 
 public static void onCrash ( StringBuilder builder ) 
 { 
 - if ( ! loadedCoremods . isEmpty ( ) | | ! reparsedCoremods . isEmpty ( ) ) 
 + if ( ! ignoredModFiles . isEmpty ( ) | | ! candidateModFiles . isEmpty ( ) ) 
 { 
 builder . append ( " \ nWARNING : coremods are present : \ n " ) ; 
 for ( String coreMod : transformers . keySet ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java 
 index 71506ed . . 6d9854e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / FileListHelper . java 
 @ @ - 6 , 7 + 6 , 7 @ @ import java . util . Arrays ; 
 import java . util . Comparator ; 
 
 public final class FileListHelper { 
 - private static enum CaseInsensitiveFileComparator implements Comparator < File > 
 + private enum CaseInsensitiveFileComparator implements Comparator < File > 
 { 
 INSTANCE ; 
 @ Override

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
