BLEU SCORE: 0.018738883683389617

TEST MSG: Add missing constructors in KeyBinding to match existing vanilla constructors .
GENERATED MSG: Fix log spam from invalid key modifiers

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch <nl> index b9060dc . . daf73f9 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch <nl> @ @ - 94 , 7 + 94 , 7 @ @ <nl> return this . field _ 74512 _ d . equals ( p _ 197983 _ 1 _ . field _ 74512 _ d ) ; <nl> } <nl> <nl> - @ @ - 153 , 14 + 173 , 94 @ @ <nl> + @ @ - 153 , 14 + 173 , 110 @ @ <nl> } <nl> <nl> public String func _ 197978 _ k ( ) { <nl> @ @ - 120 , 6 + 120 , 14 @ @ <nl> + / * * <nl> + * Convenience constructor for creating KeyBindings with keyConflictContext set . <nl> + * / <nl> + + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , final InputMappings . Type inputType , final int keyCode , String category ) <nl> + + { <nl> + + this ( description , keyConflictContext , inputType . func _ 197944 _ a ( keyCode ) , category ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + + * Convenience constructor for creating KeyBindings with keyConflictContext set . <nl> + + * / <nl> + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , InputMappings . Input keyCode , String category ) <nl> + { <nl> + this ( description , keyConflictContext , net . minecraftforge . client . settings . KeyModifier . NONE , keyCode , category ) ; <nl> @ @ - 128 , 6 + 136 , 14 @ @ <nl> + / * * <nl> + * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set . <nl> + * / <nl> + + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , net . minecraftforge . client . settings . KeyModifier keyModifier , final InputMappings . Type inputType , final int keyCode , String category ) <nl> + + { <nl> + + this ( description , keyConflictContext , keyModifier , inputType . func _ 197944 _ a ( keyCode ) , category ) ; <nl> + + } <nl> + + <nl> + + / * * <nl> + + * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set . <nl> + + * / <nl> + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , net . minecraftforge . client . settings . KeyModifier keyModifier , InputMappings . Input keyCode , String category ) <nl> + { <nl> + this . field _ 74515 _ c = description ;
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch b / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch <nl> index a5386e6 . . affbeca 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch <nl> @ @ - 20 , 7 + 20 , 7 @ @ <nl> if ( astring [ 0 ] . equals ( " key _ " + keybinding . func _ 151464 _ g ( ) ) ) <nl> { <nl> keybinding . func _ 151462 _ b ( Integer . parseInt ( astring [ 1 ] ) ) ; <nl> - + if ( astring . length = = 3 ) keybinding . setKeyModifierAndCode ( net . minecraftforge . client . settings . KeyModifier . valueOf ( astring [ 2 ] ) , Integer . parseInt ( astring [ 1 ] ) ) ; <nl> + + if ( astring . length = = 3 ) keybinding . setKeyModifierAndCode ( net . minecraftforge . client . settings . KeyModifier . valueFromString ( astring [ 2 ] ) , Integer . parseInt ( astring [ 1 ] ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> index 9838251 . . b5ff9a8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java <nl> @ @ - 120 , 6 + 120 , 22 @ @ public enum KeyModifier { <nl> return false ; <nl> } <nl> <nl> + public static KeyModifier valueFromString ( String stringValue ) <nl> + { <nl> + try <nl> + { <nl> + return valueOf ( stringValue ) ; <nl> + } <nl> + catch ( NullPointerException ignored ) <nl> + { <nl> + return NONE ; <nl> + } <nl> + catch ( IllegalArgumentException ignored ) <nl> + { <nl> + return NONE ; <nl> + } <nl> + } <nl> + <nl> public abstract boolean matches ( int keyCode ) ; <nl> <nl> public abstract boolean isActive ( ) ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch 
 index b9060dc . . daf73f9 100644 
 - - - a / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / settings / KeyBinding . java . patch 
 @ @ - 94 , 7 + 94 , 7 @ @ 
 return this . field _ 74512 _ d . equals ( p _ 197983 _ 1 _ . field _ 74512 _ d ) ; 
 } 
 
 - @ @ - 153 , 14 + 173 , 94 @ @ 
 + @ @ - 153 , 14 + 173 , 110 @ @ 
 } 
 
 public String func _ 197978 _ k ( ) { 
 @ @ - 120 , 6 + 120 , 14 @ @ 
 + / * * 
 + * Convenience constructor for creating KeyBindings with keyConflictContext set . 
 + * / 
 + + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , final InputMappings . Type inputType , final int keyCode , String category ) 
 + + { 
 + + this ( description , keyConflictContext , inputType . func _ 197944 _ a ( keyCode ) , category ) ; 
 + + } 
 + + 
 + + / * * 
 + + * Convenience constructor for creating KeyBindings with keyConflictContext set . 
 + + * / 
 + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , InputMappings . Input keyCode , String category ) 
 + { 
 + this ( description , keyConflictContext , net . minecraftforge . client . settings . KeyModifier . NONE , keyCode , category ) ; 
 @ @ - 128 , 6 + 136 , 14 @ @ 
 + / * * 
 + * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set . 
 + * / 
 + + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , net . minecraftforge . client . settings . KeyModifier keyModifier , final InputMappings . Type inputType , final int keyCode , String category ) 
 + + { 
 + + this ( description , keyConflictContext , keyModifier , inputType . func _ 197944 _ a ( keyCode ) , category ) ; 
 + + } 
 + + 
 + + / * * 
 + + * Convenience constructor for creating KeyBindings with keyConflictContext and keyModifier set . 
 + + * / 
 + public KeyBinding ( String description , net . minecraftforge . client . settings . IKeyConflictContext keyConflictContext , net . minecraftforge . client . settings . KeyModifier keyModifier , InputMappings . Input keyCode , String category ) 
 + { 
 + this . field _ 74515 _ c = description ;

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch b / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch 
 index a5386e6 . . affbeca 100644 
 - - - a / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / settings / GameSettings . java . patch 
 @ @ - 20 , 7 + 20 , 7 @ @ 
 if ( astring [ 0 ] . equals ( " key _ " + keybinding . func _ 151464 _ g ( ) ) ) 
 { 
 keybinding . func _ 151462 _ b ( Integer . parseInt ( astring [ 1 ] ) ) ; 
 - + if ( astring . length = = 3 ) keybinding . setKeyModifierAndCode ( net . minecraftforge . client . settings . KeyModifier . valueOf ( astring [ 2 ] ) , Integer . parseInt ( astring [ 1 ] ) ) ; 
 + + if ( astring . length = = 3 ) keybinding . setKeyModifierAndCode ( net . minecraftforge . client . settings . KeyModifier . valueFromString ( astring [ 2 ] ) , Integer . parseInt ( astring [ 1 ] ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 index 9838251 . . b5ff9a8 100644 
 - - - a / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 + + + b / src / main / java / net / minecraftforge / client / settings / KeyModifier . java 
 @ @ - 120 , 6 + 120 , 22 @ @ public enum KeyModifier { 
 return false ; 
 } 
 
 + public static KeyModifier valueFromString ( String stringValue ) 
 + { 
 + try 
 + { 
 + return valueOf ( stringValue ) ; 
 + } 
 + catch ( NullPointerException ignored ) 
 + { 
 + return NONE ; 
 + } 
 + catch ( IllegalArgumentException ignored ) 
 + { 
 + return NONE ; 
 + } 
 + } 
 + 
 public abstract boolean matches ( int keyCode ) ; 
 
 public abstract boolean isActive ( ) ;
