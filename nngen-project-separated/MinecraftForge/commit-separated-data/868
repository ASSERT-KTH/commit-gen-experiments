BLEU SCORE: 0.02286956778061902

TEST MSG: Made WrongMinecraftVersionException and ModSortingException a bit easier to read in log files . Closes : # 2345
GENERATED MSG: Cleanup mod signature data table . Easily seperating those mods with signatures vs those with none .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index 0afe5e1 . . 4c739b4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 219 , 7 + 219 , 9 @ @ public class Loader <nl> if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) <nl> { <nl> FMLLog . severe ( " The mod % s does not wish to run in Minecraft version % s . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; <nl> - throw new WrongMinecraftVersionException ( mod ) ; <nl> + RuntimeException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> + FMLLog . severe ( ret . getMessage ( ) ) ; <nl> + throw ret ; <nl> } <nl> Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , new ArtifactVersionNameFunction ( ) ) ; <nl> Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; <nl> @ @ - 232 , 7 + 234 , 9 @ @ public class Loader <nl> { <nl> versionMissingMods . add ( names . get ( modid ) ) ; <nl> } <nl> - throw new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + FMLLog . severe ( ret . getMessage ( ) ) ; <nl> + throw ret ; <nl> } <nl> reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; <nl> ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; <nl> @ @ - 249 , 7 + 253 , 9 @ @ public class Loader <nl> if ( ! versionMissingMods . isEmpty ( ) ) <nl> { <nl> FMLLog . severe ( " The mod % s ( % s ) requires mod versions % s to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; <nl> - throw new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; <nl> + FMLLog . severe ( ret . toString ( ) ) ; <nl> + throw ret ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java b / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> index f093ab3 . . ea272a7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java <nl> @ @ - 12 , 15 + 12 , 27 @ @ <nl> <nl> package net . minecraftforge . fml . common ; <nl> <nl> - public class WrongMinecraftVersionException extends RuntimeException <nl> + public class WrongMinecraftVersionException extends EnhancedRuntimeException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> public ModContainer mod ; <nl> + private String mcVersion ; <nl> <nl> - public WrongMinecraftVersionException ( ModContainer mod ) <nl> + public WrongMinecraftVersionException ( ModContainer mod , String mcver ) <nl> { <nl> super ( String . format ( " Wrong Minecraft version for % s " , mod . getModId ( ) ) ) ; <nl> this . mod = mod ; <nl> + this . mcVersion = mcver ; <nl> + } <nl> + <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) { <nl> + stream . println ( " Wrong Minecraft Versions ! " ) ; <nl> + stream . println ( " Mod : " + mod . getModId ( ) ) ; <nl> + stream . println ( " Location : " + mod . getSource ( ) . toString ( ) ) ; <nl> + stream . println ( " Expected : " + mod . acceptableMinecraftVersionRange ( ) . toString ( ) ) ; <nl> + stream . println ( " Current : " + mcVersion ) ; <nl> + stream . println ( " " ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java b / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java <nl> index 78b3e81 . . 1ee799e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java <nl> @ @ - 14 , 7 + 14 , 14 @ @ package net . minecraftforge . fml . common . toposort ; <nl> <nl> import java . util . Set ; <nl> <nl> - public class ModSortingException extends RuntimeException <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import net . minecraftforge . fml . common . EnhancedRuntimeException ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . toposort . ModSortingException . SortingExceptionData ; <nl> + <nl> + public class ModSortingException extends EnhancedRuntimeException <nl> { <nl> private static final long serialVersionUID = 1L ; <nl> <nl> @ @ - 53 , 4 + 60 , 17 @ @ public class ModSortingException extends RuntimeException <nl> return ( SortingExceptionData < T > ) sortingExceptionData ; <nl> } <nl> <nl> + @ Override <nl> + protected void printStackTrace ( WrappedPrintStream stream ) <nl> + { <nl> + SortingExceptionData < ModContainer > exceptionData = getExceptionData ( ) ; <nl> + stream . println ( " A dependency cycle was detected in the input mod set so an ordering cannot be determined " ) ; <nl> + stream . println ( " The first mod in the cycle is " + exceptionData . getFirstBadNode ( ) ) ; <nl> + stream . println ( " The mod cycle involves : " ) ; <nl> + for ( ModContainer mc : exceptionData . getVisitedNodes ( ) ) <nl> + { <nl> + stream . println ( String . format ( " \ t % s : before : % s , after : % s " , mc . toString ( ) , mc . getDependants ( ) , mc . getDependencies ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> }
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> index 4de8f74 . . 0f46e8c 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import java . io . FileWriter ; <nl> import java . io . IOException ; <nl> import java . net . MalformedURLException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . LinkedHashMap ; <nl> @ @ - 510 , 10 + 511 , 30 @ @ public class Loader <nl> } <nl> modController . transition ( LoaderState . CONSTRUCTING , false ) ; <nl> modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; <nl> + <nl> + List < ModContainer > mods = Lists . newArrayList ( ) ; <nl> + mods . addAll ( getActiveModList ( ) ) ; <nl> + Collections . sort ( mods , new Comparator < ModContainer > ( ) <nl> + { <nl> + @ Override <nl> + public int compare ( ModContainer o1 , ModContainer o2 ) <nl> + { <nl> + return o1 . getModId ( ) . compareTo ( o2 . getModId ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> FMLLog . fine ( " Mod signature data " ) ; <nl> + FMLLog . fine ( " \ tValid Signatures : " ) ; <nl> + for ( ModContainer mod : getActiveModList ( ) ) <nl> + { <nl> + if ( mod . getSigningCertificate ( ) ! = null ) <nl> + FMLLog . fine ( " \ t \ t ( % s ) % s \ t ( % s \ t % s ) \ t % s " , CertificateHelper . getFingerprint ( mod . getSigningCertificate ( ) ) , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) ) ; <nl> + } <nl> + FMLLog . fine ( " \ tMissing Signatures : " ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> { <nl> - FMLLog . fine ( " \ t % s ( % s : % s ) : % s ( % s ) " , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) , CertificateHelper . getFingerprint ( mod . getSigningCertificate ( ) ) ) ; <nl> + if ( mod . getSigningCertificate ( ) = = null ) <nl> + FMLLog . fine ( " \ t \ t % s \ t ( % s \ t % s ) \ t % s " , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) ) ; <nl> } <nl> if ( getActiveModList ( ) . isEmpty ( ) ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java b / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java <nl> index 0ab81d8 . . ed557ae 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java <nl> @ @ - 12 , 8 + 12 , 12 @ @ <nl> <nl> package cpw . mods . fml . common ; <nl> <nl> + import java . security . cert . Certificate ; <nl> + <nl> import cpw . mods . fml . common . versioning . VersionParser ; <nl> import cpw . mods . fml . common . versioning . VersionRange ; <nl> + import cpw . mods . fml . relauncher . FMLLaunchHandler ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> <nl> public class MinecraftDummyContainer extends DummyModContainer <nl> { <nl> @ @ - 33 , 4 + 37 , 20 @ @ public class MinecraftDummyContainer extends DummyModContainer <nl> { <nl> return staticRange ; <nl> } <nl> + <nl> + @ Override <nl> + public Certificate getSigningCertificate ( ) <nl> + { <nl> + if ( FMLLaunchHandler . side ( ) ! = Side . CLIENT ) <nl> + return null ; <nl> + <nl> + try <nl> + { <nl> + Class < ? > cbr = Class . forName ( " net . minecraft . client . ClientBrandRetriever " , false , getClass ( ) . getClassLoader ( ) ) ; <nl> + Certificate [ ] certificates = cbr . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> + return certificates ! = null ? certificates [ 0 ] : null ; <nl> + } <nl> + catch ( Exception e ) { } / / Errors don ' t matter just return null . <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 70202ad . . 6b3a542 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 12 , 6 + 12 , 7 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; <nl> import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; <nl> <nl> import java . io . File ; <nl> + import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 381 , 4 + 382 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> " net . minecraftforge . transformers " <nl> ) ; <nl> } <nl> + <nl> + <nl> + <nl> + @ Override <nl> + public Certificate getSigningCertificate ( ) <nl> + { <nl> + Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> + return certificates ! = null ? certificates [ 0 ] : null ; <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index 0afe5e1 . . 4c739b4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 219 , 7 + 219 , 9 @ @ public class Loader 
 if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) 
 { 
 FMLLog . severe ( " The mod % s does not wish to run in Minecraft version % s . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; 
 - throw new WrongMinecraftVersionException ( mod ) ; 
 + RuntimeException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 + FMLLog . severe ( ret . getMessage ( ) ) ; 
 + throw ret ; 
 } 
 Map < String , ArtifactVersion > names = Maps . uniqueIndex ( mod . getRequirements ( ) , new ArtifactVersionNameFunction ( ) ) ; 
 Set < ArtifactVersion > versionMissingMods = Sets . newHashSet ( ) ; 
 @ @ - 232 , 7 + 234 , 9 @ @ public class Loader 
 { 
 versionMissingMods . add ( names . get ( modid ) ) ; 
 } 
 - throw new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + FMLLog . severe ( ret . getMessage ( ) ) ; 
 + throw ret ; 
 } 
 reqList . putAll ( mod . getModId ( ) , names . keySet ( ) ) ; 
 ImmutableList < ArtifactVersion > allDeps = ImmutableList . < ArtifactVersion > builder ( ) . addAll ( mod . getDependants ( ) ) . addAll ( mod . getDependencies ( ) ) . build ( ) ; 
 @ @ - 249 , 7 + 253 , 9 @ @ public class Loader 
 if ( ! versionMissingMods . isEmpty ( ) ) 
 { 
 FMLLog . severe ( " The mod % s ( % s ) requires mod versions % s to be available " , mod . getModId ( ) , mod . getName ( ) , versionMissingMods ) ; 
 - throw new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + RuntimeException ret = new MissingModsException ( versionMissingMods , mod . getModId ( ) , mod . getName ( ) ) ; 
 + FMLLog . severe ( ret . toString ( ) ) ; 
 + throw ret ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java b / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 index f093ab3 . . ea272a7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / WrongMinecraftVersionException . java 
 @ @ - 12 , 15 + 12 , 27 @ @ 
 
 package net . minecraftforge . fml . common ; 
 
 - public class WrongMinecraftVersionException extends RuntimeException 
 + public class WrongMinecraftVersionException extends EnhancedRuntimeException 
 { 
 private static final long serialVersionUID = 1L ; 
 public ModContainer mod ; 
 + private String mcVersion ; 
 
 - public WrongMinecraftVersionException ( ModContainer mod ) 
 + public WrongMinecraftVersionException ( ModContainer mod , String mcver ) 
 { 
 super ( String . format ( " Wrong Minecraft version for % s " , mod . getModId ( ) ) ) ; 
 this . mod = mod ; 
 + this . mcVersion = mcver ; 
 + } 
 + 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) { 
 + stream . println ( " Wrong Minecraft Versions ! " ) ; 
 + stream . println ( " Mod : " + mod . getModId ( ) ) ; 
 + stream . println ( " Location : " + mod . getSource ( ) . toString ( ) ) ; 
 + stream . println ( " Expected : " + mod . acceptableMinecraftVersionRange ( ) . toString ( ) ) ; 
 + stream . println ( " Current : " + mcVersion ) ; 
 + stream . println ( " " ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java b / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java 
 index 78b3e81 . . 1ee799e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / toposort / ModSortingException . java 
 @ @ - 14 , 7 + 14 , 14 @ @ package net . minecraftforge . fml . common . toposort ; 
 
 import java . util . Set ; 
 
 - public class ModSortingException extends RuntimeException 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import net . minecraftforge . fml . common . EnhancedRuntimeException ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . toposort . ModSortingException . SortingExceptionData ; 
 + 
 + public class ModSortingException extends EnhancedRuntimeException 
 { 
 private static final long serialVersionUID = 1L ; 
 
 @ @ - 53 , 4 + 60 , 17 @ @ public class ModSortingException extends RuntimeException 
 return ( SortingExceptionData < T > ) sortingExceptionData ; 
 } 
 
 + @ Override 
 + protected void printStackTrace ( WrappedPrintStream stream ) 
 + { 
 + SortingExceptionData < ModContainer > exceptionData = getExceptionData ( ) ; 
 + stream . println ( " A dependency cycle was detected in the input mod set so an ordering cannot be determined " ) ; 
 + stream . println ( " The first mod in the cycle is " + exceptionData . getFirstBadNode ( ) ) ; 
 + stream . println ( " The mod cycle involves : " ) ; 
 + for ( ModContainer mc : exceptionData . getVisitedNodes ( ) ) 
 + { 
 + stream . println ( String . format ( " \ t % s : before : % s , after : % s " , mc . toString ( ) , mc . getDependants ( ) , mc . getDependencies ( ) ) ) ; 
 + } 
 + } 
 + 
 }

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / common / Loader . java b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 index 4de8f74 . . 0f46e8c 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / Loader . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import java . io . FileWriter ; 
 import java . io . IOException ; 
 import java . net . MalformedURLException ; 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . LinkedHashMap ; 
 @ @ - 510 , 10 + 511 , 30 @ @ public class Loader 
 } 
 modController . transition ( LoaderState . CONSTRUCTING , false ) ; 
 modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; 
 + 
 + List < ModContainer > mods = Lists . newArrayList ( ) ; 
 + mods . addAll ( getActiveModList ( ) ) ; 
 + Collections . sort ( mods , new Comparator < ModContainer > ( ) 
 + { 
 + @ Override 
 + public int compare ( ModContainer o1 , ModContainer o2 ) 
 + { 
 + return o1 . getModId ( ) . compareTo ( o2 . getModId ( ) ) ; 
 + } 
 + } ) ; 
 + 
 FMLLog . fine ( " Mod signature data " ) ; 
 + FMLLog . fine ( " \ tValid Signatures : " ) ; 
 + for ( ModContainer mod : getActiveModList ( ) ) 
 + { 
 + if ( mod . getSigningCertificate ( ) ! = null ) 
 + FMLLog . fine ( " \ t \ t ( % s ) % s \ t ( % s \ t % s ) \ t % s " , CertificateHelper . getFingerprint ( mod . getSigningCertificate ( ) ) , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) ) ; 
 + } 
 + FMLLog . fine ( " \ tMissing Signatures : " ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 { 
 - FMLLog . fine ( " \ t % s ( % s : % s ) : % s ( % s ) " , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) , CertificateHelper . getFingerprint ( mod . getSigningCertificate ( ) ) ) ; 
 + if ( mod . getSigningCertificate ( ) = = null ) 
 + FMLLog . fine ( " \ t \ t % s \ t ( % s \ t % s ) \ t % s " , mod . getModId ( ) , mod . getName ( ) , mod . getVersion ( ) , mod . getSource ( ) . getName ( ) ) ; 
 } 
 if ( getActiveModList ( ) . isEmpty ( ) ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java b / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java 
 index 0ab81d8 . . ed557ae 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / MinecraftDummyContainer . java 
 @ @ - 12 , 8 + 12 , 12 @ @ 
 
 package cpw . mods . fml . common ; 
 
 + import java . security . cert . Certificate ; 
 + 
 import cpw . mods . fml . common . versioning . VersionParser ; 
 import cpw . mods . fml . common . versioning . VersionRange ; 
 + import cpw . mods . fml . relauncher . FMLLaunchHandler ; 
 + import cpw . mods . fml . relauncher . Side ; 
 
 public class MinecraftDummyContainer extends DummyModContainer 
 { 
 @ @ - 33 , 4 + 37 , 20 @ @ public class MinecraftDummyContainer extends DummyModContainer 
 { 
 return staticRange ; 
 } 
 + 
 + @ Override 
 + public Certificate getSigningCertificate ( ) 
 + { 
 + if ( FMLLaunchHandler . side ( ) ! = Side . CLIENT ) 
 + return null ; 
 + 
 + try 
 + { 
 + Class < ? > cbr = Class . forName ( " net . minecraft . client . ClientBrandRetriever " , false , getClass ( ) . getClassLoader ( ) ) ; 
 + Certificate [ ] certificates = cbr . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 + return certificates ! = null ? certificates [ 0 ] : null ; 
 + } 
 + catch ( Exception e ) { } / / Errors don ' t matter just return null . 
 + return null ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 70202ad . . 6b3a542 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 12 , 6 + 12 , 7 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; 
 import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; 
 
 import java . io . File ; 
 + import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 381 , 4 + 382 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 " net . minecraftforge . transformers " 
 ) ; 
 } 
 + 
 + 
 + 
 + @ Override 
 + public Certificate getSigningCertificate ( ) 
 + { 
 + Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 + return certificates ! = null ? certificates [ 0 ] : null ; 
 + } 
 }
