BLEU SCORE: 3.2640180365465436E-4

TEST MSG: Improve furnace fuel handling
GENERATED MSG: Fix up the setHandeled / setHandled for events , it is now a generalized setResult , the meaning of which is defined by each event .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index 5764edc . . a6d5590 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 87 , 7 + 87 , 7 @ @ <nl> public CreativeTabs func _ 77640 _ w ( ) <nl> { <nl> return this . field _ 77701 _ a ; <nl> - @ @ - 438 , 11 + 445 , 632 @ @ <nl> + @ @ - 438 , 11 + 445 , 642 @ @ <nl> return false ; <nl> } <nl> <nl> @ @ - 715 , 12 + 715 , 22 @ @ <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + + / * * <nl> + + * @ return the fuel burn time for this itemStack in a furnace . <nl> + + * Return 0 to make it not act as a fuel . <nl> + + * Return - 1 to let the default vanilla logic decide . <nl> + + * / <nl> + + public int getItemBurnTime ( ItemStack itemStack ) <nl> + + { <nl> + + return - 1 ; <nl> + + } <nl> + + <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; <nl> - @ @ - 1002 , 6 + 1630 , 8 @ @ <nl> + @ @ - 1002 , 6 + 1640 , 8 @ @ <nl> private final float field _ 78010 _ h ; <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> @ @ - 729 , 7 + 739 , 7 @ @ <nl> <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> - @ @ - 1037 , 6 + 1667 , 7 @ @ <nl> + @ @ - 1037 , 6 + 1677 , 7 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> @ @ - 737 , 7 + 747 , 7 @ @ <nl> public Item func _ 150995 _ f ( ) <nl> { <nl> if ( this = = WOOD ) <nl> - @ @ - 1060 , 5 + 1691 , 21 @ @ <nl> + @ @ - 1060 , 5 + 1701 , 21 @ @ <nl> return this = = DIAMOND ? Items . field _ 151045 _ i : null ; <nl> } <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch <nl> index ee33e5b . . 27cb14c 100644 <nl> - - - a / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch <nl> + + + b / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch <nl> @ @ - 62 , 19 + 62 , 16 @ @ <nl> } <nl> <nl> if ( itemstack . func _ 77973 _ b ( ) = = Item . func _ 150898 _ a ( Blocks . field _ 150360 _ v ) & & itemstack . func _ 77960 _ j ( ) = = 1 & & ! ( ( ItemStack ) this . field _ 145957 _ n . get ( 1 ) ) . func _ 190926 _ b ( ) & & ( ( ItemStack ) this . field _ 145957 _ n . get ( 1 ) ) . func _ 77973 _ b ( ) = = Items . field _ 151133 _ ar ) <nl> - @ @ - 316 , 6 + 316 , 11 @ @ <nl> + @ @ - 315 , 6 + 315 , 8 @ @ <nl> + } <nl> else <nl> { <nl> + + int burnTime = net . minecraftforge . event . ForgeEventFactory . getItemBurnTime ( p _ 145952 _ 0 _ ) ; <nl> + + if ( burnTime > = 0 ) return burnTime ; <nl> Item item = p _ 145952 _ 0 _ . func _ 77973 _ b ( ) ; <nl> - + if ( ! item . getRegistryName ( ) . func _ 110624 _ b ( ) . equals ( " minecraft " ) ) <nl> - + { <nl> - + int burnTime = net . minecraftforge . fml . common . registry . GameRegistry . getFuelValue ( p _ 145952 _ 0 _ ) ; <nl> - + if ( burnTime ! = 0 ) return burnTime ; <nl> - + } <nl> <nl> if ( item = = Item . func _ 150898 _ a ( Blocks . field _ 150376 _ bx ) ) <nl> - { <nl> - @ @ - 530 , 4 + 535 , 22 @ @ <nl> + @ @ - 530 , 4 + 532 , 22 @ @ <nl> { <nl> this . field _ 145957 _ n . clear ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> index 503a5a2 . . 6ee1fa1 100644 <nl> - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java <nl> @ @ - 37 , 6 + 37 , 7 @ @ import net . minecraft . entity . passive . EntityAnimal ; <nl> import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . entity . player . EntityPlayer . SleepResult ; <nl> import net . minecraft . init . Blocks ; <nl> + import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> import net . minecraft . util . ActionResult ; <nl> @ @ - 103 , 6 + 104 , 7 @ @ import net . minecraftforge . event . entity . player . PlayerSleepInBedEvent ; <nl> import net . minecraftforge . event . entity . player . PlayerWakeUpEvent ; <nl> import net . minecraftforge . event . entity . player . SleepingLocationCheckEvent ; <nl> import net . minecraftforge . event . entity . player . UseHoeEvent ; <nl> + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; <nl> import net . minecraftforge . event . terraingen . PopulateChunkEvent ; <nl> import net . minecraftforge . event . world . BlockEvent ; <nl> @ @ - 115 , 6 + 117 , 7 @ @ import net . minecraftforge . event . world . WorldEvent ; <nl> import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; <nl> import net . minecraftforge . fml . common . eventhandler . Event ; <nl> import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> @ @ - 207 , 6 + 210 , 24 @ @ public class ForgeEventFactory <nl> return event . getResult ( ) ; <nl> } <nl> <nl> + public static int getItemBurnTime ( @ Nonnull ItemStack itemStack ) <nl> + { <nl> + Item item = itemStack . getItem ( ) ; <nl> + int burnTime = item . getItemBurnTime ( itemStack ) ; <nl> + FurnaceFuelBurnTimeEvent event = new FurnaceFuelBurnTimeEvent ( itemStack , burnTime ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> + if ( event . getBurnTime ( ) < 0 ) <nl> + { <nl> + / / legacy handling <nl> + int fuelValue = GameRegistry . getFuelValueLegacy ( itemStack ) ; <nl> + if ( fuelValue > 0 ) <nl> + { <nl> + return fuelValue ; <nl> + } <nl> + } <nl> + return event . getBurnTime ( ) ; <nl> + } <nl> + <nl> public static int getExperienceDrop ( EntityLivingBase entity , EntityPlayer attackingPlayer , int originalExperience ) <nl> { <nl> LivingExperienceDropEvent event = new LivingExperienceDropEvent ( entity , attackingPlayer , originalExperience ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java b / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . f332a80 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java <nl> @ @ - 0 , 0 + 1 , 86 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . event . furnace ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . event . ForgeEventFactory ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + <nl> + / * * <nl> + * { @ link FurnaceFuelBurnTimeEvent } is fired when determining the fuel value for an ItemStack . < br > <nl> + * < br > <nl> + * To set the burn time of your own item , use { @ link Item # getItemBurnTime ( ItemStack ) } instead . < br > <nl> + * < br > <nl> + * This event is fired from { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } . < br > <nl> + * < br > <nl> + * This event is { @ link Cancelable } to prevent later handlers from changing the value . < br > <nl> + * < br > <nl> + * This event does not have a result . { @ link HasResult } < br > <nl> + * < br > <nl> + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . <nl> + * * / <nl> + @ Cancelable <nl> + public class FurnaceFuelBurnTimeEvent extends Event <nl> + { <nl> + @ Nonnull <nl> + private final ItemStack itemStack ; <nl> + private int burnTime ; <nl> + <nl> + public FurnaceFuelBurnTimeEvent ( @ Nonnull ItemStack itemStack , int burnTime ) <nl> + { <nl> + this . itemStack = itemStack ; <nl> + this . burnTime = burnTime ; <nl> + } <nl> + <nl> + / * * <nl> + * Get the ItemStack " fuel " in question . <nl> + * / <nl> + @ Nonnull <nl> + public ItemStack getItemStack ( ) <nl> + { <nl> + return itemStack ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the burn time for the given ItemStack . <nl> + * Setting it to 0 will prevent the item from being used as fuel , overriding vanilla ' s decision . <nl> + * Setting it to - 1 will let vanilla decide on the fuel value , this is the default . <nl> + * / <nl> + public void setBurnTime ( int burnTime ) <nl> + { <nl> + this . burnTime = burnTime ; <nl> + setCanceled ( true ) ; <nl> + } <nl> + <nl> + / * * <nl> + * The resulting value of this event , the burn time for the ItemStack . <nl> + * A value of 0 will prevent the item from being used as fuel , overriding vanilla ' s decision . <nl> + * A value of - 1 will let vanilla decide on the fuel value , this is the default for { @ link Item # getItemBurnTime ( ItemStack ) } . <nl> + * / <nl> + public int getBurnTime ( ) <nl> + { <nl> + return burnTime ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java b / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java <nl> index 253706e . . 1b3d57b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java <nl> @ @ - 19 , 8 + 19 , 14 @ @ <nl> <nl> package net . minecraftforge . fml . common ; <nl> <nl> + import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> <nl> + / * * <nl> + * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . <nl> + * / <nl> + @ Deprecated <nl> public interface IFuelHandler <nl> { <nl> int getBurnTime ( ItemStack fuel ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index 8f092fd . . 5afb318 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 37 , 7 + 37 , 6 @ @ import net . minecraft . command . EntitySelector ; <nl> import net . minecraft . command . ICommandSender ; <nl> import net . minecraft . entity . Entity ; <nl> import net . minecraft . item . Item ; <nl> - import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . item . crafting . FurnaceRecipes ; <nl> import net . minecraft . item . crafting . Ingredient ; <nl> @ @ - 56 , 6 + 55 , 8 @ @ import net . minecraft . world . chunk . IChunkProvider ; <nl> import net . minecraft . world . gen . IChunkGenerator ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> import net . minecraftforge . common . crafting . CraftingHelper . ShapedPrimer ; <nl> + import net . minecraftforge . event . ForgeEventFactory ; <nl> + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . IFuelHandler ; <nl> import net . minecraftforge . fml . common . IWorldGenerator ; <nl> @ @ - 65 , 8 + 66 , 6 @ @ import net . minecraftforge . registries . IForgeRegistryEntry ; <nl> import net . minecraftforge . registries . RegistryManager ; <nl> import net . minecraftforge . fml . common . IEntitySelectorFactory ; <nl> <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> import com . google . common . base . Strings ; <nl> import com . google . common . base . Throwables ; <nl> import com . google . common . collect . ImmutableList ; <nl> @ @ - 237 , 13 + 236 , 30 @ @ public class GameRegistry <nl> TileEntity . register ( key , tileEntityClass ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . <nl> + * / <nl> + @ Deprecated <nl> public static void registerFuelHandler ( IFuelHandler handler ) <nl> { <nl> fuelHandlers . add ( handler ) ; <nl> } <nl> <nl> + / * * <nl> + * @ deprecated use { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } <nl> + * / <nl> + @ Deprecated <nl> public static int getFuelValue ( @ Nonnull ItemStack itemStack ) <nl> { <nl> + return ForgeEventFactory . getItemBurnTime ( itemStack ) ; <nl> + } <nl> + <nl> + / * * <nl> + * @ deprecated use { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } <nl> + * / <nl> + @ Deprecated <nl> + public static int getFuelValueLegacy ( @ Nonnull ItemStack itemStack ) <nl> + { <nl> int fuelValue = 0 ; <nl> for ( IFuelHandler handler : fuelHandlers ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java b / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java <nl> new file mode 100644 <nl> index 0000000 . . 5802c0d <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java <nl> @ @ - 0 , 0 + 1 , 111 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . ModelBakery ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemSpade ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . event . RegistryEvent ; <nl> + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = FurnaceFuelBurnTimeEventTest . MOD _ ID , name = " Test for FurnaceFuelBurnTimeEvent " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod . EventBusSubscriber <nl> + public class FurnaceFuelBurnTimeEventTest <nl> + { <nl> + public static final String MOD _ ID = " furnacefuelburntimeeventtest " ; <nl> + private static final ResourceLocation unburnableWoodShovelName = new ResourceLocation ( MOD _ ID , " unburnable _ wood _ shovel " ) ; <nl> + private static final ResourceLocation flammableGoldShovelName = new ResourceLocation ( MOD _ ID , " flammable _ gold _ shovel " ) ; <nl> + @ GameRegistry . ObjectHolder ( " unburnable _ wood _ shovel " ) <nl> + public static final Item UNBURNABLE _ WOOD _ SHOVEL = null ; <nl> + @ GameRegistry . ObjectHolder ( " flammable _ gold _ shovel " ) <nl> + public static final Item FLAMMABLE _ GOLD _ SHOVEL = null ; <nl> + <nl> + @ SubscribeEvent <nl> + public static void onFurnaceFuelBurnTimeEvent ( FurnaceFuelBurnTimeEvent event ) <nl> + { <nl> + ItemStack itemStack = event . getItemStack ( ) ; <nl> + Item item = itemStack . getItem ( ) ; <nl> + if ( item = = Items . SLIME _ BALL ) <nl> + { <nl> + event . setBurnTime ( 100 ) ; / / make slime balls burn as fuel in the furnace <nl> + } <nl> + else if ( item = = Items . WOODEN _ AXE ) <nl> + { <nl> + event . setBurnTime ( 0 ) ; / / do not allow the wooden axe to be used as fuel <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItems ( RegistryEvent . Register < Item > event ) <nl> + { <nl> + event . getRegistry ( ) . register ( new UnburnableWoodShovel ( ) . setRegistryName ( unburnableWoodShovelName ) ) ; <nl> + event . getRegistry ( ) . register ( new FlammableGoldShovel ( ) . setRegistryName ( flammableGoldShovelName ) ) ; <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerModels ( ModelRegistryEvent event ) <nl> + { <nl> + { <nl> + final ModelResourceLocation location = new ModelResourceLocation ( unburnableWoodShovelName , " inventory " ) ; <nl> + ModelBakery . registerItemVariants ( UNBURNABLE _ WOOD _ SHOVEL , location ) ; <nl> + ModelLoader . setCustomMeshDefinition ( UNBURNABLE _ WOOD _ SHOVEL , is - > location ) ; <nl> + } <nl> + { <nl> + final ModelResourceLocation location = new ModelResourceLocation ( flammableGoldShovelName , " inventory " ) ; <nl> + ModelBakery . registerItemVariants ( FLAMMABLE _ GOLD _ SHOVEL , location ) ; <nl> + ModelLoader . setCustomMeshDefinition ( FLAMMABLE _ GOLD _ SHOVEL , is - > location ) ; <nl> + } <nl> + } <nl> + <nl> + public static class UnburnableWoodShovel extends ItemSpade <nl> + { <nl> + public UnburnableWoodShovel ( ) <nl> + { <nl> + super ( ToolMaterial . WOOD ) ; <nl> + setCreativeTab ( CreativeTabs . TOOLS ) ; <nl> + setMaxStackSize ( 1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getItemBurnTime ( ItemStack itemStack ) <nl> + { <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getItemStackDisplayName ( ItemStack stack ) <nl> + { <nl> + return " Unburnable Wooden Shovel " ; <nl> + } <nl> + } <nl> + <nl> + public static class FlammableGoldShovel extends ItemSpade <nl> + { <nl> + public FlammableGoldShovel ( ) <nl> + { <nl> + super ( ToolMaterial . GOLD ) ; <nl> + setCreativeTab ( CreativeTabs . TOOLS ) ; <nl> + setMaxStackSize ( 1 ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getItemBurnTime ( ItemStack itemStack ) <nl> + { <nl> + return 1000 ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getItemStackDisplayName ( ItemStack stack ) <nl> + { <nl> + return " Flammable Golden Shovel " ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json <nl> new file mode 100644 <nl> index 0000000 . . 2dde2f3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + { <nl> + " parent " : " item / generated " , <nl> + " textures " : { <nl> + " layer0 " : " items / gold _ shovel " <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json <nl> new file mode 100644 <nl> index 0000000 . . c461880 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + { <nl> + " parent " : " item / generated " , <nl> + " textures " : { <nl> + " layer0 " : " items / wood _ shovel " <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / event / Event . java b / common / net / minecraftforge / event / Event . java <nl> index 15947ca . . bd530ae 100644 <nl> - - - a / common / net / minecraftforge / event / Event . java <nl> + + + b / common / net / minecraftforge / event / Event . java <nl> @ @ - 1 , 11 + 1 , 21 @ @ <nl> package net . minecraftforge . event ; <nl> <nl> + import static java . lang . annotation . ElementType . TYPE ; <nl> + import static java . lang . annotation . RetentionPolicy . RUNTIME ; <nl> + <nl> + import java . lang . annotation . Retention ; <nl> + import java . lang . annotation . Target ; <nl> + <nl> <nl> / * * <nl> * Base Event class that all other events are derived from <nl> * / <nl> public class Event <nl> { <nl> + @ Retention ( value = RUNTIME ) <nl> + @ Target ( value = TYPE ) <nl> + public @ interface HasResult { } <nl> + <nl> public enum Result <nl> { <nl> DENY , <nl> @ @ - 15 , 25 + 25 , 31 @ @ public class Event <nl> <nl> private boolean isCanceled = false ; <nl> private final boolean isCancelable ; <nl> + private Result result = Result . DEFAULT ; <nl> + private final boolean hasResult ; <nl> private static ListenerList listeners = new ListenerList ( ) ; <nl> <nl> public Event ( ) <nl> { <nl> setup ( ) ; <nl> + isCancelable = hasAnnotation ( Cancelable . class ) ; <nl> + hasResult = hasAnnotation ( HasResult . class ) ; <nl> + } <nl> + <nl> + private boolean hasAnnotation ( Class annotation ) <nl> + { <nl> Class cls = this . getClass ( ) ; <nl> - boolean found = false ; <nl> while ( cls ! = Event . class ) <nl> { <nl> if ( cls . isAnnotationPresent ( Cancelable . class ) ) <nl> { <nl> - found = true ; <nl> - break ; <nl> + return true ; <nl> } <nl> cls = cls . getSuperclass ( ) ; <nl> } <nl> - isCancelable = found ; <nl> + return false ; <nl> } <nl> - <nl> + <nl> / * * <nl> * Determine if this function is cancelable at all . <nl> * @ return If access to setCanceled should be allowed <nl> @ @ - 42 , 7 + 58 , 7 @ @ public class Event <nl> { <nl> return isCancelable ; <nl> } <nl> - <nl> + <nl> / * * <nl> * Determine if this event is canceled and should stop executing . <nl> * @ return The current canceled state <nl> @ @ - 51 , 7 + 67 , 7 @ @ public class Event <nl> { <nl> return isCanceled ; <nl> } <nl> - <nl> + <nl> / * * <nl> * Sets the state of this event , not all events are cancelable , and any attempt to <nl> * cancel a event that can ' t be will result in a IllegalArgumentException . <nl> @ @ - 68 , 7 + 84 , 35 @ @ public class Event <nl> } <nl> isCanceled = cancel ; <nl> } <nl> - <nl> + <nl> + / * * <nl> + * Determines if this event expects a significant result value . <nl> + * / <nl> + public boolean hasResult ( ) <nl> + { <nl> + return hasResult ; <nl> + } <nl> + <nl> + / * * <nl> + * Returns the value set as the result of this event <nl> + * / <nl> + public Result getResult ( ) <nl> + { <nl> + return result ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the result value for this event , not all events can have a result set , and any attempt to <nl> + * set a result for a event that isn ' t expecting it will result in a IllegalArgumentException . <nl> + * <nl> + * The functionality of setting the result is defined on a per - event bases . <nl> + * <nl> + * @ param value The new result <nl> + * / <nl> + public void setResult ( Result value ) <nl> + { <nl> + result = value ; <nl> + } <nl> / * * <nl> * Called by the base constructor , this is used by ASM generated <nl> * event classes to setup various functionality such as the listener ' s list . <nl> diff - - git a / common / net / minecraftforge / event / entity / UseHoeEvent . java b / common / net / minecraftforge / event / entity / UseHoeEvent . java <nl> deleted file mode 100644 <nl> index c012c91 . . 0000000 <nl> - - - a / common / net / minecraftforge / event / entity / UseHoeEvent . java <nl> + + + / dev / null <nl> @ @ - 1 , 40 + 0 , 0 @ @ <nl> - package net . minecraftforge . event . entity ; <nl> - <nl> - import net . minecraft . src . EntityPlayer ; <nl> - import net . minecraft . src . ItemStack ; <nl> - import net . minecraft . src . World ; <nl> - import net . minecraftforge . event . Cancelable ; <nl> - import net . minecraftforge . event . entity . player . PlayerEvent ; <nl> - <nl> - @ Cancelable <nl> - public class UseHoeEvent extends PlayerEvent <nl> - { <nl> - <nl> - public final ItemStack current ; <nl> - public final World world ; <nl> - public final int x ; <nl> - public final int y ; <nl> - public final int z ; <nl> - <nl> - private boolean handeled = false ; <nl> - <nl> - public UseHoeEvent ( EntityPlayer player , ItemStack current , World world , int x , int y , int z ) <nl> - { <nl> - super ( player ) ; <nl> - this . current = current ; <nl> - this . world = world ; <nl> - this . x = x ; <nl> - this . y = y ; <nl> - this . z = z ; <nl> - } <nl> - <nl> - public boolean isHandeled ( ) <nl> - { <nl> - return handeled ; <nl> - } <nl> - <nl> - public void setHandeled ( ) <nl> - { <nl> - handeled = true ; <nl> - } <nl> - } <nl> diff - - git a / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java b / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java <nl> index f6e555e . . 2186967 100644 <nl> - - - a / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java <nl> + + + b / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java <nl> @ @ - 2 , 7 + 2 , 9 @ @ package net . minecraftforge . event . entity . living ; <nl> <nl> import net . minecraft . src . EntityLiving ; <nl> import net . minecraft . src . World ; <nl> + import net . minecraftforge . event . Cancelable ; <nl> <nl> + @ Cancelable <nl> public class LivingSpecialSpawnEvent extends LivingEvent <nl> { <nl> public final World world ; <nl> @ @ - 19 , 14 + 21 , 4 @ @ public class LivingSpecialSpawnEvent extends LivingEvent <nl> this . y = y ; <nl> this . z = z ; <nl> } <nl> - <nl> - public void setHandeled ( ) <nl> - { <nl> - handeled = true ; <nl> - } <nl> - <nl> - public boolean isHandeled ( ) <nl> - { <nl> - return handeled ; <nl> - } <nl> } <nl> diff - - git a / common / net / minecraftforge / event / entity / player / BonemealEvent . java b / common / net / minecraftforge / event / entity / player / BonemealEvent . java <nl> index 8126d71 . . 894d431 100644 <nl> - - - a / common / net / minecraftforge / event / entity / player / BonemealEvent . java <nl> + + + b / common / net / minecraftforge / event / entity / player / BonemealEvent . java <nl> @ @ - 3 , 16 + 3 , 27 @ @ package net . minecraftforge . event . entity . player ; <nl> import net . minecraft . src . EntityPlayer ; <nl> import net . minecraft . src . World ; <nl> import net . minecraftforge . event . Cancelable ; <nl> + import net . minecraftforge . event . Event ; <nl> <nl> @ Cancelable <nl> + @ Event . HasResult <nl> public class BonemealEvent extends PlayerEvent <nl> { <nl> + / * * <nl> + * This event is called when a player attempts to use Bonemeal on a block . <nl> + * It can be canceled to completely prevent any further processing . <nl> + * <nl> + * You can also set the result to ALLOW to mark the event as processed <nl> + * and use up a bonemeal from the stack but do no further processing . <nl> + * <nl> + * setResult ( ALLOW ) is the same as the old setHandeled ( ) <nl> + * / <nl> + <nl> public final World world ; <nl> public final int ID ; <nl> public final int X ; <nl> public final int Y ; <nl> public final int Z ; <nl> - private boolean handeled = false ; <nl> <nl> public BonemealEvent ( EntityPlayer player , World world , int id , int x , int y , int z ) <nl> { <nl> @ @ - 23 , 14 + 34 , 4 @ @ public class BonemealEvent extends PlayerEvent <nl> this . Y = y ; <nl> this . Z = z ; <nl> } <nl> - <nl> - public void setHandeled ( ) <nl> - { <nl> - handeled = true ; <nl> - } <nl> - <nl> - public boolean isHandeled ( ) <nl> - { <nl> - return handeled ; <nl> - } <nl> } <nl> diff - - git a / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java b / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java <nl> index 5d2156e . . 8a690dc 100644 <nl> - - - a / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java <nl> + + + b / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java <nl> @ @ - 4 , 26 + 4 , 29 @ @ import net . minecraft . src . Entity ; <nl> import net . minecraft . src . EntityItem ; <nl> import net . minecraft . src . EntityPlayer ; <nl> import net . minecraftforge . event . Cancelable ; <nl> + import net . minecraftforge . event . Event ; <nl> <nl> @ Cancelable <nl> + @ Event . HasResult <nl> public class EntityItemPickupEvent extends PlayerEvent <nl> { <nl> + / * * <nl> + * This event is called when a player collides with a EntityItem on the ground . <nl> + * The event can be canceled , and no further processing will be done . <nl> + * <nl> + * You can set the result of this event to ALLOW which will trigger the <nl> + * processing of achievements , FML ' s event , play the sound , and kill the <nl> + * entity if all the items are picked up . <nl> + * <nl> + * setResult ( ALLOW ) is the same as the old setHandled ( ) <nl> + * / <nl> + <nl> public final EntityItem item ; <nl> private boolean handled = false ; <nl> - <nl> + <nl> public EntityItemPickupEvent ( EntityPlayer player , EntityItem item ) <nl> { <nl> super ( player ) ; <nl> this . item = item ; <nl> } <nl> - <nl> - public boolean isHandled ( ) <nl> - { <nl> - return handled ; <nl> - } <nl> - <nl> - public void setHandled ( ) <nl> - { <nl> - handled = true ; <nl> - } <nl> } <nl> diff - - git a / common / net / minecraftforge / event / entity / player / FillBucketEvent . java b / common / net / minecraftforge / event / entity / player / FillBucketEvent . java <nl> index c110fba . . e09b454 100644 <nl> - - - a / common / net / minecraftforge / event / entity / player / FillBucketEvent . java <nl> + + + b / common / net / minecraftforge / event / entity / player / FillBucketEvent . java <nl> @ @ - 5 , 17 + 5 , 28 @ @ import net . minecraft . src . ItemStack ; <nl> import net . minecraft . src . MovingObjectPosition ; <nl> import net . minecraft . src . World ; <nl> import net . minecraftforge . event . Cancelable ; <nl> + import net . minecraftforge . event . Event ; <nl> <nl> @ Cancelable <nl> + @ Event . HasResult <nl> public class FillBucketEvent extends PlayerEvent <nl> { <nl> + / * * <nl> + * This event is fired when a player attempts to use a Empty bucket , it <nl> + * can be canceled to completely prevent any further processing . <nl> + * <nl> + * If you set the result to ' ALLOW ' , it means that you have processed <nl> + * the event and wants the basic functionality of adding the new <nl> + * ItemStack to your inventory and reducing the stack size to process . <nl> + * setResult ( ALLOW ) is the same as the old setHandeled ( ) ; <nl> + * / <nl> + <nl> public final ItemStack current ; <nl> public final World world ; <nl> public final MovingObjectPosition target ; <nl> - <nl> + <nl> public ItemStack result ; <nl> - private boolean handeled = false ; <nl> - <nl> + <nl> public FillBucketEvent ( EntityPlayer player , ItemStack current , World world , MovingObjectPosition target ) <nl> { <nl> super ( player ) ; <nl> @ @ - 23 , 14 + 34 , 4 @ @ public class FillBucketEvent extends PlayerEvent <nl> this . world = world ; <nl> this . target = target ; <nl> } <nl> - <nl> - public boolean isHandeled ( ) <nl> - { <nl> - return handeled ; <nl> - } <nl> - <nl> - public void setHandeled ( ) <nl> - { <nl> - handeled = true ; <nl> - } <nl> } <nl> diff - - git a / common / net / minecraftforge / event / entity / player / UseHoeEvent . java b / common / net / minecraftforge / event / entity / player / UseHoeEvent . java <nl> new file mode 100644 <nl> index 0000000 . . ac8793b <nl> - - - / dev / null <nl> + + + b / common / net / minecraftforge / event / entity / player / UseHoeEvent . java <nl> @ @ - 0 , 0 + 1 , 40 @ @ <nl> + package net . minecraftforge . event . entity . player ; <nl> + <nl> + import net . minecraft . src . EntityPlayer ; <nl> + import net . minecraft . src . ItemStack ; <nl> + import net . minecraft . src . World ; <nl> + import net . minecraftforge . event . Cancelable ; <nl> + import net . minecraftforge . event . Event ; <nl> + <nl> + @ Cancelable <nl> + @ Event . HasResult <nl> + public class UseHoeEvent extends PlayerEvent <nl> + { <nl> + / * * <nl> + * This event is fired when a player attempts to use a Hoe on a block , it <nl> + * can be canceled to completely prevent any further processing . <nl> + * <nl> + * You can also set the result to ALLOW to mark the event as processed <nl> + * and damage the hoe . <nl> + * <nl> + * setResult ( ALLOW ) is the same as the old setHandeled ( ) ; <nl> + * / <nl> + <nl> + public final ItemStack current ; <nl> + public final World world ; <nl> + public final int x ; <nl> + public final int y ; <nl> + public final int z ; <nl> + <nl> + private boolean handeled = false ; <nl> + <nl> + public UseHoeEvent ( EntityPlayer player , ItemStack current , World world , int x , int y , int z ) <nl> + { <nl> + super ( player ) ; <nl> + this . current = current ; <nl> + this . world = world ; <nl> + this . x = x ; <nl> + this . y = y ; <nl> + this . z = z ; <nl> + } <nl> + } <nl> diff - - git a / patches / common / net / minecraft / src / EntityItem . java . patch b / patches / common / net / minecraft / src / EntityItem . java . patch <nl> index a038362 . . 4e2edaf 100644 <nl> - - - a / patches / common / net / minecraft / src / EntityItem . java . patch <nl> + + + b / patches / common / net / minecraft / src / EntityItem . java . patch <nl> @ @ - 1 , 17 + 1 , 18 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / EntityItem . java <nl> + + + . . / src _ work / common / net / minecraft / src / EntityItem . java <nl> - @ @ - 1 , 6 + 1 , 10 @ @ <nl> + @ @ - 1 , 6 + 1 , 11 @ @ <nl> package net . minecraft . src ; <nl> <nl> import java . util . Iterator ; <nl> + <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . Event . Result ; <nl> + import net . minecraftforge . event . entity . item . ItemExpireEvent ; <nl> + import net . minecraftforge . event . entity . player . EntityItemPickupEvent ; <nl> <nl> import cpw . mods . fml . common . registry . GameRegistry ; <nl> <nl> - @ @ - 20 , 6 + 24 , 11 @ @ <nl> + @ @ - 20 , 6 + 25 , 11 @ @ <nl> <nl> / * * The EntityItem ' s random initial float height . * / <nl> public float hoverStart = ( float ) ( Math . random ( ) * Math . PI * 2 . 0D ) ; <nl> @ @ - 23 , 7 + 24 , 7 @ @ <nl> <nl> public EntityItem ( World par1World , double par2 , double par4 , double par6 , ItemStack par8ItemStack ) <nl> { <nl> - @ @ - 32 , 6 + 41 , 7 @ @ <nl> + @ @ - 32 , 6 + 42 , 7 @ @ <nl> this . motionX = ( double ) ( ( float ) ( Math . random ( ) * 0 . 20000000298023224D - 0 . 10000000149011612D ) ) ; <nl> this . motionY = 0 . 20000000298023224D ; <nl> this . motionZ = ( double ) ( ( float ) ( Math . random ( ) * 0 . 20000000298023224D - 0 . 10000000149011612D ) ) ; <nl> @ @ - 31 , 7 + 32 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 118 , 7 + 128 , 20 @ @ <nl> + @ @ - 118 , 7 + 129 , 20 @ @ <nl> <nl> + + this . age ; <nl> <nl> @ @ - 53 , 7 + 54 , 7 @ @ <nl> { <nl> this . setDead ( ) ; <nl> } <nl> - @ @ - 215 , 6 + 238 , 7 @ @ <nl> + @ @ - 215 , 6 + 239 , 7 @ @ <nl> { <nl> par1NBTTagCompound . setShort ( " Health " , ( short ) ( ( byte ) this . health ) ) ; <nl> par1NBTTagCompound . setShort ( " Age " , ( short ) this . age ) ; <nl> @ @ - 61 , 7 + 62 , 7 @ @ <nl> <nl> if ( this . item ! = null ) <nl> { <nl> - @ @ - 232 , 10 + 256 , 15 @ @ <nl> + @ @ - 232 , 10 + 257 , 15 @ @ <nl> NBTTagCompound var2 = par1NBTTagCompound . getCompoundTag ( " Item " ) ; <nl> this . item = ItemStack . loadItemStackFromNBT ( var2 ) ; <nl> <nl> @ @ - 78 , 7 + 79 , 7 @ @ <nl> } <nl> <nl> / * * <nl> - @ @ - 245 , 9 + 274 , 21 @ @ <nl> + @ @ - 245 , 9 + 275 , 21 @ @ <nl> { <nl> if ( ! this . worldObj . isRemote ) <nl> { <nl> @ @ - 97 , 7 + 98 , 7 @ @ <nl> int var2 = this . item . stackSize ; <nl> <nl> - if ( this . delayBeforeCanPickup = = 0 & & par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) <nl> - + if ( this . delayBeforeCanPickup < = 0 & & ( event . isHandled ( ) | | var2 < = 0 | | par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) ) <nl> + + if ( this . delayBeforeCanPickup < = 0 & & ( event . getResult ( ) = = Result . ALLOW | | var2 < = 0 | | par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) ) <nl> { <nl> if ( this . item . itemID = = Block . wood . blockID ) <nl> { <nl> diff - - git a / patches / common / net / minecraft / src / ItemBucket . java . patch b / patches / common / net / minecraft / src / ItemBucket . java . patch <nl> index 4da9c72 . . f6b0a12 100644 <nl> - - - a / patches / common / net / minecraft / src / ItemBucket . java . patch <nl> + + + b / patches / common / net / minecraft / src / ItemBucket . java . patch <nl> @ @ - 1 , 14 + 1 , 15 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / ItemBucket . java <nl> + + + . . / src _ work / common / net / minecraft / src / ItemBucket . java <nl> - @ @ - 1 , 4 + 1 , 7 @ @ <nl> + @ @ - 1 , 4 + 1 , 8 @ @ <nl> package net . minecraft . src ; <nl> + <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . Event ; <nl> + import net . minecraftforge . event . entity . player . FillBucketEvent ; <nl> <nl> public class ItemBucket extends Item <nl> { <nl> - @ @ - 31 , 6 + 34 , 32 @ @ <nl> + @ @ - 31 , 6 + 35 , 32 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 18 , 7 + 19 , 7 @ @ <nl> + return par1ItemStack ; <nl> + } <nl> + <nl> - + if ( event . isHandeled ( ) ) <nl> + + if ( event . getResult ( ) = = Event . Result . ALLOW ) <nl> + { <nl> + if ( par3EntityPlayer . capabilities . isCreativeMode ) <nl> + { <nl> diff - - git a / patches / common / net / minecraft / src / ItemDye . java . patch b / patches / common / net / minecraft / src / ItemDye . java . patch <nl> index c8c7ef6 . . 9df29f0 100644 <nl> - - - a / patches / common / net / minecraft / src / ItemDye . java . patch <nl> + + + b / patches / common / net / minecraft / src / ItemDye . java . patch <nl> @ @ - 1 , 17 + 1 , 18 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / ItemDye . java <nl> + + + . . / src _ work / common / net / minecraft / src / ItemDye . java <nl> - @ @ - 3 , 6 + 3 , 10 @ @ <nl> + @ @ - 3 , 6 + 3 , 11 @ @ <nl> import cpw . mods . fml . common . Side ; <nl> import cpw . mods . fml . common . asm . SideOnly ; <nl> import java . util . List ; <nl> + <nl> + import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + + import net . minecraftforge . event . Event . Result ; <nl> + import net . minecraftforge . event . entity . player . BonemealEvent ; <nl> <nl> public class ItemDye extends Item <nl> { <nl> - @ @ - 53 , 6 + 57 , 21 @ @ <nl> + @ @ - 53 , 6 + 58 , 21 @ @ <nl> if ( par1ItemStack . getItemDamage ( ) = = 15 ) <nl> { <nl> var11 = par3World . getBlockId ( par4 , par5 , par6 ) ; <nl> @ @ - 22 , 9 + 23 , 9 @ @ <nl> + return false ; <nl> + } <nl> + <nl> - + if ( event . isHandeled ( ) ) <nl> + + if ( event . getResult ( ) = = Result . ALLOW ) <nl> + { <nl> - + if ( ! par3World . isRemote ) <nl> + + if ( ! par3World . isRemote ) <nl> + { <nl> + par1ItemStack . stackSize - - ; <nl> + } <nl> @ @ - 33 , 7 + 34 , 7 @ @ <nl> <nl> if ( var11 = = Block . sapling . blockID ) <nl> { <nl> - @ @ - 152 , 16 + 171 , 9 @ @ <nl> + @ @ - 152 , 16 + 172 , 9 @ @ <nl> par3World . setBlockAndMetadataWithNotify ( var13 , var14 , var15 , Block . tallGrass . blockID , 1 ) ; <nl> } <nl> } <nl> diff - - git a / patches / common / net / minecraft / src / ItemHoe . java . patch b / patches / common / net / minecraft / src / ItemHoe . java . patch <nl> index 6565cee . . 4605d0c 100644 <nl> - - - a / patches / common / net / minecraft / src / ItemHoe . java . patch <nl> + + + b / patches / common / net / minecraft / src / ItemHoe . java . patch <nl> @ @ - 1 , 14 + 1 , 15 @ @ <nl> - - - . . / src _ base / common / net / minecraft / src / ItemHoe . java <nl> + + + . . / src _ work / common / net / minecraft / src / ItemHoe . java <nl> - @ @ - 1 , 5 + 1 , 7 @ @ <nl> + @ @ - 1 , 5 + 1 , 8 @ @ <nl> package net . minecraft . src ; <nl> <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> - + import net . minecraftforge . event . entity . UseHoeEvent ; <nl> + + import net . minecraftforge . event . Event . Result ; <nl> + + import net . minecraftforge . event . entity . player . UseHoeEvent ; <nl> import cpw . mods . fml . common . Side ; <nl> import cpw . mods . fml . common . asm . SideOnly ; <nl> <nl> - @ @ - 28 , 6 + 30 , 17 @ @ <nl> + @ @ - 28 , 6 + 31 , 18 @ @ <nl> } <nl> else <nl> { <nl> @ @ - 17 , 7 + 18 , 8 @ @ <nl> + { <nl> + return false ; <nl> + } <nl> - + if ( event . isHandeled ( ) ) <nl> + + <nl> + + if ( event . getResult ( ) = = Result . ALLOW ) <nl> + { <nl> + par1ItemStack . damageItem ( 1 , par2EntityPlayer ) ; <nl> + return true ; <nl> diff - - git a / patches / common / net / minecraft / src / SpawnerAnimals . java . patch b / patches / common / net / minecraft / src / SpawnerAnimals . java . patch <nl> index f5726b9 . . fffe071 100644 <nl> - - - a / patches / common / net / minecraft / src / SpawnerAnimals . java . patch <nl> + + + b / patches / common / net / minecraft / src / SpawnerAnimals . java . patch <nl> @ @ - 35 , 13 + 35 , 11 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 216 , 6 + 225 , 13 @ @ <nl> + @ @ - 216 , 6 + 225 , 11 @ @ <nl> * / <nl> private static void creatureSpecificInit ( EntityLiving par0EntityLiving , World par1World , float par2 , float par3 , float par4 ) <nl> { <nl> - + LivingSpecialSpawnEvent event = new LivingSpecialSpawnEvent ( par0EntityLiving , par1World , par2 , par3 , par4 ) ; <nl> - + MinecraftForge . EVENT _ BUS . post ( event ) ; <nl> - + if ( event . isHandeled ( ) ) <nl> + + if ( MinecraftForge . EVENT _ BUS . post ( new LivingSpecialSpawnEvent ( par0EntityLiving , par1World , par2 , par3 , par4 ) ) ) <nl> + { <nl> + return ; <nl> + }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index 5764edc . . a6d5590 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 87 , 7 + 87 , 7 @ @ 
 public CreativeTabs func _ 77640 _ w ( ) 
 { 
 return this . field _ 77701 _ a ; 
 - @ @ - 438 , 11 + 445 , 632 @ @ 
 + @ @ - 438 , 11 + 445 , 642 @ @ 
 return false ; 
 } 
 
 @ @ - 715 , 12 + 715 , 22 @ @ 
 + return builder . build ( ) ; 
 + } 
 + 
 + + / * * 
 + + * @ return the fuel burn time for this itemStack in a furnace . 
 + + * Return 0 to make it not act as a fuel . 
 + + * Return - 1 to let the default vanilla logic decide . 
 + + * / 
 + + public int getItemBurnTime ( ItemStack itemStack ) 
 + + { 
 + + return - 1 ; 
 + + } 
 + + 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE END = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150350 _ a , new ItemAir ( Blocks . field _ 150350 _ a ) ) ; 
 - @ @ - 1002 , 6 + 1630 , 8 @ @ 
 + @ @ - 1002 , 6 + 1640 , 8 @ @ 
 private final float field _ 78010 _ h ; 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 @ @ - 729 , 7 + 739 , 7 @ @ 
 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 - @ @ - 1037 , 6 + 1667 , 7 @ @ 
 + @ @ - 1037 , 6 + 1677 , 7 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 @ @ - 737 , 7 + 747 , 7 @ @ 
 public Item func _ 150995 _ f ( ) 
 { 
 if ( this = = WOOD ) 
 - @ @ - 1060 , 5 + 1691 , 21 @ @ 
 + @ @ - 1060 , 5 + 1701 , 21 @ @ 
 return this = = DIAMOND ? Items . field _ 151045 _ i : null ; 
 } 
 } 
 diff - - git a / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch b / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch 
 index ee33e5b . . 27cb14c 100644 
 - - - a / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch 
 + + + b / patches / minecraft / net / minecraft / tileentity / TileEntityFurnace . java . patch 
 @ @ - 62 , 19 + 62 , 16 @ @ 
 } 
 
 if ( itemstack . func _ 77973 _ b ( ) = = Item . func _ 150898 _ a ( Blocks . field _ 150360 _ v ) & & itemstack . func _ 77960 _ j ( ) = = 1 & & ! ( ( ItemStack ) this . field _ 145957 _ n . get ( 1 ) ) . func _ 190926 _ b ( ) & & ( ( ItemStack ) this . field _ 145957 _ n . get ( 1 ) ) . func _ 77973 _ b ( ) = = Items . field _ 151133 _ ar ) 
 - @ @ - 316 , 6 + 316 , 11 @ @ 
 + @ @ - 315 , 6 + 315 , 8 @ @ 
 + } 
 else 
 { 
 + + int burnTime = net . minecraftforge . event . ForgeEventFactory . getItemBurnTime ( p _ 145952 _ 0 _ ) ; 
 + + if ( burnTime > = 0 ) return burnTime ; 
 Item item = p _ 145952 _ 0 _ . func _ 77973 _ b ( ) ; 
 - + if ( ! item . getRegistryName ( ) . func _ 110624 _ b ( ) . equals ( " minecraft " ) ) 
 - + { 
 - + int burnTime = net . minecraftforge . fml . common . registry . GameRegistry . getFuelValue ( p _ 145952 _ 0 _ ) ; 
 - + if ( burnTime ! = 0 ) return burnTime ; 
 - + } 
 
 if ( item = = Item . func _ 150898 _ a ( Blocks . field _ 150376 _ bx ) ) 
 - { 
 - @ @ - 530 , 4 + 535 , 22 @ @ 
 + @ @ - 530 , 4 + 532 , 22 @ @ 
 { 
 this . field _ 145957 _ n . clear ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 index 503a5a2 . . 6ee1fa1 100644 
 - - - a / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 + + + b / src / main / java / net / minecraftforge / event / ForgeEventFactory . java 
 @ @ - 37 , 6 + 37 , 7 @ @ import net . minecraft . entity . passive . EntityAnimal ; 
 import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . entity . player . EntityPlayer . SleepResult ; 
 import net . minecraft . init . Blocks ; 
 + import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . tileentity . TileEntity ; 
 import net . minecraft . util . ActionResult ; 
 @ @ - 103 , 6 + 104 , 7 @ @ import net . minecraftforge . event . entity . player . PlayerSleepInBedEvent ; 
 import net . minecraftforge . event . entity . player . PlayerWakeUpEvent ; 
 import net . minecraftforge . event . entity . player . SleepingLocationCheckEvent ; 
 import net . minecraftforge . event . entity . player . UseHoeEvent ; 
 + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 import net . minecraftforge . event . terraingen . ChunkGeneratorEvent ; 
 import net . minecraftforge . event . terraingen . PopulateChunkEvent ; 
 import net . minecraftforge . event . world . BlockEvent ; 
 @ @ - 115 , 6 + 117 , 7 @ @ import net . minecraftforge . event . world . WorldEvent ; 
 import net . minecraftforge . fml . common . ObfuscationReflectionHelper ; 
 import net . minecraftforge . fml . common . eventhandler . Event ; 
 import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 @ @ - 207 , 6 + 210 , 24 @ @ public class ForgeEventFactory 
 return event . getResult ( ) ; 
 } 
 
 + public static int getItemBurnTime ( @ Nonnull ItemStack itemStack ) 
 + { 
 + Item item = itemStack . getItem ( ) ; 
 + int burnTime = item . getItemBurnTime ( itemStack ) ; 
 + FurnaceFuelBurnTimeEvent event = new FurnaceFuelBurnTimeEvent ( itemStack , burnTime ) ; 
 + MinecraftForge . EVENT _ BUS . post ( event ) ; 
 + if ( event . getBurnTime ( ) < 0 ) 
 + { 
 + / / legacy handling 
 + int fuelValue = GameRegistry . getFuelValueLegacy ( itemStack ) ; 
 + if ( fuelValue > 0 ) 
 + { 
 + return fuelValue ; 
 + } 
 + } 
 + return event . getBurnTime ( ) ; 
 + } 
 + 
 public static int getExperienceDrop ( EntityLivingBase entity , EntityPlayer attackingPlayer , int originalExperience ) 
 { 
 LivingExperienceDropEvent event = new LivingExperienceDropEvent ( entity , attackingPlayer , originalExperience ) ; 
 diff - - git a / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java b / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java 
 new file mode 100644 
 index 0000000 . . f332a80 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / event / furnace / FurnaceFuelBurnTimeEvent . java 
 @ @ - 0 , 0 + 1 , 86 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . event . furnace ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . event . ForgeEventFactory ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + 
 + / * * 
 + * { @ link FurnaceFuelBurnTimeEvent } is fired when determining the fuel value for an ItemStack . < br > 
 + * < br > 
 + * To set the burn time of your own item , use { @ link Item # getItemBurnTime ( ItemStack ) } instead . < br > 
 + * < br > 
 + * This event is fired from { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } . < br > 
 + * < br > 
 + * This event is { @ link Cancelable } to prevent later handlers from changing the value . < br > 
 + * < br > 
 + * This event does not have a result . { @ link HasResult } < br > 
 + * < br > 
 + * This event is fired on the { @ link MinecraftForge # EVENT _ BUS } . 
 + * * / 
 + @ Cancelable 
 + public class FurnaceFuelBurnTimeEvent extends Event 
 + { 
 + @ Nonnull 
 + private final ItemStack itemStack ; 
 + private int burnTime ; 
 + 
 + public FurnaceFuelBurnTimeEvent ( @ Nonnull ItemStack itemStack , int burnTime ) 
 + { 
 + this . itemStack = itemStack ; 
 + this . burnTime = burnTime ; 
 + } 
 + 
 + / * * 
 + * Get the ItemStack " fuel " in question . 
 + * / 
 + @ Nonnull 
 + public ItemStack getItemStack ( ) 
 + { 
 + return itemStack ; 
 + } 
 + 
 + / * * 
 + * Set the burn time for the given ItemStack . 
 + * Setting it to 0 will prevent the item from being used as fuel , overriding vanilla ' s decision . 
 + * Setting it to - 1 will let vanilla decide on the fuel value , this is the default . 
 + * / 
 + public void setBurnTime ( int burnTime ) 
 + { 
 + this . burnTime = burnTime ; 
 + setCanceled ( true ) ; 
 + } 
 + 
 + / * * 
 + * The resulting value of this event , the burn time for the ItemStack . 
 + * A value of 0 will prevent the item from being used as fuel , overriding vanilla ' s decision . 
 + * A value of - 1 will let vanilla decide on the fuel value , this is the default for { @ link Item # getItemBurnTime ( ItemStack ) } . 
 + * / 
 + public int getBurnTime ( ) 
 + { 
 + return burnTime ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java b / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java 
 index 253706e . . 1b3d57b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / IFuelHandler . java 
 @ @ - 19 , 8 + 19 , 14 @ @ 
 
 package net . minecraftforge . fml . common ; 
 
 + import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 
 + / * * 
 + * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . 
 + * / 
 + @ Deprecated 
 public interface IFuelHandler 
 { 
 int getBurnTime ( ItemStack fuel ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index 8f092fd . . 5afb318 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 37 , 7 + 37 , 6 @ @ import net . minecraft . command . EntitySelector ; 
 import net . minecraft . command . ICommandSender ; 
 import net . minecraft . entity . Entity ; 
 import net . minecraft . item . Item ; 
 - import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . item . crafting . FurnaceRecipes ; 
 import net . minecraft . item . crafting . Ingredient ; 
 @ @ - 56 , 6 + 55 , 8 @ @ import net . minecraft . world . chunk . IChunkProvider ; 
 import net . minecraft . world . gen . IChunkGenerator ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 import net . minecraftforge . common . crafting . CraftingHelper . ShapedPrimer ; 
 + import net . minecraftforge . event . ForgeEventFactory ; 
 + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . IFuelHandler ; 
 import net . minecraftforge . fml . common . IWorldGenerator ; 
 @ @ - 65 , 8 + 66 , 6 @ @ import net . minecraftforge . registries . IForgeRegistryEntry ; 
 import net . minecraftforge . registries . RegistryManager ; 
 import net . minecraftforge . fml . common . IEntitySelectorFactory ; 
 
 - import org . apache . logging . log4j . Level ; 
 - 
 import com . google . common . base . Strings ; 
 import com . google . common . base . Throwables ; 
 import com . google . common . collect . ImmutableList ; 
 @ @ - 237 , 13 + 236 , 30 @ @ public class GameRegistry 
 TileEntity . register ( key , tileEntityClass ) ; 
 } 
 
 + / * * 
 + * @ deprecated set your item ' s { @ link Item # getItemBurnTime ( ItemStack ) } or subscribe to { @ link FurnaceFuelBurnTimeEvent } instead . 
 + * / 
 + @ Deprecated 
 public static void registerFuelHandler ( IFuelHandler handler ) 
 { 
 fuelHandlers . add ( handler ) ; 
 } 
 
 + / * * 
 + * @ deprecated use { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } 
 + * / 
 + @ Deprecated 
 public static int getFuelValue ( @ Nonnull ItemStack itemStack ) 
 { 
 + return ForgeEventFactory . getItemBurnTime ( itemStack ) ; 
 + } 
 + 
 + / * * 
 + * @ deprecated use { @ link ForgeEventFactory # getItemBurnTime ( ItemStack ) } 
 + * / 
 + @ Deprecated 
 + public static int getFuelValueLegacy ( @ Nonnull ItemStack itemStack ) 
 + { 
 int fuelValue = 0 ; 
 for ( IFuelHandler handler : fuelHandlers ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java b / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java 
 new file mode 100644 
 index 0000000 . . 5802c0d 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / FurnaceFuelBurnTimeEventTest . java 
 @ @ - 0 , 0 + 1 , 111 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . client . renderer . block . model . ModelBakery ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Items ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemSpade ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . event . RegistryEvent ; 
 + import net . minecraftforge . event . furnace . FurnaceFuelBurnTimeEvent ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = FurnaceFuelBurnTimeEventTest . MOD _ ID , name = " Test for FurnaceFuelBurnTimeEvent " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod . EventBusSubscriber 
 + public class FurnaceFuelBurnTimeEventTest 
 + { 
 + public static final String MOD _ ID = " furnacefuelburntimeeventtest " ; 
 + private static final ResourceLocation unburnableWoodShovelName = new ResourceLocation ( MOD _ ID , " unburnable _ wood _ shovel " ) ; 
 + private static final ResourceLocation flammableGoldShovelName = new ResourceLocation ( MOD _ ID , " flammable _ gold _ shovel " ) ; 
 + @ GameRegistry . ObjectHolder ( " unburnable _ wood _ shovel " ) 
 + public static final Item UNBURNABLE _ WOOD _ SHOVEL = null ; 
 + @ GameRegistry . ObjectHolder ( " flammable _ gold _ shovel " ) 
 + public static final Item FLAMMABLE _ GOLD _ SHOVEL = null ; 
 + 
 + @ SubscribeEvent 
 + public static void onFurnaceFuelBurnTimeEvent ( FurnaceFuelBurnTimeEvent event ) 
 + { 
 + ItemStack itemStack = event . getItemStack ( ) ; 
 + Item item = itemStack . getItem ( ) ; 
 + if ( item = = Items . SLIME _ BALL ) 
 + { 
 + event . setBurnTime ( 100 ) ; / / make slime balls burn as fuel in the furnace 
 + } 
 + else if ( item = = Items . WOODEN _ AXE ) 
 + { 
 + event . setBurnTime ( 0 ) ; / / do not allow the wooden axe to be used as fuel 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerItems ( RegistryEvent . Register < Item > event ) 
 + { 
 + event . getRegistry ( ) . register ( new UnburnableWoodShovel ( ) . setRegistryName ( unburnableWoodShovelName ) ) ; 
 + event . getRegistry ( ) . register ( new FlammableGoldShovel ( ) . setRegistryName ( flammableGoldShovelName ) ) ; 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerModels ( ModelRegistryEvent event ) 
 + { 
 + { 
 + final ModelResourceLocation location = new ModelResourceLocation ( unburnableWoodShovelName , " inventory " ) ; 
 + ModelBakery . registerItemVariants ( UNBURNABLE _ WOOD _ SHOVEL , location ) ; 
 + ModelLoader . setCustomMeshDefinition ( UNBURNABLE _ WOOD _ SHOVEL , is - > location ) ; 
 + } 
 + { 
 + final ModelResourceLocation location = new ModelResourceLocation ( flammableGoldShovelName , " inventory " ) ; 
 + ModelBakery . registerItemVariants ( FLAMMABLE _ GOLD _ SHOVEL , location ) ; 
 + ModelLoader . setCustomMeshDefinition ( FLAMMABLE _ GOLD _ SHOVEL , is - > location ) ; 
 + } 
 + } 
 + 
 + public static class UnburnableWoodShovel extends ItemSpade 
 + { 
 + public UnburnableWoodShovel ( ) 
 + { 
 + super ( ToolMaterial . WOOD ) ; 
 + setCreativeTab ( CreativeTabs . TOOLS ) ; 
 + setMaxStackSize ( 1 ) ; 
 + } 
 + 
 + @ Override 
 + public int getItemBurnTime ( ItemStack itemStack ) 
 + { 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public String getItemStackDisplayName ( ItemStack stack ) 
 + { 
 + return " Unburnable Wooden Shovel " ; 
 + } 
 + } 
 + 
 + public static class FlammableGoldShovel extends ItemSpade 
 + { 
 + public FlammableGoldShovel ( ) 
 + { 
 + super ( ToolMaterial . GOLD ) ; 
 + setCreativeTab ( CreativeTabs . TOOLS ) ; 
 + setMaxStackSize ( 1 ) ; 
 + } 
 + 
 + @ Override 
 + public int getItemBurnTime ( ItemStack itemStack ) 
 + { 
 + return 1000 ; 
 + } 
 + 
 + @ Override 
 + public String getItemStackDisplayName ( ItemStack stack ) 
 + { 
 + return " Flammable Golden Shovel " ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json 
 new file mode 100644 
 index 0000000 . . 2dde2f3 
 - - - / dev / null 
 + + + b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / flammable _ gold _ shovel . json 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " parent " : " item / generated " , 
 + " textures " : { 
 + " layer0 " : " items / gold _ shovel " 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json 
 new file mode 100644 
 index 0000000 . . c461880 
 - - - / dev / null 
 + + + b / src / test / resources / assets / furnacefuelburntimeeventtest / models / item / unburnable _ wood _ shovel . json 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + { 
 + " parent " : " item / generated " , 
 + " textures " : { 
 + " layer0 " : " items / wood _ shovel " 
 + } 
 + }

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / event / Event . java b / common / net / minecraftforge / event / Event . java 
 index 15947ca . . bd530ae 100644 
 - - - a / common / net / minecraftforge / event / Event . java 
 + + + b / common / net / minecraftforge / event / Event . java 
 @ @ - 1 , 11 + 1 , 21 @ @ 
 package net . minecraftforge . event ; 
 
 + import static java . lang . annotation . ElementType . TYPE ; 
 + import static java . lang . annotation . RetentionPolicy . RUNTIME ; 
 + 
 + import java . lang . annotation . Retention ; 
 + import java . lang . annotation . Target ; 
 + 
 
 / * * 
 * Base Event class that all other events are derived from 
 * / 
 public class Event 
 { 
 + @ Retention ( value = RUNTIME ) 
 + @ Target ( value = TYPE ) 
 + public @ interface HasResult { } 
 + 
 public enum Result 
 { 
 DENY , 
 @ @ - 15 , 25 + 25 , 31 @ @ public class Event 
 
 private boolean isCanceled = false ; 
 private final boolean isCancelable ; 
 + private Result result = Result . DEFAULT ; 
 + private final boolean hasResult ; 
 private static ListenerList listeners = new ListenerList ( ) ; 
 
 public Event ( ) 
 { 
 setup ( ) ; 
 + isCancelable = hasAnnotation ( Cancelable . class ) ; 
 + hasResult = hasAnnotation ( HasResult . class ) ; 
 + } 
 + 
 + private boolean hasAnnotation ( Class annotation ) 
 + { 
 Class cls = this . getClass ( ) ; 
 - boolean found = false ; 
 while ( cls ! = Event . class ) 
 { 
 if ( cls . isAnnotationPresent ( Cancelable . class ) ) 
 { 
 - found = true ; 
 - break ; 
 + return true ; 
 } 
 cls = cls . getSuperclass ( ) ; 
 } 
 - isCancelable = found ; 
 + return false ; 
 } 
 - 
 + 
 / * * 
 * Determine if this function is cancelable at all . 
 * @ return If access to setCanceled should be allowed 
 @ @ - 42 , 7 + 58 , 7 @ @ public class Event 
 { 
 return isCancelable ; 
 } 
 - 
 + 
 / * * 
 * Determine if this event is canceled and should stop executing . 
 * @ return The current canceled state 
 @ @ - 51 , 7 + 67 , 7 @ @ public class Event 
 { 
 return isCanceled ; 
 } 
 - 
 + 
 / * * 
 * Sets the state of this event , not all events are cancelable , and any attempt to 
 * cancel a event that can ' t be will result in a IllegalArgumentException . 
 @ @ - 68 , 7 + 84 , 35 @ @ public class Event 
 } 
 isCanceled = cancel ; 
 } 
 - 
 + 
 + / * * 
 + * Determines if this event expects a significant result value . 
 + * / 
 + public boolean hasResult ( ) 
 + { 
 + return hasResult ; 
 + } 
 + 
 + / * * 
 + * Returns the value set as the result of this event 
 + * / 
 + public Result getResult ( ) 
 + { 
 + return result ; 
 + } 
 + 
 + / * * 
 + * Sets the result value for this event , not all events can have a result set , and any attempt to 
 + * set a result for a event that isn ' t expecting it will result in a IllegalArgumentException . 
 + * 
 + * The functionality of setting the result is defined on a per - event bases . 
 + * 
 + * @ param value The new result 
 + * / 
 + public void setResult ( Result value ) 
 + { 
 + result = value ; 
 + } 
 / * * 
 * Called by the base constructor , this is used by ASM generated 
 * event classes to setup various functionality such as the listener ' s list . 
 diff - - git a / common / net / minecraftforge / event / entity / UseHoeEvent . java b / common / net / minecraftforge / event / entity / UseHoeEvent . java 
 deleted file mode 100644 
 index c012c91 . . 0000000 
 - - - a / common / net / minecraftforge / event / entity / UseHoeEvent . java 
 + + + / dev / null 
 @ @ - 1 , 40 + 0 , 0 @ @ 
 - package net . minecraftforge . event . entity ; 
 - 
 - import net . minecraft . src . EntityPlayer ; 
 - import net . minecraft . src . ItemStack ; 
 - import net . minecraft . src . World ; 
 - import net . minecraftforge . event . Cancelable ; 
 - import net . minecraftforge . event . entity . player . PlayerEvent ; 
 - 
 - @ Cancelable 
 - public class UseHoeEvent extends PlayerEvent 
 - { 
 - 
 - public final ItemStack current ; 
 - public final World world ; 
 - public final int x ; 
 - public final int y ; 
 - public final int z ; 
 - 
 - private boolean handeled = false ; 
 - 
 - public UseHoeEvent ( EntityPlayer player , ItemStack current , World world , int x , int y , int z ) 
 - { 
 - super ( player ) ; 
 - this . current = current ; 
 - this . world = world ; 
 - this . x = x ; 
 - this . y = y ; 
 - this . z = z ; 
 - } 
 - 
 - public boolean isHandeled ( ) 
 - { 
 - return handeled ; 
 - } 
 - 
 - public void setHandeled ( ) 
 - { 
 - handeled = true ; 
 - } 
 - } 
 diff - - git a / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java b / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java 
 index f6e555e . . 2186967 100644 
 - - - a / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java 
 + + + b / common / net / minecraftforge / event / entity / living / LivingSpecialSpawnEvent . java 
 @ @ - 2 , 7 + 2 , 9 @ @ package net . minecraftforge . event . entity . living ; 
 
 import net . minecraft . src . EntityLiving ; 
 import net . minecraft . src . World ; 
 + import net . minecraftforge . event . Cancelable ; 
 
 + @ Cancelable 
 public class LivingSpecialSpawnEvent extends LivingEvent 
 { 
 public final World world ; 
 @ @ - 19 , 14 + 21 , 4 @ @ public class LivingSpecialSpawnEvent extends LivingEvent 
 this . y = y ; 
 this . z = z ; 
 } 
 - 
 - public void setHandeled ( ) 
 - { 
 - handeled = true ; 
 - } 
 - 
 - public boolean isHandeled ( ) 
 - { 
 - return handeled ; 
 - } 
 } 
 diff - - git a / common / net / minecraftforge / event / entity / player / BonemealEvent . java b / common / net / minecraftforge / event / entity / player / BonemealEvent . java 
 index 8126d71 . . 894d431 100644 
 - - - a / common / net / minecraftforge / event / entity / player / BonemealEvent . java 
 + + + b / common / net / minecraftforge / event / entity / player / BonemealEvent . java 
 @ @ - 3 , 16 + 3 , 27 @ @ package net . minecraftforge . event . entity . player ; 
 import net . minecraft . src . EntityPlayer ; 
 import net . minecraft . src . World ; 
 import net . minecraftforge . event . Cancelable ; 
 + import net . minecraftforge . event . Event ; 
 
 @ Cancelable 
 + @ Event . HasResult 
 public class BonemealEvent extends PlayerEvent 
 { 
 + / * * 
 + * This event is called when a player attempts to use Bonemeal on a block . 
 + * It can be canceled to completely prevent any further processing . 
 + * 
 + * You can also set the result to ALLOW to mark the event as processed 
 + * and use up a bonemeal from the stack but do no further processing . 
 + * 
 + * setResult ( ALLOW ) is the same as the old setHandeled ( ) 
 + * / 
 + 
 public final World world ; 
 public final int ID ; 
 public final int X ; 
 public final int Y ; 
 public final int Z ; 
 - private boolean handeled = false ; 
 
 public BonemealEvent ( EntityPlayer player , World world , int id , int x , int y , int z ) 
 { 
 @ @ - 23 , 14 + 34 , 4 @ @ public class BonemealEvent extends PlayerEvent 
 this . Y = y ; 
 this . Z = z ; 
 } 
 - 
 - public void setHandeled ( ) 
 - { 
 - handeled = true ; 
 - } 
 - 
 - public boolean isHandeled ( ) 
 - { 
 - return handeled ; 
 - } 
 } 
 diff - - git a / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java b / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java 
 index 5d2156e . . 8a690dc 100644 
 - - - a / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java 
 + + + b / common / net / minecraftforge / event / entity / player / EntityItemPickupEvent . java 
 @ @ - 4 , 26 + 4 , 29 @ @ import net . minecraft . src . Entity ; 
 import net . minecraft . src . EntityItem ; 
 import net . minecraft . src . EntityPlayer ; 
 import net . minecraftforge . event . Cancelable ; 
 + import net . minecraftforge . event . Event ; 
 
 @ Cancelable 
 + @ Event . HasResult 
 public class EntityItemPickupEvent extends PlayerEvent 
 { 
 + / * * 
 + * This event is called when a player collides with a EntityItem on the ground . 
 + * The event can be canceled , and no further processing will be done . 
 + * 
 + * You can set the result of this event to ALLOW which will trigger the 
 + * processing of achievements , FML ' s event , play the sound , and kill the 
 + * entity if all the items are picked up . 
 + * 
 + * setResult ( ALLOW ) is the same as the old setHandled ( ) 
 + * / 
 + 
 public final EntityItem item ; 
 private boolean handled = false ; 
 - 
 + 
 public EntityItemPickupEvent ( EntityPlayer player , EntityItem item ) 
 { 
 super ( player ) ; 
 this . item = item ; 
 } 
 - 
 - public boolean isHandled ( ) 
 - { 
 - return handled ; 
 - } 
 - 
 - public void setHandled ( ) 
 - { 
 - handled = true ; 
 - } 
 } 
 diff - - git a / common / net / minecraftforge / event / entity / player / FillBucketEvent . java b / common / net / minecraftforge / event / entity / player / FillBucketEvent . java 
 index c110fba . . e09b454 100644 
 - - - a / common / net / minecraftforge / event / entity / player / FillBucketEvent . java 
 + + + b / common / net / minecraftforge / event / entity / player / FillBucketEvent . java 
 @ @ - 5 , 17 + 5 , 28 @ @ import net . minecraft . src . ItemStack ; 
 import net . minecraft . src . MovingObjectPosition ; 
 import net . minecraft . src . World ; 
 import net . minecraftforge . event . Cancelable ; 
 + import net . minecraftforge . event . Event ; 
 
 @ Cancelable 
 + @ Event . HasResult 
 public class FillBucketEvent extends PlayerEvent 
 { 
 + / * * 
 + * This event is fired when a player attempts to use a Empty bucket , it 
 + * can be canceled to completely prevent any further processing . 
 + * 
 + * If you set the result to ' ALLOW ' , it means that you have processed 
 + * the event and wants the basic functionality of adding the new 
 + * ItemStack to your inventory and reducing the stack size to process . 
 + * setResult ( ALLOW ) is the same as the old setHandeled ( ) ; 
 + * / 
 + 
 public final ItemStack current ; 
 public final World world ; 
 public final MovingObjectPosition target ; 
 - 
 + 
 public ItemStack result ; 
 - private boolean handeled = false ; 
 - 
 + 
 public FillBucketEvent ( EntityPlayer player , ItemStack current , World world , MovingObjectPosition target ) 
 { 
 super ( player ) ; 
 @ @ - 23 , 14 + 34 , 4 @ @ public class FillBucketEvent extends PlayerEvent 
 this . world = world ; 
 this . target = target ; 
 } 
 - 
 - public boolean isHandeled ( ) 
 - { 
 - return handeled ; 
 - } 
 - 
 - public void setHandeled ( ) 
 - { 
 - handeled = true ; 
 - } 
 } 
 diff - - git a / common / net / minecraftforge / event / entity / player / UseHoeEvent . java b / common / net / minecraftforge / event / entity / player / UseHoeEvent . java 
 new file mode 100644 
 index 0000000 . . ac8793b 
 - - - / dev / null 
 + + + b / common / net / minecraftforge / event / entity / player / UseHoeEvent . java 
 @ @ - 0 , 0 + 1 , 40 @ @ 
 + package net . minecraftforge . event . entity . player ; 
 + 
 + import net . minecraft . src . EntityPlayer ; 
 + import net . minecraft . src . ItemStack ; 
 + import net . minecraft . src . World ; 
 + import net . minecraftforge . event . Cancelable ; 
 + import net . minecraftforge . event . Event ; 
 + 
 + @ Cancelable 
 + @ Event . HasResult 
 + public class UseHoeEvent extends PlayerEvent 
 + { 
 + / * * 
 + * This event is fired when a player attempts to use a Hoe on a block , it 
 + * can be canceled to completely prevent any further processing . 
 + * 
 + * You can also set the result to ALLOW to mark the event as processed 
 + * and damage the hoe . 
 + * 
 + * setResult ( ALLOW ) is the same as the old setHandeled ( ) ; 
 + * / 
 + 
 + public final ItemStack current ; 
 + public final World world ; 
 + public final int x ; 
 + public final int y ; 
 + public final int z ; 
 + 
 + private boolean handeled = false ; 
 + 
 + public UseHoeEvent ( EntityPlayer player , ItemStack current , World world , int x , int y , int z ) 
 + { 
 + super ( player ) ; 
 + this . current = current ; 
 + this . world = world ; 
 + this . x = x ; 
 + this . y = y ; 
 + this . z = z ; 
 + } 
 + } 
 diff - - git a / patches / common / net / minecraft / src / EntityItem . java . patch b / patches / common / net / minecraft / src / EntityItem . java . patch 
 index a038362 . . 4e2edaf 100644 
 - - - a / patches / common / net / minecraft / src / EntityItem . java . patch 
 + + + b / patches / common / net / minecraft / src / EntityItem . java . patch 
 @ @ - 1 , 17 + 1 , 18 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / EntityItem . java 
 + + + . . / src _ work / common / net / minecraft / src / EntityItem . java 
 - @ @ - 1 , 6 + 1 , 10 @ @ 
 + @ @ - 1 , 6 + 1 , 11 @ @ 
 package net . minecraft . src ; 
 
 import java . util . Iterator ; 
 + 
 + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . Event . Result ; 
 + import net . minecraftforge . event . entity . item . ItemExpireEvent ; 
 + import net . minecraftforge . event . entity . player . EntityItemPickupEvent ; 
 
 import cpw . mods . fml . common . registry . GameRegistry ; 
 
 - @ @ - 20 , 6 + 24 , 11 @ @ 
 + @ @ - 20 , 6 + 25 , 11 @ @ 
 
 / * * The EntityItem ' s random initial float height . * / 
 public float hoverStart = ( float ) ( Math . random ( ) * Math . PI * 2 . 0D ) ; 
 @ @ - 23 , 7 + 24 , 7 @ @ 
 
 public EntityItem ( World par1World , double par2 , double par4 , double par6 , ItemStack par8ItemStack ) 
 { 
 - @ @ - 32 , 6 + 41 , 7 @ @ 
 + @ @ - 32 , 6 + 42 , 7 @ @ 
 this . motionX = ( double ) ( ( float ) ( Math . random ( ) * 0 . 20000000298023224D - 0 . 10000000149011612D ) ) ; 
 this . motionY = 0 . 20000000298023224D ; 
 this . motionZ = ( double ) ( ( float ) ( Math . random ( ) * 0 . 20000000298023224D - 0 . 10000000149011612D ) ) ; 
 @ @ - 31 , 7 + 32 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 118 , 7 + 128 , 20 @ @ 
 + @ @ - 118 , 7 + 129 , 20 @ @ 
 
 + + this . age ; 
 
 @ @ - 53 , 7 + 54 , 7 @ @ 
 { 
 this . setDead ( ) ; 
 } 
 - @ @ - 215 , 6 + 238 , 7 @ @ 
 + @ @ - 215 , 6 + 239 , 7 @ @ 
 { 
 par1NBTTagCompound . setShort ( " Health " , ( short ) ( ( byte ) this . health ) ) ; 
 par1NBTTagCompound . setShort ( " Age " , ( short ) this . age ) ; 
 @ @ - 61 , 7 + 62 , 7 @ @ 
 
 if ( this . item ! = null ) 
 { 
 - @ @ - 232 , 10 + 256 , 15 @ @ 
 + @ @ - 232 , 10 + 257 , 15 @ @ 
 NBTTagCompound var2 = par1NBTTagCompound . getCompoundTag ( " Item " ) ; 
 this . item = ItemStack . loadItemStackFromNBT ( var2 ) ; 
 
 @ @ - 78 , 7 + 79 , 7 @ @ 
 } 
 
 / * * 
 - @ @ - 245 , 9 + 274 , 21 @ @ 
 + @ @ - 245 , 9 + 275 , 21 @ @ 
 { 
 if ( ! this . worldObj . isRemote ) 
 { 
 @ @ - 97 , 7 + 98 , 7 @ @ 
 int var2 = this . item . stackSize ; 
 
 - if ( this . delayBeforeCanPickup = = 0 & & par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) 
 - + if ( this . delayBeforeCanPickup < = 0 & & ( event . isHandled ( ) | | var2 < = 0 | | par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) ) 
 + + if ( this . delayBeforeCanPickup < = 0 & & ( event . getResult ( ) = = Result . ALLOW | | var2 < = 0 | | par1EntityPlayer . inventory . addItemStackToInventory ( this . item ) ) ) 
 { 
 if ( this . item . itemID = = Block . wood . blockID ) 
 { 
 diff - - git a / patches / common / net / minecraft / src / ItemBucket . java . patch b / patches / common / net / minecraft / src / ItemBucket . java . patch 
 index 4da9c72 . . f6b0a12 100644 
 - - - a / patches / common / net / minecraft / src / ItemBucket . java . patch 
 + + + b / patches / common / net / minecraft / src / ItemBucket . java . patch 
 @ @ - 1 , 14 + 1 , 15 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / ItemBucket . java 
 + + + . . / src _ work / common / net / minecraft / src / ItemBucket . java 
 - @ @ - 1 , 4 + 1 , 7 @ @ 
 + @ @ - 1 , 4 + 1 , 8 @ @ 
 package net . minecraft . src ; 
 + 
 + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . Event ; 
 + import net . minecraftforge . event . entity . player . FillBucketEvent ; 
 
 public class ItemBucket extends Item 
 { 
 - @ @ - 31 , 6 + 34 , 32 @ @ 
 + @ @ - 31 , 6 + 35 , 32 @ @ 
 } 
 else 
 { 
 @ @ - 18 , 7 + 19 , 7 @ @ 
 + return par1ItemStack ; 
 + } 
 + 
 - + if ( event . isHandeled ( ) ) 
 + + if ( event . getResult ( ) = = Event . Result . ALLOW ) 
 + { 
 + if ( par3EntityPlayer . capabilities . isCreativeMode ) 
 + { 
 diff - - git a / patches / common / net / minecraft / src / ItemDye . java . patch b / patches / common / net / minecraft / src / ItemDye . java . patch 
 index c8c7ef6 . . 9df29f0 100644 
 - - - a / patches / common / net / minecraft / src / ItemDye . java . patch 
 + + + b / patches / common / net / minecraft / src / ItemDye . java . patch 
 @ @ - 1 , 17 + 1 , 18 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / ItemDye . java 
 + + + . . / src _ work / common / net / minecraft / src / ItemDye . java 
 - @ @ - 3 , 6 + 3 , 10 @ @ 
 + @ @ - 3 , 6 + 3 , 11 @ @ 
 import cpw . mods . fml . common . Side ; 
 import cpw . mods . fml . common . asm . SideOnly ; 
 import java . util . List ; 
 + 
 + import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + + import net . minecraftforge . event . Event . Result ; 
 + import net . minecraftforge . event . entity . player . BonemealEvent ; 
 
 public class ItemDye extends Item 
 { 
 - @ @ - 53 , 6 + 57 , 21 @ @ 
 + @ @ - 53 , 6 + 58 , 21 @ @ 
 if ( par1ItemStack . getItemDamage ( ) = = 15 ) 
 { 
 var11 = par3World . getBlockId ( par4 , par5 , par6 ) ; 
 @ @ - 22 , 9 + 23 , 9 @ @ 
 + return false ; 
 + } 
 + 
 - + if ( event . isHandeled ( ) ) 
 + + if ( event . getResult ( ) = = Result . ALLOW ) 
 + { 
 - + if ( ! par3World . isRemote ) 
 + + if ( ! par3World . isRemote ) 
 + { 
 + par1ItemStack . stackSize - - ; 
 + } 
 @ @ - 33 , 7 + 34 , 7 @ @ 
 
 if ( var11 = = Block . sapling . blockID ) 
 { 
 - @ @ - 152 , 16 + 171 , 9 @ @ 
 + @ @ - 152 , 16 + 172 , 9 @ @ 
 par3World . setBlockAndMetadataWithNotify ( var13 , var14 , var15 , Block . tallGrass . blockID , 1 ) ; 
 } 
 } 
 diff - - git a / patches / common / net / minecraft / src / ItemHoe . java . patch b / patches / common / net / minecraft / src / ItemHoe . java . patch 
 index 6565cee . . 4605d0c 100644 
 - - - a / patches / common / net / minecraft / src / ItemHoe . java . patch 
 + + + b / patches / common / net / minecraft / src / ItemHoe . java . patch 
 @ @ - 1 , 14 + 1 , 15 @ @ 
 - - - . . / src _ base / common / net / minecraft / src / ItemHoe . java 
 + + + . . / src _ work / common / net / minecraft / src / ItemHoe . java 
 - @ @ - 1 , 5 + 1 , 7 @ @ 
 + @ @ - 1 , 5 + 1 , 8 @ @ 
 package net . minecraft . src ; 
 
 + import net . minecraftforge . common . MinecraftForge ; 
 - + import net . minecraftforge . event . entity . UseHoeEvent ; 
 + + import net . minecraftforge . event . Event . Result ; 
 + + import net . minecraftforge . event . entity . player . UseHoeEvent ; 
 import cpw . mods . fml . common . Side ; 
 import cpw . mods . fml . common . asm . SideOnly ; 
 
 - @ @ - 28 , 6 + 30 , 17 @ @ 
 + @ @ - 28 , 6 + 31 , 18 @ @ 
 } 
 else 
 { 
 @ @ - 17 , 7 + 18 , 8 @ @ 
 + { 
 + return false ; 
 + } 
 - + if ( event . isHandeled ( ) ) 
 + + 
 + + if ( event . getResult ( ) = = Result . ALLOW ) 
 + { 
 + par1ItemStack . damageItem ( 1 , par2EntityPlayer ) ; 
 + return true ; 
 diff - - git a / patches / common / net / minecraft / src / SpawnerAnimals . java . patch b / patches / common / net / minecraft / src / SpawnerAnimals . java . patch 
 index f5726b9 . . fffe071 100644 
 - - - a / patches / common / net / minecraft / src / SpawnerAnimals . java . patch 
 + + + b / patches / common / net / minecraft / src / SpawnerAnimals . java . patch 
 @ @ - 35 , 13 + 35 , 11 @ @ 
 } 
 } 
 
 - @ @ - 216 , 6 + 225 , 13 @ @ 
 + @ @ - 216 , 6 + 225 , 11 @ @ 
 * / 
 private static void creatureSpecificInit ( EntityLiving par0EntityLiving , World par1World , float par2 , float par3 , float par4 ) 
 { 
 - + LivingSpecialSpawnEvent event = new LivingSpecialSpawnEvent ( par0EntityLiving , par1World , par2 , par3 , par4 ) ; 
 - + MinecraftForge . EVENT _ BUS . post ( event ) ; 
 - + if ( event . isHandeled ( ) ) 
 + + if ( MinecraftForge . EVENT _ BUS . post ( new LivingSpecialSpawnEvent ( par0EntityLiving , par1World , par2 , par3 , par4 ) ) ) 
 + { 
 + return ; 
 + }
