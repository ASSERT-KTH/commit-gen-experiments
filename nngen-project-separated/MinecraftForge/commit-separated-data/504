BLEU SCORE: 0.04085507150363301

TEST MSG: Fix English injection for some mods on dedicated server .
GENERATED MSG: Fixed zip being closed too early in the server language loading .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index c2fb091 . . 32a83db 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 231 , 7 + 231 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> - String langFile = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ US . lang " ; <nl> + String langFile = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ us . lang " ; <nl> + String langFile2 = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ US . lang " ; <nl> File source = container . getSource ( ) ; <nl> InputStream stream = null ; <nl> ZipFile zip = null ; <nl> @ @ - 239 , 17 + 240 , 27 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> if ( source . isDirectory ( ) & & ( Boolean ) Launch . blackboard . get ( " fml . deobfuscatedEnvironment " ) ) <nl> { <nl> - stream = new FileInputStream ( new File ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ) ; <nl> + File f = new File ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ; <nl> + if ( ! f . exists ( ) ) <nl> + f = new File ( source . toURI ( ) . resolve ( langFile2 ) . getPath ( ) ) ; <nl> + if ( ! f . exists ( ) ) <nl> + throw new FileNotFoundException ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ; <nl> + stream = new FileInputStream ( f ) ; <nl> } <nl> else <nl> { <nl> zip = new ZipFile ( source ) ; <nl> ZipEntry entry = zip . getEntry ( langFile ) ; <nl> - if ( entry = = null ) throw new FileNotFoundException ( ) ; <nl> + if ( entry = = null ) entry = zip . getEntry ( langFile2 ) ; <nl> + if ( entry = = null ) throw new FileNotFoundException ( langFile ) ; <nl> stream = zip . getInputStream ( entry ) ; <nl> } <nl> LanguageMap . inject ( stream ) ; <nl> } <nl> + catch ( FileNotFoundException e ) <nl> + { <nl> + FMLLog . getLogger ( ) . warn ( " Missing English translation for " + container . getModId ( ) + " : " + e . getMessage ( ) ) ; <nl> + } <nl> catch ( IOException e ) <nl> { <nl> / / hush
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 0a798eb . . 56df1ff 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 13 , 9 + 13 , 11 @ @ <nl> package net . minecraftforge . fml . server ; <nl> <nl> import java . io . * ; <nl> + import java . util . Enumeration ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> + import java . util . zip . ZipEntry ; <nl> import java . util . zip . ZipFile ; <nl> <nl> import net . minecraft . command . ServerCommand ; <nl> @ @ - 234 , 15 + 236 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> } <nl> else <nl> { <nl> - try <nl> - { <nl> - zip = new ZipFile ( source ) ; <nl> - stream = zip . getInputStream ( zip . getEntry ( langFile ) ) ; <nl> - } <nl> - finally <nl> - { <nl> - if ( zip ! = null ) zip . close ( ) ; <nl> - } <nl> + zip = new ZipFile ( source ) ; <nl> + ZipEntry entry = zip . getEntry ( langFile ) ; <nl> + if ( entry = = null ) throw new FileNotFoundException ( ) ; <nl> + stream = zip . getInputStream ( entry ) ; <nl> } <nl> LanguageMap . inject ( stream ) ; <nl> } <nl> @ @ - 257 , 6 + 254 , 14 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> finally <nl> { <nl> IOUtils . closeQuietly ( stream ) ; <nl> + try <nl> + { <nl> + zip . close ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + / / shush <nl> + } <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index c2fb091 . . 32a83db 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 231 , 7 + 231 , 8 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 - String langFile = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ US . lang " ; 
 + String langFile = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ us . lang " ; 
 + String langFile2 = " assets / " + container . getModId ( ) . toLowerCase ( ) + " / lang / en _ US . lang " ; 
 File source = container . getSource ( ) ; 
 InputStream stream = null ; 
 ZipFile zip = null ; 
 @ @ - 239 , 17 + 240 , 27 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 if ( source . isDirectory ( ) & & ( Boolean ) Launch . blackboard . get ( " fml . deobfuscatedEnvironment " ) ) 
 { 
 - stream = new FileInputStream ( new File ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ) ; 
 + File f = new File ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ; 
 + if ( ! f . exists ( ) ) 
 + f = new File ( source . toURI ( ) . resolve ( langFile2 ) . getPath ( ) ) ; 
 + if ( ! f . exists ( ) ) 
 + throw new FileNotFoundException ( source . toURI ( ) . resolve ( langFile ) . getPath ( ) ) ; 
 + stream = new FileInputStream ( f ) ; 
 } 
 else 
 { 
 zip = new ZipFile ( source ) ; 
 ZipEntry entry = zip . getEntry ( langFile ) ; 
 - if ( entry = = null ) throw new FileNotFoundException ( ) ; 
 + if ( entry = = null ) entry = zip . getEntry ( langFile2 ) ; 
 + if ( entry = = null ) throw new FileNotFoundException ( langFile ) ; 
 stream = zip . getInputStream ( entry ) ; 
 } 
 LanguageMap . inject ( stream ) ; 
 } 
 + catch ( FileNotFoundException e ) 
 + { 
 + FMLLog . getLogger ( ) . warn ( " Missing English translation for " + container . getModId ( ) + " : " + e . getMessage ( ) ) ; 
 + } 
 catch ( IOException e ) 
 { 
 / / hush

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 0a798eb . . 56df1ff 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 13 , 9 + 13 , 11 @ @ 
 package net . minecraftforge . fml . server ; 
 
 import java . io . * ; 
 + import java . util . Enumeration ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Set ; 
 + import java . util . zip . ZipEntry ; 
 import java . util . zip . ZipFile ; 
 
 import net . minecraft . command . ServerCommand ; 
 @ @ - 234 , 15 + 236 , 10 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 } 
 else 
 { 
 - try 
 - { 
 - zip = new ZipFile ( source ) ; 
 - stream = zip . getInputStream ( zip . getEntry ( langFile ) ) ; 
 - } 
 - finally 
 - { 
 - if ( zip ! = null ) zip . close ( ) ; 
 - } 
 + zip = new ZipFile ( source ) ; 
 + ZipEntry entry = zip . getEntry ( langFile ) ; 
 + if ( entry = = null ) throw new FileNotFoundException ( ) ; 
 + stream = zip . getInputStream ( entry ) ; 
 } 
 LanguageMap . inject ( stream ) ; 
 } 
 @ @ - 257 , 6 + 254 , 14 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 finally 
 { 
 IOUtils . closeQuietly ( stream ) ; 
 + try 
 + { 
 + zip . close ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + / / shush 
 + } 
 } 
 } 

