BLEU SCORE: 0.016932492841722675

TEST MSG: Perspective awareness for vanilla and multi models , fixes # 2148 .
GENERATED MSG: B3D Improvements

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index 186f9e1 . . cd3e1d2 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 198 , 7 + 198 , 7 @ @ public class BlockStateLoader <nl> models . put ( entry . getKey ( ) , Pair . of ( runModelHooks ( model , part . getTextures ( ) , part . getCustomData ( ) ) , partState ) ) ; <nl> } <nl> <nl> - return new MultiModel ( hasBase ? base : null , baseTr , models . build ( ) ) ; <nl> + return new MultiModel ( getModelLocation ( ) , hasBase ? base : null , baseTr , models . build ( ) ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> index cb10dc9 . . d28c175 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java <nl> @ @ - 1 , 12 + 1 , 22 @ @ <nl> package net . minecraftforge . client . model ; <nl> <nl> + import java . util . List ; <nl> + <nl> import javax . vecmath . Matrix4f ; <nl> <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . util . EnumFacing ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> / * <nl> * Model that changes based on the rendering perspective <nl> * ( first - person , GUI , e . t . c - see TransformType ) <nl> @ @ - 18 , 4 + 28 , 49 @ @ public interface IPerspectiveAwareModel extends IBakedModel <nl> * that should be applied to the GL state before rendering it ( matrix may be null ) . <nl> * / <nl> Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) ; <nl> + <nl> + public static class MapWrapper implements IFlexibleBakedModel , IPerspectiveAwareModel <nl> + { <nl> + private final IFlexibleBakedModel parent ; <nl> + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> + <nl> + public MapWrapper ( IFlexibleBakedModel parent , ImmutableMap < TransformType , TRSRTransformation > transforms ) <nl> + { <nl> + this . parent = parent ; <nl> + this . transforms = transforms ; <nl> + } <nl> + <nl> + public MapWrapper ( IFlexibleBakedModel parent , IPerspectiveState state , IModelPart part ) <nl> + { <nl> + this ( parent , getTransforms ( state , part ) ) ; <nl> + } <nl> + <nl> + public static ImmutableMap < TransformType , TRSRTransformation > getTransforms ( IPerspectiveState state , IModelPart part ) <nl> + { <nl> + ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; <nl> + for ( TransformType type : TransformType . values ( ) ) <nl> + { <nl> + builder . put ( type , state . forPerspective ( type ) . apply ( part ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + public boolean isAmbientOcclusion ( ) { return parent . isAmbientOcclusion ( ) ; } <nl> + public boolean isGui3d ( ) { return parent . isGui3d ( ) ; } <nl> + public boolean isBuiltInRenderer ( ) { return parent . isBuiltInRenderer ( ) ; } <nl> + public TextureAtlasSprite getTexture ( ) { return parent . getTexture ( ) ; } <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return parent . getFaceQuads ( side ) ; } <nl> + public List < BakedQuad > getGeneralQuads ( ) { return parent . getGeneralQuads ( ) ; } <nl> + public VertexFormat getFormat ( ) { return parent . getFormat ( ) ; } <nl> + <nl> + @ Override <nl> + public Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> + { <nl> + TRSRTransformation tr = transforms . get ( cameraTransformType ) ; <nl> + Matrix4f mat = null ; <nl> + if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; <nl> + return Pair . of ( ( IBakedModel ) this , mat ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index 6a875f4 . . 8930101 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 94 , 11 + 94 , 7 @ @ public class ItemLayerModel implements IRetexturableModel { <nl> if ( state instanceof IPerspectiveState ) <nl> { <nl> IPerspectiveState ps = ( IPerspectiveState ) state ; <nl> - Map < TransformType , TRSRTransformation > map = Maps . newHashMap ( ) ; <nl> - for ( TransformType type : TransformType . values ( ) ) <nl> - { <nl> - map . put ( type , ps . forPerspective ( type ) . apply ( this ) ) ; <nl> - } <nl> + ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( ps , this ) ; <nl> return new BakedModel ( builder . build ( ) , particle , format , Maps . immutableEnumMap ( map ) ) ; <nl> } <nl> return new BakedModel ( builder . build ( ) , particle , format ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 63e7128 . . 3c36588 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 209 , 7 + 209 , 7 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> return new ResourceLocation ( model . getResourceDomain ( ) , model . getResourcePath ( ) + " . json " ) ; <nl> } <nl> - <nl> + <nl> private void loadAnyModel ( ResourceLocation location ) throws IOException <nl> { <nl> if ( loadingModels . contains ( location ) ) <nl> @ @ - 324 , 17 + 324 , 23 @ @ public class ModelLoader extends ModelBakery <nl> ModelBlock model = this . model ; <nl> if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; <nl> ItemCameraTransforms transforms = new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ; <nl> + boolean uvlock = false ; <nl> + if ( state instanceof UVLock ) <nl> + { <nl> + uvlock = true ; <nl> + state = ( ( UVLock ) state ) . getParent ( ) ; <nl> + } <nl> + IPerspectiveState perState = state instanceof IPerspectiveState ? ( IPerspectiveState ) state : new IPerspectiveState . Impl ( state , transforms ) ; <nl> if ( hasItemModel ( model ) ) <nl> { <nl> - IPerspectiveState perState = state instanceof IPerspectiveState ? ( IPerspectiveState ) state : new IPerspectiveState . Impl ( state , transforms ) ; <nl> return new ItemLayerModel ( model ) . bake ( perState , format , bakedTextureGetter ) ; <nl> } <nl> if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( transforms ) , format ) ; <nl> / / TODO perspective awareness for this <nl> - return bakeNormal ( model , state . apply ( this ) , format , bakedTextureGetter , state instanceof UVLock ) ; <nl> + return bakeNormal ( model , perState , state . apply ( this ) , format , bakedTextureGetter , uvlock ) ; <nl> } <nl> <nl> - private IFlexibleBakedModel bakeNormal ( ModelBlock model , TRSRTransformation state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> + private IFlexibleBakedModel bakeNormal ( ModelBlock model , IPerspectiveState perState , TRSRTransformation state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) <nl> { <nl> TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model ) ) . setTexture ( particle ) ; <nl> @ @ - 355 , 7 + 361 , 7 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> } <nl> <nl> - return new IFlexibleBakedModel . Wrapper ( builder . makeBakedModel ( ) , format ) ; <nl> + return new IPerspectiveAwareModel . MapWrapper ( new IFlexibleBakedModel . Wrapper ( builder . makeBakedModel ( ) , format ) , perState , this ) ; <nl> } <nl> <nl> public IModelState getDefaultState ( ) <nl> @ @ - 427 , 16 + 433 , 21 @ @ public class ModelLoader extends ModelBakery <nl> <nl> public static class UVLock implements IModelState <nl> { <nl> - private final IModelState state ; <nl> + private final IModelState parent ; <nl> + <nl> + public UVLock ( IModelState parent ) <nl> + { <nl> + this . parent = parent ; <nl> + } <nl> <nl> - public UVLock ( IModelState state ) <nl> + public IModelState getParent ( ) <nl> { <nl> - this . state = state ; <nl> + return parent ; <nl> } <nl> <nl> public TRSRTransformation apply ( IModelPart part ) <nl> { <nl> - return state . apply ( part ) ; <nl> + return parent . apply ( part ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> index 221398e . . 18a36c8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java <nl> @ @ - 8 , 14 + 8 , 20 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> + import javax . vecmath . Matrix4f ; <nl> + <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import org . apache . commons . lang3 . tuple . Pair ; <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . collect . ImmutableList ; <nl> @ @ - 25 , 20 + 31 , 26 @ @ import com . google . common . collect . Sets ; <nl> <nl> public class MultiModel implements IModel <nl> { <nl> - public static class Baked implements IFlexibleBakedModel <nl> + public static class Baked implements IFlexibleBakedModel , IPerspectiveAwareModel <nl> { <nl> protected final IFlexibleBakedModel base ; <nl> protected final ImmutableMap < String , IFlexibleBakedModel > parts ; <nl> - <nl> + <nl> protected final IFlexibleBakedModel internalBase ; <nl> protected final ImmutableList < BakedQuad > general ; <nl> protected final ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; <nl> - <nl> + protected final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; <nl> + <nl> public Baked ( IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) <nl> { <nl> + this ( null , false , base , parts ) ; <nl> + } <nl> + <nl> + public Baked ( ResourceLocation location , boolean perspective , IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) <nl> + { <nl> this . base = base ; <nl> this . parts = parts ; <nl> - <nl> + <nl> if ( base ! = null ) <nl> internalBase = base ; <nl> else <nl> @ @ - 47 , 12 + 59 , 12 @ @ public class MultiModel implements IModel <nl> if ( iter . hasNext ( ) ) <nl> internalBase = iter . next ( ) ; <nl> else <nl> - throw new RuntimeException ( " No base model or submodel provided for this MultiModel . Baked . " ) ; <nl> + throw new IllegalArgumentException ( " No base model or submodel provided for MultiModel . Baked " + location + " . " ) ; <nl> } <nl> - <nl> + <nl> / / Create map of each face ' s quads . <nl> EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; <nl> - <nl> + <nl> for ( EnumFacing face : EnumFacing . values ( ) ) <nl> { <nl> ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; <nl> @ @ - 62 , 9 + 74 , 9 @ @ public class MultiModel implements IModel <nl> faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; <nl> faces . put ( face , faceQuads . build ( ) ) ; <nl> } <nl> - <nl> + <nl> this . faces = Maps . immutableEnumMap ( faces ) ; <nl> - <nl> + <nl> / / Create list of general quads . <nl> ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; <nl> if ( base ! = null ) <nl> @ @ - 72 , 8 + 84 , 34 @ @ public class MultiModel implements IModel <nl> for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) <nl> genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; <nl> general = genQuads . build ( ) ; <nl> + <nl> + / / Only changes the base model based on perspective , may recurse for parts in the future . <nl> + if ( perspective & & base instanceof IPerspectiveAwareModel ) <nl> + { <nl> + IPerspectiveAwareModel perBase = ( IPerspectiveAwareModel ) base ; <nl> + ImmutableMap . Builder < TransformType , Pair < Baked , TRSRTransformation > > builder = ImmutableMap . builder ( ) ; <nl> + for ( TransformType type : TransformType . values ( ) ) <nl> + { <nl> + Pair < IBakedModel , Matrix4f > p = perBase . handlePerspective ( type ) ; <nl> + IFlexibleBakedModel newBase ; <nl> + if ( p . getLeft ( ) instanceof IFlexibleBakedModel ) <nl> + { <nl> + newBase = ( IFlexibleBakedModel ) p . getLeft ( ) ; <nl> + } <nl> + else <nl> + { <nl> + newBase = new IFlexibleBakedModel . Wrapper ( p . getLeft ( ) , base . getFormat ( ) ) ; <nl> + } <nl> + builder . put ( type , Pair . of ( new Baked ( location , false , newBase , parts ) , new TRSRTransformation ( p . getRight ( ) ) ) ) ; <nl> + } <nl> + transforms = builder . build ( ) ; <nl> + } <nl> + else <nl> + { <nl> + transforms = ImmutableMap . of ( ) ; <nl> + } <nl> } <nl> - <nl> + <nl> @ Override <nl> public boolean isAmbientOcclusion ( ) <nl> { <nl> @ @ - 121 , 87 + 159 , 113 @ @ public class MultiModel implements IModel <nl> { <nl> return internalBase . getFormat ( ) ; <nl> } <nl> - <nl> + <nl> public IFlexibleBakedModel getBaseModel ( ) <nl> { <nl> return base ; <nl> } <nl> - <nl> + <nl> public Map < String , IFlexibleBakedModel > getParts ( ) <nl> { <nl> return parts ; <nl> } <nl> + <nl> + @ Override <nl> + public Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> + { <nl> + if ( transforms . isEmpty ( ) ) return Pair . of ( this , null ) ; <nl> + Pair < Baked , TRSRTransformation > p = transforms . get ( cameraTransformType ) ; <nl> + return Pair . of ( p . getLeft ( ) , p . getRight ( ) . getMatrix ( ) ) ; <nl> + } <nl> } <nl> - <nl> + <nl> + protected final ResourceLocation location ; <nl> protected final IModel base ; <nl> protected final IModelState baseState ; <nl> protected final Map < String , Pair < IModel , IModelState > > parts ; <nl> - <nl> - public MultiModel ( IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) <nl> + <nl> + public MultiModel ( ResourceLocation location , IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) <nl> { <nl> + this . location = location ; <nl> this . base = base ; <nl> this . baseState = baseState ; <nl> this . parts = parts ; <nl> } <nl> <nl> + public MultiModel ( IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) <nl> + { <nl> + this ( null , base , baseState , parts ) ; <nl> + } <nl> + <nl> public MultiModel ( IModel base , IModelState baseState , Map < String , Pair < IModel , IModelState > > parts ) <nl> { <nl> - this ( base , baseState , ImmutableMap . copyOf ( parts ) ) ; <nl> + this ( null , base , baseState , ImmutableMap . copyOf ( parts ) ) ; <nl> } <nl> - <nl> + <nl> + public MultiModel ( ResourceLocation location , IModel base , IModelState baseState , Map < String , Pair < IModel , IModelState > > parts ) <nl> + { <nl> + this ( location , base , baseState , ImmutableMap . copyOf ( parts ) ) ; <nl> + } <nl> + <nl> @ Override <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> { <nl> Set < ResourceLocation > deps = Sets . newHashSet ( ) ; <nl> - <nl> + <nl> if ( base ! = null ) <nl> deps . addAll ( base . getDependencies ( ) ) ; <nl> - <nl> + <nl> for ( Pair < IModel , IModelState > pair : parts . values ( ) ) <nl> deps . addAll ( pair . getLeft ( ) . getDependencies ( ) ) ; <nl> - <nl> + <nl> return deps ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public Collection < ResourceLocation > getTextures ( ) <nl> { <nl> Set < ResourceLocation > deps = Sets . newHashSet ( ) ; <nl> - <nl> + <nl> if ( base ! = null ) <nl> deps . addAll ( base . getTextures ( ) ) ; <nl> - <nl> + <nl> for ( Pair < IModel , IModelState > pair : parts . values ( ) ) <nl> deps . addAll ( pair . getLeft ( ) . getTextures ( ) ) ; <nl> - <nl> + <nl> return deps ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> IFlexibleBakedModel bakedBase = null ; <nl> - <nl> + <nl> if ( base ! = null ) <nl> bakedBase = base . bake ( state , format , bakedTextureGetter ) ; <nl> - <nl> + <nl> ImmutableMap . Builder < String , IFlexibleBakedModel > mapBuilder = ImmutableMap . builder ( ) ; <nl> - <nl> + <nl> for ( Entry < String , Pair < IModel , IModelState > > entry : parts . entrySet ( ) ) <nl> { <nl> Pair < IModel , IModelState > pair = entry . getValue ( ) ; <nl> mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( pair . getRight ( ) , format , bakedTextureGetter ) ) ; <nl> } <nl> - <nl> - return new Baked ( bakedBase , mapBuilder . build ( ) ) ; <nl> + <nl> + if ( bakedBase = = null & & parts . isEmpty ( ) ) <nl> + { <nl> + FMLLog . log ( Level . ERROR , " MultiModel % s is empty ( no base model or parts were provided / resolved ) " , location ) ; <nl> + IModel missing = ModelLoaderRegistry . getMissingModel ( ) ; <nl> + return missing . bake ( missing . getDefaultState ( ) , format , bakedTextureGetter ) ; <nl> + } <nl> + return new Baked ( location , true , bakedBase , mapBuilder . build ( ) ) ; <nl> } <nl> - <nl> + <nl> @ Override <nl> public IModelState getDefaultState ( ) <nl> { <nl> return baseState ; <nl> } <nl> - <nl> + <nl> / * * <nl> * @ return The base model of this MultiModel . May be null . <nl> * / <nl> @ @ - 209 , 7 + 273 , 7 @ @ public class MultiModel implements IModel <nl> { <nl> return base ; <nl> } <nl> - <nl> + <nl> / * * <nl> * @ return A map of the submodel name to its IModel and IModelState . <nl> * / <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java b / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java <nl> index 697dc86 . . 34d7962 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java <nl> @ @ - 40 , 7 + 40 , 14 @ @ public class TRSRTransformation implements IModelState , ITransformation <nl> <nl> public TRSRTransformation ( Matrix4f matrix ) <nl> { <nl> - this . matrix = matrix ; <nl> + if ( matrix = = null ) <nl> + { <nl> + this . matrix = identity . matrix ; <nl> + } <nl> + else <nl> + { <nl> + this . matrix = matrix ; <nl> + } <nl> } <nl> <nl> public TRSRTransformation ( Vector3f translation , Quat4f leftRot , Vector3f scale , Quat4f rightRot ) <nl> diff - - git a / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json <nl> index 9ee3db7 . . 77d6403 100644 <nl> - - - a / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json <nl> + + + b / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json <nl> @ @ - 3 , 7 + 3 , 8 @ @ <nl> 	 " defaults " : { <nl> 	 	 " textures " : { " wall " : " blocks / cobblestone " } , <nl> 	 	 " model " : " cobblestone _ wall _ post " , <nl> - 	 	 " uvlock " : true 	 / / This and all other properties of " defaults " will be inherited by simple submodels . They will NOT be inherited by named submodels . <nl> + 	 	 " uvlock " : true , 	 / / This and all other properties of " defaults " will be inherited by simple submodels . They will NOT be inherited by named submodels . <nl> + 	 	 " transform " : " forge : default - block " <nl> 	 } , <nl> 	 " variants " : { <nl> 	 	 " north " : { <nl> @ @ - 24 , 6 + 25 , 12 @ @ <nl> 	 	 } , <nl> 	 	 " up " : { " true " : { } , " false " : { } } , 	 / / Must have this in here or the blockstates loader will not know of all the properties and values , and it will create the wrong vanilla state strings . <nl> 	 	 " east = false , north = true , south = true , up = false , west = false " : { " model " : null } , 	 / / Fully specified variant , will inherit from variants above , but remove the model set in " defaults " , removing the wall post . <nl> - 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } <nl> + 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } , <nl> + 	 	 " inventory " : [ { / / inventory variant can be specified here too , and it will inherit properties from " defaults " <nl> + 	 	 submodel : { <nl> + 	 	 " north " : { " model " : " forgeblockstatesloader : wall _ connect " } , <nl> + 	 	 " south " : { " model " : " forgeblockstatesloader : wall _ connect " , " y " : 180 } <nl> + 	 	 } <nl> + 	 	 } ] <nl> 	 } <nl> } <nl> diff - - git a / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json <nl> index 853c9a3 . . bf225df 100644 <nl> - - - a / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json <nl> + + + b / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json <nl> @ @ - 3 , 7 + 3 , 8 @ @ <nl> 	 " defaults " : { <nl> 	 	 " textures " : { " wall " : " blocks / cobblestone _ mossy " } , <nl> 	 	 " model " : " cobblestone _ wall _ post " , <nl> - 	 	 " uvlock " : true <nl> + 	 	 " uvlock " : true , <nl> + 	 	 " transform " : " forge : default - block " <nl> 	 } , <nl> 	 " variants " : { <nl> 	 	 " north " : { <nl> @ @ - 24 , 6 + 25 , 12 @ @ <nl> 	 	 } , <nl> 	 	 " up " : { " true " : { } , " false " : { } } , <nl> 	 	 " east = false , north = true , south = true , up = false , west = false " : { " model " : null } , <nl> - 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } <nl> + 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } , <nl> + 	 	 " inventory " : [ { / / inventory variant can be specified here too , and it will inherit properties from " defaults " <nl> + 	 	 submodel : { <nl> + 	 	 " north " : { " model " : " forgeblockstatesloader : wall _ connect " } , <nl> + 	 	 " south " : { " model " : " forgeblockstatesloader : wall _ connect " , " y " : 180 } <nl> + 	 	 } <nl> + 	 	 } ] <nl> 	 } <nl> } <nl> diff - - git a / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json <nl> deleted file mode 100644 <nl> index 079cb13 . . 0000000 <nl> - - - a / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - { <nl> - " parent " : " block / wall _ inventory " , <nl> - " textures " : { <nl> - " wall " : " blocks / cobblestone " <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json <nl> deleted file mode 100644 <nl> index f5f126f . . 0000000 <nl> - - - a / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json <nl> + + + / dev / null <nl> @ @ - 1 , 6 + 0 , 0 @ @ <nl> - { <nl> - " parent " : " block / wall _ inventory " , <nl> - " textures " : { <nl> - " wall " : " blocks / cobblestone _ mossy " <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> index 6bd2f3f . . b192639 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> @ @ - 2 , 34 + 2 , 24 @ @ <nl> " forge _ marker " : 1 , <nl> " defaults " : { <nl> " textures " : { <nl> - " # texture " : " forgedebugmodelloaderregistry : texture " , <nl> + / / " # texture " : " forgedebugmodelloaderregistry : texture " , <nl> " # chest " : " entity / chest / normal " <nl> } , <nl> - " model " : " forgedebugmodelloaderregistry : chest . b3d " <nl> + " model " : " forgedebugmodelloaderregistry : chest . b3d " , <nl> + " transform " : " forge : default - block " <nl> } , <nl> " variants " : { <nl> - " normal " : [ { <nl> - / * " transform " : { <nl> - " rotation " : { " y " : 45 } <nl> - } * / <nl> - } ] , <nl> + " normal " : [ { } ] , <nl> " inventory " : [ { <nl> - / * " transform " : { <nl> - " thirdperson " : { <nl> - " translation " : [ 0 , 0 . 09375 , - 0 . 171875 ] , <nl> - " rotation " : [ { " y " : - 45 } , { " x " : 10 } , { " z " : 170 } ] , <nl> - " scale " : 0 . 375 <nl> - } <nl> - } * / <nl> - " transform " : " forge : default - block " <nl> + " y " : 180 <nl> } ] , <nl> " facing " : { <nl> - " down " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 90 } , <nl> - " up " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 270 } , <nl> - " north " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " } , <nl> - " south " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 180 } , <nl> - " west " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 270 } , <nl> - " east " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 90 } <nl> + " down " : { " x " : 90 } , <nl> + " up " : { " x " : 270 } , <nl> + " north " : { " y " : 180 } , <nl> + " south " : { } , <nl> + " west " : { " y " : 90 } , <nl> + " east " : { " y " : 270 } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index ca6ab30 . . 46f1c46 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; <nl> import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> + import net . minecraftforge . client . model . IModelCustomData ; <nl> import net . minecraftforge . client . model . IModelPart ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . IRetexturableModel ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . BufferUtils ; <nl> <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . collect . Collections2 ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> <nl> / * <nl> @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader <nl> public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) <nl> { <nl> TRSRTransformation ret = TRSRTransformation . identity ( ) ; <nl> - if ( node . getParent ( ) ! = null ) <nl> - { <nl> - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> - ret = ret . compose ( pm ) ; <nl> - } <nl> Key key = null ; <nl> if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; <nl> else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; <nl> - if ( key = = null ) <nl> - { <nl> - FMLLog . severe ( " invalid key index : " + frame ) ; <nl> - } <nl> - else <nl> + if ( key ! = null ) <nl> { <nl> + Node < ? > parent = node . getParent ( ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> + ret = ret . compose ( pm ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; <nl> + } <nl> ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; <nl> Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; <nl> rm . invert ( ) ; <nl> ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; <nl> + rm . invert ( ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + } <nl> } <nl> return ret ; <nl> } <nl> @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> } <nl> <nl> - public static class Wrapper extends PartWrapper < Mesh > implements IModel <nl> + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData <nl> { <nl> private final ResourceLocation location ; <nl> private final ImmutableMap < String , ResourceLocation > textures ; <nl> <nl> public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) <nl> { <nl> - this ( location , buildTextures ( location , textures ) , mesh ) ; <nl> + this ( location , buildTextures ( textures ) , mesh ) ; <nl> } <nl> <nl> public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) <nl> @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader <nl> this . textures = textures ; <nl> } <nl> <nl> - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) <nl> + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) <nl> { <nl> ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> <nl> for ( Texture t : textures ) <nl> { <nl> String path = t . getPath ( ) ; <nl> - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; <nl> + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; <nl> } <nl> return builder . build ( ) ; <nl> } <nl> <nl> + private static String getLocation ( String path ) <nl> + { <nl> + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> + return path ; <nl> + } <nl> + <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> { <nl> / / no dependencies for in - file models <nl> @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader <nl> <nl> public Collection < ResourceLocation > getTextures ( ) <nl> { <nl> - return textures . values ( ) ; <nl> + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) <nl> + { <nl> + public boolean apply ( ResourceLocation loc ) <nl> + { <nl> + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; <nl> - for ( String path : textures . keySet ( ) ) <nl> + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) <nl> { <nl> - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; <nl> + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) <nl> + { <nl> + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; <nl> + builder . put ( e . getKey ( ) , missing ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; <nl> + } <nl> } <nl> - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; <nl> + builder . put ( " missingno " , missing ) ; <nl> return new BakedWrapper ( this , state , format , builder . build ( ) ) ; <nl> } <nl> <nl> @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader <nl> else if ( ! location . equals ( other . location ) ) return false ; <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) <nl> + { <nl> + String path = e . getKey ( ) ; <nl> + String loc = getLocation ( path ) ; <nl> + if ( textures . containsKey ( loc ) ) <nl> + { <nl> + String newLoc = textures . get ( loc ) ; <nl> + if ( newLoc = = null ) newLoc = getLocation ( path ) ; <nl> + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e ) ; <nl> + } <nl> + } <nl> + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> + { <nl> + / / TODO keyframe <nl> + return null ; <nl> + } <nl> } <nl> <nl> private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel <nl> @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader <nl> for ( Face f : faces ) <nl> { <nl> buf . clear ( ) ; <nl> - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; <nl> + List < Texture > textures = null ; <nl> + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; <nl> TextureAtlasSprite sprite ; <nl> - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; <nl> else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; <nl> putVertexData ( f . getV1 ( ) , sprite ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 3fe304b . . 2358b93 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug <nl> <nl> private void clientPreInit ( ) <nl> { <nl> - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug <nl> @ Override <nl> public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> { <nl> - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; <nl> - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; <nl> - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; <nl> + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; <nl> return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; <nl> } <nl> <nl> @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug <nl> return false ; <nl> } <nl> } <nl> - <nl> - public static class DummyModelLoader implements ICustomModelLoader <nl> - { <nl> - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; <nl> - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; <nl> - <nl> - public boolean accepts ( ResourceLocation modelLocation ) <nl> - { <nl> - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; <nl> - } <nl> - <nl> - public IModel loadModel ( ResourceLocation model ) <nl> - { <nl> - return DummyModel . instance ; <nl> - } <nl> - <nl> - public static enum DummyModel implements IModel <nl> - { <nl> - instance ; <nl> - <nl> - public Collection < ResourceLocation > getDependencies ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - public Collection < ResourceLocation > getTextures ( ) <nl> - { <nl> - return Collections . singletonList ( dummyTexture ) ; <nl> - } <nl> - <nl> - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) <nl> - { <nl> - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; <nl> - } <nl> - <nl> - public IModelState getDefaultState ( ) <nl> - { <nl> - return ModelRotation . X0 _ Y0 ; <nl> - } <nl> - } <nl> - <nl> - public static class DummyBakedModel implements IFlexibleBakedModel <nl> - { <nl> - private final TextureAtlasSprite texture ; <nl> - <nl> - public DummyBakedModel ( TextureAtlasSprite texture ) <nl> - { <nl> - this . texture = texture ; <nl> - } <nl> - <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) <nl> - { <nl> - return new int [ ] { <nl> - Float . floatToRawIntBits ( x ) , <nl> - Float . floatToRawIntBits ( y ) , <nl> - Float . floatToRawIntBits ( z ) , <nl> - color , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> - 0 <nl> - } ; <nl> - } <nl> - <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> - { <nl> - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> - / / 1 half - way rotated quad looking UP <nl> - ret . add ( new BakedQuad ( Ints . concat ( <nl> - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , <nl> - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , <nl> - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , <nl> - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) <nl> - ) , - 1 , EnumFacing . UP ) ) ; <nl> - return ret ; <nl> - } <nl> - <nl> - public boolean isGui3d ( ) { return true ; } <nl> - <nl> - public boolean isAmbientOcclusion ( ) { return true ; } <nl> - <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> - <nl> - public TextureAtlasSprite getTexture ( ) { return this . texture ; } <nl> - <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> - <nl> - public VertexFormat getFormat ( ) <nl> - { <nl> - return Attributes . DEFAULT _ BAKED _ FORMAT ; <nl> - } <nl> - } <nl> - <nl> - public void onResourceManagerReload ( IResourceManager resourceManager ) { } <nl> - } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> index 1ebdfc8 . . c6db8d8 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> @ @ - 1 , 5 + 1 , 18 @ @ <nl> { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " textures " : { <nl> + " # texture " : " forgedebugmodelloaderregistry : texture " , <nl> + " # chest " : " entity / chest / normal " <nl> + } , <nl> + " model " : " forgedebugmodelloaderregistry : chest . b3d " <nl> + } , <nl> " variants " : { <nl> - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } <nl> + " normal " : { <nl> + " dummy " : " " <nl> + } , <nl> + " inventory " : { <nl> + " dummy " : " " <nl> + } <nl> } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d <nl> new file mode 100644 <nl> index 0000000 . . b070d7a <nl> Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d <nl> index 14e9c4d . . 8f4bd09 100644 <nl> Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index 186f9e1 . . cd3e1d2 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 198 , 7 + 198 , 7 @ @ public class BlockStateLoader 
 models . put ( entry . getKey ( ) , Pair . of ( runModelHooks ( model , part . getTextures ( ) , part . getCustomData ( ) ) , partState ) ) ; 
 } 
 
 - return new MultiModel ( hasBase ? base : null , baseTr , models . build ( ) ) ; 
 + return new MultiModel ( getModelLocation ( ) , hasBase ? base : null , baseTr , models . build ( ) ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 index cb10dc9 . . d28c175 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / IPerspectiveAwareModel . java 
 @ @ - 1 , 12 + 1 , 22 @ @ 
 package net . minecraftforge . client . model ; 
 
 + import java . util . List ; 
 + 
 import javax . vecmath . Matrix4f ; 
 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . util . EnumFacing ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 / * 
 * Model that changes based on the rendering perspective 
 * ( first - person , GUI , e . t . c - see TransformType ) 
 @ @ - 18 , 4 + 28 , 49 @ @ public interface IPerspectiveAwareModel extends IBakedModel 
 * that should be applied to the GL state before rendering it ( matrix may be null ) . 
 * / 
 Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) ; 
 + 
 + public static class MapWrapper implements IFlexibleBakedModel , IPerspectiveAwareModel 
 + { 
 + private final IFlexibleBakedModel parent ; 
 + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 + 
 + public MapWrapper ( IFlexibleBakedModel parent , ImmutableMap < TransformType , TRSRTransformation > transforms ) 
 + { 
 + this . parent = parent ; 
 + this . transforms = transforms ; 
 + } 
 + 
 + public MapWrapper ( IFlexibleBakedModel parent , IPerspectiveState state , IModelPart part ) 
 + { 
 + this ( parent , getTransforms ( state , part ) ) ; 
 + } 
 + 
 + public static ImmutableMap < TransformType , TRSRTransformation > getTransforms ( IPerspectiveState state , IModelPart part ) 
 + { 
 + ImmutableMap . Builder < TransformType , TRSRTransformation > builder = ImmutableMap . builder ( ) ; 
 + for ( TransformType type : TransformType . values ( ) ) 
 + { 
 + builder . put ( type , state . forPerspective ( type ) . apply ( part ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + public boolean isAmbientOcclusion ( ) { return parent . isAmbientOcclusion ( ) ; } 
 + public boolean isGui3d ( ) { return parent . isGui3d ( ) ; } 
 + public boolean isBuiltInRenderer ( ) { return parent . isBuiltInRenderer ( ) ; } 
 + public TextureAtlasSprite getTexture ( ) { return parent . getTexture ( ) ; } 
 + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return parent . getFaceQuads ( side ) ; } 
 + public List < BakedQuad > getGeneralQuads ( ) { return parent . getGeneralQuads ( ) ; } 
 + public VertexFormat getFormat ( ) { return parent . getFormat ( ) ; } 
 + 
 + @ Override 
 + public Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 + { 
 + TRSRTransformation tr = transforms . get ( cameraTransformType ) ; 
 + Matrix4f mat = null ; 
 + if ( tr ! = null & & tr ! = TRSRTransformation . identity ( ) ) mat = TRSRTransformation . blockCornerToCenter ( tr ) . getMatrix ( ) ; 
 + return Pair . of ( ( IBakedModel ) this , mat ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index 6a875f4 . . 8930101 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 94 , 11 + 94 , 7 @ @ public class ItemLayerModel implements IRetexturableModel { 
 if ( state instanceof IPerspectiveState ) 
 { 
 IPerspectiveState ps = ( IPerspectiveState ) state ; 
 - Map < TransformType , TRSRTransformation > map = Maps . newHashMap ( ) ; 
 - for ( TransformType type : TransformType . values ( ) ) 
 - { 
 - map . put ( type , ps . forPerspective ( type ) . apply ( this ) ) ; 
 - } 
 + ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( ps , this ) ; 
 return new BakedModel ( builder . build ( ) , particle , format , Maps . immutableEnumMap ( map ) ) ; 
 } 
 return new BakedModel ( builder . build ( ) , particle , format ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 63e7128 . . 3c36588 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 209 , 7 + 209 , 7 @ @ public class ModelLoader extends ModelBakery 
 { 
 return new ResourceLocation ( model . getResourceDomain ( ) , model . getResourcePath ( ) + " . json " ) ; 
 } 
 - 
 + 
 private void loadAnyModel ( ResourceLocation location ) throws IOException 
 { 
 if ( loadingModels . contains ( location ) ) 
 @ @ - 324 , 17 + 324 , 23 @ @ public class ModelLoader extends ModelBakery 
 ModelBlock model = this . model ; 
 if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; 
 ItemCameraTransforms transforms = new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ; 
 + boolean uvlock = false ; 
 + if ( state instanceof UVLock ) 
 + { 
 + uvlock = true ; 
 + state = ( ( UVLock ) state ) . getParent ( ) ; 
 + } 
 + IPerspectiveState perState = state instanceof IPerspectiveState ? ( IPerspectiveState ) state : new IPerspectiveState . Impl ( state , transforms ) ; 
 if ( hasItemModel ( model ) ) 
 { 
 - IPerspectiveState perState = state instanceof IPerspectiveState ? ( IPerspectiveState ) state : new IPerspectiveState . Impl ( state , transforms ) ; 
 return new ItemLayerModel ( model ) . bake ( perState , format , bakedTextureGetter ) ; 
 } 
 if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( transforms ) , format ) ; 
 / / TODO perspective awareness for this 
 - return bakeNormal ( model , state . apply ( this ) , format , bakedTextureGetter , state instanceof UVLock ) ; 
 + return bakeNormal ( model , perState , state . apply ( this ) , format , bakedTextureGetter , uvlock ) ; 
 } 
 
 - private IFlexibleBakedModel bakeNormal ( ModelBlock model , TRSRTransformation state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 + private IFlexibleBakedModel bakeNormal ( ModelBlock model , IPerspectiveState perState , TRSRTransformation state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter , boolean uvLocked ) 
 { 
 TextureAtlasSprite particle = bakedTextureGetter . apply ( new ResourceLocation ( model . resolveTextureName ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( model ) ) . setTexture ( particle ) ; 
 @ @ - 355 , 7 + 361 , 7 @ @ public class ModelLoader extends ModelBakery 
 } 
 } 
 
 - return new IFlexibleBakedModel . Wrapper ( builder . makeBakedModel ( ) , format ) ; 
 + return new IPerspectiveAwareModel . MapWrapper ( new IFlexibleBakedModel . Wrapper ( builder . makeBakedModel ( ) , format ) , perState , this ) ; 
 } 
 
 public IModelState getDefaultState ( ) 
 @ @ - 427 , 16 + 433 , 21 @ @ public class ModelLoader extends ModelBakery 
 
 public static class UVLock implements IModelState 
 { 
 - private final IModelState state ; 
 + private final IModelState parent ; 
 + 
 + public UVLock ( IModelState parent ) 
 + { 
 + this . parent = parent ; 
 + } 
 
 - public UVLock ( IModelState state ) 
 + public IModelState getParent ( ) 
 { 
 - this . state = state ; 
 + return parent ; 
 } 
 
 public TRSRTransformation apply ( IModelPart part ) 
 { 
 - return state . apply ( part ) ; 
 + return parent . apply ( part ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / client / model / MultiModel . java b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 index 221398e . . 18a36c8 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / MultiModel . java 
 @ @ - 8 , 14 + 8 , 20 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 + import javax . vecmath . Matrix4f ; 
 + 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 
 import org . apache . commons . lang3 . tuple . Pair ; 
 + import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . collect . ImmutableList ; 
 @ @ - 25 , 20 + 31 , 26 @ @ import com . google . common . collect . Sets ; 
 
 public class MultiModel implements IModel 
 { 
 - public static class Baked implements IFlexibleBakedModel 
 + public static class Baked implements IFlexibleBakedModel , IPerspectiveAwareModel 
 { 
 protected final IFlexibleBakedModel base ; 
 protected final ImmutableMap < String , IFlexibleBakedModel > parts ; 
 - 
 + 
 protected final IFlexibleBakedModel internalBase ; 
 protected final ImmutableList < BakedQuad > general ; 
 protected final ImmutableMap < EnumFacing , ImmutableList < BakedQuad > > faces ; 
 - 
 + protected final ImmutableMap < TransformType , Pair < Baked , TRSRTransformation > > transforms ; 
 + 
 public Baked ( IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) 
 { 
 + this ( null , false , base , parts ) ; 
 + } 
 + 
 + public Baked ( ResourceLocation location , boolean perspective , IFlexibleBakedModel base , ImmutableMap < String , IFlexibleBakedModel > parts ) 
 + { 
 this . base = base ; 
 this . parts = parts ; 
 - 
 + 
 if ( base ! = null ) 
 internalBase = base ; 
 else 
 @ @ - 47 , 12 + 59 , 12 @ @ public class MultiModel implements IModel 
 if ( iter . hasNext ( ) ) 
 internalBase = iter . next ( ) ; 
 else 
 - throw new RuntimeException ( " No base model or submodel provided for this MultiModel . Baked . " ) ; 
 + throw new IllegalArgumentException ( " No base model or submodel provided for MultiModel . Baked " + location + " . " ) ; 
 } 
 - 
 + 
 / / Create map of each face ' s quads . 
 EnumMap < EnumFacing , ImmutableList < BakedQuad > > faces = Maps . newEnumMap ( EnumFacing . class ) ; 
 - 
 + 
 for ( EnumFacing face : EnumFacing . values ( ) ) 
 { 
 ImmutableList . Builder < BakedQuad > faceQuads = ImmutableList . builder ( ) ; 
 @ @ - 62 , 9 + 74 , 9 @ @ public class MultiModel implements IModel 
 faceQuads . addAll ( bakedPart . getFaceQuads ( face ) ) ; 
 faces . put ( face , faceQuads . build ( ) ) ; 
 } 
 - 
 + 
 this . faces = Maps . immutableEnumMap ( faces ) ; 
 - 
 + 
 / / Create list of general quads . 
 ImmutableList . Builder < BakedQuad > genQuads = ImmutableList . builder ( ) ; 
 if ( base ! = null ) 
 @ @ - 72 , 8 + 84 , 34 @ @ public class MultiModel implements IModel 
 for ( IFlexibleBakedModel bakedPart : parts . values ( ) ) 
 genQuads . addAll ( bakedPart . getGeneralQuads ( ) ) ; 
 general = genQuads . build ( ) ; 
 + 
 + / / Only changes the base model based on perspective , may recurse for parts in the future . 
 + if ( perspective & & base instanceof IPerspectiveAwareModel ) 
 + { 
 + IPerspectiveAwareModel perBase = ( IPerspectiveAwareModel ) base ; 
 + ImmutableMap . Builder < TransformType , Pair < Baked , TRSRTransformation > > builder = ImmutableMap . builder ( ) ; 
 + for ( TransformType type : TransformType . values ( ) ) 
 + { 
 + Pair < IBakedModel , Matrix4f > p = perBase . handlePerspective ( type ) ; 
 + IFlexibleBakedModel newBase ; 
 + if ( p . getLeft ( ) instanceof IFlexibleBakedModel ) 
 + { 
 + newBase = ( IFlexibleBakedModel ) p . getLeft ( ) ; 
 + } 
 + else 
 + { 
 + newBase = new IFlexibleBakedModel . Wrapper ( p . getLeft ( ) , base . getFormat ( ) ) ; 
 + } 
 + builder . put ( type , Pair . of ( new Baked ( location , false , newBase , parts ) , new TRSRTransformation ( p . getRight ( ) ) ) ) ; 
 + } 
 + transforms = builder . build ( ) ; 
 + } 
 + else 
 + { 
 + transforms = ImmutableMap . of ( ) ; 
 + } 
 } 
 - 
 + 
 @ Override 
 public boolean isAmbientOcclusion ( ) 
 { 
 @ @ - 121 , 87 + 159 , 113 @ @ public class MultiModel implements IModel 
 { 
 return internalBase . getFormat ( ) ; 
 } 
 - 
 + 
 public IFlexibleBakedModel getBaseModel ( ) 
 { 
 return base ; 
 } 
 - 
 + 
 public Map < String , IFlexibleBakedModel > getParts ( ) 
 { 
 return parts ; 
 } 
 + 
 + @ Override 
 + public Pair < IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 + { 
 + if ( transforms . isEmpty ( ) ) return Pair . of ( this , null ) ; 
 + Pair < Baked , TRSRTransformation > p = transforms . get ( cameraTransformType ) ; 
 + return Pair . of ( p . getLeft ( ) , p . getRight ( ) . getMatrix ( ) ) ; 
 + } 
 } 
 - 
 + 
 + protected final ResourceLocation location ; 
 protected final IModel base ; 
 protected final IModelState baseState ; 
 protected final Map < String , Pair < IModel , IModelState > > parts ; 
 - 
 - public MultiModel ( IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) 
 + 
 + public MultiModel ( ResourceLocation location , IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) 
 { 
 + this . location = location ; 
 this . base = base ; 
 this . baseState = baseState ; 
 this . parts = parts ; 
 } 
 
 + public MultiModel ( IModel base , IModelState baseState , ImmutableMap < String , Pair < IModel , IModelState > > parts ) 
 + { 
 + this ( null , base , baseState , parts ) ; 
 + } 
 + 
 public MultiModel ( IModel base , IModelState baseState , Map < String , Pair < IModel , IModelState > > parts ) 
 { 
 - this ( base , baseState , ImmutableMap . copyOf ( parts ) ) ; 
 + this ( null , base , baseState , ImmutableMap . copyOf ( parts ) ) ; 
 } 
 - 
 + 
 + public MultiModel ( ResourceLocation location , IModel base , IModelState baseState , Map < String , Pair < IModel , IModelState > > parts ) 
 + { 
 + this ( location , base , baseState , ImmutableMap . copyOf ( parts ) ) ; 
 + } 
 + 
 @ Override 
 public Collection < ResourceLocation > getDependencies ( ) 
 { 
 Set < ResourceLocation > deps = Sets . newHashSet ( ) ; 
 - 
 + 
 if ( base ! = null ) 
 deps . addAll ( base . getDependencies ( ) ) ; 
 - 
 + 
 for ( Pair < IModel , IModelState > pair : parts . values ( ) ) 
 deps . addAll ( pair . getLeft ( ) . getDependencies ( ) ) ; 
 - 
 + 
 return deps ; 
 } 
 - 
 + 
 @ Override 
 public Collection < ResourceLocation > getTextures ( ) 
 { 
 Set < ResourceLocation > deps = Sets . newHashSet ( ) ; 
 - 
 + 
 if ( base ! = null ) 
 deps . addAll ( base . getTextures ( ) ) ; 
 - 
 + 
 for ( Pair < IModel , IModelState > pair : parts . values ( ) ) 
 deps . addAll ( pair . getLeft ( ) . getTextures ( ) ) ; 
 - 
 + 
 return deps ; 
 } 
 - 
 + 
 @ Override 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 IFlexibleBakedModel bakedBase = null ; 
 - 
 + 
 if ( base ! = null ) 
 bakedBase = base . bake ( state , format , bakedTextureGetter ) ; 
 - 
 + 
 ImmutableMap . Builder < String , IFlexibleBakedModel > mapBuilder = ImmutableMap . builder ( ) ; 
 - 
 + 
 for ( Entry < String , Pair < IModel , IModelState > > entry : parts . entrySet ( ) ) 
 { 
 Pair < IModel , IModelState > pair = entry . getValue ( ) ; 
 mapBuilder . put ( entry . getKey ( ) , pair . getLeft ( ) . bake ( pair . getRight ( ) , format , bakedTextureGetter ) ) ; 
 } 
 - 
 - return new Baked ( bakedBase , mapBuilder . build ( ) ) ; 
 + 
 + if ( bakedBase = = null & & parts . isEmpty ( ) ) 
 + { 
 + FMLLog . log ( Level . ERROR , " MultiModel % s is empty ( no base model or parts were provided / resolved ) " , location ) ; 
 + IModel missing = ModelLoaderRegistry . getMissingModel ( ) ; 
 + return missing . bake ( missing . getDefaultState ( ) , format , bakedTextureGetter ) ; 
 + } 
 + return new Baked ( location , true , bakedBase , mapBuilder . build ( ) ) ; 
 } 
 - 
 + 
 @ Override 
 public IModelState getDefaultState ( ) 
 { 
 return baseState ; 
 } 
 - 
 + 
 / * * 
 * @ return The base model of this MultiModel . May be null . 
 * / 
 @ @ - 209 , 7 + 273 , 7 @ @ public class MultiModel implements IModel 
 { 
 return base ; 
 } 
 - 
 + 
 / * * 
 * @ return A map of the submodel name to its IModel and IModelState . 
 * / 
 diff - - git a / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java b / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java 
 index 697dc86 . . 34d7962 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java 
 + + + b / src / main / java / net / minecraftforge / client / model / TRSRTransformation . java 
 @ @ - 40 , 7 + 40 , 14 @ @ public class TRSRTransformation implements IModelState , ITransformation 
 
 public TRSRTransformation ( Matrix4f matrix ) 
 { 
 - this . matrix = matrix ; 
 + if ( matrix = = null ) 
 + { 
 + this . matrix = identity . matrix ; 
 + } 
 + else 
 + { 
 + this . matrix = matrix ; 
 + } 
 } 
 
 public TRSRTransformation ( Vector3f translation , Quat4f leftRot , Vector3f scale , Quat4f rightRot ) 
 diff - - git a / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json 
 index 9ee3db7 . . 77d6403 100644 
 - - - a / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json 
 + + + b / src / test / resources / assets / forgeblockstatesloader / blockstates / cobblestone _ wall . json 
 @ @ - 3 , 7 + 3 , 8 @ @ 
 	 " defaults " : { 
 	 	 " textures " : { " wall " : " blocks / cobblestone " } , 
 	 	 " model " : " cobblestone _ wall _ post " , 
 - 	 	 " uvlock " : true 	 / / This and all other properties of " defaults " will be inherited by simple submodels . They will NOT be inherited by named submodels . 
 + 	 	 " uvlock " : true , 	 / / This and all other properties of " defaults " will be inherited by simple submodels . They will NOT be inherited by named submodels . 
 + 	 	 " transform " : " forge : default - block " 
 	 } , 
 	 " variants " : { 
 	 	 " north " : { 
 @ @ - 24 , 6 + 25 , 12 @ @ 
 	 	 } , 
 	 	 " up " : { " true " : { } , " false " : { } } , 	 / / Must have this in here or the blockstates loader will not know of all the properties and values , and it will create the wrong vanilla state strings . 
 	 	 " east = false , north = true , south = true , up = false , west = false " : { " model " : null } , 	 / / Fully specified variant , will inherit from variants above , but remove the model set in " defaults " , removing the wall post . 
 - 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } 
 + 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } , 
 + 	 	 " inventory " : [ { / / inventory variant can be specified here too , and it will inherit properties from " defaults " 
 + 	 	 submodel : { 
 + 	 	 " north " : { " model " : " forgeblockstatesloader : wall _ connect " } , 
 + 	 	 " south " : { " model " : " forgeblockstatesloader : wall _ connect " , " y " : 180 } 
 + 	 	 } 
 + 	 	 } ] 
 	 } 
 } 
 diff - - git a / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json 
 index 853c9a3 . . bf225df 100644 
 - - - a / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json 
 + + + b / src / test / resources / assets / forgeblockstatesloader / blockstates / mossy _ cobblestone _ wall . json 
 @ @ - 3 , 7 + 3 , 8 @ @ 
 	 " defaults " : { 
 	 	 " textures " : { " wall " : " blocks / cobblestone _ mossy " } , 
 	 	 " model " : " cobblestone _ wall _ post " , 
 - 	 	 " uvlock " : true 
 + 	 	 " uvlock " : true , 
 + 	 	 " transform " : " forge : default - block " 
 	 } , 
 	 " variants " : { 
 	 	 " north " : { 
 @ @ - 24 , 6 + 25 , 12 @ @ 
 	 	 } , 
 	 	 " up " : { " true " : { } , " false " : { } } , 
 	 	 " east = false , north = true , south = true , up = false , west = false " : { " model " : null } , 
 - 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } 
 + 	 	 " east = true , north = false , south = false , up = false , west = true " : { " model " : null } , 
 + 	 	 " inventory " : [ { / / inventory variant can be specified here too , and it will inherit properties from " defaults " 
 + 	 	 submodel : { 
 + 	 	 " north " : { " model " : " forgeblockstatesloader : wall _ connect " } , 
 + 	 	 " south " : { " model " : " forgeblockstatesloader : wall _ connect " , " y " : 180 } 
 + 	 	 } 
 + 	 	 } ] 
 	 } 
 } 
 diff - - git a / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json 
 deleted file mode 100644 
 index 079cb13 . . 0000000 
 - - - a / src / test / resources / assets / forgeblockstatesloader / models / item / cobblestone _ wall . json 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - { 
 - " parent " : " block / wall _ inventory " , 
 - " textures " : { 
 - " wall " : " blocks / cobblestone " 
 - } 
 - } 
 diff - - git a / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json b / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json 
 deleted file mode 100644 
 index f5f126f . . 0000000 
 - - - a / src / test / resources / assets / forgeblockstatesloader / models / item / mossy _ cobblestone _ wall . json 
 + + + / dev / null 
 @ @ - 1 , 6 + 0 , 0 @ @ 
 - { 
 - " parent " : " block / wall _ inventory " , 
 - " textures " : { 
 - " wall " : " blocks / cobblestone _ mossy " 
 - } 
 - } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 index 6bd2f3f . . b192639 100644 
 - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 @ @ - 2 , 34 + 2 , 24 @ @ 
 " forge _ marker " : 1 , 
 " defaults " : { 
 " textures " : { 
 - " # texture " : " forgedebugmodelloaderregistry : texture " , 
 + / / " # texture " : " forgedebugmodelloaderregistry : texture " , 
 " # chest " : " entity / chest / normal " 
 } , 
 - " model " : " forgedebugmodelloaderregistry : chest . b3d " 
 + " model " : " forgedebugmodelloaderregistry : chest . b3d " , 
 + " transform " : " forge : default - block " 
 } , 
 " variants " : { 
 - " normal " : [ { 
 - / * " transform " : { 
 - " rotation " : { " y " : 45 } 
 - } * / 
 - } ] , 
 + " normal " : [ { } ] , 
 " inventory " : [ { 
 - / * " transform " : { 
 - " thirdperson " : { 
 - " translation " : [ 0 , 0 . 09375 , - 0 . 171875 ] , 
 - " rotation " : [ { " y " : - 45 } , { " x " : 10 } , { " z " : 170 } ] , 
 - " scale " : 0 . 375 
 - } 
 - } * / 
 - " transform " : " forge : default - block " 
 + " y " : 180 
 } ] , 
 " facing " : { 
 - " down " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 90 } , 
 - " up " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " x " : 270 } , 
 - " north " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " } , 
 - " south " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 180 } , 
 - " west " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 270 } , 
 - " east " : { " model " : " forgedebugmodelloaderregistry : chest . b3d " , " y " : 90 } 
 + " down " : { " x " : 90 } , 
 + " up " : { " x " : 270 } , 
 + " north " : { " y " : 180 } , 
 + " south " : { } , 
 + " west " : { " y " : 90 } , 
 + " east " : { " y " : 270 } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index ca6ab30 . . 46f1c46 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; 
 import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 + import net . minecraftforge . client . model . IModelCustomData ; 
 import net . minecraftforge . client . model . IModelPart ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . IRetexturableModel ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; 
 import org . lwjgl . BufferUtils ; 
 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 + import com . google . common . collect . Collections2 ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 
 / * 
 @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader 
 public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) 
 { 
 TRSRTransformation ret = TRSRTransformation . identity ( ) ; 
 - if ( node . getParent ( ) ! = null ) 
 - { 
 - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 - ret = ret . compose ( pm ) ; 
 - } 
 Key key = null ; 
 if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; 
 else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; 
 - if ( key = = null ) 
 - { 
 - FMLLog . severe ( " invalid key index : " + frame ) ; 
 - } 
 - else 
 + if ( key ! = null ) 
 { 
 + Node < ? > parent = node . getParent ( ) ; 
 + if ( parent ! = null ) 
 + { 
 + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 + ret = ret . compose ( pm ) ; 
 + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; 
 + } 
 ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; 
 Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; 
 rm . invert ( ) ; 
 ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + if ( parent ! = null ) 
 + { 
 + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; 
 + rm . invert ( ) ; 
 + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + } 
 } 
 return ret ; 
 } 
 @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 } 
 
 - public static class Wrapper extends PartWrapper < Mesh > implements IModel 
 + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData 
 { 
 private final ResourceLocation location ; 
 private final ImmutableMap < String , ResourceLocation > textures ; 
 
 public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) 
 { 
 - this ( location , buildTextures ( location , textures ) , mesh ) ; 
 + this ( location , buildTextures ( textures ) , mesh ) ; 
 } 
 
 public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) 
 @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader 
 this . textures = textures ; 
 } 
 
 - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) 
 + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) 
 { 
 ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 
 for ( Texture t : textures ) 
 { 
 String path = t . getPath ( ) ; 
 - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; 
 + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; 
 } 
 return builder . build ( ) ; 
 } 
 
 + private static String getLocation ( String path ) 
 + { 
 + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 + return path ; 
 + } 
 + 
 public Collection < ResourceLocation > getDependencies ( ) 
 { 
 / / no dependencies for in - file models 
 @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader 
 
 public Collection < ResourceLocation > getTextures ( ) 
 { 
 - return textures . values ( ) ; 
 + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) 
 + { 
 + public boolean apply ( ResourceLocation loc ) 
 + { 
 + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; 
 + } 
 + } ) ; 
 } 
 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; 
 - for ( String path : textures . keySet ( ) ) 
 + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) 
 { 
 - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; 
 + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) 
 + { 
 + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; 
 + builder . put ( e . getKey ( ) , missing ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; 
 + } 
 } 
 - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; 
 + builder . put ( " missingno " , missing ) ; 
 return new BakedWrapper ( this , state , format , builder . build ( ) ) ; 
 } 
 
 @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader 
 else if ( ! location . equals ( other . location ) ) return false ; 
 return true ; 
 } 
 + 
 + @ Override 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) 
 + { 
 + String path = e . getKey ( ) ; 
 + String loc = getLocation ( path ) ; 
 + if ( textures . containsKey ( loc ) ) 
 + { 
 + String newLoc = textures . get ( loc ) ; 
 + if ( newLoc = = null ) newLoc = getLocation ( path ) ; 
 + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e ) ; 
 + } 
 + } 
 + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 + { 
 + / / TODO keyframe 
 + return null ; 
 + } 
 } 
 
 private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel 
 @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader 
 for ( Face f : faces ) 
 { 
 buf . clear ( ) ; 
 - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; 
 + List < Texture > textures = null ; 
 + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; 
 TextureAtlasSprite sprite ; 
 - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; 
 else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; 
 putVertexData ( f . getV1 ( ) , sprite ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 3fe304b . . 2358b93 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug 
 
 private void clientPreInit ( ) 
 { 
 - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug 
 @ Override 
 public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 { 
 - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; 
 - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; 
 - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; 
 + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; 
 return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; 
 } 
 
 @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug 
 return false ; 
 } 
 } 
 - 
 - public static class DummyModelLoader implements ICustomModelLoader 
 - { 
 - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; 
 - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; 
 - 
 - public boolean accepts ( ResourceLocation modelLocation ) 
 - { 
 - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; 
 - } 
 - 
 - public IModel loadModel ( ResourceLocation model ) 
 - { 
 - return DummyModel . instance ; 
 - } 
 - 
 - public static enum DummyModel implements IModel 
 - { 
 - instance ; 
 - 
 - public Collection < ResourceLocation > getDependencies ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - public Collection < ResourceLocation > getTextures ( ) 
 - { 
 - return Collections . singletonList ( dummyTexture ) ; 
 - } 
 - 
 - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) 
 - { 
 - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; 
 - } 
 - 
 - public IModelState getDefaultState ( ) 
 - { 
 - return ModelRotation . X0 _ Y0 ; 
 - } 
 - } 
 - 
 - public static class DummyBakedModel implements IFlexibleBakedModel 
 - { 
 - private final TextureAtlasSprite texture ; 
 - 
 - public DummyBakedModel ( TextureAtlasSprite texture ) 
 - { 
 - this . texture = texture ; 
 - } 
 - 
 - public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) 
 - { 
 - return new int [ ] { 
 - Float . floatToRawIntBits ( x ) , 
 - Float . floatToRawIntBits ( y ) , 
 - Float . floatToRawIntBits ( z ) , 
 - color , 
 - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 - 0 
 - } ; 
 - } 
 - 
 - public List < BakedQuad > getGeneralQuads ( ) 
 - { 
 - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 - / / 1 half - way rotated quad looking UP 
 - ret . add ( new BakedQuad ( Ints . concat ( 
 - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , 
 - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , 
 - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , 
 - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) 
 - ) , - 1 , EnumFacing . UP ) ) ; 
 - return ret ; 
 - } 
 - 
 - public boolean isGui3d ( ) { return true ; } 
 - 
 - public boolean isAmbientOcclusion ( ) { return true ; } 
 - 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 - 
 - public TextureAtlasSprite getTexture ( ) { return this . texture ; } 
 - 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 - 
 - public VertexFormat getFormat ( ) 
 - { 
 - return Attributes . DEFAULT _ BAKED _ FORMAT ; 
 - } 
 - } 
 - 
 - public void onResourceManagerReload ( IResourceManager resourceManager ) { } 
 - } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 index 1ebdfc8 . . c6db8d8 100644 
 - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 @ @ - 1 , 5 + 1 , 18 @ @ 
 { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " textures " : { 
 + " # texture " : " forgedebugmodelloaderregistry : texture " , 
 + " # chest " : " entity / chest / normal " 
 + } , 
 + " model " : " forgedebugmodelloaderregistry : chest . b3d " 
 + } , 
 " variants " : { 
 - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } 
 + " normal " : { 
 + " dummy " : " " 
 + } , 
 + " inventory " : { 
 + " dummy " : " " 
 + } 
 } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d 
 new file mode 100644 
 index 0000000 . . b070d7a 
 Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d 
 index 14e9c4d . . 8f4bd09 100644 
 Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ
