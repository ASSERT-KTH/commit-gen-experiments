BLEU SCORE: 0.0367352656298894

TEST MSG: Fix # 5584 by copying the zipped resource to a temporary directory if
GENERATED MSG: Some tweaks to get the launcher working .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / util / HexDumper . java b / src / main / java / net / minecraftforge / common / util / HexDumper . java <nl> index 1aeaa1f . . 6a05841 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / util / HexDumper . java <nl> + + + b / src / main / java / net / minecraftforge / common / util / HexDumper . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> * License along with this library ; if not , write to the Free Software <nl> * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> * / <nl> + <nl> package net . minecraftforge . common . util ; <nl> <nl> import io . netty . buffer . ByteBuf ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / StackTraceUtils . java b / src / main / java / net / minecraftforge / fml / StackTraceUtils . java <nl> new file mode 100644 <nl> index 0000000 . . 88392b8 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / StackTraceUtils . java <nl> @ @ - 0 , 0 + 1 , 31 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2019 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml ; <nl> + <nl> + import java . util . Objects ; <nl> + <nl> + public final class StackTraceUtils { <nl> + private StackTraceUtils ( ) { } <nl> + <nl> + public static boolean threadClassNameEquals ( final String className ) { <nl> + final StackTraceElement [ ] stackTrace = Thread . currentThread ( ) . getStackTrace ( ) ; <nl> + return Objects . equals ( stackTrace [ stackTrace . length - 1 ] . getClassName ( ) , className ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> index 695c3f2 . . 68d012b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> + + + b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java <nl> @ @ - 23 , 18 + 23 , 26 @ @ import net . minecraft . resources . AbstractResourcePack ; <nl> import net . minecraft . resources . ResourcePackInfo ; <nl> import net . minecraft . resources . ResourcePackType ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . StackTraceUtils ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> <nl> import java . io . File ; <nl> import java . io . FileInputStream ; <nl> - import java . io . FileNotFoundException ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> - import java . nio . file . * ; <nl> + import java . nio . channels . FileChannel ; <nl> + import java . nio . channels . SeekableByteChannel ; <nl> + import java . nio . file . FileSystems ; <nl> + import java . nio . file . Files ; <nl> + import java . nio . file . Path ; <nl> + import java . nio . file . StandardOpenOption ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> - import java . util . Objects ; <nl> import java . util . Set ; <nl> + import java . util . concurrent . ExecutionException ; <nl> + import java . util . concurrent . ExecutorService ; <nl> + import java . util . concurrent . Executors ; <nl> + import java . util . concurrent . Future ; <nl> import java . util . function . Predicate ; <nl> import java . util . stream . Collectors ; <nl> <nl> @ @ - 49 , 6 + 57 , 25 @ @ public class ModFileResourcePack extends AbstractResourcePack <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> private final ModFile modFile ; <nl> private ResourcePackInfo packInfo ; <nl> + private static final ExecutorService STUPIDPAULSCODEISSTUPIDWORKAROUNDTHREAD = Executors . newSingleThreadExecutor ( ) ; <nl> + private static final Path tempDir ; <nl> + <nl> + static { <nl> + try { <nl> + tempDir = Files . createTempDirectory ( " modpacktmp " ) ; <nl> + Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) - > { <nl> + try { <nl> + Files . walk ( tempDir ) . forEach ( f - > { try { Files . deleteIfExists ( f ) ; } catch ( IOException ioe ) { } } ) ; <nl> + Files . delete ( tempDir ) ; <nl> + } catch ( IOException ioe ) { <nl> + LOGGER . fatal ( " Failed to clean up tempdir { } " , tempDir ) ; <nl> + } <nl> + } ) ) ; <nl> + } catch ( IOException e ) { <nl> + LOGGER . fatal ( CORE , " Failed to create temporary directory " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> <nl> public ModFileResourcePack ( final ModFile modFile ) <nl> { <nl> @ @ - 77 , 31 + 104 , 40 @ @ public class ModFileResourcePack extends AbstractResourcePack <nl> if ( path . getFileSystem ( ) = = FileSystems . getDefault ( ) ) { <nl> LOGGER . trace ( CORE , " Request for resource { } returning FileInputStream for regular file { } " , name , path ) ; <nl> return new FileInputStream ( path . toFile ( ) ) ; <nl> - } else if ( Objects . equals ( Thread . currentThread ( ) . getStackTrace ( ) [ 0 ] . getClassName ( ) , " paulscode . sound . CommandThread " ) ) { <nl> - final Path tempFile = Files . createTempFile ( " modpack " , " soundresource " ) ; <nl> - Files . copy ( Files . newInputStream ( path , StandardOpenOption . READ ) , tempFile ) ; <nl> - LOGGER . trace ( CORE , " Request for resource { } returning DeletingTemporaryFileInputStream for packed file { } on paulscode thread " , name , path ) ; <nl> - return new DeletingTemporaryFileInputStream ( tempFile ) ; <nl> + / / If the resource is in a zip file , and paulscode is the requester , we need to return a file input stream , <nl> + / / but we can ' t just use path . tofile to do it . Instead , we copy the resource to a temporary file . As all operations <nl> + / / with an nio channel are interruptible , we do this at arms length on another thread , while paulscode spams <nl> + / / interrupts on the paulscode main thread , which we politely ignore . <nl> + } else if ( StackTraceUtils . threadClassNameEquals ( " paulscode . sound . CommandThread " ) ) { <nl> + final Path tempFile = Files . createTempFile ( tempDir , " modpack " , " soundresource " ) ; <nl> + Future < FileInputStream > fis = STUPIDPAULSCODEISSTUPIDWORKAROUNDTHREAD . submit ( ( ) - > { <nl> + try ( final SeekableByteChannel resourceChannel = Files . newByteChannel ( path , StandardOpenOption . READ ) ; <nl> + final FileChannel tempFileChannel = FileChannel . open ( tempFile , StandardOpenOption . WRITE , StandardOpenOption . TRUNCATE _ EXISTING ) ) { <nl> + long size = resourceChannel . size ( ) ; <nl> + for ( long written = 0 ; written < size ; ) { <nl> + written + = tempFileChannel . transferFrom ( resourceChannel , written , size - written ) ; <nl> + } <nl> + } <nl> + LOGGER . trace ( CORE , " Request for resource { } returning DeletingTemporaryFileInputStream for packed file { } on paulscode thread " , name , path ) ; <nl> + return new FileInputStream ( tempFile . toFile ( ) ) ; <nl> + } ) ; <nl> + try { <nl> + while ( true ) { <nl> + try { <nl> + return fis . get ( ) ; <nl> + } catch ( InterruptedException ie ) { <nl> + / / no op <nl> + } <nl> + } <nl> + } catch ( ExecutionException e ) { <nl> + LOGGER . fatal ( CORE , " Encountered fatal exception copying sound resource " , e ) ; <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> } else { <nl> return Files . newInputStream ( path , StandardOpenOption . READ ) ; <nl> } <nl> } <nl> <nl> - private final class DeletingTemporaryFileInputStream extends FileInputStream { <nl> - private final Path tempfile ; <nl> - <nl> - DeletingTemporaryFileInputStream ( final Path tempfile ) throws FileNotFoundException { <nl> - super ( tempfile . toFile ( ) ) ; <nl> - this . tempfile = tempfile ; <nl> - } <nl> - <nl> - @ Override <nl> - public void close ( ) throws IOException { <nl> - super . close ( ) ; <nl> - Files . deleteIfExists ( tempfile ) ; <nl> - } <nl> - } <nl> - <nl> @ Override <nl> protected boolean resourceExists ( String name ) <nl> {
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index e5fbd8c . . cacd8c9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype <nl> + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype <nl> api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> api ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> api ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> api ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> + / * <nl> configurations { <nl> ecj <nl> } <nl> @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { <nl> dependencies { <nl> ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' <nl> } <nl> + * / <nl> <nl> / * Forge compiles , no longer need eclipse compiler <nl> compileJava { <nl> @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { <nl> <nl> include ' net / minecraftforge / ' <nl> exclude ' net / minecraftforge / server / terminalconsole / ' <nl> + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build <nl> exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> index 0167b79 . . 458d4ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import javax . annotation . Nonnull ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> index 72827d3 . . b24858d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; <nl> import net . minecraftforge . fml . language . IModInfo ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . FileSystems ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> <nl> public class DefaultModInfos <nl> { <nl> @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos <nl> FileConfig forgemod ; <nl> try <nl> { <nl> - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; <nl> + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; <nl> + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { <nl> + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? <nl> + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; <nl> + } <nl> + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; <nl> forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; <nl> minecraftmod . load ( ) ; <nl> forgemod . load ( ) ; <nl> } <nl> - catch ( URISyntaxException | NullPointerException e ) <nl> + catch ( IOException | URISyntaxException | NullPointerException e ) <nl> { <nl> throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 6b029cc . . 503a0d0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> <nl> + import java . net . URISyntaxException ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> + private static final Path forgePath ; <nl> + private static final Path mcPath ; <nl> + private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , <nl> + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , <nl> + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , <nl> + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> + " net . minecraftforge . fml . common . versioning . " <nl> + ) ; <nl> + static { <nl> + try { <nl> + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> + } <nl> + } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ 0 ] ; <nl> + return new Path [ ] { mcPath , forgePath } ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> + super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; <nl> + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> } ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 5ad1927 . . 2a337bc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { <nl> <nl> FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; <nl> for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) <nl> { <nl> ModFile mod = iterator . next ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / util / HexDumper . java b / src / main / java / net / minecraftforge / common / util / HexDumper . java 
 index 1aeaa1f . . 6a05841 100644 
 - - - a / src / main / java / net / minecraftforge / common / util / HexDumper . java 
 + + + b / src / main / java / net / minecraftforge / common / util / HexDumper . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 * License along with this library ; if not , write to the Free Software 
 * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 * / 
 + 
 package net . minecraftforge . common . util ; 
 
 import io . netty . buffer . ByteBuf ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / StackTraceUtils . java b / src / main / java / net / minecraftforge / fml / StackTraceUtils . java 
 new file mode 100644 
 index 0000000 . . 88392b8 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / StackTraceUtils . java 
 @ @ - 0 , 0 + 1 , 31 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2019 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml ; 
 + 
 + import java . util . Objects ; 
 + 
 + public final class StackTraceUtils { 
 + private StackTraceUtils ( ) { } 
 + 
 + public static boolean threadClassNameEquals ( final String className ) { 
 + final StackTraceElement [ ] stackTrace = Thread . currentThread ( ) . getStackTrace ( ) ; 
 + return Objects . equals ( stackTrace [ stackTrace . length - 1 ] . getClassName ( ) , className ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 index 695c3f2 . . 68d012b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 + + + b / src / main / java / net / minecraftforge / fml / packs / ModFileResourcePack . java 
 @ @ - 23 , 18 + 23 , 26 @ @ import net . minecraft . resources . AbstractResourcePack ; 
 import net . minecraft . resources . ResourcePackInfo ; 
 import net . minecraft . resources . ResourcePackType ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . StackTraceUtils ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 
 import java . io . File ; 
 import java . io . FileInputStream ; 
 - import java . io . FileNotFoundException ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 - import java . nio . file . * ; 
 + import java . nio . channels . FileChannel ; 
 + import java . nio . channels . SeekableByteChannel ; 
 + import java . nio . file . FileSystems ; 
 + import java . nio . file . Files ; 
 + import java . nio . file . Path ; 
 + import java . nio . file . StandardOpenOption ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 - import java . util . Objects ; 
 import java . util . Set ; 
 + import java . util . concurrent . ExecutionException ; 
 + import java . util . concurrent . ExecutorService ; 
 + import java . util . concurrent . Executors ; 
 + import java . util . concurrent . Future ; 
 import java . util . function . Predicate ; 
 import java . util . stream . Collectors ; 
 
 @ @ - 49 , 6 + 57 , 25 @ @ public class ModFileResourcePack extends AbstractResourcePack 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 private final ModFile modFile ; 
 private ResourcePackInfo packInfo ; 
 + private static final ExecutorService STUPIDPAULSCODEISSTUPIDWORKAROUNDTHREAD = Executors . newSingleThreadExecutor ( ) ; 
 + private static final Path tempDir ; 
 + 
 + static { 
 + try { 
 + tempDir = Files . createTempDirectory ( " modpacktmp " ) ; 
 + Runtime . getRuntime ( ) . addShutdownHook ( new Thread ( ( ) - > { 
 + try { 
 + Files . walk ( tempDir ) . forEach ( f - > { try { Files . deleteIfExists ( f ) ; } catch ( IOException ioe ) { } } ) ; 
 + Files . delete ( tempDir ) ; 
 + } catch ( IOException ioe ) { 
 + LOGGER . fatal ( " Failed to clean up tempdir { } " , tempDir ) ; 
 + } 
 + } ) ) ; 
 + } catch ( IOException e ) { 
 + LOGGER . fatal ( CORE , " Failed to create temporary directory " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 
 public ModFileResourcePack ( final ModFile modFile ) 
 { 
 @ @ - 77 , 31 + 104 , 40 @ @ public class ModFileResourcePack extends AbstractResourcePack 
 if ( path . getFileSystem ( ) = = FileSystems . getDefault ( ) ) { 
 LOGGER . trace ( CORE , " Request for resource { } returning FileInputStream for regular file { } " , name , path ) ; 
 return new FileInputStream ( path . toFile ( ) ) ; 
 - } else if ( Objects . equals ( Thread . currentThread ( ) . getStackTrace ( ) [ 0 ] . getClassName ( ) , " paulscode . sound . CommandThread " ) ) { 
 - final Path tempFile = Files . createTempFile ( " modpack " , " soundresource " ) ; 
 - Files . copy ( Files . newInputStream ( path , StandardOpenOption . READ ) , tempFile ) ; 
 - LOGGER . trace ( CORE , " Request for resource { } returning DeletingTemporaryFileInputStream for packed file { } on paulscode thread " , name , path ) ; 
 - return new DeletingTemporaryFileInputStream ( tempFile ) ; 
 + / / If the resource is in a zip file , and paulscode is the requester , we need to return a file input stream , 
 + / / but we can ' t just use path . tofile to do it . Instead , we copy the resource to a temporary file . As all operations 
 + / / with an nio channel are interruptible , we do this at arms length on another thread , while paulscode spams 
 + / / interrupts on the paulscode main thread , which we politely ignore . 
 + } else if ( StackTraceUtils . threadClassNameEquals ( " paulscode . sound . CommandThread " ) ) { 
 + final Path tempFile = Files . createTempFile ( tempDir , " modpack " , " soundresource " ) ; 
 + Future < FileInputStream > fis = STUPIDPAULSCODEISSTUPIDWORKAROUNDTHREAD . submit ( ( ) - > { 
 + try ( final SeekableByteChannel resourceChannel = Files . newByteChannel ( path , StandardOpenOption . READ ) ; 
 + final FileChannel tempFileChannel = FileChannel . open ( tempFile , StandardOpenOption . WRITE , StandardOpenOption . TRUNCATE _ EXISTING ) ) { 
 + long size = resourceChannel . size ( ) ; 
 + for ( long written = 0 ; written < size ; ) { 
 + written + = tempFileChannel . transferFrom ( resourceChannel , written , size - written ) ; 
 + } 
 + } 
 + LOGGER . trace ( CORE , " Request for resource { } returning DeletingTemporaryFileInputStream for packed file { } on paulscode thread " , name , path ) ; 
 + return new FileInputStream ( tempFile . toFile ( ) ) ; 
 + } ) ; 
 + try { 
 + while ( true ) { 
 + try { 
 + return fis . get ( ) ; 
 + } catch ( InterruptedException ie ) { 
 + / / no op 
 + } 
 + } 
 + } catch ( ExecutionException e ) { 
 + LOGGER . fatal ( CORE , " Encountered fatal exception copying sound resource " , e ) ; 
 + throw new RuntimeException ( e ) ; 
 + } 
 } else { 
 return Files . newInputStream ( path , StandardOpenOption . READ ) ; 
 } 
 } 
 
 - private final class DeletingTemporaryFileInputStream extends FileInputStream { 
 - private final Path tempfile ; 
 - 
 - DeletingTemporaryFileInputStream ( final Path tempfile ) throws FileNotFoundException { 
 - super ( tempfile . toFile ( ) ) ; 
 - this . tempfile = tempfile ; 
 - } 
 - 
 - @ Override 
 - public void close ( ) throws IOException { 
 - super . close ( ) ; 
 - Files . deleteIfExists ( tempfile ) ; 
 - } 
 - } 
 - 
 @ Override 
 protected boolean resourceExists ( String name ) 
 {

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index e5fbd8c . . cacd8c9 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype 
 + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype 
 api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 api ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 api ' net . minecraftforge : forgespi : 0 . 1 + ' 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 api ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 + / * 
 configurations { 
 ecj 
 } 
 @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { 
 dependencies { 
 ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' 
 } 
 + * / 
 
 / * Forge compiles , no longer need eclipse compiler 
 compileJava { 
 @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { 
 
 include ' net / minecraftforge / ' 
 exclude ' net / minecraftforge / server / terminalconsole / ' 
 + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build 
 exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 index 0167b79 . . 458d4ab 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import javax . annotation . Nonnull ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 index 72827d3 . . b24858d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; 
 import net . minecraftforge . fml . language . IModInfo ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . nio . file . FileSystems ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 
 public class DefaultModInfos 
 { 
 @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos 
 FileConfig forgemod ; 
 try 
 { 
 - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; 
 + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; 
 + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { 
 + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? 
 + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; 
 + } 
 + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; 
 forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; 
 minecraftmod . load ( ) ; 
 forgemod . load ( ) ; 
 } 
 - catch ( URISyntaxException | NullPointerException e ) 
 + catch ( IOException | URISyntaxException | NullPointerException e ) 
 { 
 throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 6b029cc . . 503a0d0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 
 + import java . net . URISyntaxException ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . concurrent . Callable ; 
 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 + private static final Path forgePath ; 
 + private static final Path mcPath ; 
 + private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , 
 + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , 
 + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , 
 + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 + " net . minecraftforge . fml . common . versioning . " 
 + ) ; 
 + static { 
 + try { 
 + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 + } 
 + } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ 0 ] ; 
 + return new Path [ ] { mcPath , forgePath } ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 + super . beforeStart ( launchClassLoader , forgePath ) ; 
 + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; 
 + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 } ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 5ad1927 . . 2a337bc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { 
 
 FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; 
 for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) 
 { 
 ModFile mod = iterator . next ( ) ;
