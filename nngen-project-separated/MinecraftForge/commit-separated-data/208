BLEU SCORE: 0.041961149062965476

TEST MSG: Add support for FluidStack - dependant colouring to Forge bucket
GENERATED MSG: Improve the Forge Bucket

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java <nl> new file mode 100644 <nl> index 0000000 . . cdfc53e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java <nl> @ @ - 0 , 0 + 1 , 39 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client ; <nl> + <nl> + import net . minecraft . client . renderer . color . IItemColor ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + <nl> + public class FluidContainerColorer implements IItemColor <nl> + { <nl> + @ Override <nl> + public int colorMultiplier ( @ Nonnull ItemStack stack , int tintIndex ) <nl> + { <nl> + if ( tintIndex ! = 1 ) return 0xFFFFFFFF ; <nl> + FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; <nl> + if ( fluidStack = = null ) return 0xFFFFFFFF ; <nl> + return fluidStack . getFluid ( ) . getColor ( fluidStack ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeClientHandler . java b / src / main / java / net / minecraftforge / client / ForgeClientHandler . java <nl> new file mode 100644 <nl> index 0000000 . . e2a2c86 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeClientHandler . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client ; <nl> + <nl> + import net . minecraftforge . client . event . ColorHandlerEvent ; <nl> + import net . minecraftforge . client . event . ModelRegistryEvent ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + <nl> + public class ForgeClientHandler <nl> + { <nl> + @ SubscribeEvent <nl> + public static void registerModels ( ModelRegistryEvent event ) <nl> + { <nl> + / / register model for the universal bucket , if it exists <nl> + if ( FluidRegistry . isUniversalBucketEnabled ( ) ) <nl> + { <nl> + ModelLoader . setBucketModelDefinition ( ForgeModContainer . getInstance ( ) . universalBucket ) ; <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + public static void registerItemHandlers ( ColorHandlerEvent . Item event ) <nl> + { <nl> + if ( FluidRegistry . isUniversalBucketEnabled ( ) ) <nl> + { <nl> + event . getItemColors ( ) . registerItemColorHandler ( new FluidContainerColorer ( ) , ForgeModContainer . getInstance ( ) . universalBucket ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> index 2221939 . . 3395655 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> @ @ - 38 , 6 + 38 , 13 @ @ public final class ItemTextureQuadConverter <nl> / / non - instantiable <nl> } <nl> <nl> + / * * @ deprecated use { @ link # convertTexture ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / <nl> + @ Deprecated / / TODO : remove <nl> + public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + { <nl> + return convertTexture ( format , transform , template , sprite , z , facing , color , - 1 ) ; <nl> + } <nl> + <nl> / * * <nl> * Takes a texture and converts it into BakedQuads . <nl> * The conversion is done by scanning the texture horizontally and vertically and creating " strips " of the texture . <nl> @ @ - 48 , 21 + 55 , 29 @ @ public final class ItemTextureQuadConverter <nl> * <nl> * @ param format <nl> * @ param template The input texture to convert <nl> - * @ param sprite The texture whose UVs shall be used @ return The generated quads . <nl> + * @ param sprite The texture whose UVs shall be used <nl> + * @ return The generated quads . <nl> * / <nl> - public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) <nl> { <nl> - List < UnpackedBakedQuad > horizontal = convertTextureHorizontal ( format , transform , template , sprite , z , facing , color ) ; <nl> - List < UnpackedBakedQuad > vertical = convertTextureVertical ( format , transform , template , sprite , z , facing , color ) ; <nl> + List < UnpackedBakedQuad > horizontal = convertTextureHorizontal ( format , transform , template , sprite , z , facing , color , tint ) ; <nl> + List < UnpackedBakedQuad > vertical = convertTextureVertical ( format , transform , template , sprite , z , facing , color , tint ) ; <nl> <nl> return horizontal . size ( ) > = vertical . size ( ) ? horizontal : vertical ; <nl> } <nl> <nl> + / * * @ deprecated use { @ link # convertTextureHorizontal ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / <nl> + @ Deprecated / / TODO : remove <nl> + public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + { <nl> + return convertTextureHorizontal ( format , transform , template , sprite , z , facing , color , - 1 ) ; <nl> + } <nl> + <nl> / * * <nl> * Scans a texture and converts it into a list of horizontal strips stacked on top of each other . <nl> * The height of the strips is as big as possible . <nl> * / <nl> - public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) <nl> { <nl> int w = template . getIconWidth ( ) ; <nl> int h = template . getIconHeight ( ) ; <nl> @ @ - 116 , 7 + 131 , 7 @ @ public final class ItemTextureQuadConverter <nl> ( float ) y * hScale , <nl> ( float ) x * wScale , <nl> ( float ) endY * hScale , <nl> - z , sprite , facing , color ) ) ; <nl> + z , sprite , facing , color , tint ) ) ; <nl> <nl> / / update Y if all the rows match . no need to rescan <nl> if ( endY - y > 1 ) <nl> @ @ - 132 , 11 + 147 , 18 @ @ public final class ItemTextureQuadConverter <nl> return quads ; <nl> } <nl> <nl> + / * * @ deprecated use { @ link # convertTextureVertical ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / <nl> + @ Deprecated / / TODO : remove <nl> + public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + { <nl> + return convertTextureVertical ( format , transform , template , sprite , z , facing , color , - 1 ) ; <nl> + } <nl> + <nl> / * * <nl> * Scans a texture and converts it into a list of vertical strips stacked next to each other from left to right . <nl> * The width of the strips is as big as possible . <nl> * / <nl> - public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) <nl> + public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) <nl> { <nl> int w = template . getIconWidth ( ) ; <nl> int h = template . getIconHeight ( ) ; <nl> @ @ - 190 , 7 + 212 , 7 @ @ public final class ItemTextureQuadConverter <nl> ( float ) start * hScale , <nl> ( float ) endX * wScale , <nl> ( float ) y * hScale , <nl> - z , sprite , facing , color ) ) ; <nl> + z , sprite , facing , color , tint ) ) ; <nl> <nl> / / update X if all the columns match . no need to rescan <nl> if ( endX - x > 1 ) <nl> @ @ - 211 , 11 + 233 , 18 @ @ public final class ItemTextureQuadConverter <nl> return ( color > > 24 & 255 ) / 255f > 0 . 1f ; <nl> } <nl> <nl> + / * * @ deprecated use { @ link # genQuad ( VertexFormat , TRSRTransformation , float , float , float , float , float , TextureAtlasSprite , EnumFacing , int , int ) } * / <nl> + @ Deprecated / / TODO : remove <nl> + public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color ) <nl> + { <nl> + return genQuad ( format , transform , x1 , y1 , x2 , y2 , z , sprite , facing , color , - 1 ) ; <nl> + } <nl> + <nl> / * * <nl> * Generates a Front / Back quad for an itemmodel . Therefore only supports facing NORTH and SOUTH . <nl> * Coordinates are [ 0 , 16 ] to match the usual coordinates used in TextureAtlasSprites <nl> * / <nl> - public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color ) <nl> + public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color , int tint ) <nl> { <nl> float u1 = sprite . getInterpolatedU ( x1 ) ; <nl> float v1 = sprite . getInterpolatedV ( y1 ) ; <nl> @ @ - 231 , 15 + 260 , 16 @ @ public final class ItemTextureQuadConverter <nl> y1 = 1f - y2 ; <nl> y2 = 1f - tmp ; <nl> <nl> - return putQuad ( format , transform , facing , sprite , color , x1 , y1 , x2 , y2 , z , u1 , v1 , u2 , v2 ) ; <nl> + return putQuad ( format , transform , facing , sprite , color , tint , x1 , y1 , x2 , y2 , z , u1 , v1 , u2 , v2 ) ; <nl> } <nl> <nl> - private static UnpackedBakedQuad putQuad ( VertexFormat format , TRSRTransformation transform , EnumFacing side , TextureAtlasSprite sprite , int color , <nl> + private static UnpackedBakedQuad putQuad ( VertexFormat format , TRSRTransformation transform , EnumFacing side , TextureAtlasSprite sprite , int color , int tint , <nl> float x1 , float y1 , float x2 , float y2 , float z , <nl> float u1 , float v1 , float u2 , float v2 ) <nl> { <nl> UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; <nl> - builder . setQuadTint ( - 1 ) ; <nl> + <nl> + builder . setQuadTint ( tint ) ; <nl> builder . setQuadOrientation ( side ) ; <nl> builder . setTexture ( sprite ) ; <nl> <nl> @ @ - 249 , 7 + 279 , 8 @ @ public final class ItemTextureQuadConverter <nl> putVertex ( builder , format , transform , side , x2 , y1 , z , u2 , v2 , color ) ; <nl> putVertex ( builder , format , transform , side , x2 , y2 , z , u2 , v1 , color ) ; <nl> putVertex ( builder , format , transform , side , x1 , y2 , z , u1 , v1 , color ) ; <nl> - } else <nl> + } <nl> + else <nl> { <nl> putVertex ( builder , format , transform , side , x1 , y1 , z , u1 , v2 , color ) ; <nl> putVertex ( builder , format , transform , side , x1 , y2 , z , u1 , v1 , color ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> index 88e3620 . . 81ff45a 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> @ @ - 84 , 20 + 84 , 30 @ @ public final class ModelDynBucket implements IModel <nl> private final ResourceLocation coverLocation ; <nl> @ Nullable <nl> private final Fluid fluid ; <nl> + <nl> private final boolean flipGas ; <nl> + private final boolean tint ; <nl> <nl> public ModelDynBucket ( ) <nl> { <nl> - this ( null , null , null , null , false ) ; <nl> + this ( null , null , null , null , false , true ) ; <nl> } <nl> <nl> + / * * @ deprecated use { @ link # ModelDynBucket ( ResourceLocation , ResourceLocation , ResourceLocation , Fluid , boolean , boolean ) } * / <nl> + @ Deprecated / / TODO : remove <nl> public ModelDynBucket ( @ Nullable ResourceLocation baseLocation , @ Nullable ResourceLocation liquidLocation , @ Nullable ResourceLocation coverLocation , @ Nullable Fluid fluid , boolean flipGas ) <nl> { <nl> + this ( baseLocation , liquidLocation , coverLocation , fluid , flipGas , true ) ; <nl> + } <nl> + <nl> + public ModelDynBucket ( @ Nullable ResourceLocation baseLocation , @ Nullable ResourceLocation liquidLocation , @ Nullable ResourceLocation coverLocation , @ Nullable Fluid fluid , boolean flipGas , boolean tint ) <nl> + { <nl> this . baseLocation = baseLocation ; <nl> this . liquidLocation = liquidLocation ; <nl> this . coverLocation = coverLocation ; <nl> this . fluid = fluid ; <nl> this . flipGas = flipGas ; <nl> + this . tint = tint ; <nl> } <nl> <nl> @ Override <nl> @ @ - 150 , 16 + 160 , 16 @ @ public final class ModelDynBucket implements IModel <nl> { <nl> TextureAtlasSprite liquid = bakedTextureGetter . apply ( liquidLocation ) ; <nl> / / build liquid layer ( inside ) <nl> - builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , fluid . getColor ( ) ) ) ; <nl> - builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , fluid . getColor ( ) ) ) ; <nl> + builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , tint ? fluid . getColor ( ) : 0xFFFFFFFF , 1 ) ) ; <nl> + builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , tint ? fluid . getColor ( ) : 0xFFFFFFFF , 1 ) ) ; <nl> particleSprite = fluidSprite ; <nl> } <nl> if ( coverLocation ! = null ) <nl> { <nl> / / cover ( the actual item around the other two ) <nl> TextureAtlasSprite cover = bakedTextureGetter . apply ( coverLocation ) ; <nl> - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xffffffff ) ) ; <nl> - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xffffffff ) ) ; <nl> + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xFFFFFFFF , 2 ) ) ; <nl> + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xFFFFFFFF , 2 ) ) ; <nl> if ( particleSprite = = null ) <nl> { <nl> particleSprite = cover ; <nl> @ @ - 171 , 8 + 181 , 9 @ @ public final class ModelDynBucket implements IModel <nl> <nl> / * * <nl> * Sets the liquid in the model . <nl> - * fluid - Name of the fluid in the FluidRegistry <nl> - * flipGas - If " true " the model will be flipped upside down if the liquid is a gas . If " false " it wont <nl> + * " fluid " - Name of the fluid in the FluidRegistry <nl> + * " flipGas " - If " true " the model will be flipped upside down if the liquid is a gas . If " false " it won ' t . <nl> + * " applyTint " - If " true " the model will tint the fluid quads according to the fluid ' s base color . <nl> * < p / > <nl> * If the fluid can ' t be found , water is used <nl> * / <nl> @ @ - 194 , 8 + 205 , 20 @ @ public final class ModelDynBucket implements IModel <nl> throw new IllegalArgumentException ( String . format ( " DynBucket custom data \ " flipGas \ " must have value \ ' true \ ' or \ ' false \ ' ( was \ ' % s \ ' ) " , flipStr ) ) ; <nl> } <nl> <nl> + boolean tint = this . tint ; <nl> + if ( customData . containsKey ( " applyTint " ) ) <nl> + { <nl> + String string = customData . get ( " applyTint " ) ; <nl> + switch ( string ) <nl> + { <nl> + case " true " : tint = true ; break ; <nl> + case " false " : tint = false ; break ; <nl> + default : throw new IllegalArgumentException ( String . format ( " DynBucket custom data \ " applyTint \ " must have value \ ' true \ ' or \ ' false \ ' ( was \ ' % s \ ' ) " , string ) ) ; <nl> + } <nl> + } <nl> + <nl> / / create new model with correct liquid <nl> - return new ModelDynBucket ( baseLocation , liquidLocation , coverLocation , fluid , flip ) ; <nl> + return new ModelDynBucket ( baseLocation , liquidLocation , coverLocation , fluid , flip , tint ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 222 , 7 + 245 , 7 @ @ public final class ModelDynBucket implements IModel <nl> if ( textures . containsKey ( " cover " ) ) <nl> cover = new ResourceLocation ( textures . get ( " cover " ) ) ; <nl> <nl> - return new ModelDynBucket ( base , liquid , cover , fluid , flipGas ) ; <nl> + return new ModelDynBucket ( base , liquid , cover , fluid , flipGas , tint ) ; <nl> } <nl> <nl> public enum LoaderDynBucket implements ICustomModelLoader <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index edf36be . . b1883b1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 73 , 14 + 73 , 12 @ @ import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . registry . IRegistry ; <nl> import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; <nl> import net . minecraftforge . client . model . animation . ModelBlockAnimation ; <nl> - import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . model . IModelState ; <nl> import net . minecraftforge . common . model . Models ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . common . model . animation . IClip ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> import net . minecraftforge . common . property . Properties ; <nl> - import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fml . client . FMLClientHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . ProgressManager ; <nl> @ @ - 276 , 12 + 274 , 6 @ @ public final class ModelLoader extends ModelBakery <nl> @ Override <nl> protected void loadItemModels ( ) <nl> { <nl> - / / register model for the universal bucket , if it exists <nl> - if ( FluidRegistry . isUniversalBucketEnabled ( ) ) <nl> - { <nl> - setBucketModelDefinition ( ForgeModContainer . getInstance ( ) . universalBucket ) ; <nl> - } <nl> - <nl> registerVariantNames ( ) ; <nl> <nl> List < Item > items = StreamSupport . stream ( Item . REGISTRY . spliterator ( ) , false ) <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 3c9cc5e . . e151288 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 32 , 7 + 32 , 6 @ @ import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . Collections ; <nl> - import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> @ @ - 48 , 6 + 47 , 7 @ @ import net . minecraft . stats . StatList ; <nl> import net . minecraft . world . storage . SaveHandler ; <nl> import net . minecraft . world . storage . WorldInfo ; <nl> import net . minecraftforge . classloading . FMLForgePlugin ; <nl> + import net . minecraftforge . client . ForgeClientHandler ; <nl> import net . minecraftforge . common . config . Config ; <nl> import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> @ @ - 97 , 6 + 97 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . gameevent . PlayerEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import javax . annotation . Nullable ; <nl> <nl> @ @ - 470 , 6 + 471 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> CapabilityAnimation . register ( ) ; <nl> CapabilityEnergy . register ( ) ; <nl> MinecraftForge . EVENT _ BUS . register ( MinecraftForge . INTERNAL _ HANDLER ) ; <nl> + if ( FMLCommonHandler . instance ( ) . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( ForgeClientHandler . class ) ; <nl> + } <nl> ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; <nl> MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> <nl> diff - - git a / src / main / resources / assets / forge / blockstates / dynbucket . json b / src / main / resources / assets / forge / blockstates / dynbucket . json <nl> index 9f240d8 . . 67d2e7d 100644 <nl> - - - a / src / main / resources / assets / forge / blockstates / dynbucket . json <nl> + + + b / src / main / resources / assets / forge / blockstates / dynbucket . json <nl> @ @ - 11 , 7 + 11 , 8 @ @ <nl> " transform " : " forge : default - item " , <nl> " custom " : { <nl> " fluid " : " water " , <nl> - " flipGas " : true <nl> + " flipGas " : true , <nl> + " applyTint " : false <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 6aa2e5e . . 01b8090 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 103 , 6 + 103 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . ScreenshotEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . client . event . sound . PlaySoundEvent ; <nl> + import net . minecraftforge . client . model . ModelDynBucket ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . animation . Animation ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> @ @ - 174 , 6 + 175 , 7 @ @ public class ForgeHooksClient <nl> { <nl> MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; <nl> ModelLoader . White . INSTANCE . register ( map ) ; <nl> + ModelDynBucket . LoaderDynBucket . INSTANCE . register ( map ) ; <nl> } <nl> <nl> public static void onTextureStitchedPost ( TextureMap map ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / BakedItemModel . java b / src / main / java / net / minecraftforge / client / model / BakedItemModel . java <nl> new file mode 100644 <nl> index 0000000 . . dfac4d7 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / BakedItemModel . java <nl> @ @ - 0 , 0 + 1 , 119 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import javax . vecmath . Matrix4f ; <nl> + <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraftforge . common . model . TRSRTransformation ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> + public class BakedItemModel implements IBakedModel <nl> + { <nl> + protected final ImmutableList < BakedQuad > quads ; <nl> + protected final TextureAtlasSprite particle ; <nl> + protected final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> + protected final ItemOverrideList overrides ; <nl> + protected final IBakedModel guiModel ; <nl> + <nl> + public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , ImmutableMap < TransformType , TRSRTransformation > transforms , ItemOverrideList overrides ) <nl> + { <nl> + this . quads = quads ; <nl> + this . particle = particle ; <nl> + this . transforms = transforms ; <nl> + this . overrides = overrides ; <nl> + this . guiModel = new BakedGuiItemModel < > ( this ) ; <nl> + } <nl> + <nl> + @ Override public boolean isAmbientOcclusion ( ) { return true ; } <nl> + @ Override public boolean isGui3d ( ) { return false ; } <nl> + @ Override public boolean isBuiltInRenderer ( ) { return false ; } <nl> + @ Override public TextureAtlasSprite getParticleTexture ( ) { return particle ; } <nl> + @ Override public ItemOverrideList getOverrides ( ) { return overrides ; } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> + { <nl> + if ( side = = null ) <nl> + { <nl> + return quads ; <nl> + } <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) <nl> + { <nl> + if ( type = = TransformType . GUI ) <nl> + { <nl> + return this . guiModel . handlePerspective ( type ) ; <nl> + } <nl> + return PerspectiveMapWrapper . handlePerspective ( this , transforms , type ) ; <nl> + } <nl> + <nl> + public static class BakedGuiItemModel < T extends BakedItemModel > extends BakedModelWrapper < T > <nl> + { <nl> + private final ImmutableList < BakedQuad > quads ; <nl> + <nl> + public BakedGuiItemModel ( T originalModel ) <nl> + { <nl> + super ( originalModel ) ; <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + for ( BakedQuad quad : originalModel . quads ) <nl> + { <nl> + if ( quad . getFace ( ) = = EnumFacing . SOUTH ) <nl> + { <nl> + builder . add ( quad ) ; <nl> + } <nl> + } <nl> + this . quads = builder . build ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> + { <nl> + if ( side = = null ) <nl> + { <nl> + return quads ; <nl> + } <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) <nl> + { <nl> + if ( type = = TransformType . GUI ) <nl> + { <nl> + return PerspectiveMapWrapper . handlePerspective ( this , originalModel . transforms , type ) ; <nl> + } <nl> + return this . originalModel . handlePerspective ( type ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java b / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java <nl> new file mode 100644 <nl> index 0000000 . . 1e14bd0 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java <nl> @ @ - 0 , 0 + 1 , 90 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import javax . vecmath . Matrix4f ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> + public abstract class BakedModelWrapper < T extends IBakedModel > implements IBakedModel <nl> + { <nl> + protected final T originalModel ; <nl> + <nl> + public BakedModelWrapper ( T originalModel ) <nl> + { <nl> + this . originalModel = originalModel ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> + { <nl> + return originalModel . getQuads ( state , side , rand ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return originalModel . isAmbientOcclusion ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return originalModel . isGui3d ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return originalModel . isBuiltInRenderer ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getParticleTexture ( ) <nl> + { <nl> + return originalModel . getParticleTexture ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return originalModel . getItemCameraTransforms ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemOverrideList getOverrides ( ) <nl> + { <nl> + return originalModel . getOverrides ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( ItemCameraTransforms . TransformType cameraTransformType ) <nl> + { <nl> + return originalModel . handlePerspective ( cameraTransformType ) ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> index 447df2d . . a0617fb 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 19 , 14 + 19 , 10 @ @ <nl> <nl> package net . minecraftforge . client . model ; <nl> <nl> - import javax . annotation . Nullable ; <nl> - import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector4f ; <nl> <nl> import net . minecraftforge . common . ForgeVersion ; <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> <nl> - import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> @ @ - 45 , 7 + 41 , 6 @ @ import java . util . Arrays ; <nl> import java . util . BitSet ; <nl> import java . util . Collection ; <nl> import java . util . EnumMap ; <nl> - import java . util . List ; <nl> import java . util . Optional ; <nl> import java . util . function . Function ; <nl> <nl> @ @ - 122 , 69 + 117 , 7 @ @ public final class ItemLayerModel implements IModel <nl> } <nl> TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; <nl> ImmutableMap < TransformType , TRSRTransformation > map = PerspectiveMapWrapper . getTransforms ( state ) ; <nl> - return new BakedItemModel ( builder . build ( ) , particle , map , overrides , null ) ; <nl> - } <nl> - <nl> - private static final class BakedItemModel implements IBakedModel <nl> - { <nl> - private final ImmutableList < BakedQuad > quads ; <nl> - private final TextureAtlasSprite particle ; <nl> - private final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> - private final IBakedModel otherModel ; <nl> - private final boolean isCulled ; <nl> - private final ItemOverrideList overrides ; <nl> - <nl> - public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , ImmutableMap < TransformType , TRSRTransformation > transforms , ItemOverrideList overrides , @ Nullable IBakedModel otherModel ) <nl> - { <nl> - this . quads = quads ; <nl> - this . particle = particle ; <nl> - this . transforms = transforms ; <nl> - this . overrides = overrides ; <nl> - if ( otherModel ! = null ) <nl> - { <nl> - this . otherModel = otherModel ; <nl> - this . isCulled = true ; <nl> - } <nl> - else <nl> - { <nl> - ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> - for ( BakedQuad quad : quads ) <nl> - { <nl> - if ( quad . getFace ( ) = = EnumFacing . SOUTH ) <nl> - { <nl> - builder . add ( quad ) ; <nl> - } <nl> - } <nl> - this . otherModel = new BakedItemModel ( builder . build ( ) , particle , transforms , overrides , this ) ; <nl> - isCulled = false ; <nl> - } <nl> - } <nl> - <nl> - public boolean isAmbientOcclusion ( ) { return true ; } <nl> - public boolean isGui3d ( ) { return false ; } <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> - public TextureAtlasSprite getParticleTexture ( ) { return particle ; } <nl> - public ItemOverrideList getOverrides ( ) { return overrides ; } <nl> - public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> - { <nl> - if ( side = = null ) return quads ; <nl> - return ImmutableList . of ( ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) <nl> - { <nl> - Pair < ? extends IBakedModel , Matrix4f > pair = PerspectiveMapWrapper . handlePerspective ( this , transforms , type ) ; <nl> - if ( type = = TransformType . GUI & & ! isCulled & & pair . getRight ( ) = = null ) <nl> - { <nl> - return Pair . of ( otherModel , null ) ; <nl> - } <nl> - else if ( type ! = TransformType . GUI & & isCulled ) <nl> - { <nl> - return Pair . of ( otherModel , pair . getRight ( ) ) ; <nl> - } <nl> - return pair ; <nl> - } <nl> + return new BakedItemModel ( builder . build ( ) , particle , map , overrides ) ; <nl> } <nl> <nl> public static ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format , Optional < TRSRTransformation > transform ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> index 1abe1fe . . 9a22abb 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java <nl> @ @ - 239 , 13 + 239 , 12 @ @ public final class ItemTextureQuadConverter <nl> float x1 , float y1 , float x2 , float y2 , float z , <nl> float u1 , float v1 , float u2 , float v2 ) <nl> { <nl> - side = side . getOpposite ( ) ; <nl> UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; <nl> builder . setQuadTint ( - 1 ) ; <nl> builder . setQuadOrientation ( side ) ; <nl> builder . setTexture ( sprite ) ; <nl> <nl> - if ( side = = EnumFacing . NORTH ) <nl> + if ( side = = EnumFacing . SOUTH ) <nl> { <nl> putVertex ( builder , format , transform , side , x1 , y1 , z , u1 , v2 , color ) ; <nl> putVertex ( builder , format , transform , side , x2 , y1 , z , u2 , v2 , color ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> index 466cf5d . . fffb047 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java <nl> @ @ - 19 , 25 + 19 , 24 @ @ <nl> <nl> package net . minecraftforge . client . model ; <nl> <nl> + import java . io . IOException ; <nl> import java . util . Collection ; <nl> - import java . util . List ; <nl> import java . util . Map ; <nl> <nl> + import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> - import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Quat4f ; <nl> <nl> - import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; <nl> - import net . minecraft . client . renderer . block . model . ItemOverride ; <nl> import net . minecraft . client . renderer . block . model . ItemOverrideList ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . IResource ; <nl> import net . minecraft . client . resources . IResourceManager ; <nl> import net . minecraft . entity . EntityLivingBase ; <nl> import net . minecraft . item . ItemStack ; <nl> @ @ - 45 , 7 + 44 , 6 @ @ import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> - import net . minecraftforge . common . model . IModelPart ; <nl> import net . minecraftforge . common . model . IModelState ; <nl> import net . minecraftforge . common . model . TRSRTransformation ; <nl> import net . minecraftforge . fluids . Fluid ; <nl> @ @ - 53 , 10 + 51 , 12 @ @ import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . FluidStack ; <nl> import net . minecraftforge . fluids . FluidUtil ; <nl> <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> - <nl> + import java . util . Objects ; <nl> import java . util . function . Function ; <nl> import java . util . Optional ; <nl> + <nl> + import static net . minecraftforge . client . model . ModelDynBucket . LoaderDynBucket . getResource ; <nl> + <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> @ @ - 67 , 8 + 67 , 8 @ @ public final class ModelDynBucket implements IModel <nl> public static final ModelResourceLocation LOCATION = new ModelResourceLocation ( new ResourceLocation ( ForgeVersion . MOD _ ID , " dynbucket " ) , " inventory " ) ; <nl> <nl> / / minimal Z offset to prevent depth - fighting <nl> - private static final float NORTH _ Z _ BASE = 7 . 496f / 16f ; <nl> - private static final float SOUTH _ Z _ BASE = 8 . 504f / 16f ; <nl> + private static final float NORTH _ Z _ COVER = 7 . 496f / 16f ; <nl> + private static final float SOUTH _ Z _ COVER = 8 . 504f / 16f ; <nl> private static final float NORTH _ Z _ FLUID = 7 . 498f / 16f ; <nl> private static final float SOUTH _ Z _ FLUID = 8 . 502f / 16f ; <nl> <nl> @ @ - 127 , 6 + 127 , 7 @ @ public final class ModelDynBucket implements IModel <nl> <nl> TRSRTransformation transform = state . apply ( Optional . empty ( ) ) . orElse ( TRSRTransformation . identity ( ) ) ; <nl> TextureAtlasSprite fluidSprite = null ; <nl> + TextureAtlasSprite particleSprite = null ; <nl> ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> <nl> if ( fluid ! = null ) { <nl> @ @ - 138 , 6 + 139 , 7 @ @ public final class ModelDynBucket implements IModel <nl> / / build base ( insidest ) <nl> IBakedModel model = ( new ItemLayerModel ( ImmutableList . of ( baseLocation ) ) ) . bake ( state , format , bakedTextureGetter ) ; <nl> builder . addAll ( model . getQuads ( null , null , 0 ) ) ; <nl> + particleSprite = model . getParticleTexture ( ) ; <nl> } <nl> if ( liquidLocation ! = null & & fluidSprite ! = null ) <nl> { <nl> @ @ - 145 , 17 + 147 , 21 @ @ public final class ModelDynBucket implements IModel <nl> / / build liquid layer ( inside ) <nl> builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , fluid . getColor ( ) ) ) ; <nl> builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , fluid . getColor ( ) ) ) ; <nl> + particleSprite = fluidSprite ; <nl> } <nl> if ( coverLocation ! = null ) <nl> { <nl> / / cover ( the actual item around the other two ) <nl> - TextureAtlasSprite base = bakedTextureGetter . apply ( coverLocation ) ; <nl> - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ BASE , base , EnumFacing . NORTH , 0xffffffff ) ) ; <nl> - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ BASE , base , EnumFacing . SOUTH , 0xffffffff ) ) ; <nl> + TextureAtlasSprite cover = bakedTextureGetter . apply ( coverLocation ) ; <nl> + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xffffffff ) ) ; <nl> + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xffffffff ) ) ; <nl> + if ( particleSprite = = null ) <nl> + { <nl> + particleSprite = cover ; <nl> + } <nl> } <nl> <nl> - <nl> - return new BakedDynBucket ( this , builder . build ( ) , fluidSprite , format , Maps . immutableEnumMap ( transformMap ) , Maps . newHashMap ( ) ) ; <nl> + return new BakedDynBucket ( this , builder . build ( ) , particleSprite , format , Maps . immutableEnumMap ( transformMap ) , Maps . newHashMap ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 235 , 6 + 241 , 135 @ @ public final class ModelDynBucket implements IModel <nl> { <nl> / / no need to clear cache since we create a new model instance <nl> } <nl> + <nl> + public void register ( TextureMap map ) <nl> + { <nl> + / / only create these textures if they are not added by a resource pack <nl> + <nl> + if ( getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / bucket _ cover . png " ) ) = = null ) <nl> + { <nl> + ResourceLocation bucketCover = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / bucket _ cover " ) ; <nl> + BucketCoverSprite bucketCoverSprite = new BucketCoverSprite ( bucketCover ) ; <nl> + map . setTextureEntry ( bucketCoverSprite ) ; <nl> + } <nl> + <nl> + if ( getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / bucket _ base . png " ) ) = = null ) <nl> + { <nl> + ResourceLocation bucketBase = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / bucket _ base " ) ; <nl> + BucketBaseSprite bucketBaseSprite = new BucketBaseSprite ( bucketBase ) ; <nl> + map . setTextureEntry ( bucketBaseSprite ) ; <nl> + } <nl> + } <nl> + <nl> + @ Nullable <nl> + protected static IResource getResource ( ResourceLocation resourceLocation ) <nl> + { <nl> + try <nl> + { <nl> + return Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resourceLocation ) ; <nl> + } <nl> + catch ( IOException ignored ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private static final class BucketBaseSprite extends TextureAtlasSprite <nl> + { <nl> + private final ResourceLocation bucket = new ResourceLocation ( " items / bucket _ empty " ) ; <nl> + private final ImmutableList < ResourceLocation > dependencies = ImmutableList . of ( bucket ) ; <nl> + <nl> + private BucketBaseSprite ( ResourceLocation resourceLocation ) <nl> + { <nl> + super ( resourceLocation . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCustomLoader ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getDependencies ( ) <nl> + { <nl> + return dependencies ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean load ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location , @ Nonnull Function < ResourceLocation , TextureAtlasSprite > textureGetter ) <nl> + { <nl> + final TextureAtlasSprite sprite = textureGetter . apply ( bucket ) ; <nl> + width = sprite . getIconWidth ( ) ; <nl> + height = sprite . getIconHeight ( ) ; <nl> + final int [ ] [ ] pixels = sprite . getFrameTextureData ( 0 ) ; <nl> + this . clearFramesTextureData ( ) ; <nl> + this . framesTextureData . add ( pixels ) ; <nl> + return false ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Creates a bucket cover sprite from the vanilla resource . <nl> + * / <nl> + private static final class BucketCoverSprite extends TextureAtlasSprite <nl> + { <nl> + private final ResourceLocation bucket = new ResourceLocation ( " items / bucket _ empty " ) ; <nl> + private final ResourceLocation bucketCoverMask = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / vanilla _ bucket _ cover _ mask " ) ; <nl> + private final ImmutableList < ResourceLocation > dependencies = ImmutableList . of ( bucket , bucketCoverMask ) ; <nl> + <nl> + private BucketCoverSprite ( ResourceLocation resourceLocation ) <nl> + { <nl> + super ( resourceLocation . toString ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCustomLoader ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < ResourceLocation > getDependencies ( ) <nl> + { <nl> + return dependencies ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean load ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location , @ Nonnull Function < ResourceLocation , TextureAtlasSprite > textureGetter ) <nl> + { <nl> + final TextureAtlasSprite sprite = textureGetter . apply ( bucket ) ; <nl> + final TextureAtlasSprite alphaMask = textureGetter . apply ( bucketCoverMask ) ; <nl> + width = sprite . getIconWidth ( ) ; <nl> + height = sprite . getIconHeight ( ) ; <nl> + final int [ ] [ ] pixels = new int [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] [ ] ; <nl> + pixels [ 0 ] = new int [ width * height ] ; <nl> + <nl> + IResource empty = getResource ( new ResourceLocation ( " textures / items / bucket _ empty . png " ) ) ; <nl> + IResource mask = getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / vanilla _ bucket _ cover _ mask . png " ) ) ; <nl> + <nl> + / / use the alpha mask if it fits , otherwise leave the cover texture blank <nl> + if ( empty ! = null & & mask ! = null & & Objects . equals ( empty . getResourcePackName ( ) , mask . getResourcePackName ( ) ) & & <nl> + alphaMask . getIconWidth ( ) = = width & & alphaMask . getIconHeight ( ) = = height ) <nl> + { <nl> + final int [ ] [ ] oldPixels = sprite . getFrameTextureData ( 0 ) ; <nl> + final int [ ] [ ] alphaPixels = alphaMask . getFrameTextureData ( 0 ) ; <nl> + <nl> + for ( int p = 0 ; p < width * height ; p + + ) <nl> + { <nl> + final int alphaMultiplier = alphaPixels [ 0 ] [ p ] > > > 24 ; <nl> + final int oldPixel = oldPixels [ 0 ] [ p ] ; <nl> + final int oldPixelAlpha = oldPixel > > > 24 ; <nl> + final int newAlpha = oldPixelAlpha * alphaMultiplier / 0xFF ; <nl> + pixels [ 0 ] [ p ] = ( oldPixel & 0xFFFFFF ) + ( newAlpha < < 24 ) ; <nl> + } <nl> + } <nl> + <nl> + this . clearFramesTextureData ( ) ; <nl> + this . framesTextureData . add ( pixels ) ; <nl> + return false ; <nl> + } <nl> } <nl> <nl> private static final class BakedDynBucketOverrideHandler extends ItemOverrideList <nl> @ @ - 278 , 51 + 413 , 24 @ @ public final class ModelDynBucket implements IModel <nl> } <nl> <nl> / / the dynamic bucket is based on the empty bucket <nl> - private static final class BakedDynBucket implements IBakedModel <nl> + private static final class BakedDynBucket extends BakedItemModel <nl> { <nl> - <nl> private final ModelDynBucket parent ; <nl> - / / FIXME : guava cache ? <nl> private final Map < String , IBakedModel > cache ; / / contains all the baked models since they ' ll never change <nl> - private final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> - private final ImmutableList < BakedQuad > quads ; <nl> - private final TextureAtlasSprite particle ; <nl> private final VertexFormat format ; <nl> <nl> public BakedDynBucket ( ModelDynBucket parent , <nl> - ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format , ImmutableMap < ItemCameraTransforms . TransformType , TRSRTransformation > transforms , <nl> + ImmutableList < BakedQuad > quads , <nl> + TextureAtlasSprite particle , <nl> + VertexFormat format , <nl> + ImmutableMap < TransformType , TRSRTransformation > transforms , <nl> Map < String , IBakedModel > cache ) <nl> { <nl> - this . quads = quads ; <nl> - this . particle = particle ; <nl> + super ( quads , particle , transforms , BakedDynBucketOverrideHandler . INSTANCE ) ; <nl> this . format = format ; <nl> this . parent = parent ; <nl> - this . transforms = transforms ; <nl> this . cache = cache ; <nl> } <nl> - <nl> - @ Override <nl> - public ItemOverrideList getOverrides ( ) <nl> - { <nl> - return BakedDynBucketOverrideHandler . INSTANCE ; <nl> - } <nl> - <nl> - @ Override <nl> - public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) <nl> - { <nl> - return PerspectiveMapWrapper . handlePerspective ( this , transforms , cameraTransformType ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) <nl> - { <nl> - if ( side = = null ) return quads ; <nl> - return ImmutableList . of ( ) ; <nl> - } <nl> - <nl> - public boolean isAmbientOcclusion ( ) { return true ; } <nl> - public boolean isGui3d ( ) { return false ; } <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> - public TextureAtlasSprite getParticleTexture ( ) { return particle ; } <nl> } <nl> + <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 751d7d7 . . 690a488 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 318 , 79 + 318 , 6 @ @ public final class ModelLoader extends ModelBakery <nl> } <nl> } <nl> ProgressManager . pop ( itemBar ) ; <nl> - <nl> - / / replace vanilla bucket models if desired . done afterwards for performance reasons <nl> - if ( ForgeModContainer . replaceVanillaBucketModel ) <nl> - { <nl> - / / ensure the bucket model is loaded <nl> - if ( ! stateModels . containsKey ( ModelDynBucket . LOCATION ) ) <nl> - { <nl> - / / load forges blockstate json for it <nl> - try <nl> - { <nl> - registerVariant ( getModelBlockDefinition ( ModelDynBucket . LOCATION ) , ModelDynBucket . LOCATION ) ; <nl> - } <nl> - catch ( Exception exception ) <nl> - { <nl> - FMLLog . log . error ( " Could not load the forge bucket model from the blockstate " , exception ) ; <nl> - return ; <nl> - } <nl> - } <nl> - <nl> - / / empty bucket <nl> - for ( String s : getVariantNames ( Items . BUCKET ) ) <nl> - { <nl> - ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> - IModel model = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ForgeVersion . MOD _ ID , " item / bucket " ) ) ; <nl> - / / only on successful load , otherwise continue using the old model <nl> - if ( model ! = getMissingModel ( ) ) <nl> - { <nl> - stateModels . put ( memory , model ) ; <nl> - } <nl> - } <nl> - <nl> - setBucketModel ( Items . WATER _ BUCKET ) ; <nl> - setBucketModel ( Items . LAVA _ BUCKET ) ; <nl> - / / milk bucket only replaced if some mod adds milk <nl> - if ( FluidRegistry . isFluidRegistered ( " milk " ) ) <nl> - { <nl> - / / can the milk be put into a bucket ? <nl> - Fluid milk = FluidRegistry . getFluid ( " milk " ) ; <nl> - FluidStack milkStack = new FluidStack ( milk , Fluid . BUCKET _ VOLUME ) ; <nl> - IFluidHandler bucketHandler = FluidUtil . getFluidHandler ( new ItemStack ( Items . BUCKET ) ) ; <nl> - if ( bucketHandler ! = null & & bucketHandler . fill ( milkStack , false ) = = Fluid . BUCKET _ VOLUME ) <nl> - { <nl> - setBucketModel ( Items . MILK _ BUCKET ) ; <nl> - } <nl> - } <nl> - else <nl> - { <nl> - / / milk bucket if no milk fluid is present <nl> - for ( String s : getVariantNames ( Items . MILK _ BUCKET ) ) <nl> - { <nl> - ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> - IModel model = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ForgeVersion . MOD _ ID , " item / bucket _ milk " ) ) ; <nl> - / / only on successful load , otherwise continue using the old model <nl> - if ( model ! = getMissingModel ( ) ) <nl> - { <nl> - stateModels . put ( memory , model ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - private void setBucketModel ( Item item ) <nl> - { <nl> - for ( String s : getVariantNames ( item ) ) <nl> - { <nl> - ModelResourceLocation memory = getInventoryVariant ( s ) ; <nl> - IModel model = stateModels . get ( ModelDynBucket . LOCATION ) ; <nl> - if ( model ! = null ) <nl> - { <nl> - stateModels . put ( memory , model ) ; <nl> - } <nl> - } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 8c168fd . . 95b69fe 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 112 , 6 + 112 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean shouldSortRecipies = true ; <nl> public static boolean disableVersionCheck = false ; <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> + @ Deprecated / / TODO remove in 1 . 13 <nl> public static boolean replaceVanillaBucketModel = true ; <nl> public static boolean zoomInMissingModelTextInGui = false ; <nl> public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag <nl> @ @ - 213 , 6 + 214 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " spawnHasFuzz " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " spawnHasFuzz " ) ; <nl> if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " disableStitchedFileSaving " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " disableStitchedFileSaving " ) ; <nl> if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " java8Reminder " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " java8Reminder " ) ; <nl> + if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " replaceVanillaBucketModel " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " replaceVanillaBucketModel " ) ; <nl> <nl> / / remap properties wrongly listed as general properties to client properties <nl> remapGeneralPropertyToClient ( " biomeSkyBlendRange " ) ; <nl> @ @ - 315 , 12 + 317 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> / / Client - Side only properties <nl> propOrder = new ArrayList < String > ( ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ CLIENT , " replaceVanillaBucketModel " , false , <nl> - " Replace the vanilla bucket models with Forges own dynamic bucket model . Unifies bucket visuals if a mod uses the Forge bucket model . " ) ; <nl> - prop . setLanguageKey ( " forge . configgui . replaceBuckets " ) . setRequiresMcRestart ( true ) ; <nl> - replaceVanillaBucketModel = prop . getBoolean ( false ) ; <nl> - propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> prop = config . get ( Configuration . CATEGORY _ CLIENT , " zoomInMissingModelTextInGui " , false , <nl> " Toggle off to make missing model text in the gui fit inside the slot . " ) ; <nl> zoomInMissingModelTextInGui = prop . getBoolean ( false ) ; <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 7e6a0c1 . . 9e3fb22 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 63 , 7 + 63 , 6 @ @ forge . configgui . zombieBabyChance = Zombie Baby Chance <nl> forge . configgui . zombieBaseSummonChance . tooltip = Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . <nl> forge . configgui . zombieBaseSummonChance = Zombie Summon Chance <nl> forge . configgui . stencilbits = Enable GL Stencil Bits <nl> - forge . configgui . replaceBuckets = Use Forge ' s bucket model <nl> forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled <nl> forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . <nl> forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI <nl> diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ base . png b / src / main / resources / assets / forge / textures / items / bucket _ base . png <nl> deleted file mode 100644 <nl> index 04faf51 . . 0000000 <nl> Binary files a / src / main / resources / assets / forge / textures / items / bucket _ base . png and / dev / null differ <nl> diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ cover . png b / src / main / resources / assets / forge / textures / items / bucket _ cover . png <nl> deleted file mode 100644 <nl> index 863787a . . 0000000 <nl> Binary files a / src / main / resources / assets / forge / textures / items / bucket _ cover . png and / dev / null differ <nl> diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ fluid . png b / src / main / resources / assets / forge / textures / items / bucket _ fluid . png <nl> index d03389a . . d89ea08 100644 <nl> Binary files a / src / main / resources / assets / forge / textures / items / bucket _ fluid . png and b / src / main / resources / assets / forge / textures / items / bucket _ fluid . png differ <nl> diff - - git a / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png b / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png <nl> new file mode 100644 <nl> index 0000000 . . 4b66789 <nl> Binary files / dev / null and b / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png differ

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / FluidContainerColorer . java b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java 
 new file mode 100644 
 index 0000000 . . cdfc53e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / FluidContainerColorer . java 
 @ @ - 0 , 0 + 1 , 39 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client ; 
 + 
 + import net . minecraft . client . renderer . color . IItemColor ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + 
 + import javax . annotation . Nonnull ; 
 + 
 + public class FluidContainerColorer implements IItemColor 
 + { 
 + @ Override 
 + public int colorMultiplier ( @ Nonnull ItemStack stack , int tintIndex ) 
 + { 
 + if ( tintIndex ! = 1 ) return 0xFFFFFFFF ; 
 + FluidStack fluidStack = FluidUtil . getFluidContained ( stack ) ; 
 + if ( fluidStack = = null ) return 0xFFFFFFFF ; 
 + return fluidStack . getFluid ( ) . getColor ( fluidStack ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeClientHandler . java b / src / main / java / net / minecraftforge / client / ForgeClientHandler . java 
 new file mode 100644 
 index 0000000 . . e2a2c86 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / ForgeClientHandler . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client ; 
 + 
 + import net . minecraftforge . client . event . ColorHandlerEvent ; 
 + import net . minecraftforge . client . event . ModelRegistryEvent ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + 
 + public class ForgeClientHandler 
 + { 
 + @ SubscribeEvent 
 + public static void registerModels ( ModelRegistryEvent event ) 
 + { 
 + / / register model for the universal bucket , if it exists 
 + if ( FluidRegistry . isUniversalBucketEnabled ( ) ) 
 + { 
 + ModelLoader . setBucketModelDefinition ( ForgeModContainer . getInstance ( ) . universalBucket ) ; 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + public static void registerItemHandlers ( ColorHandlerEvent . Item event ) 
 + { 
 + if ( FluidRegistry . isUniversalBucketEnabled ( ) ) 
 + { 
 + event . getItemColors ( ) . registerItemColorHandler ( new FluidContainerColorer ( ) , ForgeModContainer . getInstance ( ) . universalBucket ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 index 2221939 . . 3395655 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 @ @ - 38 , 6 + 38 , 13 @ @ public final class ItemTextureQuadConverter 
 / / non - instantiable 
 } 
 
 + / * * @ deprecated use { @ link # convertTexture ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / 
 + @ Deprecated / / TODO : remove 
 + public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + { 
 + return convertTexture ( format , transform , template , sprite , z , facing , color , - 1 ) ; 
 + } 
 + 
 / * * 
 * Takes a texture and converts it into BakedQuads . 
 * The conversion is done by scanning the texture horizontally and vertically and creating " strips " of the texture . 
 @ @ - 48 , 21 + 55 , 29 @ @ public final class ItemTextureQuadConverter 
 * 
 * @ param format 
 * @ param template The input texture to convert 
 - * @ param sprite The texture whose UVs shall be used @ return The generated quads . 
 + * @ param sprite The texture whose UVs shall be used 
 + * @ return The generated quads . 
 * / 
 - public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + public static List < UnpackedBakedQuad > convertTexture ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) 
 { 
 - List < UnpackedBakedQuad > horizontal = convertTextureHorizontal ( format , transform , template , sprite , z , facing , color ) ; 
 - List < UnpackedBakedQuad > vertical = convertTextureVertical ( format , transform , template , sprite , z , facing , color ) ; 
 + List < UnpackedBakedQuad > horizontal = convertTextureHorizontal ( format , transform , template , sprite , z , facing , color , tint ) ; 
 + List < UnpackedBakedQuad > vertical = convertTextureVertical ( format , transform , template , sprite , z , facing , color , tint ) ; 
 
 return horizontal . size ( ) > = vertical . size ( ) ? horizontal : vertical ; 
 } 
 
 + / * * @ deprecated use { @ link # convertTextureHorizontal ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / 
 + @ Deprecated / / TODO : remove 
 + public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + { 
 + return convertTextureHorizontal ( format , transform , template , sprite , z , facing , color , - 1 ) ; 
 + } 
 + 
 / * * 
 * Scans a texture and converts it into a list of horizontal strips stacked on top of each other . 
 * The height of the strips is as big as possible . 
 * / 
 - public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + public static List < UnpackedBakedQuad > convertTextureHorizontal ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) 
 { 
 int w = template . getIconWidth ( ) ; 
 int h = template . getIconHeight ( ) ; 
 @ @ - 116 , 7 + 131 , 7 @ @ public final class ItemTextureQuadConverter 
 ( float ) y * hScale , 
 ( float ) x * wScale , 
 ( float ) endY * hScale , 
 - z , sprite , facing , color ) ) ; 
 + z , sprite , facing , color , tint ) ) ; 
 
 / / update Y if all the rows match . no need to rescan 
 if ( endY - y > 1 ) 
 @ @ - 132 , 11 + 147 , 18 @ @ public final class ItemTextureQuadConverter 
 return quads ; 
 } 
 
 + / * * @ deprecated use { @ link # convertTextureVertical ( VertexFormat , TRSRTransformation , TextureAtlasSprite , TextureAtlasSprite , float , EnumFacing , int , int ) } * / 
 + @ Deprecated / / TODO : remove 
 + public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + { 
 + return convertTextureVertical ( format , transform , template , sprite , z , facing , color , - 1 ) ; 
 + } 
 + 
 / * * 
 * Scans a texture and converts it into a list of vertical strips stacked next to each other from left to right . 
 * The width of the strips is as big as possible . 
 * / 
 - public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color ) 
 + public static List < UnpackedBakedQuad > convertTextureVertical ( VertexFormat format , TRSRTransformation transform , TextureAtlasSprite template , TextureAtlasSprite sprite , float z , EnumFacing facing , int color , int tint ) 
 { 
 int w = template . getIconWidth ( ) ; 
 int h = template . getIconHeight ( ) ; 
 @ @ - 190 , 7 + 212 , 7 @ @ public final class ItemTextureQuadConverter 
 ( float ) start * hScale , 
 ( float ) endX * wScale , 
 ( float ) y * hScale , 
 - z , sprite , facing , color ) ) ; 
 + z , sprite , facing , color , tint ) ) ; 
 
 / / update X if all the columns match . no need to rescan 
 if ( endX - x > 1 ) 
 @ @ - 211 , 11 + 233 , 18 @ @ public final class ItemTextureQuadConverter 
 return ( color > > 24 & 255 ) / 255f > 0 . 1f ; 
 } 
 
 + / * * @ deprecated use { @ link # genQuad ( VertexFormat , TRSRTransformation , float , float , float , float , float , TextureAtlasSprite , EnumFacing , int , int ) } * / 
 + @ Deprecated / / TODO : remove 
 + public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color ) 
 + { 
 + return genQuad ( format , transform , x1 , y1 , x2 , y2 , z , sprite , facing , color , - 1 ) ; 
 + } 
 + 
 / * * 
 * Generates a Front / Back quad for an itemmodel . Therefore only supports facing NORTH and SOUTH . 
 * Coordinates are [ 0 , 16 ] to match the usual coordinates used in TextureAtlasSprites 
 * / 
 - public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color ) 
 + public static UnpackedBakedQuad genQuad ( VertexFormat format , TRSRTransformation transform , float x1 , float y1 , float x2 , float y2 , float z , TextureAtlasSprite sprite , EnumFacing facing , int color , int tint ) 
 { 
 float u1 = sprite . getInterpolatedU ( x1 ) ; 
 float v1 = sprite . getInterpolatedV ( y1 ) ; 
 @ @ - 231 , 15 + 260 , 16 @ @ public final class ItemTextureQuadConverter 
 y1 = 1f - y2 ; 
 y2 = 1f - tmp ; 
 
 - return putQuad ( format , transform , facing , sprite , color , x1 , y1 , x2 , y2 , z , u1 , v1 , u2 , v2 ) ; 
 + return putQuad ( format , transform , facing , sprite , color , tint , x1 , y1 , x2 , y2 , z , u1 , v1 , u2 , v2 ) ; 
 } 
 
 - private static UnpackedBakedQuad putQuad ( VertexFormat format , TRSRTransformation transform , EnumFacing side , TextureAtlasSprite sprite , int color , 
 + private static UnpackedBakedQuad putQuad ( VertexFormat format , TRSRTransformation transform , EnumFacing side , TextureAtlasSprite sprite , int color , int tint , 
 float x1 , float y1 , float x2 , float y2 , float z , 
 float u1 , float v1 , float u2 , float v2 ) 
 { 
 UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; 
 - builder . setQuadTint ( - 1 ) ; 
 + 
 + builder . setQuadTint ( tint ) ; 
 builder . setQuadOrientation ( side ) ; 
 builder . setTexture ( sprite ) ; 
 
 @ @ - 249 , 7 + 279 , 8 @ @ public final class ItemTextureQuadConverter 
 putVertex ( builder , format , transform , side , x2 , y1 , z , u2 , v2 , color ) ; 
 putVertex ( builder , format , transform , side , x2 , y2 , z , u2 , v1 , color ) ; 
 putVertex ( builder , format , transform , side , x1 , y2 , z , u1 , v1 , color ) ; 
 - } else 
 + } 
 + else 
 { 
 putVertex ( builder , format , transform , side , x1 , y1 , z , u1 , v2 , color ) ; 
 putVertex ( builder , format , transform , side , x1 , y2 , z , u1 , v1 , color ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 index 88e3620 . . 81ff45a 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 @ @ - 84 , 20 + 84 , 30 @ @ public final class ModelDynBucket implements IModel 
 private final ResourceLocation coverLocation ; 
 @ Nullable 
 private final Fluid fluid ; 
 + 
 private final boolean flipGas ; 
 + private final boolean tint ; 
 
 public ModelDynBucket ( ) 
 { 
 - this ( null , null , null , null , false ) ; 
 + this ( null , null , null , null , false , true ) ; 
 } 
 
 + / * * @ deprecated use { @ link # ModelDynBucket ( ResourceLocation , ResourceLocation , ResourceLocation , Fluid , boolean , boolean ) } * / 
 + @ Deprecated / / TODO : remove 
 public ModelDynBucket ( @ Nullable ResourceLocation baseLocation , @ Nullable ResourceLocation liquidLocation , @ Nullable ResourceLocation coverLocation , @ Nullable Fluid fluid , boolean flipGas ) 
 { 
 + this ( baseLocation , liquidLocation , coverLocation , fluid , flipGas , true ) ; 
 + } 
 + 
 + public ModelDynBucket ( @ Nullable ResourceLocation baseLocation , @ Nullable ResourceLocation liquidLocation , @ Nullable ResourceLocation coverLocation , @ Nullable Fluid fluid , boolean flipGas , boolean tint ) 
 + { 
 this . baseLocation = baseLocation ; 
 this . liquidLocation = liquidLocation ; 
 this . coverLocation = coverLocation ; 
 this . fluid = fluid ; 
 this . flipGas = flipGas ; 
 + this . tint = tint ; 
 } 
 
 @ Override 
 @ @ - 150 , 16 + 160 , 16 @ @ public final class ModelDynBucket implements IModel 
 { 
 TextureAtlasSprite liquid = bakedTextureGetter . apply ( liquidLocation ) ; 
 / / build liquid layer ( inside ) 
 - builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , fluid . getColor ( ) ) ) ; 
 - builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , fluid . getColor ( ) ) ) ; 
 + builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , tint ? fluid . getColor ( ) : 0xFFFFFFFF , 1 ) ) ; 
 + builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , tint ? fluid . getColor ( ) : 0xFFFFFFFF , 1 ) ) ; 
 particleSprite = fluidSprite ; 
 } 
 if ( coverLocation ! = null ) 
 { 
 / / cover ( the actual item around the other two ) 
 TextureAtlasSprite cover = bakedTextureGetter . apply ( coverLocation ) ; 
 - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xffffffff ) ) ; 
 - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xffffffff ) ) ; 
 + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xFFFFFFFF , 2 ) ) ; 
 + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xFFFFFFFF , 2 ) ) ; 
 if ( particleSprite = = null ) 
 { 
 particleSprite = cover ; 
 @ @ - 171 , 8 + 181 , 9 @ @ public final class ModelDynBucket implements IModel 
 
 / * * 
 * Sets the liquid in the model . 
 - * fluid - Name of the fluid in the FluidRegistry 
 - * flipGas - If " true " the model will be flipped upside down if the liquid is a gas . If " false " it wont 
 + * " fluid " - Name of the fluid in the FluidRegistry 
 + * " flipGas " - If " true " the model will be flipped upside down if the liquid is a gas . If " false " it won ' t . 
 + * " applyTint " - If " true " the model will tint the fluid quads according to the fluid ' s base color . 
 * < p / > 
 * If the fluid can ' t be found , water is used 
 * / 
 @ @ - 194 , 8 + 205 , 20 @ @ public final class ModelDynBucket implements IModel 
 throw new IllegalArgumentException ( String . format ( " DynBucket custom data \ " flipGas \ " must have value \ ' true \ ' or \ ' false \ ' ( was \ ' % s \ ' ) " , flipStr ) ) ; 
 } 
 
 + boolean tint = this . tint ; 
 + if ( customData . containsKey ( " applyTint " ) ) 
 + { 
 + String string = customData . get ( " applyTint " ) ; 
 + switch ( string ) 
 + { 
 + case " true " : tint = true ; break ; 
 + case " false " : tint = false ; break ; 
 + default : throw new IllegalArgumentException ( String . format ( " DynBucket custom data \ " applyTint \ " must have value \ ' true \ ' or \ ' false \ ' ( was \ ' % s \ ' ) " , string ) ) ; 
 + } 
 + } 
 + 
 / / create new model with correct liquid 
 - return new ModelDynBucket ( baseLocation , liquidLocation , coverLocation , fluid , flip ) ; 
 + return new ModelDynBucket ( baseLocation , liquidLocation , coverLocation , fluid , flip , tint ) ; 
 } 
 
 / * * 
 @ @ - 222 , 7 + 245 , 7 @ @ public final class ModelDynBucket implements IModel 
 if ( textures . containsKey ( " cover " ) ) 
 cover = new ResourceLocation ( textures . get ( " cover " ) ) ; 
 
 - return new ModelDynBucket ( base , liquid , cover , fluid , flipGas ) ; 
 + return new ModelDynBucket ( base , liquid , cover , fluid , flipGas , tint ) ; 
 } 
 
 public enum LoaderDynBucket implements ICustomModelLoader 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index edf36be . . b1883b1 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 73 , 14 + 73 , 12 @ @ import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . registry . IRegistry ; 
 import net . minecraftforge . client . model . animation . AnimationItemOverrideList ; 
 import net . minecraftforge . client . model . animation . ModelBlockAnimation ; 
 - import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . model . IModelState ; 
 import net . minecraftforge . common . model . Models ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . common . model . animation . IClip ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 import net . minecraftforge . common . property . Properties ; 
 - import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fml . client . FMLClientHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . ProgressManager ; 
 @ @ - 276 , 12 + 274 , 6 @ @ public final class ModelLoader extends ModelBakery 
 @ Override 
 protected void loadItemModels ( ) 
 { 
 - / / register model for the universal bucket , if it exists 
 - if ( FluidRegistry . isUniversalBucketEnabled ( ) ) 
 - { 
 - setBucketModelDefinition ( ForgeModContainer . getInstance ( ) . universalBucket ) ; 
 - } 
 - 
 registerVariantNames ( ) ; 
 
 List < Item > items = StreamSupport . stream ( Item . REGISTRY . spliterator ( ) , false ) 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 3c9cc5e . . e151288 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 32 , 7 + 32 , 6 @ @ import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . Collections ; 
 - import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 @ @ - 48 , 6 + 47 , 7 @ @ import net . minecraft . stats . StatList ; 
 import net . minecraft . world . storage . SaveHandler ; 
 import net . minecraft . world . storage . WorldInfo ; 
 import net . minecraftforge . classloading . FMLForgePlugin ; 
 + import net . minecraftforge . client . ForgeClientHandler ; 
 import net . minecraftforge . common . config . Config ; 
 import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 @ @ - 97 , 6 + 97 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . gameevent . PlayerEvent ; 
 import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 
 import javax . annotation . Nullable ; 
 
 @ @ - 470 , 6 + 471 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 CapabilityAnimation . register ( ) ; 
 CapabilityEnergy . register ( ) ; 
 MinecraftForge . EVENT _ BUS . register ( MinecraftForge . INTERNAL _ HANDLER ) ; 
 + if ( FMLCommonHandler . instance ( ) . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( ForgeClientHandler . class ) ; 
 + } 
 ForgeChunkManager . captureConfig ( evt . getModConfigurationDirectory ( ) ) ; 
 MinecraftForge . EVENT _ BUS . register ( this ) ; 
 
 diff - - git a / src / main / resources / assets / forge / blockstates / dynbucket . json b / src / main / resources / assets / forge / blockstates / dynbucket . json 
 index 9f240d8 . . 67d2e7d 100644 
 - - - a / src / main / resources / assets / forge / blockstates / dynbucket . json 
 + + + b / src / main / resources / assets / forge / blockstates / dynbucket . json 
 @ @ - 11 , 7 + 11 , 8 @ @ 
 " transform " : " forge : default - item " , 
 " custom " : { 
 " fluid " : " water " , 
 - " flipGas " : true 
 + " flipGas " : true , 
 + " applyTint " : false 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 6aa2e5e . . 01b8090 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 103 , 6 + 103 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . ScreenshotEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . client . event . sound . PlaySoundEvent ; 
 + import net . minecraftforge . client . model . ModelDynBucket ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . animation . Animation ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 @ @ - 174 , 6 + 175 , 7 @ @ public class ForgeHooksClient 
 { 
 MinecraftForge . EVENT _ BUS . post ( new TextureStitchEvent . Pre ( map ) ) ; 
 ModelLoader . White . INSTANCE . register ( map ) ; 
 + ModelDynBucket . LoaderDynBucket . INSTANCE . register ( map ) ; 
 } 
 
 public static void onTextureStitchedPost ( TextureMap map ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / BakedItemModel . java b / src / main / java / net / minecraftforge / client / model / BakedItemModel . java 
 new file mode 100644 
 index 0000000 . . dfac4d7 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / BakedItemModel . java 
 @ @ - 0 , 0 + 1 , 119 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . client . model ; 
 + 
 + import javax . annotation . Nullable ; 
 + import javax . vecmath . Matrix4f ; 
 + 
 + import java . util . List ; 
 + 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraftforge . common . model . TRSRTransformation ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 + public class BakedItemModel implements IBakedModel 
 + { 
 + protected final ImmutableList < BakedQuad > quads ; 
 + protected final TextureAtlasSprite particle ; 
 + protected final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 + protected final ItemOverrideList overrides ; 
 + protected final IBakedModel guiModel ; 
 + 
 + public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , ImmutableMap < TransformType , TRSRTransformation > transforms , ItemOverrideList overrides ) 
 + { 
 + this . quads = quads ; 
 + this . particle = particle ; 
 + this . transforms = transforms ; 
 + this . overrides = overrides ; 
 + this . guiModel = new BakedGuiItemModel < > ( this ) ; 
 + } 
 + 
 + @ Override public boolean isAmbientOcclusion ( ) { return true ; } 
 + @ Override public boolean isGui3d ( ) { return false ; } 
 + @ Override public boolean isBuiltInRenderer ( ) { return false ; } 
 + @ Override public TextureAtlasSprite getParticleTexture ( ) { return particle ; } 
 + @ Override public ItemOverrideList getOverrides ( ) { return overrides ; } 
 + 
 + @ Override 
 + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 + { 
 + if ( side = = null ) 
 + { 
 + return quads ; 
 + } 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + @ Override 
 + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) 
 + { 
 + if ( type = = TransformType . GUI ) 
 + { 
 + return this . guiModel . handlePerspective ( type ) ; 
 + } 
 + return PerspectiveMapWrapper . handlePerspective ( this , transforms , type ) ; 
 + } 
 + 
 + public static class BakedGuiItemModel < T extends BakedItemModel > extends BakedModelWrapper < T > 
 + { 
 + private final ImmutableList < BakedQuad > quads ; 
 + 
 + public BakedGuiItemModel ( T originalModel ) 
 + { 
 + super ( originalModel ) ; 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + for ( BakedQuad quad : originalModel . quads ) 
 + { 
 + if ( quad . getFace ( ) = = EnumFacing . SOUTH ) 
 + { 
 + builder . add ( quad ) ; 
 + } 
 + } 
 + this . quads = builder . build ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 + { 
 + if ( side = = null ) 
 + { 
 + return quads ; 
 + } 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + @ Override 
 + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) 
 + { 
 + if ( type = = TransformType . GUI ) 
 + { 
 + return PerspectiveMapWrapper . handlePerspective ( this , originalModel . transforms , type ) ; 
 + } 
 + return this . originalModel . handlePerspective ( type ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java b / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java 
 new file mode 100644 
 index 0000000 . . 1e14bd0 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / BakedModelWrapper . java 
 @ @ - 0 , 0 + 1 , 90 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + package net . minecraftforge . client . model ; 
 + 
 + import javax . annotation . Nullable ; 
 + import javax . vecmath . Matrix4f ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . util . EnumFacing ; 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 + public abstract class BakedModelWrapper < T extends IBakedModel > implements IBakedModel 
 + { 
 + protected final T originalModel ; 
 + 
 + public BakedModelWrapper ( T originalModel ) 
 + { 
 + this . originalModel = originalModel ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 + { 
 + return originalModel . getQuads ( state , side , rand ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return originalModel . isAmbientOcclusion ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return originalModel . isGui3d ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return originalModel . isBuiltInRenderer ( ) ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getParticleTexture ( ) 
 + { 
 + return originalModel . getParticleTexture ( ) ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return originalModel . getItemCameraTransforms ( ) ; 
 + } 
 + 
 + @ Override 
 + public ItemOverrideList getOverrides ( ) 
 + { 
 + return originalModel . getOverrides ( ) ; 
 + } 
 + 
 + @ Override 
 + public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( ItemCameraTransforms . TransformType cameraTransformType ) 
 + { 
 + return originalModel . handlePerspective ( cameraTransformType ) ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 index 447df2d . . a0617fb 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 19 , 14 + 19 , 10 @ @ 
 
 package net . minecraftforge . client . model ; 
 
 - import javax . annotation . Nullable ; 
 - import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector4f ; 
 
 import net . minecraftforge . common . ForgeVersion ; 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 
 - import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 @ @ - 45 , 7 + 41 , 6 @ @ import java . util . Arrays ; 
 import java . util . BitSet ; 
 import java . util . Collection ; 
 import java . util . EnumMap ; 
 - import java . util . List ; 
 import java . util . Optional ; 
 import java . util . function . Function ; 
 
 @ @ - 122 , 69 + 117 , 7 @ @ public final class ItemLayerModel implements IModel 
 } 
 TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; 
 ImmutableMap < TransformType , TRSRTransformation > map = PerspectiveMapWrapper . getTransforms ( state ) ; 
 - return new BakedItemModel ( builder . build ( ) , particle , map , overrides , null ) ; 
 - } 
 - 
 - private static final class BakedItemModel implements IBakedModel 
 - { 
 - private final ImmutableList < BakedQuad > quads ; 
 - private final TextureAtlasSprite particle ; 
 - private final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 - private final IBakedModel otherModel ; 
 - private final boolean isCulled ; 
 - private final ItemOverrideList overrides ; 
 - 
 - public BakedItemModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , ImmutableMap < TransformType , TRSRTransformation > transforms , ItemOverrideList overrides , @ Nullable IBakedModel otherModel ) 
 - { 
 - this . quads = quads ; 
 - this . particle = particle ; 
 - this . transforms = transforms ; 
 - this . overrides = overrides ; 
 - if ( otherModel ! = null ) 
 - { 
 - this . otherModel = otherModel ; 
 - this . isCulled = true ; 
 - } 
 - else 
 - { 
 - ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 - for ( BakedQuad quad : quads ) 
 - { 
 - if ( quad . getFace ( ) = = EnumFacing . SOUTH ) 
 - { 
 - builder . add ( quad ) ; 
 - } 
 - } 
 - this . otherModel = new BakedItemModel ( builder . build ( ) , particle , transforms , overrides , this ) ; 
 - isCulled = false ; 
 - } 
 - } 
 - 
 - public boolean isAmbientOcclusion ( ) { return true ; } 
 - public boolean isGui3d ( ) { return false ; } 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 - public TextureAtlasSprite getParticleTexture ( ) { return particle ; } 
 - public ItemOverrideList getOverrides ( ) { return overrides ; } 
 - public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 - { 
 - if ( side = = null ) return quads ; 
 - return ImmutableList . of ( ) ; 
 - } 
 - 
 - @ Override 
 - public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType type ) 
 - { 
 - Pair < ? extends IBakedModel , Matrix4f > pair = PerspectiveMapWrapper . handlePerspective ( this , transforms , type ) ; 
 - if ( type = = TransformType . GUI & & ! isCulled & & pair . getRight ( ) = = null ) 
 - { 
 - return Pair . of ( otherModel , null ) ; 
 - } 
 - else if ( type ! = TransformType . GUI & & isCulled ) 
 - { 
 - return Pair . of ( otherModel , pair . getRight ( ) ) ; 
 - } 
 - return pair ; 
 - } 
 + return new BakedItemModel ( builder . build ( ) , particle , map , overrides ) ; 
 } 
 
 public static ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format , Optional < TRSRTransformation > transform ) 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 index 1abe1fe . . 9a22abb 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemTextureQuadConverter . java 
 @ @ - 239 , 13 + 239 , 12 @ @ public final class ItemTextureQuadConverter 
 float x1 , float y1 , float x2 , float y2 , float z , 
 float u1 , float v1 , float u2 , float v2 ) 
 { 
 - side = side . getOpposite ( ) ; 
 UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; 
 builder . setQuadTint ( - 1 ) ; 
 builder . setQuadOrientation ( side ) ; 
 builder . setTexture ( sprite ) ; 
 
 - if ( side = = EnumFacing . NORTH ) 
 + if ( side = = EnumFacing . SOUTH ) 
 { 
 putVertex ( builder , format , transform , side , x1 , y1 , z , u1 , v2 , color ) ; 
 putVertex ( builder , format , transform , side , x2 , y1 , z , u2 , v2 , color ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 index 466cf5d . . fffb047 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelDynBucket . java 
 @ @ - 19 , 25 + 19 , 24 @ @ 
 
 package net . minecraftforge . client . model ; 
 
 + import java . io . IOException ; 
 import java . util . Collection ; 
 - import java . util . List ; 
 import java . util . Map ; 
 
 + import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 - import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Quat4f ; 
 
 - import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . IBakedModel ; 
 - import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms . TransformType ; 
 - import net . minecraft . client . renderer . block . model . ItemOverride ; 
 import net . minecraft . client . renderer . block . model . ItemOverrideList ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . IResource ; 
 import net . minecraft . client . resources . IResourceManager ; 
 import net . minecraft . entity . EntityLivingBase ; 
 import net . minecraft . item . ItemStack ; 
 @ @ - 45 , 7 + 44 , 6 @ @ import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 import net . minecraftforge . common . ForgeVersion ; 
 - import net . minecraftforge . common . model . IModelPart ; 
 import net . minecraftforge . common . model . IModelState ; 
 import net . minecraftforge . common . model . TRSRTransformation ; 
 import net . minecraftforge . fluids . Fluid ; 
 @ @ - 53 , 10 + 51 , 12 @ @ import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . FluidStack ; 
 import net . minecraftforge . fluids . FluidUtil ; 
 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 - 
 + import java . util . Objects ; 
 import java . util . function . Function ; 
 import java . util . Optional ; 
 + 
 + import static net . minecraftforge . client . model . ModelDynBucket . LoaderDynBucket . getResource ; 
 + 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 @ @ - 67 , 8 + 67 , 8 @ @ public final class ModelDynBucket implements IModel 
 public static final ModelResourceLocation LOCATION = new ModelResourceLocation ( new ResourceLocation ( ForgeVersion . MOD _ ID , " dynbucket " ) , " inventory " ) ; 
 
 / / minimal Z offset to prevent depth - fighting 
 - private static final float NORTH _ Z _ BASE = 7 . 496f / 16f ; 
 - private static final float SOUTH _ Z _ BASE = 8 . 504f / 16f ; 
 + private static final float NORTH _ Z _ COVER = 7 . 496f / 16f ; 
 + private static final float SOUTH _ Z _ COVER = 8 . 504f / 16f ; 
 private static final float NORTH _ Z _ FLUID = 7 . 498f / 16f ; 
 private static final float SOUTH _ Z _ FLUID = 8 . 502f / 16f ; 
 
 @ @ - 127 , 6 + 127 , 7 @ @ public final class ModelDynBucket implements IModel 
 
 TRSRTransformation transform = state . apply ( Optional . empty ( ) ) . orElse ( TRSRTransformation . identity ( ) ) ; 
 TextureAtlasSprite fluidSprite = null ; 
 + TextureAtlasSprite particleSprite = null ; 
 ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 
 if ( fluid ! = null ) { 
 @ @ - 138 , 6 + 139 , 7 @ @ public final class ModelDynBucket implements IModel 
 / / build base ( insidest ) 
 IBakedModel model = ( new ItemLayerModel ( ImmutableList . of ( baseLocation ) ) ) . bake ( state , format , bakedTextureGetter ) ; 
 builder . addAll ( model . getQuads ( null , null , 0 ) ) ; 
 + particleSprite = model . getParticleTexture ( ) ; 
 } 
 if ( liquidLocation ! = null & & fluidSprite ! = null ) 
 { 
 @ @ - 145 , 17 + 147 , 21 @ @ public final class ModelDynBucket implements IModel 
 / / build liquid layer ( inside ) 
 builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , NORTH _ Z _ FLUID , EnumFacing . NORTH , fluid . getColor ( ) ) ) ; 
 builder . addAll ( ItemTextureQuadConverter . convertTexture ( format , transform , liquid , fluidSprite , SOUTH _ Z _ FLUID , EnumFacing . SOUTH , fluid . getColor ( ) ) ) ; 
 + particleSprite = fluidSprite ; 
 } 
 if ( coverLocation ! = null ) 
 { 
 / / cover ( the actual item around the other two ) 
 - TextureAtlasSprite base = bakedTextureGetter . apply ( coverLocation ) ; 
 - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ BASE , base , EnumFacing . NORTH , 0xffffffff ) ) ; 
 - builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ BASE , base , EnumFacing . SOUTH , 0xffffffff ) ) ; 
 + TextureAtlasSprite cover = bakedTextureGetter . apply ( coverLocation ) ; 
 + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , NORTH _ Z _ COVER , cover , EnumFacing . NORTH , 0xffffffff ) ) ; 
 + builder . add ( ItemTextureQuadConverter . genQuad ( format , transform , 0 , 0 , 16 , 16 , SOUTH _ Z _ COVER , cover , EnumFacing . SOUTH , 0xffffffff ) ) ; 
 + if ( particleSprite = = null ) 
 + { 
 + particleSprite = cover ; 
 + } 
 } 
 
 - 
 - return new BakedDynBucket ( this , builder . build ( ) , fluidSprite , format , Maps . immutableEnumMap ( transformMap ) , Maps . newHashMap ( ) ) ; 
 + return new BakedDynBucket ( this , builder . build ( ) , particleSprite , format , Maps . immutableEnumMap ( transformMap ) , Maps . newHashMap ( ) ) ; 
 } 
 
 / * * 
 @ @ - 235 , 6 + 241 , 135 @ @ public final class ModelDynBucket implements IModel 
 { 
 / / no need to clear cache since we create a new model instance 
 } 
 + 
 + public void register ( TextureMap map ) 
 + { 
 + / / only create these textures if they are not added by a resource pack 
 + 
 + if ( getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / bucket _ cover . png " ) ) = = null ) 
 + { 
 + ResourceLocation bucketCover = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / bucket _ cover " ) ; 
 + BucketCoverSprite bucketCoverSprite = new BucketCoverSprite ( bucketCover ) ; 
 + map . setTextureEntry ( bucketCoverSprite ) ; 
 + } 
 + 
 + if ( getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / bucket _ base . png " ) ) = = null ) 
 + { 
 + ResourceLocation bucketBase = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / bucket _ base " ) ; 
 + BucketBaseSprite bucketBaseSprite = new BucketBaseSprite ( bucketBase ) ; 
 + map . setTextureEntry ( bucketBaseSprite ) ; 
 + } 
 + } 
 + 
 + @ Nullable 
 + protected static IResource getResource ( ResourceLocation resourceLocation ) 
 + { 
 + try 
 + { 
 + return Minecraft . getMinecraft ( ) . getResourceManager ( ) . getResource ( resourceLocation ) ; 
 + } 
 + catch ( IOException ignored ) 
 + { 
 + return null ; 
 + } 
 + } 
 + } 
 + 
 + private static final class BucketBaseSprite extends TextureAtlasSprite 
 + { 
 + private final ResourceLocation bucket = new ResourceLocation ( " items / bucket _ empty " ) ; 
 + private final ImmutableList < ResourceLocation > dependencies = ImmutableList . of ( bucket ) ; 
 + 
 + private BucketBaseSprite ( ResourceLocation resourceLocation ) 
 + { 
 + super ( resourceLocation . toString ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasCustomLoader ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getDependencies ( ) 
 + { 
 + return dependencies ; 
 + } 
 + 
 + @ Override 
 + public boolean load ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location , @ Nonnull Function < ResourceLocation , TextureAtlasSprite > textureGetter ) 
 + { 
 + final TextureAtlasSprite sprite = textureGetter . apply ( bucket ) ; 
 + width = sprite . getIconWidth ( ) ; 
 + height = sprite . getIconHeight ( ) ; 
 + final int [ ] [ ] pixels = sprite . getFrameTextureData ( 0 ) ; 
 + this . clearFramesTextureData ( ) ; 
 + this . framesTextureData . add ( pixels ) ; 
 + return false ; 
 + } 
 + } 
 + 
 + / * * 
 + * Creates a bucket cover sprite from the vanilla resource . 
 + * / 
 + private static final class BucketCoverSprite extends TextureAtlasSprite 
 + { 
 + private final ResourceLocation bucket = new ResourceLocation ( " items / bucket _ empty " ) ; 
 + private final ResourceLocation bucketCoverMask = new ResourceLocation ( ForgeVersion . MOD _ ID , " items / vanilla _ bucket _ cover _ mask " ) ; 
 + private final ImmutableList < ResourceLocation > dependencies = ImmutableList . of ( bucket , bucketCoverMask ) ; 
 + 
 + private BucketCoverSprite ( ResourceLocation resourceLocation ) 
 + { 
 + super ( resourceLocation . toString ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasCustomLoader ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public Collection < ResourceLocation > getDependencies ( ) 
 + { 
 + return dependencies ; 
 + } 
 + 
 + @ Override 
 + public boolean load ( @ Nonnull IResourceManager manager , @ Nonnull ResourceLocation location , @ Nonnull Function < ResourceLocation , TextureAtlasSprite > textureGetter ) 
 + { 
 + final TextureAtlasSprite sprite = textureGetter . apply ( bucket ) ; 
 + final TextureAtlasSprite alphaMask = textureGetter . apply ( bucketCoverMask ) ; 
 + width = sprite . getIconWidth ( ) ; 
 + height = sprite . getIconHeight ( ) ; 
 + final int [ ] [ ] pixels = new int [ Minecraft . getMinecraft ( ) . gameSettings . mipmapLevels + 1 ] [ ] ; 
 + pixels [ 0 ] = new int [ width * height ] ; 
 + 
 + IResource empty = getResource ( new ResourceLocation ( " textures / items / bucket _ empty . png " ) ) ; 
 + IResource mask = getResource ( new ResourceLocation ( ForgeVersion . MOD _ ID , " textures / items / vanilla _ bucket _ cover _ mask . png " ) ) ; 
 + 
 + / / use the alpha mask if it fits , otherwise leave the cover texture blank 
 + if ( empty ! = null & & mask ! = null & & Objects . equals ( empty . getResourcePackName ( ) , mask . getResourcePackName ( ) ) & & 
 + alphaMask . getIconWidth ( ) = = width & & alphaMask . getIconHeight ( ) = = height ) 
 + { 
 + final int [ ] [ ] oldPixels = sprite . getFrameTextureData ( 0 ) ; 
 + final int [ ] [ ] alphaPixels = alphaMask . getFrameTextureData ( 0 ) ; 
 + 
 + for ( int p = 0 ; p < width * height ; p + + ) 
 + { 
 + final int alphaMultiplier = alphaPixels [ 0 ] [ p ] > > > 24 ; 
 + final int oldPixel = oldPixels [ 0 ] [ p ] ; 
 + final int oldPixelAlpha = oldPixel > > > 24 ; 
 + final int newAlpha = oldPixelAlpha * alphaMultiplier / 0xFF ; 
 + pixels [ 0 ] [ p ] = ( oldPixel & 0xFFFFFF ) + ( newAlpha < < 24 ) ; 
 + } 
 + } 
 + 
 + this . clearFramesTextureData ( ) ; 
 + this . framesTextureData . add ( pixels ) ; 
 + return false ; 
 + } 
 } 
 
 private static final class BakedDynBucketOverrideHandler extends ItemOverrideList 
 @ @ - 278 , 51 + 413 , 24 @ @ public final class ModelDynBucket implements IModel 
 } 
 
 / / the dynamic bucket is based on the empty bucket 
 - private static final class BakedDynBucket implements IBakedModel 
 + private static final class BakedDynBucket extends BakedItemModel 
 { 
 - 
 private final ModelDynBucket parent ; 
 - / / FIXME : guava cache ? 
 private final Map < String , IBakedModel > cache ; / / contains all the baked models since they ' ll never change 
 - private final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 - private final ImmutableList < BakedQuad > quads ; 
 - private final TextureAtlasSprite particle ; 
 private final VertexFormat format ; 
 
 public BakedDynBucket ( ModelDynBucket parent , 
 - ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format , ImmutableMap < ItemCameraTransforms . TransformType , TRSRTransformation > transforms , 
 + ImmutableList < BakedQuad > quads , 
 + TextureAtlasSprite particle , 
 + VertexFormat format , 
 + ImmutableMap < TransformType , TRSRTransformation > transforms , 
 Map < String , IBakedModel > cache ) 
 { 
 - this . quads = quads ; 
 - this . particle = particle ; 
 + super ( quads , particle , transforms , BakedDynBucketOverrideHandler . INSTANCE ) ; 
 this . format = format ; 
 this . parent = parent ; 
 - this . transforms = transforms ; 
 this . cache = cache ; 
 } 
 - 
 - @ Override 
 - public ItemOverrideList getOverrides ( ) 
 - { 
 - return BakedDynBucketOverrideHandler . INSTANCE ; 
 - } 
 - 
 - @ Override 
 - public Pair < ? extends IBakedModel , Matrix4f > handlePerspective ( TransformType cameraTransformType ) 
 - { 
 - return PerspectiveMapWrapper . handlePerspective ( this , transforms , cameraTransformType ) ; 
 - } 
 - 
 - @ Override 
 - public List < BakedQuad > getQuads ( @ Nullable IBlockState state , @ Nullable EnumFacing side , long rand ) 
 - { 
 - if ( side = = null ) return quads ; 
 - return ImmutableList . of ( ) ; 
 - } 
 - 
 - public boolean isAmbientOcclusion ( ) { return true ; } 
 - public boolean isGui3d ( ) { return false ; } 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 - public TextureAtlasSprite getParticleTexture ( ) { return particle ; } 
 } 
 + 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 751d7d7 . . 690a488 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 318 , 79 + 318 , 6 @ @ public final class ModelLoader extends ModelBakery 
 } 
 } 
 ProgressManager . pop ( itemBar ) ; 
 - 
 - / / replace vanilla bucket models if desired . done afterwards for performance reasons 
 - if ( ForgeModContainer . replaceVanillaBucketModel ) 
 - { 
 - / / ensure the bucket model is loaded 
 - if ( ! stateModels . containsKey ( ModelDynBucket . LOCATION ) ) 
 - { 
 - / / load forges blockstate json for it 
 - try 
 - { 
 - registerVariant ( getModelBlockDefinition ( ModelDynBucket . LOCATION ) , ModelDynBucket . LOCATION ) ; 
 - } 
 - catch ( Exception exception ) 
 - { 
 - FMLLog . log . error ( " Could not load the forge bucket model from the blockstate " , exception ) ; 
 - return ; 
 - } 
 - } 
 - 
 - / / empty bucket 
 - for ( String s : getVariantNames ( Items . BUCKET ) ) 
 - { 
 - ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 - IModel model = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ForgeVersion . MOD _ ID , " item / bucket " ) ) ; 
 - / / only on successful load , otherwise continue using the old model 
 - if ( model ! = getMissingModel ( ) ) 
 - { 
 - stateModels . put ( memory , model ) ; 
 - } 
 - } 
 - 
 - setBucketModel ( Items . WATER _ BUCKET ) ; 
 - setBucketModel ( Items . LAVA _ BUCKET ) ; 
 - / / milk bucket only replaced if some mod adds milk 
 - if ( FluidRegistry . isFluidRegistered ( " milk " ) ) 
 - { 
 - / / can the milk be put into a bucket ? 
 - Fluid milk = FluidRegistry . getFluid ( " milk " ) ; 
 - FluidStack milkStack = new FluidStack ( milk , Fluid . BUCKET _ VOLUME ) ; 
 - IFluidHandler bucketHandler = FluidUtil . getFluidHandler ( new ItemStack ( Items . BUCKET ) ) ; 
 - if ( bucketHandler ! = null & & bucketHandler . fill ( milkStack , false ) = = Fluid . BUCKET _ VOLUME ) 
 - { 
 - setBucketModel ( Items . MILK _ BUCKET ) ; 
 - } 
 - } 
 - else 
 - { 
 - / / milk bucket if no milk fluid is present 
 - for ( String s : getVariantNames ( Items . MILK _ BUCKET ) ) 
 - { 
 - ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 - IModel model = ModelLoaderRegistry . getModelOrMissing ( new ResourceLocation ( ForgeVersion . MOD _ ID , " item / bucket _ milk " ) ) ; 
 - / / only on successful load , otherwise continue using the old model 
 - if ( model ! = getMissingModel ( ) ) 
 - { 
 - stateModels . put ( memory , model ) ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - private void setBucketModel ( Item item ) 
 - { 
 - for ( String s : getVariantNames ( item ) ) 
 - { 
 - ModelResourceLocation memory = getInventoryVariant ( s ) ; 
 - IModel model = stateModels . get ( ModelDynBucket . LOCATION ) ; 
 - if ( model ! = null ) 
 - { 
 - stateModels . put ( memory , model ) ; 
 - } 
 - } 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 8c168fd . . 95b69fe 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 112 , 6 + 112 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean shouldSortRecipies = true ; 
 public static boolean disableVersionCheck = false ; 
 public static boolean forgeLightPipelineEnabled = true ; 
 + @ Deprecated / / TODO remove in 1 . 13 
 public static boolean replaceVanillaBucketModel = true ; 
 public static boolean zoomInMissingModelTextInGui = false ; 
 public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag 
 @ @ - 213 , 6 + 214 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " spawnHasFuzz " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " spawnHasFuzz " ) ; 
 if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " disableStitchedFileSaving " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " disableStitchedFileSaving " ) ; 
 if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " java8Reminder " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " java8Reminder " ) ; 
 + if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " replaceVanillaBucketModel " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " replaceVanillaBucketModel " ) ; 
 
 / / remap properties wrongly listed as general properties to client properties 
 remapGeneralPropertyToClient ( " biomeSkyBlendRange " ) ; 
 @ @ - 315 , 12 + 317 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 / / Client - Side only properties 
 propOrder = new ArrayList < String > ( ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ CLIENT , " replaceVanillaBucketModel " , false , 
 - " Replace the vanilla bucket models with Forges own dynamic bucket model . Unifies bucket visuals if a mod uses the Forge bucket model . " ) ; 
 - prop . setLanguageKey ( " forge . configgui . replaceBuckets " ) . setRequiresMcRestart ( true ) ; 
 - replaceVanillaBucketModel = prop . getBoolean ( false ) ; 
 - propOrder . add ( prop . getName ( ) ) ; 
 - 
 prop = config . get ( Configuration . CATEGORY _ CLIENT , " zoomInMissingModelTextInGui " , false , 
 " Toggle off to make missing model text in the gui fit inside the slot . " ) ; 
 zoomInMissingModelTextInGui = prop . getBoolean ( false ) ; 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 7e6a0c1 . . 9e3fb22 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 63 , 7 + 63 , 6 @ @ forge . configgui . zombieBabyChance = Zombie Baby Chance 
 forge . configgui . zombieBaseSummonChance . tooltip = Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . 
 forge . configgui . zombieBaseSummonChance = Zombie Summon Chance 
 forge . configgui . stencilbits = Enable GL Stencil Bits 
 - forge . configgui . replaceBuckets = Use Forge ' s bucket model 
 forge . configgui . forgeLightPipelineEnabled = Forge Light Pipeline Enabled 
 forge . configgui . disableStairSlabCulling = Disable Stair / Slab culling . 
 forge . configgui . zoomInMissingModelTextInGui = Zoom in Missing model text in the GUI 
 diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ base . png b / src / main / resources / assets / forge / textures / items / bucket _ base . png 
 deleted file mode 100644 
 index 04faf51 . . 0000000 
 Binary files a / src / main / resources / assets / forge / textures / items / bucket _ base . png and / dev / null differ 
 diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ cover . png b / src / main / resources / assets / forge / textures / items / bucket _ cover . png 
 deleted file mode 100644 
 index 863787a . . 0000000 
 Binary files a / src / main / resources / assets / forge / textures / items / bucket _ cover . png and / dev / null differ 
 diff - - git a / src / main / resources / assets / forge / textures / items / bucket _ fluid . png b / src / main / resources / assets / forge / textures / items / bucket _ fluid . png 
 index d03389a . . d89ea08 100644 
 Binary files a / src / main / resources / assets / forge / textures / items / bucket _ fluid . png and b / src / main / resources / assets / forge / textures / items / bucket _ fluid . png differ 
 diff - - git a / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png b / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png 
 new file mode 100644 
 index 0000000 . . 4b66789 
 Binary files / dev / null and b / src / main / resources / assets / forge / textures / items / vanilla _ bucket _ cover _ mask . png differ
