BLEU SCORE: 0.015445276590783498

TEST MSG: Added ItemLayerModel - less awkward , simpler and faster version of ItemModelGenerator .
GENERATED MSG: B3D Improvements

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> new file mode 100644 <nl> index 0000000 . . 4276430 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java <nl> @ @ - 0 , 0 + 1 , 288 @ @ <nl> + package net . minecraftforge . client . model ; <nl> + <nl> + import java . nio . ByteBuffer ; <nl> + import java . util . Arrays ; <nl> + import java . util . Collection ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . block . model . ModelBlock ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormatElement ; <nl> + import net . minecraft . client . resources . IResourceManager ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + <nl> + import org . lwjgl . BufferUtils ; <nl> + <nl> + import com . google . common . base . Function ; <nl> + import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + public class ItemLayerModel implements IRetexturableModel { <nl> + <nl> + public static final ItemLayerModel instance = new ItemLayerModel ( ImmutableList . < ResourceLocation > of ( ) ) ; <nl> + private final ImmutableList < ResourceLocation > textures ; <nl> + <nl> + public ItemLayerModel ( ImmutableList < ResourceLocation > textures ) <nl> + { <nl> + this . textures = textures ; <nl> + } <nl> + <nl> + public ItemLayerModel ( ModelBlock model ) <nl> + { <nl> + this ( getTextures ( model ) ) ; <nl> + } <nl> + <nl> + private static ImmutableList < ResourceLocation > getTextures ( ModelBlock model ) <nl> + { <nl> + ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; <nl> + for ( int i = 0 ; model . isTexturePresent ( " layer " + i ) ; i + + ) <nl> + { <nl> + builder . add ( new ResourceLocation ( model . resolveTextureName ( " layer " + i ) ) ) ; <nl> + } <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + public Collection < ResourceLocation > getDependencies ( ) <nl> + { <nl> + return ImmutableList . of ( ) ; <nl> + } <nl> + <nl> + public Collection < ResourceLocation > getTextures ( ) <nl> + { <nl> + return textures ; <nl> + } <nl> + <nl> + public IModelState getDefaultState ( ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; <nl> + for ( int i = 0 ; i < textures . size ( ) ; i + + ) <nl> + { <nl> + if ( textures . containsKey ( " layer " + i ) ) <nl> + { <nl> + builder . add ( new ResourceLocation ( textures . get ( " layer " + i ) ) ) ; <nl> + } <nl> + } <nl> + return new ItemLayerModel ( builder . build ( ) ) ; <nl> + } <nl> + <nl> + public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> + { <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + for ( int i = 0 ; i < textures . size ( ) ; i + + ) <nl> + { <nl> + TextureAtlasSprite sprite = bakedTextureGetter . apply ( textures . get ( i ) ) ; <nl> + builder . addAll ( getQuadsForSprite ( i , sprite , format ) ) ; <nl> + } <nl> + TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; <nl> + return new BakedModel ( builder . build ( ) , particle , format ) ; <nl> + } <nl> + <nl> + public static class BakedModel implements IFlexibleBakedModel <nl> + { <nl> + private final ImmutableList < BakedQuad > quads ; <nl> + private final TextureAtlasSprite particle ; <nl> + private final VertexFormat format ; <nl> + <nl> + public BakedModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format ) <nl> + { <nl> + this . quads = quads ; <nl> + this . particle = particle ; <nl> + this . format = format ; <nl> + } <nl> + <nl> + public boolean isAmbientOcclusion ( ) { return true ; } <nl> + public boolean isGui3d ( ) { return false ; } <nl> + public boolean isBuiltInRenderer ( ) { return false ; } <nl> + public TextureAtlasSprite getTexture ( ) { return null ; } <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } <nl> + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return ImmutableList . of ( ) ; } <nl> + public List < BakedQuad > getGeneralQuads ( ) { return quads ; } <nl> + public VertexFormat getFormat ( ) { return format ; } <nl> + } <nl> + <nl> + public static final ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format ) <nl> + { <nl> + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; <nl> + <nl> + int uMax = sprite . getIconWidth ( ) ; <nl> + int vMax = sprite . getIconHeight ( ) ; <nl> + <nl> + ByteBuffer buf = BufferUtils . createByteBuffer ( 4 * format . getNextOffset ( ) ) ; <nl> + int [ ] data ; <nl> + <nl> + for ( int f = 0 ; f < sprite . getFrameCount ( ) ; f + + ) <nl> + { <nl> + int [ ] pixels = sprite . getFrameTextureData ( f ) [ 0 ] ; <nl> + boolean ptu ; <nl> + boolean [ ] ptv = new boolean [ uMax ] ; <nl> + Arrays . fill ( ptv , true ) ; <nl> + for ( int v = 0 ; v < vMax ; v + + ) <nl> + { <nl> + ptu = true ; <nl> + for ( int u = 0 ; u < uMax ; u + + ) <nl> + { <nl> + boolean t = ( pixels [ u + ( vMax - 1 - v ) * uMax ] > > 24 & 0xFF ) = = 0 ; <nl> + if ( ptu & & ! t ) / / left - transparent , right - opaque <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . WEST , tint , sprite , u , v ) ) ; <nl> + } <nl> + if ( ! ptu & & t ) / / left - opaque , right - transparent <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . EAST , tint , sprite , u , v ) ) ; <nl> + } <nl> + if ( ptv [ u ] & & ! t ) / / up - transparent , down - opaque <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . UP , tint , sprite , u , v ) ) ; <nl> + } <nl> + if ( ! ptv [ u ] & & t ) / / up - opaque , down - transparent <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . DOWN , tint , sprite , u , v ) ) ; <nl> + } <nl> + ptu = t ; <nl> + ptv [ u ] = t ; <nl> + } <nl> + if ( ! ptu ) / / last - opaque <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . EAST , tint , sprite , uMax , v ) ) ; <nl> + } <nl> + } <nl> + / / last line <nl> + for ( int u = 0 ; u < uMax ; u + + ) <nl> + { <nl> + if ( ! ptv [ u ] ) <nl> + { <nl> + builder . add ( buildSideQuad ( buf , format , EnumFacing . DOWN , tint , sprite , u , vMax ) ) ; <nl> + } <nl> + } <nl> + } <nl> + / / front <nl> + builder . add ( buildQuad ( buf , format , EnumFacing . SOUTH , tint , <nl> + 0 , 0 , 7 . 5f / 16f , sprite . getMinU ( ) , sprite . getMaxV ( ) , <nl> + 0 , 1 , 7 . 5f / 16f , sprite . getMinU ( ) , sprite . getMinV ( ) , <nl> + 1 , 1 , 7 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMinV ( ) , <nl> + 1 , 0 , 7 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMaxV ( ) <nl> + ) ) ; <nl> + / / back <nl> + builder . add ( buildQuad ( buf , format , EnumFacing . NORTH , tint , <nl> + 0 , 0 , 8 . 5f / 16f , sprite . getMinU ( ) , sprite . getMaxV ( ) , <nl> + 1 , 0 , 8 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMaxV ( ) , <nl> + 1 , 1 , 8 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMinV ( ) , <nl> + 0 , 1 , 8 . 5f / 16f , sprite . getMinU ( ) , sprite . getMinV ( ) <nl> + ) ) ; <nl> + return builder . build ( ) ; <nl> + } <nl> + <nl> + private static BakedQuad buildSideQuad ( ByteBuffer buf , VertexFormat format , EnumFacing side , int tint , TextureAtlasSprite sprite , int u , int v ) <nl> + { <nl> + float x0 = ( float ) u / sprite . getIconWidth ( ) ; <nl> + float y0 = ( float ) v / sprite . getIconHeight ( ) ; <nl> + float x1 = x0 , y1 = y0 ; <nl> + float z1 = 7 . 5f / 16f , z2 = 8 . 5f / 16f ; <nl> + switch ( side ) <nl> + { <nl> + case WEST : <nl> + z1 = 8 . 5f / 16f ; <nl> + z2 = 7 . 5f / 16f ; <nl> + case EAST : <nl> + y1 = ( v + 1f ) / sprite . getIconHeight ( ) ; <nl> + break ; <nl> + case DOWN : <nl> + z1 = 8 . 5f / 16f ; <nl> + z2 = 7 . 5f / 16f ; <nl> + case UP : <nl> + x1 = ( u + 1f ) / sprite . getIconWidth ( ) ; <nl> + break ; <nl> + default : <nl> + throw new IllegalArgumentException ( " can ' t handle z - oriented side " ) ; <nl> + } <nl> + float u0 = 16f * ( x0 - side . getDirectionVec ( ) . getX ( ) * 1e - 2f / sprite . getIconWidth ( ) ) ; <nl> + float u1 = 16f * ( x1 - side . getDirectionVec ( ) . getX ( ) * 1e - 2f / sprite . getIconWidth ( ) ) ; <nl> + float v0 = 16f * ( 1f - y0 - side . getDirectionVec ( ) . getY ( ) * 1e - 2f / sprite . getIconHeight ( ) ) ; <nl> + float v1 = 16f * ( 1f - y1 - side . getDirectionVec ( ) . getY ( ) * 1e - 2f / sprite . getIconHeight ( ) ) ; <nl> + return buildQuad ( <nl> + buf , format , side . getOpposite ( ) , tint , / / getOpposite is related either to the swapping of V direction , or something else <nl> + x0 , y0 , z1 , sprite . getInterpolatedU ( u0 ) , sprite . getInterpolatedV ( v0 ) , <nl> + x1 , y1 , z1 , sprite . getInterpolatedU ( u1 ) , sprite . getInterpolatedV ( v1 ) , <nl> + x1 , y1 , z2 , sprite . getInterpolatedU ( u1 ) , sprite . getInterpolatedV ( v1 ) , <nl> + x0 , y0 , z2 , sprite . getInterpolatedU ( u0 ) , sprite . getInterpolatedV ( v0 ) <nl> + ) ; <nl> + } <nl> + <nl> + private static final BakedQuad buildQuad ( <nl> + ByteBuffer buf , VertexFormat format , EnumFacing side , int tint , <nl> + float x0 , float y0 , float z0 , float u0 , float v0 , <nl> + float x1 , float y1 , float z1 , float u1 , float v1 , <nl> + float x2 , float y2 , float z2 , float u2 , float v2 , <nl> + float x3 , float y3 , float z3 , float u3 , float v3 ) <nl> + { <nl> + buf . clear ( ) ; <nl> + putVertex ( buf , format , side , x0 , y0 , z0 , u0 , v0 ) ; <nl> + putVertex ( buf , format , side , x1 , y1 , z1 , u1 , v1 ) ; <nl> + putVertex ( buf , format , side , x2 , y2 , z2 , u2 , v2 ) ; <nl> + putVertex ( buf , format , side , x3 , y3 , z3 , u3 , v3 ) ; <nl> + buf . flip ( ) ; <nl> + int [ ] data = new int [ 4 * format . getNextOffset ( ) / 4 ] ; <nl> + buf . asIntBuffer ( ) . get ( data ) ; <nl> + return new BakedQuad ( data , tint , side ) ; <nl> + } <nl> + <nl> + private static void put ( ByteBuffer buf , VertexFormatElement e , Float . . . fs ) <nl> + { <nl> + Attributes . put ( buf , e , true , 0f , fs ) ; <nl> + } <nl> + <nl> + private static void putVertex ( ByteBuffer buf , VertexFormat format , EnumFacing side , float x , float y , float z , float u , float v ) <nl> + { <nl> + for ( VertexFormatElement e : ( List < VertexFormatElement > ) format . getElements ( ) ) <nl> + { <nl> + switch ( e . getUsage ( ) ) <nl> + { <nl> + case POSITION : <nl> + put ( buf , e , x , y , z , 1f ) ; <nl> + break ; <nl> + case COLOR : <nl> + put ( buf , e , 1f , 1f , 1f , 1f ) ; <nl> + break ; <nl> + case UV : <nl> + put ( buf , e , u , v , 0f , 1f ) ; <nl> + break ; <nl> + case NORMAL : <nl> + put ( buf , e , ( float ) side . getFrontOffsetX ( ) , ( float ) side . getFrontOffsetY ( ) , ( float ) side . getFrontOffsetZ ( ) , 0f ) ; <nl> + break ; <nl> + default : <nl> + put ( buf , e ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + public static enum Loader implements ICustomModelLoader <nl> + { <nl> + instance ; <nl> + <nl> + public void onResourceManagerReload ( IResourceManager resourceManager ) { } <nl> + <nl> + public boolean accepts ( ResourceLocation modelLocation ) <nl> + { <nl> + return modelLocation . getResourceDomain ( ) . equals ( " forge " ) & & ( <nl> + modelLocation . getResourcePath ( ) . equals ( " item - layer " ) | | <nl> + modelLocation . getResourcePath ( ) . equals ( " models / block / item - layer " ) | | <nl> + modelLocation . getResourcePath ( ) . equals ( " models / item / item - layer " ) ) ; <nl> + } <nl> + <nl> + public IModel loadModel ( ResourceLocation modelLocation ) <nl> + { <nl> + return ItemLayerModel . instance ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 04c6e78 . . 2327d5b 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 320 , 7 + 320 , 7 @ @ public class ModelLoader extends ModelBakery <nl> throw new IllegalArgumentException ( " can ' t bake vanilla models to the format that doesn ' t fit into the default one : " + format ) ; <nl> } <nl> ModelBlock model = this . model ; <nl> - if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; <nl> + if ( hasItemModel ( model ) ) return new ItemLayerModel ( model ) . bake ( state , format , bakedTextureGetter ) ; / / model = makeItemModel ( model ) ; <nl> if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; <nl> if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> index f5264f1 . . 608e304 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ public class ModelLoaderRegistry <nl> { <nl> registerLoader ( B3DLoader . instance ) ; <nl> registerLoader ( ModelFluid . FluidLoader . instance ) ; <nl> + registerLoader ( ItemLayerModel . Loader . instance ) ; <nl> } <nl> <nl> / * <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java <nl> new file mode 100644 <nl> index 0000000 . . 78f74ed <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java <nl> @ @ - 0 , 0 + 1 , 55 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . SidedProxy ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + <nl> + @ Mod ( modid = ItemLayerModelDebug . MODID , version = ItemLayerModelDebug . VERSION ) <nl> + public class ItemLayerModelDebug <nl> + { <nl> + public static final String MODID = " ForgeDebugItemLayerModel " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + <nl> + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ItemLayerModelDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ItemLayerModelDebug $ ClientProxy " ) <nl> + public static CommonProxy proxy ; <nl> + <nl> + @ EventHandler <nl> + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + <nl> + public static class CommonProxy <nl> + { <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + GameRegistry . registerItem ( TestItem . instance , TestItem . name ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ClientProxy extends CommonProxy <nl> + { <nl> + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + TestItem . name , " inventory " ) ; <nl> + @ Override <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + super . preInit ( event ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( TestItem . instance , 0 , modelLocation ) ; <nl> + } <nl> + } <nl> + <nl> + public static final class TestItem extends Item <nl> + { <nl> + public static final TestItem instance = new TestItem ( ) ; <nl> + public static final String name = " TestItem " ; <nl> + <nl> + private TestItem ( ) <nl> + { <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + setUnlocalizedName ( MODID + " : " + name ) ; <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json b / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json <nl> new file mode 100644 <nl> index 0000000 . . 99e0306 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + { <nl> + " forge _ marker " : 1 , <nl> + " variants " : { <nl> + " inventory " : { <nl> + " model " : " forge : item - layer " , <nl> + " textures " : { <nl> + " layer0 " : " items / diamond _ pickaxe " <nl> + } <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index ca6ab30 . . 46f1c46 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; <nl> import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> + import net . minecraftforge . client . model . IModelCustomData ; <nl> import net . minecraftforge . client . model . IModelPart ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . IRetexturableModel ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . BufferUtils ; <nl> <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . collect . Collections2 ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> <nl> / * <nl> @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader <nl> public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) <nl> { <nl> TRSRTransformation ret = TRSRTransformation . identity ( ) ; <nl> - if ( node . getParent ( ) ! = null ) <nl> - { <nl> - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> - ret = ret . compose ( pm ) ; <nl> - } <nl> Key key = null ; <nl> if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; <nl> else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; <nl> - if ( key = = null ) <nl> - { <nl> - FMLLog . severe ( " invalid key index : " + frame ) ; <nl> - } <nl> - else <nl> + if ( key ! = null ) <nl> { <nl> + Node < ? > parent = node . getParent ( ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> + ret = ret . compose ( pm ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; <nl> + } <nl> ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; <nl> Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; <nl> rm . invert ( ) ; <nl> ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; <nl> + rm . invert ( ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + } <nl> } <nl> return ret ; <nl> } <nl> @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> } <nl> <nl> - public static class Wrapper extends PartWrapper < Mesh > implements IModel <nl> + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData <nl> { <nl> private final ResourceLocation location ; <nl> private final ImmutableMap < String , ResourceLocation > textures ; <nl> <nl> public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) <nl> { <nl> - this ( location , buildTextures ( location , textures ) , mesh ) ; <nl> + this ( location , buildTextures ( textures ) , mesh ) ; <nl> } <nl> <nl> public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) <nl> @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader <nl> this . textures = textures ; <nl> } <nl> <nl> - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) <nl> + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) <nl> { <nl> ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> <nl> for ( Texture t : textures ) <nl> { <nl> String path = t . getPath ( ) ; <nl> - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; <nl> + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; <nl> } <nl> return builder . build ( ) ; <nl> } <nl> <nl> + private static String getLocation ( String path ) <nl> + { <nl> + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> + return path ; <nl> + } <nl> + <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> { <nl> / / no dependencies for in - file models <nl> @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader <nl> <nl> public Collection < ResourceLocation > getTextures ( ) <nl> { <nl> - return textures . values ( ) ; <nl> + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) <nl> + { <nl> + public boolean apply ( ResourceLocation loc ) <nl> + { <nl> + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; <nl> - for ( String path : textures . keySet ( ) ) <nl> + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) <nl> { <nl> - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; <nl> + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) <nl> + { <nl> + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; <nl> + builder . put ( e . getKey ( ) , missing ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; <nl> + } <nl> } <nl> - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; <nl> + builder . put ( " missingno " , missing ) ; <nl> return new BakedWrapper ( this , state , format , builder . build ( ) ) ; <nl> } <nl> <nl> @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader <nl> else if ( ! location . equals ( other . location ) ) return false ; <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) <nl> + { <nl> + String path = e . getKey ( ) ; <nl> + String loc = getLocation ( path ) ; <nl> + if ( textures . containsKey ( loc ) ) <nl> + { <nl> + String newLoc = textures . get ( loc ) ; <nl> + if ( newLoc = = null ) newLoc = getLocation ( path ) ; <nl> + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e ) ; <nl> + } <nl> + } <nl> + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> + { <nl> + / / TODO keyframe <nl> + return null ; <nl> + } <nl> } <nl> <nl> private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel <nl> @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader <nl> for ( Face f : faces ) <nl> { <nl> buf . clear ( ) ; <nl> - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; <nl> + List < Texture > textures = null ; <nl> + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; <nl> TextureAtlasSprite sprite ; <nl> - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; <nl> else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; <nl> putVertexData ( f . getV1 ( ) , sprite ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 3fe304b . . 2358b93 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug <nl> <nl> private void clientPreInit ( ) <nl> { <nl> - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug <nl> @ Override <nl> public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> { <nl> - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; <nl> - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; <nl> - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; <nl> + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; <nl> return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; <nl> } <nl> <nl> @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug <nl> return false ; <nl> } <nl> } <nl> - <nl> - public static class DummyModelLoader implements ICustomModelLoader <nl> - { <nl> - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; <nl> - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; <nl> - <nl> - public boolean accepts ( ResourceLocation modelLocation ) <nl> - { <nl> - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; <nl> - } <nl> - <nl> - public IModel loadModel ( ResourceLocation model ) <nl> - { <nl> - return DummyModel . instance ; <nl> - } <nl> - <nl> - public static enum DummyModel implements IModel <nl> - { <nl> - instance ; <nl> - <nl> - public Collection < ResourceLocation > getDependencies ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - public Collection < ResourceLocation > getTextures ( ) <nl> - { <nl> - return Collections . singletonList ( dummyTexture ) ; <nl> - } <nl> - <nl> - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) <nl> - { <nl> - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; <nl> - } <nl> - <nl> - public IModelState getDefaultState ( ) <nl> - { <nl> - return ModelRotation . X0 _ Y0 ; <nl> - } <nl> - } <nl> - <nl> - public static class DummyBakedModel implements IFlexibleBakedModel <nl> - { <nl> - private final TextureAtlasSprite texture ; <nl> - <nl> - public DummyBakedModel ( TextureAtlasSprite texture ) <nl> - { <nl> - this . texture = texture ; <nl> - } <nl> - <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) <nl> - { <nl> - return new int [ ] { <nl> - Float . floatToRawIntBits ( x ) , <nl> - Float . floatToRawIntBits ( y ) , <nl> - Float . floatToRawIntBits ( z ) , <nl> - color , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> - 0 <nl> - } ; <nl> - } <nl> - <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> - { <nl> - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> - / / 1 half - way rotated quad looking UP <nl> - ret . add ( new BakedQuad ( Ints . concat ( <nl> - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , <nl> - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , <nl> - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , <nl> - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) <nl> - ) , - 1 , EnumFacing . UP ) ) ; <nl> - return ret ; <nl> - } <nl> - <nl> - public boolean isGui3d ( ) { return true ; } <nl> - <nl> - public boolean isAmbientOcclusion ( ) { return true ; } <nl> - <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> - <nl> - public TextureAtlasSprite getTexture ( ) { return this . texture ; } <nl> - <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> - <nl> - public VertexFormat getFormat ( ) <nl> - { <nl> - return Attributes . DEFAULT _ BAKED _ FORMAT ; <nl> - } <nl> - } <nl> - <nl> - public void onResourceManagerReload ( IResourceManager resourceManager ) { } <nl> - } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> index 1ebdfc8 . . c6db8d8 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> @ @ - 1 , 5 + 1 , 18 @ @ <nl> { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " textures " : { <nl> + " # texture " : " forgedebugmodelloaderregistry : texture " , <nl> + " # chest " : " entity / chest / normal " <nl> + } , <nl> + " model " : " forgedebugmodelloaderregistry : chest . b3d " <nl> + } , <nl> " variants " : { <nl> - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } <nl> + " normal " : { <nl> + " dummy " : " " <nl> + } , <nl> + " inventory " : { <nl> + " dummy " : " " <nl> + } <nl> } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d <nl> new file mode 100644 <nl> index 0000000 . . b070d7a <nl> Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d <nl> index 14e9c4d . . 8f4bd09 100644 <nl> Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 new file mode 100644 
 index 0000000 . . 4276430 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / ItemLayerModel . java 
 @ @ - 0 , 0 + 1 , 288 @ @ 
 + package net . minecraftforge . client . model ; 
 + 
 + import java . nio . ByteBuffer ; 
 + import java . util . Arrays ; 
 + import java . util . Collection ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . block . model . ModelBlock ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . renderer . vertex . VertexFormatElement ; 
 + import net . minecraft . client . resources . IResourceManager ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + 
 + import org . lwjgl . BufferUtils ; 
 + 
 + import com . google . common . base . Function ; 
 + import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + public class ItemLayerModel implements IRetexturableModel { 
 + 
 + public static final ItemLayerModel instance = new ItemLayerModel ( ImmutableList . < ResourceLocation > of ( ) ) ; 
 + private final ImmutableList < ResourceLocation > textures ; 
 + 
 + public ItemLayerModel ( ImmutableList < ResourceLocation > textures ) 
 + { 
 + this . textures = textures ; 
 + } 
 + 
 + public ItemLayerModel ( ModelBlock model ) 
 + { 
 + this ( getTextures ( model ) ) ; 
 + } 
 + 
 + private static ImmutableList < ResourceLocation > getTextures ( ModelBlock model ) 
 + { 
 + ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; 
 + for ( int i = 0 ; model . isTexturePresent ( " layer " + i ) ; i + + ) 
 + { 
 + builder . add ( new ResourceLocation ( model . resolveTextureName ( " layer " + i ) ) ) ; 
 + } 
 + return builder . build ( ) ; 
 + } 
 + 
 + public Collection < ResourceLocation > getDependencies ( ) 
 + { 
 + return ImmutableList . of ( ) ; 
 + } 
 + 
 + public Collection < ResourceLocation > getTextures ( ) 
 + { 
 + return textures ; 
 + } 
 + 
 + public IModelState getDefaultState ( ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + ImmutableList . Builder < ResourceLocation > builder = ImmutableList . builder ( ) ; 
 + for ( int i = 0 ; i < textures . size ( ) ; i + + ) 
 + { 
 + if ( textures . containsKey ( " layer " + i ) ) 
 + { 
 + builder . add ( new ResourceLocation ( textures . get ( " layer " + i ) ) ) ; 
 + } 
 + } 
 + return new ItemLayerModel ( builder . build ( ) ) ; 
 + } 
 + 
 + public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 + { 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + for ( int i = 0 ; i < textures . size ( ) ; i + + ) 
 + { 
 + TextureAtlasSprite sprite = bakedTextureGetter . apply ( textures . get ( i ) ) ; 
 + builder . addAll ( getQuadsForSprite ( i , sprite , format ) ) ; 
 + } 
 + TextureAtlasSprite particle = bakedTextureGetter . apply ( textures . isEmpty ( ) ? new ResourceLocation ( " missingno " ) : textures . get ( 0 ) ) ; 
 + return new BakedModel ( builder . build ( ) , particle , format ) ; 
 + } 
 + 
 + public static class BakedModel implements IFlexibleBakedModel 
 + { 
 + private final ImmutableList < BakedQuad > quads ; 
 + private final TextureAtlasSprite particle ; 
 + private final VertexFormat format ; 
 + 
 + public BakedModel ( ImmutableList < BakedQuad > quads , TextureAtlasSprite particle , VertexFormat format ) 
 + { 
 + this . quads = quads ; 
 + this . particle = particle ; 
 + this . format = format ; 
 + } 
 + 
 + public boolean isAmbientOcclusion ( ) { return true ; } 
 + public boolean isGui3d ( ) { return false ; } 
 + public boolean isBuiltInRenderer ( ) { return false ; } 
 + public TextureAtlasSprite getTexture ( ) { return null ; } 
 + public ItemCameraTransforms getItemCameraTransforms ( ) { return ItemCameraTransforms . DEFAULT ; } 
 + public List < BakedQuad > getFaceQuads ( EnumFacing side ) { return ImmutableList . of ( ) ; } 
 + public List < BakedQuad > getGeneralQuads ( ) { return quads ; } 
 + public VertexFormat getFormat ( ) { return format ; } 
 + } 
 + 
 + public static final ImmutableList < BakedQuad > getQuadsForSprite ( int tint , TextureAtlasSprite sprite , VertexFormat format ) 
 + { 
 + ImmutableList . Builder < BakedQuad > builder = ImmutableList . builder ( ) ; 
 + 
 + int uMax = sprite . getIconWidth ( ) ; 
 + int vMax = sprite . getIconHeight ( ) ; 
 + 
 + ByteBuffer buf = BufferUtils . createByteBuffer ( 4 * format . getNextOffset ( ) ) ; 
 + int [ ] data ; 
 + 
 + for ( int f = 0 ; f < sprite . getFrameCount ( ) ; f + + ) 
 + { 
 + int [ ] pixels = sprite . getFrameTextureData ( f ) [ 0 ] ; 
 + boolean ptu ; 
 + boolean [ ] ptv = new boolean [ uMax ] ; 
 + Arrays . fill ( ptv , true ) ; 
 + for ( int v = 0 ; v < vMax ; v + + ) 
 + { 
 + ptu = true ; 
 + for ( int u = 0 ; u < uMax ; u + + ) 
 + { 
 + boolean t = ( pixels [ u + ( vMax - 1 - v ) * uMax ] > > 24 & 0xFF ) = = 0 ; 
 + if ( ptu & & ! t ) / / left - transparent , right - opaque 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . WEST , tint , sprite , u , v ) ) ; 
 + } 
 + if ( ! ptu & & t ) / / left - opaque , right - transparent 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . EAST , tint , sprite , u , v ) ) ; 
 + } 
 + if ( ptv [ u ] & & ! t ) / / up - transparent , down - opaque 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . UP , tint , sprite , u , v ) ) ; 
 + } 
 + if ( ! ptv [ u ] & & t ) / / up - opaque , down - transparent 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . DOWN , tint , sprite , u , v ) ) ; 
 + } 
 + ptu = t ; 
 + ptv [ u ] = t ; 
 + } 
 + if ( ! ptu ) / / last - opaque 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . EAST , tint , sprite , uMax , v ) ) ; 
 + } 
 + } 
 + / / last line 
 + for ( int u = 0 ; u < uMax ; u + + ) 
 + { 
 + if ( ! ptv [ u ] ) 
 + { 
 + builder . add ( buildSideQuad ( buf , format , EnumFacing . DOWN , tint , sprite , u , vMax ) ) ; 
 + } 
 + } 
 + } 
 + / / front 
 + builder . add ( buildQuad ( buf , format , EnumFacing . SOUTH , tint , 
 + 0 , 0 , 7 . 5f / 16f , sprite . getMinU ( ) , sprite . getMaxV ( ) , 
 + 0 , 1 , 7 . 5f / 16f , sprite . getMinU ( ) , sprite . getMinV ( ) , 
 + 1 , 1 , 7 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMinV ( ) , 
 + 1 , 0 , 7 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMaxV ( ) 
 + ) ) ; 
 + / / back 
 + builder . add ( buildQuad ( buf , format , EnumFacing . NORTH , tint , 
 + 0 , 0 , 8 . 5f / 16f , sprite . getMinU ( ) , sprite . getMaxV ( ) , 
 + 1 , 0 , 8 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMaxV ( ) , 
 + 1 , 1 , 8 . 5f / 16f , sprite . getMaxU ( ) , sprite . getMinV ( ) , 
 + 0 , 1 , 8 . 5f / 16f , sprite . getMinU ( ) , sprite . getMinV ( ) 
 + ) ) ; 
 + return builder . build ( ) ; 
 + } 
 + 
 + private static BakedQuad buildSideQuad ( ByteBuffer buf , VertexFormat format , EnumFacing side , int tint , TextureAtlasSprite sprite , int u , int v ) 
 + { 
 + float x0 = ( float ) u / sprite . getIconWidth ( ) ; 
 + float y0 = ( float ) v / sprite . getIconHeight ( ) ; 
 + float x1 = x0 , y1 = y0 ; 
 + float z1 = 7 . 5f / 16f , z2 = 8 . 5f / 16f ; 
 + switch ( side ) 
 + { 
 + case WEST : 
 + z1 = 8 . 5f / 16f ; 
 + z2 = 7 . 5f / 16f ; 
 + case EAST : 
 + y1 = ( v + 1f ) / sprite . getIconHeight ( ) ; 
 + break ; 
 + case DOWN : 
 + z1 = 8 . 5f / 16f ; 
 + z2 = 7 . 5f / 16f ; 
 + case UP : 
 + x1 = ( u + 1f ) / sprite . getIconWidth ( ) ; 
 + break ; 
 + default : 
 + throw new IllegalArgumentException ( " can ' t handle z - oriented side " ) ; 
 + } 
 + float u0 = 16f * ( x0 - side . getDirectionVec ( ) . getX ( ) * 1e - 2f / sprite . getIconWidth ( ) ) ; 
 + float u1 = 16f * ( x1 - side . getDirectionVec ( ) . getX ( ) * 1e - 2f / sprite . getIconWidth ( ) ) ; 
 + float v0 = 16f * ( 1f - y0 - side . getDirectionVec ( ) . getY ( ) * 1e - 2f / sprite . getIconHeight ( ) ) ; 
 + float v1 = 16f * ( 1f - y1 - side . getDirectionVec ( ) . getY ( ) * 1e - 2f / sprite . getIconHeight ( ) ) ; 
 + return buildQuad ( 
 + buf , format , side . getOpposite ( ) , tint , / / getOpposite is related either to the swapping of V direction , or something else 
 + x0 , y0 , z1 , sprite . getInterpolatedU ( u0 ) , sprite . getInterpolatedV ( v0 ) , 
 + x1 , y1 , z1 , sprite . getInterpolatedU ( u1 ) , sprite . getInterpolatedV ( v1 ) , 
 + x1 , y1 , z2 , sprite . getInterpolatedU ( u1 ) , sprite . getInterpolatedV ( v1 ) , 
 + x0 , y0 , z2 , sprite . getInterpolatedU ( u0 ) , sprite . getInterpolatedV ( v0 ) 
 + ) ; 
 + } 
 + 
 + private static final BakedQuad buildQuad ( 
 + ByteBuffer buf , VertexFormat format , EnumFacing side , int tint , 
 + float x0 , float y0 , float z0 , float u0 , float v0 , 
 + float x1 , float y1 , float z1 , float u1 , float v1 , 
 + float x2 , float y2 , float z2 , float u2 , float v2 , 
 + float x3 , float y3 , float z3 , float u3 , float v3 ) 
 + { 
 + buf . clear ( ) ; 
 + putVertex ( buf , format , side , x0 , y0 , z0 , u0 , v0 ) ; 
 + putVertex ( buf , format , side , x1 , y1 , z1 , u1 , v1 ) ; 
 + putVertex ( buf , format , side , x2 , y2 , z2 , u2 , v2 ) ; 
 + putVertex ( buf , format , side , x3 , y3 , z3 , u3 , v3 ) ; 
 + buf . flip ( ) ; 
 + int [ ] data = new int [ 4 * format . getNextOffset ( ) / 4 ] ; 
 + buf . asIntBuffer ( ) . get ( data ) ; 
 + return new BakedQuad ( data , tint , side ) ; 
 + } 
 + 
 + private static void put ( ByteBuffer buf , VertexFormatElement e , Float . . . fs ) 
 + { 
 + Attributes . put ( buf , e , true , 0f , fs ) ; 
 + } 
 + 
 + private static void putVertex ( ByteBuffer buf , VertexFormat format , EnumFacing side , float x , float y , float z , float u , float v ) 
 + { 
 + for ( VertexFormatElement e : ( List < VertexFormatElement > ) format . getElements ( ) ) 
 + { 
 + switch ( e . getUsage ( ) ) 
 + { 
 + case POSITION : 
 + put ( buf , e , x , y , z , 1f ) ; 
 + break ; 
 + case COLOR : 
 + put ( buf , e , 1f , 1f , 1f , 1f ) ; 
 + break ; 
 + case UV : 
 + put ( buf , e , u , v , 0f , 1f ) ; 
 + break ; 
 + case NORMAL : 
 + put ( buf , e , ( float ) side . getFrontOffsetX ( ) , ( float ) side . getFrontOffsetY ( ) , ( float ) side . getFrontOffsetZ ( ) , 0f ) ; 
 + break ; 
 + default : 
 + put ( buf , e ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + 
 + public static enum Loader implements ICustomModelLoader 
 + { 
 + instance ; 
 + 
 + public void onResourceManagerReload ( IResourceManager resourceManager ) { } 
 + 
 + public boolean accepts ( ResourceLocation modelLocation ) 
 + { 
 + return modelLocation . getResourceDomain ( ) . equals ( " forge " ) & & ( 
 + modelLocation . getResourcePath ( ) . equals ( " item - layer " ) | | 
 + modelLocation . getResourcePath ( ) . equals ( " models / block / item - layer " ) | | 
 + modelLocation . getResourcePath ( ) . equals ( " models / item / item - layer " ) ) ; 
 + } 
 + 
 + public IModel loadModel ( ResourceLocation modelLocation ) 
 + { 
 + return ItemLayerModel . instance ; 
 + } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 04c6e78 . . 2327d5b 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 320 , 7 + 320 , 7 @ @ public class ModelLoader extends ModelBakery 
 throw new IllegalArgumentException ( " can ' t bake vanilla models to the format that doesn ' t fit into the default one : " + format ) ; 
 } 
 ModelBlock model = this . model ; 
 - if ( hasItemModel ( model ) ) model = makeItemModel ( model ) ; 
 + if ( hasItemModel ( model ) ) return new ItemLayerModel ( model ) . bake ( state , format , bakedTextureGetter ) ; / / model = makeItemModel ( model ) ; 
 if ( model = = null ) return getMissingModel ( ) . bake ( state , format , bakedTextureGetter ) ; 
 if ( isCustomRenderer ( model ) ) return new IFlexibleBakedModel . Wrapper ( new BuiltInModel ( new ItemCameraTransforms ( model . getThirdPersonTransform ( ) , model . getFirstPersonTransform ( ) , model . getHeadTransform ( ) , model . getInGuiTransform ( ) ) ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 return new IFlexibleBakedModel . Wrapper ( bakeModel ( model , state . apply ( this ) , state instanceof UVLock ) , Attributes . DEFAULT _ BAKED _ FORMAT ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 index f5264f1 . . 608e304 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoaderRegistry . java 
 @ @ - 33 , 6 + 33 , 7 @ @ public class ModelLoaderRegistry 
 { 
 registerLoader ( B3DLoader . instance ) ; 
 registerLoader ( ModelFluid . FluidLoader . instance ) ; 
 + registerLoader ( ItemLayerModel . Loader . instance ) ; 
 } 
 
 / * 
 diff - - git a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java 
 new file mode 100644 
 index 0000000 . . 78f74ed 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java 
 @ @ - 0 , 0 + 1 , 55 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . SidedProxy ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + 
 + @ Mod ( modid = ItemLayerModelDebug . MODID , version = ItemLayerModelDebug . VERSION ) 
 + public class ItemLayerModelDebug 
 + { 
 + public static final String MODID = " ForgeDebugItemLayerModel " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + 
 + @ SidedProxy ( serverSide = " net . minecraftforge . debug . ItemLayerModelDebug $ CommonProxy " , clientSide = " net . minecraftforge . debug . ItemLayerModelDebug $ ClientProxy " ) 
 + public static CommonProxy proxy ; 
 + 
 + @ EventHandler 
 + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + 
 + public static class CommonProxy 
 + { 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + GameRegistry . registerItem ( TestItem . instance , TestItem . name ) ; 
 + } 
 + } 
 + 
 + public static class ClientProxy extends CommonProxy 
 + { 
 + private static ModelResourceLocation modelLocation = new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + TestItem . name , " inventory " ) ; 
 + @ Override 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + super . preInit ( event ) ; 
 + ModelLoader . setCustomModelResourceLocation ( TestItem . instance , 0 , modelLocation ) ; 
 + } 
 + } 
 + 
 + public static final class TestItem extends Item 
 + { 
 + public static final TestItem instance = new TestItem ( ) ; 
 + public static final String name = " TestItem " ; 
 + 
 + private TestItem ( ) 
 + { 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + setUnlocalizedName ( MODID + " : " + name ) ; 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json b / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json 
 new file mode 100644 
 index 0000000 . . 99e0306 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugitemlayermodel / blockstates / TestItem . json 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + { 
 + " forge _ marker " : 1 , 
 + " variants " : { 
 + " inventory " : { 
 + " model " : " forge : item - layer " , 
 + " textures " : { 
 + " layer0 " : " items / diamond _ pickaxe " 
 + } 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index ca6ab30 . . 46f1c46 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; 
 import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 + import net . minecraftforge . client . model . IModelCustomData ; 
 import net . minecraftforge . client . model . IModelPart ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . IRetexturableModel ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; 
 import org . lwjgl . BufferUtils ; 
 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 + import com . google . common . collect . Collections2 ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 
 / * 
 @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader 
 public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) 
 { 
 TRSRTransformation ret = TRSRTransformation . identity ( ) ; 
 - if ( node . getParent ( ) ! = null ) 
 - { 
 - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 - ret = ret . compose ( pm ) ; 
 - } 
 Key key = null ; 
 if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; 
 else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; 
 - if ( key = = null ) 
 - { 
 - FMLLog . severe ( " invalid key index : " + frame ) ; 
 - } 
 - else 
 + if ( key ! = null ) 
 { 
 + Node < ? > parent = node . getParent ( ) ; 
 + if ( parent ! = null ) 
 + { 
 + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 + ret = ret . compose ( pm ) ; 
 + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; 
 + } 
 ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; 
 Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; 
 rm . invert ( ) ; 
 ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + if ( parent ! = null ) 
 + { 
 + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; 
 + rm . invert ( ) ; 
 + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + } 
 } 
 return ret ; 
 } 
 @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 } 
 
 - public static class Wrapper extends PartWrapper < Mesh > implements IModel 
 + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData 
 { 
 private final ResourceLocation location ; 
 private final ImmutableMap < String , ResourceLocation > textures ; 
 
 public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) 
 { 
 - this ( location , buildTextures ( location , textures ) , mesh ) ; 
 + this ( location , buildTextures ( textures ) , mesh ) ; 
 } 
 
 public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) 
 @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader 
 this . textures = textures ; 
 } 
 
 - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) 
 + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) 
 { 
 ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 
 for ( Texture t : textures ) 
 { 
 String path = t . getPath ( ) ; 
 - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; 
 + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; 
 } 
 return builder . build ( ) ; 
 } 
 
 + private static String getLocation ( String path ) 
 + { 
 + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 + return path ; 
 + } 
 + 
 public Collection < ResourceLocation > getDependencies ( ) 
 { 
 / / no dependencies for in - file models 
 @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader 
 
 public Collection < ResourceLocation > getTextures ( ) 
 { 
 - return textures . values ( ) ; 
 + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) 
 + { 
 + public boolean apply ( ResourceLocation loc ) 
 + { 
 + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; 
 + } 
 + } ) ; 
 } 
 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; 
 - for ( String path : textures . keySet ( ) ) 
 + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) 
 { 
 - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; 
 + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) 
 + { 
 + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; 
 + builder . put ( e . getKey ( ) , missing ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; 
 + } 
 } 
 - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; 
 + builder . put ( " missingno " , missing ) ; 
 return new BakedWrapper ( this , state , format , builder . build ( ) ) ; 
 } 
 
 @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader 
 else if ( ! location . equals ( other . location ) ) return false ; 
 return true ; 
 } 
 + 
 + @ Override 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) 
 + { 
 + String path = e . getKey ( ) ; 
 + String loc = getLocation ( path ) ; 
 + if ( textures . containsKey ( loc ) ) 
 + { 
 + String newLoc = textures . get ( loc ) ; 
 + if ( newLoc = = null ) newLoc = getLocation ( path ) ; 
 + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e ) ; 
 + } 
 + } 
 + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 + { 
 + / / TODO keyframe 
 + return null ; 
 + } 
 } 
 
 private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel 
 @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader 
 for ( Face f : faces ) 
 { 
 buf . clear ( ) ; 
 - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; 
 + List < Texture > textures = null ; 
 + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; 
 TextureAtlasSprite sprite ; 
 - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; 
 else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; 
 putVertexData ( f . getV1 ( ) , sprite ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 3fe304b . . 2358b93 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug 
 
 private void clientPreInit ( ) 
 { 
 - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug 
 @ Override 
 public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 { 
 - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; 
 - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; 
 - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; 
 + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; 
 return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; 
 } 
 
 @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug 
 return false ; 
 } 
 } 
 - 
 - public static class DummyModelLoader implements ICustomModelLoader 
 - { 
 - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; 
 - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; 
 - 
 - public boolean accepts ( ResourceLocation modelLocation ) 
 - { 
 - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; 
 - } 
 - 
 - public IModel loadModel ( ResourceLocation model ) 
 - { 
 - return DummyModel . instance ; 
 - } 
 - 
 - public static enum DummyModel implements IModel 
 - { 
 - instance ; 
 - 
 - public Collection < ResourceLocation > getDependencies ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - public Collection < ResourceLocation > getTextures ( ) 
 - { 
 - return Collections . singletonList ( dummyTexture ) ; 
 - } 
 - 
 - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) 
 - { 
 - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; 
 - } 
 - 
 - public IModelState getDefaultState ( ) 
 - { 
 - return ModelRotation . X0 _ Y0 ; 
 - } 
 - } 
 - 
 - public static class DummyBakedModel implements IFlexibleBakedModel 
 - { 
 - private final TextureAtlasSprite texture ; 
 - 
 - public DummyBakedModel ( TextureAtlasSprite texture ) 
 - { 
 - this . texture = texture ; 
 - } 
 - 
 - public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) 
 - { 
 - return new int [ ] { 
 - Float . floatToRawIntBits ( x ) , 
 - Float . floatToRawIntBits ( y ) , 
 - Float . floatToRawIntBits ( z ) , 
 - color , 
 - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 - 0 
 - } ; 
 - } 
 - 
 - public List < BakedQuad > getGeneralQuads ( ) 
 - { 
 - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 - / / 1 half - way rotated quad looking UP 
 - ret . add ( new BakedQuad ( Ints . concat ( 
 - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , 
 - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , 
 - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , 
 - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) 
 - ) , - 1 , EnumFacing . UP ) ) ; 
 - return ret ; 
 - } 
 - 
 - public boolean isGui3d ( ) { return true ; } 
 - 
 - public boolean isAmbientOcclusion ( ) { return true ; } 
 - 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 - 
 - public TextureAtlasSprite getTexture ( ) { return this . texture ; } 
 - 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 - 
 - public VertexFormat getFormat ( ) 
 - { 
 - return Attributes . DEFAULT _ BAKED _ FORMAT ; 
 - } 
 - } 
 - 
 - public void onResourceManagerReload ( IResourceManager resourceManager ) { } 
 - } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 index 1ebdfc8 . . c6db8d8 100644 
 - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 @ @ - 1 , 5 + 1 , 18 @ @ 
 { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " textures " : { 
 + " # texture " : " forgedebugmodelloaderregistry : texture " , 
 + " # chest " : " entity / chest / normal " 
 + } , 
 + " model " : " forgedebugmodelloaderregistry : chest . b3d " 
 + } , 
 " variants " : { 
 - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } 
 + " normal " : { 
 + " dummy " : " " 
 + } , 
 + " inventory " : { 
 + " dummy " : " " 
 + } 
 } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d 
 new file mode 100644 
 index 0000000 . . b070d7a 
 Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d 
 index 14e9c4d . . 8f4bd09 100644 
 Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ
