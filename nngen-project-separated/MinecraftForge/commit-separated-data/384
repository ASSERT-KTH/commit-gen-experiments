BLEU SCORE: 0.03635358866852297

TEST MSG: Move client - only config options to client config
GENERATED MSG: Add config option to disable attempting to creat screen with Stencil Bits .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index c74cfb0 . . de8b492 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 35 , 7 + 35 , 6 @ @ import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> - import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> @ @ - 49 , 6 + 48 , 7 @ @ import net . minecraft . world . storage . SaveHandler ; <nl> import net . minecraft . world . storage . WorldInfo ; <nl> import net . minecraftforge . classloading . FMLForgePlugin ; <nl> import net . minecraftforge . common . config . Config ; <nl> + import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> @ @ - 63 , 7 + 63 , 6 @ @ import net . minecraftforge . fluids . capability . CapabilityFluidHandler ; <nl> import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> import net . minecraftforge . items . CapabilityItemHandler ; <nl> import net . minecraftforge . fluids . UniversalBucket ; <nl> - import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> import net . minecraftforge . oredict . RecipeSorter ; <nl> import net . minecraftforge . server . command . ForgeCommand ; <nl> @ @ - 76 , 7 + 75 , 6 @ @ import com . google . common . eventbus . Subscribe ; <nl> import net . minecraftforge . fml . client . FMLFileResourcePack ; <nl> import net . minecraftforge . fml . client . FMLFolderResourcePack ; <nl> import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; <nl> - import net . minecraftforge . fml . common . AutomaticEventSubscriber ; <nl> import net . minecraftforge . fml . common . DummyModContainer ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 171 , 6 + 169 , 18 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> return config ; <nl> } <nl> <nl> + private static void remapGeneralPropertyToClient ( String key ) <nl> + { <nl> + ConfigCategory GENERAL = config . getCategory ( CATEGORY _ GENERAL ) ; <nl> + if ( GENERAL . containsKey ( key ) ) <nl> + { <nl> + FMLLog . log . debug ( " Remapping property { } from category general to client " , key ) ; <nl> + Property property = GENERAL . get ( key ) ; <nl> + GENERAL . remove ( key ) ; <nl> + config . getCategory ( CATEGORY _ CLIENT ) . put ( key , property ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Synchronizes the local fields with the values in the Configuration object . <nl> * / <nl> @ @ - 201 , 6 + 211 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " disableStitchedFileSaving " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " disableStitchedFileSaving " ) ; <nl> if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " java8Reminder " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " java8Reminder " ) ; <nl> <nl> + / / remap properties wrongly listed as general properties to client properties <nl> + remapGeneralPropertyToClient ( " biomeSkyBlendRange " ) ; <nl> + remapGeneralPropertyToClient ( " forgeLightPipelineEnabled " ) ; <nl> + <nl> prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , false ) ; <nl> prop . setComment ( " Set to true to disable Forge ' s version check mechanics . Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ) ; <nl> / / Language keys are a good idea to implement if you are using config GUIs . This allows you to use a . lang file that will hold the <nl> @ @ - 256 , 12 + 270 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> fullBoundingBoxLadders = prop . getBoolean ( false ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ GENERAL , " biomeSkyBlendRange " , new int [ ] { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 } ) ; <nl> - prop . setComment ( " Control the range of sky blending for colored skies in biomes . " ) ; <nl> - prop . setLanguageKey ( " forge . configgui . biomeSkyBlendRange " ) ; <nl> - blendRanges = prop . getIntList ( ) ; <nl> - propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , <nl> " Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . " , 0 . 0D , 1 . 0D ) ; <nl> prop . setLanguageKey ( " forge . configgui . zombieBaseSummonChance " ) . setRequiresWorldRestart ( true ) ; <nl> @ @ - 274 , 12 + 282 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> zombieBabyChance = ( float ) prop . getDouble ( 0 . 05 ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ GENERAL , " forgeLightPipelineEnabled " , true , <nl> - " Enable the forge block rendering pipeline - fixes the lighting of custom models . " ) ; <nl> - forgeLightPipelineEnabled = prop . getBoolean ( true ) ; <nl> - prop . setLanguageKey ( " forge . configgui . forgeLightPipelineEnabled " ) ; <nl> - propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> prop = config . get ( Configuration . CATEGORY _ GENERAL , " logCascadingWorldGeneration " , true , <nl> " Log cascading chunk generation issues during terrain population . " ) ; <nl> logCascadingWorldGeneration = prop . getBoolean ( ) ; <nl> @ @ - 329 , 6 + 331 , 18 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . setLanguageKey ( " forge . configgui . alwaysSetupTerrainOffThread " ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " biomeSkyBlendRange " , new int [ ] { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 } ) ; <nl> + prop . setComment ( " Control the range of sky blending for colored skies in biomes . " ) ; <nl> + prop . setLanguageKey ( " forge . configgui . biomeSkyBlendRange " ) ; <nl> + blendRanges = prop . getIntList ( ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> + prop = config . get ( Configuration . CATEGORY _ CLIENT , " forgeLightPipelineEnabled " , true , <nl> + " Enable the forge block rendering pipeline - fixes the lighting of custom models . " ) ; <nl> + forgeLightPipelineEnabled = prop . getBoolean ( true ) ; <nl> + prop . setLanguageKey ( " forge . configgui . forgeLightPipelineEnabled " ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; <nl> <nl> if ( config . hasChanged ( ) )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 8bf0092 . . 0e786ae 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 69 , 7 + 69 , 7 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> public class ForgeHooksClient <nl> { <nl> / / private static final ResourceLocation ITEM _ GLINT = new ResourceLocation ( " textures / misc / enchanted _ item _ glint . png " ) ; <nl> - <nl> + <nl> static TextureManager engine ( ) <nl> { <nl> return FMLClientHandler . instance ( ) . getClient ( ) . renderEngine ; <nl> @ @ - 319 , 6 + 319 , 12 @ @ public class ForgeHooksClient <nl> { <nl> ImageIO . setUseCache ( false ) ; / / Disable on - disc stream cache should speed up texture pack reloading . <nl> PixelFormat format = new PixelFormat ( ) . withDepthBits ( 24 ) ; <nl> + if ( ! ForgeModContainer . enableStencilBits ) <nl> + { <nl> + Display . create ( format ) ; <nl> + stencilBits = 0 ; <nl> + return ; <nl> + } <nl> try <nl> { <nl> / / TODO : Figure out how to determine the max bits . <nl> @ @ - 369 , 7 + 375 , 7 @ @ public class ForgeHooksClient <nl> <nl> private static boolean skyInit ; <nl> private static int skyRGBMultiplier ; <nl> - <nl> + <nl> public static int getSkyBlendColour ( World world , int playerX , int playerY , int playerZ ) <nl> { <nl> if ( playerX = = skyX & & playerZ = = skyZ & & skyInit ) <nl> @ @ - 385 , 7 + 391 , 7 @ @ public class ForgeHooksClient <nl> { <nl> distance = ranges [ settings . renderDistanceChunks ] ; <nl> } <nl> - <nl> + <nl> int r = 0 ; <nl> int g = 0 ; <nl> int b = 0 ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4528fd6 . . 7ae1949 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 66 , 7 + 66 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static float zombieBabyChance = 0 . 05f ; <nl> public static boolean shouldSortRecipies = true ; <nl> public static boolean disableVersionCheck = false ; <nl> - <nl> + public static boolean enableStencilBits = true ; <nl> + <nl> private static Configuration config ; <nl> <nl> public ForgeModContainer ( ) <nl> @ @ - 89 , 7 + 90 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> config = null ; <nl> File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; <nl> config = new Configuration ( cfgFile ) ; <nl> - <nl> + <nl> syncConfig ( true ) ; <nl> } <nl> <nl> @ @ - 98 , 7 + 99 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> { <nl> return " net . minecraftforge . client . gui . ForgeGuiFactory " ; <nl> } <nl> - <nl> + <nl> public static Configuration getConfig ( ) <nl> { <nl> return config ; <nl> @ @ - 112 , 7 + 113 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> / / By adding a property order list we are defining the order that the properties will appear both in the config file and on the GUIs . <nl> / / Property order lists are defined per - ConfigCategory . <nl> List < String > propOrder = new ArrayList < String > ( ) ; <nl> - <nl> + <nl> if ( ! config . isChild ) <nl> { <nl> if ( load ) <nl> @ @ - 125 , 7 + 126 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> Configuration . enableGlobalConfig ( ) ; <nl> } <nl> } <nl> - <nl> + <nl> Property prop ; <nl> <nl> prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , false ) ; <nl> @ @ - 137 , 8 + 138 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . setLanguageKey ( " forge . configgui . disableVersionCheck " ) ; <nl> disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> - prop = config . get ( Configuration . CATEGORY _ GENERAL , " clumpingThreshold " , 64 , <nl> + <nl> + prop = config . get ( Configuration . CATEGORY _ GENERAL , " clumpingThreshold " , 64 , <nl> " Controls the number threshold at which Packet51 is preferred over Packet52 , default and minimum 64 , maximum 1024 " , 64 , 1024 ) ; <nl> prop . setLanguageKey ( " forge . configgui . clumpingThreshold " ) . setRequiresWorldRestart ( true ) ; <nl> clumpingThreshold = prop . getInt ( 64 ) ; <nl> @ @ - 204 , 18 + 205 , 24 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> blendRanges = prop . getIntList ( ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , <nl> + prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , <nl> " Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . " , 0 . 0D , 1 . 0D ) ; <nl> prop . setLanguageKey ( " forge . configgui . zombieBaseSummonChance " ) . setRequiresWorldRestart ( true ) ; <nl> zombieSummonBaseChance = prop . getDouble ( 0 . 1 ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> - prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBabyChance " , 0 . 05 , <nl> + prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBabyChance " , 0 . 05 , <nl> " Chance that a zombie ( or subclass ) is a baby . Allows changing the zombie spawning mechanic . " , 0 . 0D , 1 . 0D ) ; <nl> prop . setLanguageKey ( " forge . configgui . zombieBabyChance " ) . setRequiresWorldRestart ( true ) ; <nl> zombieBabyChance = ( float ) prop . getDouble ( 0 . 05 ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> - <nl> + <nl> + prop = config . get ( Configuration . CATEGORY _ GENERAL , " enableStencilBits " , true ) ; <nl> + prop . comment = " Set to false to attempt to allocate 8 stencil bits when starting the GL display context . " ; <nl> + prop . setLanguageKey ( " forge . configgui . stencilbits " ) . setRequiresWorldRestart ( true ) ; <nl> + enableStencilBits = prop . getBoolean ( true ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; <nl> <nl> if ( config . hasChanged ( ) ) <nl> @ @ - 223 , 7 + 230 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> config . save ( ) ; <nl> } <nl> } <nl> - <nl> + <nl> / * * <nl> * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . <nl> * This implementation uses the optional configID string to handle multiple Configurations using one event handler . <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 3d2e685 . . 13ea1c4 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 40 , 6 + 40 , 7 @ @ forge . configgui . zombieBabyChance . tooltip = Chance that a zombie ( or subclass ) is a <nl> forge . configgui . zombieBabyChance = Zombie Baby Chance <nl> forge . configgui . zombieBaseSummonChance . tooltip = Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . <nl> forge . configgui . zombieBaseSummonChance = Zombie Summon Chance <nl> + forge . configgui . stencilbits = Enable GL Stencil Bits <nl> <nl> forge . configgui . modID . tooltip = The mod ID that you want to define override settings for . <nl> forge . configgui . modID = Mod ID

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index c74cfb0 . . de8b492 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 35 , 7 + 35 , 6 @ @ import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 - import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 @ @ - 49 , 6 + 48 , 7 @ @ import net . minecraft . world . storage . SaveHandler ; 
 import net . minecraft . world . storage . WorldInfo ; 
 import net . minecraftforge . classloading . FMLForgePlugin ; 
 import net . minecraftforge . common . config . Config ; 
 + import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 @ @ - 63 , 7 + 63 , 6 @ @ import net . minecraftforge . fluids . capability . CapabilityFluidHandler ; 
 import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 import net . minecraftforge . items . CapabilityItemHandler ; 
 import net . minecraftforge . fluids . UniversalBucket ; 
 - import net . minecraftforge . fml . common . registry . GameRegistry ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 import net . minecraftforge . oredict . RecipeSorter ; 
 import net . minecraftforge . server . command . ForgeCommand ; 
 @ @ - 76 , 7 + 75 , 6 @ @ import com . google . common . eventbus . Subscribe ; 
 import net . minecraftforge . fml . client . FMLFileResourcePack ; 
 import net . minecraftforge . fml . client . FMLFolderResourcePack ; 
 import net . minecraftforge . fml . client . event . ConfigChangedEvent . OnConfigChangedEvent ; 
 - import net . minecraftforge . fml . common . AutomaticEventSubscriber ; 
 import net . minecraftforge . fml . common . DummyModContainer ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 171 , 6 + 169 , 18 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 return config ; 
 } 
 
 + private static void remapGeneralPropertyToClient ( String key ) 
 + { 
 + ConfigCategory GENERAL = config . getCategory ( CATEGORY _ GENERAL ) ; 
 + if ( GENERAL . containsKey ( key ) ) 
 + { 
 + FMLLog . log . debug ( " Remapping property { } from category general to client " , key ) ; 
 + Property property = GENERAL . get ( key ) ; 
 + GENERAL . remove ( key ) ; 
 + config . getCategory ( CATEGORY _ CLIENT ) . put ( key , property ) ; 
 + } 
 + } 
 + 
 / * * 
 * Synchronizes the local fields with the values in the Configuration object . 
 * / 
 @ @ - 201 , 6 + 211 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 if ( config . getCategory ( CATEGORY _ GENERAL ) . containsKey ( " disableStitchedFileSaving " ) ) config . getCategory ( CATEGORY _ GENERAL ) . remove ( " disableStitchedFileSaving " ) ; 
 if ( config . getCategory ( CATEGORY _ CLIENT ) . containsKey ( " java8Reminder " ) ) config . getCategory ( CATEGORY _ CLIENT ) . remove ( " java8Reminder " ) ; 
 
 + / / remap properties wrongly listed as general properties to client properties 
 + remapGeneralPropertyToClient ( " biomeSkyBlendRange " ) ; 
 + remapGeneralPropertyToClient ( " forgeLightPipelineEnabled " ) ; 
 + 
 prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , false ) ; 
 prop . setComment ( " Set to true to disable Forge ' s version check mechanics . Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ) ; 
 / / Language keys are a good idea to implement if you are using config GUIs . This allows you to use a . lang file that will hold the 
 @ @ - 256 , 12 + 270 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 fullBoundingBoxLadders = prop . getBoolean ( false ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ GENERAL , " biomeSkyBlendRange " , new int [ ] { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 } ) ; 
 - prop . setComment ( " Control the range of sky blending for colored skies in biomes . " ) ; 
 - prop . setLanguageKey ( " forge . configgui . biomeSkyBlendRange " ) ; 
 - blendRanges = prop . getIntList ( ) ; 
 - propOrder . add ( prop . getName ( ) ) ; 
 - 
 prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , 
 " Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . " , 0 . 0D , 1 . 0D ) ; 
 prop . setLanguageKey ( " forge . configgui . zombieBaseSummonChance " ) . setRequiresWorldRestart ( true ) ; 
 @ @ - 274 , 12 + 282 , 6 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 zombieBabyChance = ( float ) prop . getDouble ( 0 . 05 ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ GENERAL , " forgeLightPipelineEnabled " , true , 
 - " Enable the forge block rendering pipeline - fixes the lighting of custom models . " ) ; 
 - forgeLightPipelineEnabled = prop . getBoolean ( true ) ; 
 - prop . setLanguageKey ( " forge . configgui . forgeLightPipelineEnabled " ) ; 
 - propOrder . add ( prop . getName ( ) ) ; 
 - 
 prop = config . get ( Configuration . CATEGORY _ GENERAL , " logCascadingWorldGeneration " , true , 
 " Log cascading chunk generation issues during terrain population . " ) ; 
 logCascadingWorldGeneration = prop . getBoolean ( ) ; 
 @ @ - 329 , 6 + 331 , 18 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . setLanguageKey ( " forge . configgui . alwaysSetupTerrainOffThread " ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " biomeSkyBlendRange " , new int [ ] { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 , 34 } ) ; 
 + prop . setComment ( " Control the range of sky blending for colored skies in biomes . " ) ; 
 + prop . setLanguageKey ( " forge . configgui . biomeSkyBlendRange " ) ; 
 + blendRanges = prop . getIntList ( ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 + prop = config . get ( Configuration . CATEGORY _ CLIENT , " forgeLightPipelineEnabled " , true , 
 + " Enable the forge block rendering pipeline - fixes the lighting of custom models . " ) ; 
 + forgeLightPipelineEnabled = prop . getBoolean ( true ) ; 
 + prop . setLanguageKey ( " forge . configgui . forgeLightPipelineEnabled " ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ CLIENT , propOrder ) ; 
 
 if ( config . hasChanged ( ) )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 8bf0092 . . 0e786ae 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 69 , 7 + 69 , 7 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 public class ForgeHooksClient 
 { 
 / / private static final ResourceLocation ITEM _ GLINT = new ResourceLocation ( " textures / misc / enchanted _ item _ glint . png " ) ; 
 - 
 + 
 static TextureManager engine ( ) 
 { 
 return FMLClientHandler . instance ( ) . getClient ( ) . renderEngine ; 
 @ @ - 319 , 6 + 319 , 12 @ @ public class ForgeHooksClient 
 { 
 ImageIO . setUseCache ( false ) ; / / Disable on - disc stream cache should speed up texture pack reloading . 
 PixelFormat format = new PixelFormat ( ) . withDepthBits ( 24 ) ; 
 + if ( ! ForgeModContainer . enableStencilBits ) 
 + { 
 + Display . create ( format ) ; 
 + stencilBits = 0 ; 
 + return ; 
 + } 
 try 
 { 
 / / TODO : Figure out how to determine the max bits . 
 @ @ - 369 , 7 + 375 , 7 @ @ public class ForgeHooksClient 
 
 private static boolean skyInit ; 
 private static int skyRGBMultiplier ; 
 - 
 + 
 public static int getSkyBlendColour ( World world , int playerX , int playerY , int playerZ ) 
 { 
 if ( playerX = = skyX & & playerZ = = skyZ & & skyInit ) 
 @ @ - 385 , 7 + 391 , 7 @ @ public class ForgeHooksClient 
 { 
 distance = ranges [ settings . renderDistanceChunks ] ; 
 } 
 - 
 + 
 int r = 0 ; 
 int g = 0 ; 
 int b = 0 ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4528fd6 . . 7ae1949 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 66 , 7 + 66 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static float zombieBabyChance = 0 . 05f ; 
 public static boolean shouldSortRecipies = true ; 
 public static boolean disableVersionCheck = false ; 
 - 
 + public static boolean enableStencilBits = true ; 
 + 
 private static Configuration config ; 
 
 public ForgeModContainer ( ) 
 @ @ - 89 , 7 + 90 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 config = null ; 
 File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; 
 config = new Configuration ( cfgFile ) ; 
 - 
 + 
 syncConfig ( true ) ; 
 } 
 
 @ @ - 98 , 7 + 99 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 { 
 return " net . minecraftforge . client . gui . ForgeGuiFactory " ; 
 } 
 - 
 + 
 public static Configuration getConfig ( ) 
 { 
 return config ; 
 @ @ - 112 , 7 + 113 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 / / By adding a property order list we are defining the order that the properties will appear both in the config file and on the GUIs . 
 / / Property order lists are defined per - ConfigCategory . 
 List < String > propOrder = new ArrayList < String > ( ) ; 
 - 
 + 
 if ( ! config . isChild ) 
 { 
 if ( load ) 
 @ @ - 125 , 7 + 126 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 Configuration . enableGlobalConfig ( ) ; 
 } 
 } 
 - 
 + 
 Property prop ; 
 
 prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , false ) ; 
 @ @ - 137 , 8 + 138 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . setLanguageKey ( " forge . configgui . disableVersionCheck " ) ; 
 disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 - 
 - prop = config . get ( Configuration . CATEGORY _ GENERAL , " clumpingThreshold " , 64 , 
 + 
 + prop = config . get ( Configuration . CATEGORY _ GENERAL , " clumpingThreshold " , 64 , 
 " Controls the number threshold at which Packet51 is preferred over Packet52 , default and minimum 64 , maximum 1024 " , 64 , 1024 ) ; 
 prop . setLanguageKey ( " forge . configgui . clumpingThreshold " ) . setRequiresWorldRestart ( true ) ; 
 clumpingThreshold = prop . getInt ( 64 ) ; 
 @ @ - 204 , 18 + 205 , 24 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 blendRanges = prop . getIntList ( ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , 
 + prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBaseSummonChance " , 0 . 1 , 
 " Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . " , 0 . 0D , 1 . 0D ) ; 
 prop . setLanguageKey ( " forge . configgui . zombieBaseSummonChance " ) . setRequiresWorldRestart ( true ) ; 
 zombieSummonBaseChance = prop . getDouble ( 0 . 1 ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 - prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBabyChance " , 0 . 05 , 
 + prop = config . get ( Configuration . CATEGORY _ GENERAL , " zombieBabyChance " , 0 . 05 , 
 " Chance that a zombie ( or subclass ) is a baby . Allows changing the zombie spawning mechanic . " , 0 . 0D , 1 . 0D ) ; 
 prop . setLanguageKey ( " forge . configgui . zombieBabyChance " ) . setRequiresWorldRestart ( true ) ; 
 zombieBabyChance = ( float ) prop . getDouble ( 0 . 05 ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 - 
 + 
 + prop = config . get ( Configuration . CATEGORY _ GENERAL , " enableStencilBits " , true ) ; 
 + prop . comment = " Set to false to attempt to allocate 8 stencil bits when starting the GL display context . " ; 
 + prop . setLanguageKey ( " forge . configgui . stencilbits " ) . setRequiresWorldRestart ( true ) ; 
 + enableStencilBits = prop . getBoolean ( true ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; 
 
 if ( config . hasChanged ( ) ) 
 @ @ - 223 , 7 + 230 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 config . save ( ) ; 
 } 
 } 
 - 
 + 
 / * * 
 * By subscribing to the OnConfigChangedEvent we are able to execute code when our config screens are closed . 
 * This implementation uses the optional configID string to handle multiple Configurations using one event handler . 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 3d2e685 . . 13ea1c4 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 40 , 6 + 40 , 7 @ @ forge . configgui . zombieBabyChance . tooltip = Chance that a zombie ( or subclass ) is a 
 forge . configgui . zombieBabyChance = Zombie Baby Chance 
 forge . configgui . zombieBaseSummonChance . tooltip = Base zombie summoning spawn chance . Allows changing the bonus zombie summoning mechanic . 
 forge . configgui . zombieBaseSummonChance = Zombie Summon Chance 
 + forge . configgui . stencilbits = Enable GL Stencil Bits 
 
 forge . configgui . modID . tooltip = The mod ID that you want to define override settings for . 
 forge . configgui . modID = Mod ID
