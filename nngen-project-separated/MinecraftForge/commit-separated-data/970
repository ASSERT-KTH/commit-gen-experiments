BLEU SCORE: 0.0033679390510230273

TEST MSG: ' # ' is now added automatically to the beginning of the texture names in B3D models , and the remapping is expected via the blockstate JSON , since it ' s more reasonable than adding it to the file name in the modelling program or matching the resource location with the filename .
GENERATED MSG: Bugfix for B3DLoader

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index fa107a4 . . d66996d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 354 , 7 + 354 , 9 @ @ public class B3DLoader implements ICustomModelLoader <nl> for ( Texture t : textures ) <nl> { <nl> String path = t . getPath ( ) ; <nl> - builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; <nl> + String location = getLocation ( path ) ; <nl> + if ( ! location . startsWith ( " # " ) ) location = " # " + location ; <nl> + builder . put ( path , new ResourceLocation ( location ) ) ; <nl> } <nl> return builder . build ( ) ; <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index e8d4f11 . . da9d3c0 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 126 , 12 + 126 , 12 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> B3DModel . Parser parser = new B3DModel . Parser ( resource . getInputStream ( ) ) ; <nl> B3DModel model = parser . parse ( ) ; <nl> - cache . put ( modelLocation , model ) ; <nl> + cache . put ( file , model ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> / / FMLLog . log ( Level . ERROR , e , " Exception loading model % s with B3D loader , skipping " , modelLocation ) ; <nl> - cache . put ( modelLocation , null ) ; <nl> + cache . put ( file , null ) ; <nl> throw e ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index fa107a4 . . d66996d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 354 , 7 + 354 , 9 @ @ public class B3DLoader implements ICustomModelLoader 
 for ( Texture t : textures ) 
 { 
 String path = t . getPath ( ) ; 
 - builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; 
 + String location = getLocation ( path ) ; 
 + if ( ! location . startsWith ( " # " ) ) location = " # " + location ; 
 + builder . put ( path , new ResourceLocation ( location ) ) ; 
 } 
 return builder . build ( ) ; 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index e8d4f11 . . da9d3c0 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 126 , 12 + 126 , 12 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 B3DModel . Parser parser = new B3DModel . Parser ( resource . getInputStream ( ) ) ; 
 B3DModel model = parser . parse ( ) ; 
 - cache . put ( modelLocation , model ) ; 
 + cache . put ( file , model ) ; 
 } 
 catch ( IOException e ) 
 { 
 / / FMLLog . log ( Level . ERROR , e , " Exception loading model % s with B3D loader , skipping " , modelLocation ) ; 
 - cache . put ( modelLocation , null ) ; 
 + cache . put ( file , null ) ; 
 throw e ; 
 } 
 }
