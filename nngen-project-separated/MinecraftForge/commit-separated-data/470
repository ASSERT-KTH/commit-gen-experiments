BLEU SCORE: 0.03089055318156698

TEST MSG: Remove splash . properties option for Mojang logo ( has been disabled )
GENERATED MSG: [ 1 . 11 ] Add memory display to loading screen

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index 8ddda26 . . 837dc11 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 188 , 7 + 188 , 7 @ @ public class SplashProgress <nl> memoryLowColor = getHex ( " memoryLow " , 0xE42F2F ) ; <nl> <nl> final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; <nl> - final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; <nl> + final ResourceLocation logoLoc = new ResourceLocation ( " textures / gui / title / mojang . png " ) ; <nl> final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . png " ) ) ; <nl> final ResourceLocation forgeFallbackLoc = new ResourceLocation ( " fml : textures / gui / forge . png " ) ; <nl> <nl> @ @ - 343 , 7 + 343 , 7 @ @ public class SplashProgress <nl> angle + = 1 ; <nl> <nl> / / forge logo <nl> - setColor ( backgroundColor ) ; <nl> + glColor4f ( 1 , 1 , 1 , 1 ) ; <nl> float fw = ( float ) forgeTexture . getWidth ( ) / 2 ; <nl> float fh = ( float ) forgeTexture . getHeight ( ) / 2 ; <nl> if ( rotate ) <nl> @ @ - 953 , 9 + 953 , 9 @ @ public class SplashProgress <nl> } <nl> } <nl> <nl> - private static InputStream open ( ResourceLocation loc , @ Nullable ResourceLocation fallback , boolean allowRP ) throws IOException <nl> + private static InputStream open ( ResourceLocation loc , @ Nullable ResourceLocation fallback , boolean allowResourcePack ) throws IOException <nl> { <nl> - if ( ! allowRP ) <nl> + if ( ! allowResourcePack ) <nl> return mcPack . getInputStream ( loc ) ; <nl> <nl> if ( miscPack . resourceExists ( loc ) )
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> index cb9e9ae . . 8dad28a 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java <nl> @ @ - 64 , 6 + 64 , 7 @ @ import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; <nl> import net . minecraftforge . fml . common . asm . FMLSanityChecker ; <nl> <nl> import org . apache . commons . io . IOUtils ; <nl> + import org . apache . commons . lang3 . StringUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . BufferUtils ; <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 106 , 6 + 107 , 12 @ @ public class SplashProgress <nl> private static int barBorderColor ; <nl> private static int barColor ; <nl> private static int barBackgroundColor ; <nl> + private static boolean showMemory ; <nl> + private static int memoryGoodColor ; <nl> + private static int memoryWarnColor ; <nl> + private static int memoryLowColor ; <nl> + private static float memoryColorPercent ; <nl> + private static long memoryColorChangeTime ; <nl> static final Semaphore mutex = new Semaphore ( 1 ) ; <nl> <nl> private static String getString ( String name , String def ) <nl> @ @ - 163 , 12 + 170 , 16 @ @ public class SplashProgress <nl> / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . <nl> enabled = getBool ( " enabled " , defaultEnabled ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; <nl> rotate = getBool ( " rotate " , false ) ; <nl> + showMemory = getBool ( " showMemory " , true ) ; <nl> logoOffset = getInt ( " logoOffset " , 0 ) ; <nl> backgroundColor = getHex ( " background " , 0xFFFFFF ) ; <nl> fontColor = getHex ( " font " , 0x000000 ) ; <nl> barBorderColor = getHex ( " barBorder " , 0xC0C0C0 ) ; <nl> barColor = getHex ( " bar " , 0xCB3D35 ) ; <nl> barBackgroundColor = getHex ( " barBackground " , 0xFFFFFF ) ; <nl> + memoryGoodColor = getHex ( " memoryGood " , 0x78CB34 ) ; <nl> + memoryWarnColor = getHex ( " memoryWarn " , 0xE6E84A ) ; <nl> + memoryLowColor = getHex ( " memoryLow " , 0xE42F2F ) ; <nl> <nl> final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; <nl> final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; <nl> @ @ - 293 , 6 + 304 , 15 @ @ public class SplashProgress <nl> glEnd ( ) ; <nl> glDisable ( GL _ TEXTURE _ 2D ) ; <nl> <nl> + / / memory usage <nl> + if ( showMemory ) <nl> + { <nl> + glPushMatrix ( ) ; <nl> + glTranslatef ( 320 - ( float ) barWidth / 2 , 20 , 0 ) ; <nl> + drawMemoryBar ( ) ; <nl> + glPopMatrix ( ) ; <nl> + } <nl> + <nl> / / bars <nl> if ( first ! = null ) <nl> { <nl> @ @ - 410 , 6 + 430 , 75 @ @ public class SplashProgress <nl> glPopMatrix ( ) ; <nl> } <nl> <nl> + private void drawMemoryBar ( ) { <nl> + int maxMemory = bytesToMb ( Runtime . getRuntime ( ) . maxMemory ( ) ) ; <nl> + int totalMemory = bytesToMb ( Runtime . getRuntime ( ) . totalMemory ( ) ) ; <nl> + int freeMemory = bytesToMb ( Runtime . getRuntime ( ) . freeMemory ( ) ) ; <nl> + int usedMemory = totalMemory - freeMemory ; <nl> + float usedMemoryPercent = usedMemory / ( float ) maxMemory ; <nl> + <nl> + glPushMatrix ( ) ; <nl> + / / title - message <nl> + setColor ( fontColor ) ; <nl> + glScalef ( 2 , 2 , 1 ) ; <nl> + glEnable ( GL _ TEXTURE _ 2D ) ; <nl> + fontRenderer . drawString ( " Memory Used / Total " , 0 , 0 , 0x000000 ) ; <nl> + glDisable ( GL _ TEXTURE _ 2D ) ; <nl> + glPopMatrix ( ) ; <nl> + / / border <nl> + glPushMatrix ( ) ; <nl> + glTranslatef ( 0 , textHeight2 , 0 ) ; <nl> + setColor ( barBorderColor ) ; <nl> + drawBox ( barWidth , barHeight ) ; <nl> + / / interior <nl> + setColor ( backgroundColor ) ; <nl> + glTranslatef ( 1 , 1 , 0 ) ; <nl> + drawBox ( barWidth - 2 , barHeight - 2 ) ; <nl> + / / slidy part <nl> + <nl> + long time = System . currentTimeMillis ( ) ; <nl> + if ( usedMemoryPercent > memoryColorPercent | | ( time - memoryColorChangeTime > 1000 ) ) <nl> + { <nl> + memoryColorChangeTime = time ; <nl> + memoryColorPercent = usedMemoryPercent ; <nl> + } <nl> + <nl> + int memoryBarColor ; <nl> + if ( memoryColorPercent < 0 . 75f ) <nl> + { <nl> + memoryBarColor = memoryGoodColor ; <nl> + } <nl> + else if ( memoryColorPercent < 0 . 85f ) <nl> + { <nl> + memoryBarColor = memoryWarnColor ; <nl> + } <nl> + else <nl> + { <nl> + memoryBarColor = memoryLowColor ; <nl> + } <nl> + setColor ( memoryLowColor ) ; <nl> + glPushMatrix ( ) ; <nl> + glTranslatef ( ( barWidth - 2 ) * ( totalMemory ) / ( maxMemory ) - 2 , 0 , 0 ) ; <nl> + drawBox ( 2 , barHeight - 2 ) ; <nl> + glPopMatrix ( ) ; <nl> + setColor ( memoryBarColor ) ; <nl> + drawBox ( ( barWidth - 2 ) * ( usedMemory ) / ( maxMemory ) , barHeight - 2 ) ; <nl> + <nl> + / / progress text <nl> + String progress = getMemoryString ( usedMemory ) + " / " + getMemoryString ( maxMemory ) ; <nl> + glTranslatef ( ( ( float ) barWidth - 2 ) / 2 - fontRenderer . getStringWidth ( progress ) , 2 , 0 ) ; <nl> + setColor ( fontColor ) ; <nl> + glScalef ( 2 , 2 , 1 ) ; <nl> + glEnable ( GL _ TEXTURE _ 2D ) ; <nl> + fontRenderer . drawString ( progress , 0 , 0 , 0x000000 ) ; <nl> + glPopMatrix ( ) ; <nl> + } <nl> + <nl> + private String getMemoryString ( int memory ) <nl> + { <nl> + return StringUtils . leftPad ( Integer . toString ( memory ) , 4 , ' ' ) + " MB " ; <nl> + } <nl> + <nl> private void setGL ( ) <nl> { <nl> lock . lock ( ) ; <nl> @ @ - 850 , 4 + 939 , 9 @ @ public class SplashProgress <nl> } <nl> return mcPack . getInputStream ( loc ) ; <nl> } <nl> + <nl> + private static int bytesToMb ( long bytes ) <nl> + { <nl> + return ( int ) ( bytes / 1024L / 1024L ) ; <nl> + } <nl> } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index 8ddda26 . . 837dc11 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 188 , 7 + 188 , 7 @ @ public class SplashProgress 
 memoryLowColor = getHex ( " memoryLow " , 0xE42F2F ) ; 
 
 final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; 
 - final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; 
 + final ResourceLocation logoLoc = new ResourceLocation ( " textures / gui / title / mojang . png " ) ; 
 final ResourceLocation forgeLoc = new ResourceLocation ( getString ( " forgeTexture " , " fml : textures / gui / forge . png " ) ) ; 
 final ResourceLocation forgeFallbackLoc = new ResourceLocation ( " fml : textures / gui / forge . png " ) ; 
 
 @ @ - 343 , 7 + 343 , 7 @ @ public class SplashProgress 
 angle + = 1 ; 
 
 / / forge logo 
 - setColor ( backgroundColor ) ; 
 + glColor4f ( 1 , 1 , 1 , 1 ) ; 
 float fw = ( float ) forgeTexture . getWidth ( ) / 2 ; 
 float fh = ( float ) forgeTexture . getHeight ( ) / 2 ; 
 if ( rotate ) 
 @ @ - 953 , 9 + 953 , 9 @ @ public class SplashProgress 
 } 
 } 
 
 - private static InputStream open ( ResourceLocation loc , @ Nullable ResourceLocation fallback , boolean allowRP ) throws IOException 
 + private static InputStream open ( ResourceLocation loc , @ Nullable ResourceLocation fallback , boolean allowResourcePack ) throws IOException 
 { 
 - if ( ! allowRP ) 
 + if ( ! allowResourcePack ) 
 return mcPack . getInputStream ( loc ) ; 
 
 if ( miscPack . resourceExists ( loc ) )

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 index cb9e9ae . . 8dad28a 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / SplashProgress . java 
 @ @ - 64 , 6 + 64 , 7 @ @ import net . minecraftforge . fml . common . ProgressManager . ProgressBar ; 
 import net . minecraftforge . fml . common . asm . FMLSanityChecker ; 
 
 import org . apache . commons . io . IOUtils ; 
 + import org . apache . commons . lang3 . StringUtils ; 
 import org . apache . logging . log4j . Level ; 
 import org . lwjgl . BufferUtils ; 
 import org . lwjgl . LWJGLException ; 
 @ @ - 106 , 6 + 107 , 12 @ @ public class SplashProgress 
 private static int barBorderColor ; 
 private static int barColor ; 
 private static int barBackgroundColor ; 
 + private static boolean showMemory ; 
 + private static int memoryGoodColor ; 
 + private static int memoryWarnColor ; 
 + private static int memoryLowColor ; 
 + private static float memoryColorPercent ; 
 + private static long memoryColorChangeTime ; 
 static final Semaphore mutex = new Semaphore ( 1 ) ; 
 
 private static String getString ( String name , String def ) 
 @ @ - 163 , 12 + 170 , 16 @ @ public class SplashProgress 
 / / Optifine authors - add this key to the blackboard if you feel your modifications are now compatible with this code . 
 enabled = getBool ( " enabled " , defaultEnabled ) & & ( ( ! FMLClientHandler . instance ( ) . hasOptifine ( ) ) | | Launch . blackboard . containsKey ( " optifine . ForgeSplashCompatible " ) ) ; 
 rotate = getBool ( " rotate " , false ) ; 
 + showMemory = getBool ( " showMemory " , true ) ; 
 logoOffset = getInt ( " logoOffset " , 0 ) ; 
 backgroundColor = getHex ( " background " , 0xFFFFFF ) ; 
 fontColor = getHex ( " font " , 0x000000 ) ; 
 barBorderColor = getHex ( " barBorder " , 0xC0C0C0 ) ; 
 barColor = getHex ( " bar " , 0xCB3D35 ) ; 
 barBackgroundColor = getHex ( " barBackground " , 0xFFFFFF ) ; 
 + memoryGoodColor = getHex ( " memoryGood " , 0x78CB34 ) ; 
 + memoryWarnColor = getHex ( " memoryWarn " , 0xE6E84A ) ; 
 + memoryLowColor = getHex ( " memoryLow " , 0xE42F2F ) ; 
 
 final ResourceLocation fontLoc = new ResourceLocation ( getString ( " fontTexture " , " textures / font / ascii . png " ) ) ; 
 final ResourceLocation logoLoc = new ResourceLocation ( getString ( " logoTexture " , " textures / gui / title / mojang . png " ) ) ; 
 @ @ - 293 , 6 + 304 , 15 @ @ public class SplashProgress 
 glEnd ( ) ; 
 glDisable ( GL _ TEXTURE _ 2D ) ; 
 
 + / / memory usage 
 + if ( showMemory ) 
 + { 
 + glPushMatrix ( ) ; 
 + glTranslatef ( 320 - ( float ) barWidth / 2 , 20 , 0 ) ; 
 + drawMemoryBar ( ) ; 
 + glPopMatrix ( ) ; 
 + } 
 + 
 / / bars 
 if ( first ! = null ) 
 { 
 @ @ - 410 , 6 + 430 , 75 @ @ public class SplashProgress 
 glPopMatrix ( ) ; 
 } 
 
 + private void drawMemoryBar ( ) { 
 + int maxMemory = bytesToMb ( Runtime . getRuntime ( ) . maxMemory ( ) ) ; 
 + int totalMemory = bytesToMb ( Runtime . getRuntime ( ) . totalMemory ( ) ) ; 
 + int freeMemory = bytesToMb ( Runtime . getRuntime ( ) . freeMemory ( ) ) ; 
 + int usedMemory = totalMemory - freeMemory ; 
 + float usedMemoryPercent = usedMemory / ( float ) maxMemory ; 
 + 
 + glPushMatrix ( ) ; 
 + / / title - message 
 + setColor ( fontColor ) ; 
 + glScalef ( 2 , 2 , 1 ) ; 
 + glEnable ( GL _ TEXTURE _ 2D ) ; 
 + fontRenderer . drawString ( " Memory Used / Total " , 0 , 0 , 0x000000 ) ; 
 + glDisable ( GL _ TEXTURE _ 2D ) ; 
 + glPopMatrix ( ) ; 
 + / / border 
 + glPushMatrix ( ) ; 
 + glTranslatef ( 0 , textHeight2 , 0 ) ; 
 + setColor ( barBorderColor ) ; 
 + drawBox ( barWidth , barHeight ) ; 
 + / / interior 
 + setColor ( backgroundColor ) ; 
 + glTranslatef ( 1 , 1 , 0 ) ; 
 + drawBox ( barWidth - 2 , barHeight - 2 ) ; 
 + / / slidy part 
 + 
 + long time = System . currentTimeMillis ( ) ; 
 + if ( usedMemoryPercent > memoryColorPercent | | ( time - memoryColorChangeTime > 1000 ) ) 
 + { 
 + memoryColorChangeTime = time ; 
 + memoryColorPercent = usedMemoryPercent ; 
 + } 
 + 
 + int memoryBarColor ; 
 + if ( memoryColorPercent < 0 . 75f ) 
 + { 
 + memoryBarColor = memoryGoodColor ; 
 + } 
 + else if ( memoryColorPercent < 0 . 85f ) 
 + { 
 + memoryBarColor = memoryWarnColor ; 
 + } 
 + else 
 + { 
 + memoryBarColor = memoryLowColor ; 
 + } 
 + setColor ( memoryLowColor ) ; 
 + glPushMatrix ( ) ; 
 + glTranslatef ( ( barWidth - 2 ) * ( totalMemory ) / ( maxMemory ) - 2 , 0 , 0 ) ; 
 + drawBox ( 2 , barHeight - 2 ) ; 
 + glPopMatrix ( ) ; 
 + setColor ( memoryBarColor ) ; 
 + drawBox ( ( barWidth - 2 ) * ( usedMemory ) / ( maxMemory ) , barHeight - 2 ) ; 
 + 
 + / / progress text 
 + String progress = getMemoryString ( usedMemory ) + " / " + getMemoryString ( maxMemory ) ; 
 + glTranslatef ( ( ( float ) barWidth - 2 ) / 2 - fontRenderer . getStringWidth ( progress ) , 2 , 0 ) ; 
 + setColor ( fontColor ) ; 
 + glScalef ( 2 , 2 , 1 ) ; 
 + glEnable ( GL _ TEXTURE _ 2D ) ; 
 + fontRenderer . drawString ( progress , 0 , 0 , 0x000000 ) ; 
 + glPopMatrix ( ) ; 
 + } 
 + 
 + private String getMemoryString ( int memory ) 
 + { 
 + return StringUtils . leftPad ( Integer . toString ( memory ) , 4 , ' ' ) + " MB " ; 
 + } 
 + 
 private void setGL ( ) 
 { 
 lock . lock ( ) ; 
 @ @ - 850 , 4 + 939 , 9 @ @ public class SplashProgress 
 } 
 return mcPack . getInputStream ( loc ) ; 
 } 
 + 
 + private static int bytesToMb ( long bytes ) 
 + { 
 + return ( int ) ( bytes / 1024L / 1024L ) ; 
 + } 
 } 
 \ No newline at end of file
