BLEU SCORE: 0.031251907639724415

TEST MSG: [ 1 . 12 . x ] [ Animation API ] Add rotation origin variable
GENERATED MSG: Added Breaking Animation for Smart Models , Checking each layer .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> index f9f5ead . . 29bf147 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java <nl> @ @ - 329 , 6 + 329 , 7 @ @ public class ModelBlockAnimation <nl> time - = Math . floor ( time ) ; <nl> Vector3f translation = new Vector3f ( 0 , 0 , 0 ) ; <nl> Vector3f scale = new Vector3f ( 1 , 1 , 1 ) ; <nl> + Vector3f origin = new Vector3f ( 0 , 0 , 0 ) ; <nl> AxisAngle4f rotation = new AxisAngle4f ( 0 , 0 , 0 , 0 ) ; <nl> for ( MBVariableClip var : variables ) <nl> { <nl> @ @ - 393 , 11 + 394 , 24 @ @ public class ModelBlockAnimation <nl> case ZS : <nl> scale . z = value ; <nl> break ; <nl> + case XORIGIN : <nl> + origin . x = value - 0 . 5F ; <nl> + break ; <nl> + case YORIGIN : <nl> + origin . y = value - 0 . 5F ; <nl> + break ; <nl> + case ZORIGIN : <nl> + origin . z = value - 0 . 5F ; <nl> + break ; <nl> } <nl> } <nl> Quat4f rot = new Quat4f ( ) ; <nl> rot . set ( rotation ) ; <nl> - return TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( translation , rot , scale , null ) ) ; <nl> + TRSRTransformation base = new TRSRTransformation ( translation , rot , scale , null ) ; <nl> + Vector3f negOrigin = new Vector3f ( origin ) ; <nl> + negOrigin . negate ( ) ; <nl> + base = new TRSRTransformation ( origin , null , null , null ) . compose ( base ) . compose ( new TRSRTransformation ( negOrigin , null , null , null ) ) ; <nl> + return TRSRTransformation . blockCenterToCorner ( base ) ; <nl> } <nl> } <nl> } <nl> @ @ - 503 , 7 + 517 , 13 @ @ public class ModelBlockAnimation <nl> @ SerializedName ( " scale _ y " ) <nl> YS , <nl> @ SerializedName ( " scale _ z " ) <nl> - ZS ; <nl> + ZS , <nl> + @ SerializedName ( " origin _ x " ) <nl> + XORIGIN , <nl> + @ SerializedName ( " origin _ y " ) <nl> + YORIGIN , <nl> + @ SerializedName ( " origin _ z " ) <nl> + ZORIGIN ; <nl> } <nl> <nl> public static enum Type <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> index 9c2c9ac . . bc1265a 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java <nl> @ @ - 22 , 9 + 22 , 7 @ @ import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> - import net . minecraft . util . EnumFacing ; <nl> - import net . minecraft . util . EnumHand ; <nl> - import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraft . util . * ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . world . IBlockAccess ; <nl> import net . minecraft . world . World ; <nl> @ @ - 79 , 6 + 77 , 10 @ @ public class ModelAnimationDebug <nl> @ ObjectHolder ( blockName ) <nl> public static final Item TEST _ ITEM = null ; <nl> <nl> + public static final String rotateBlockName = " rotatest " ; <nl> + @ ObjectHolder ( rotateBlockName ) <nl> + public static final Block TEST _ ROTATE _ BLOCK = null ; <nl> + <nl> @ Instance ( MODID ) <nl> public static ModelAnimationDebug instance ; <nl> <nl> @ @ - 94 , 6 + 96 , 7 @ @ public class ModelAnimationDebug <nl> public static void registerBlocks ( RegistryEvent . Register < Block > event ) <nl> { <nl> GameRegistry . registerTileEntity ( Chest . class , MODID + " : " + " tile _ " + blockName ) ; <nl> + GameRegistry . registerTileEntity ( Spin . class , MODID + " : " + " tile _ " + rotateBlockName ) ; <nl> event . getRegistry ( ) . register ( <nl> new Block ( Material . WOOD ) <nl> { <nl> @ @ - 181 , 6 + 184 , 56 @ @ public class ModelAnimationDebug <nl> return true ; <nl> } <nl> } ) ; <nl> + <nl> + event . getRegistry ( ) . register ( new Block ( Material . WOOD ) { <nl> + { <nl> + setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; <nl> + setUnlocalizedName ( MODID + " . " + rotateBlockName ) ; <nl> + setRegistryName ( new ResourceLocation ( MODID , rotateBlockName ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public ExtendedBlockState createBlockState ( ) <nl> + { <nl> + return new ExtendedBlockState ( this , new IProperty [ ] { Properties . StaticProperty } , new IUnlistedProperty [ ] { Properties . AnimationProperty } ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( IBlockState state ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean isFullCube ( IBlockState state ) { return false ; } <nl> + <nl> + @ Override <nl> + public boolean hasTileEntity ( IBlockState state ) { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getActualState ( IBlockState state , IBlockAccess world , BlockPos pos ) { <nl> + return state . withProperty ( Properties . StaticProperty , false ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public int getMetaFromState ( IBlockState state ) { <nl> + return 0 ; <nl> + } <nl> + <nl> + @ Override <nl> + public EnumBlockRenderType getRenderType ( IBlockState state ) { <nl> + return EnumBlockRenderType . ENTITYBLOCK _ ANIMATED ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBlockState getStateFromMeta ( int meta ) { <nl> + return getDefaultState ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public TileEntity createTileEntity ( World world , IBlockState state ) { <nl> + return new Spin ( ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> @ SubscribeEvent <nl> @ @ - 196 , 6 + 249 , 11 @ @ public class ModelAnimationDebug <nl> } <nl> } . setRegistryName ( TEST _ BLOCK . getRegistryName ( ) ) <nl> ) ; <nl> + event . getRegistry ( ) . register ( <nl> + new ItemBlock ( TEST _ ROTATE _ BLOCK ) { <nl> + <nl> + } . setRegistryName ( TEST _ ROTATE _ BLOCK . getRegistryName ( ) ) <nl> + ) ; <nl> } <nl> } <nl> <nl> @ @ - 229 , 6 + 287 , 7 @ @ public class ModelAnimationDebug <nl> chest . handleEvents ( time , pastEvents ) ; <nl> } <nl> } ) ; <nl> + ClientRegistry . bindTileEntitySpecialRenderer ( Spin . class , new AnimationTESR < Spin > ( ) ) ; <nl> String entityName = MODID + " : entity _ chest " ; <nl> / / EntityRegistry . registerGlobalEntityID ( EntityChest . class , entityName , EntityRegistry . findGlobalUniqueEntityId ( ) ) ; <nl> EntityRegistry . registerModEntity ( new ResourceLocation ( entityName ) , EntityChest . class , entityName , 0 , ModelAnimationDebug . instance , 64 , 20 , true , 0xFFAAAA00 , 0xFFDDDD00 ) ; <nl> @ @ - 298 , 6 + 357 , 50 @ @ public class ModelAnimationDebug <nl> logger = event . getModLog ( ) ; <nl> } <nl> <nl> + public static class Spin extends TileEntity implements ITickable , ICapabilityProvider { <nl> + <nl> + @ Nullable <nl> + private final IAnimationStateMachine asm ; <nl> + private final VariableValue cycle = new VariableValue ( 0 ) ; <nl> + <nl> + public Spin ( ) { <nl> + asm = proxy . load ( new ResourceLocation ( MODID , " asms / block / rotatest . json " ) , ImmutableMap . < String , ITimeValue > of ( " cycle " , cycle ) ) ; <nl> + <nl> + } <nl> + <nl> + int tickcounter ; <nl> + <nl> + @ Override <nl> + public void update ( ) { <nl> + tickcounter + + ; <nl> + if ( world . isRemote ) { <nl> + cycle . setValue ( tickcounter / 40 . 0F ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasCapability ( @ Nonnull Capability < ? > capability , @ Nullable EnumFacing side ) { <nl> + return capability = = CapabilityAnimation . ANIMATION _ CAPABILITY | | super . hasCapability ( capability , side ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public < T > T getCapability ( @ Nonnull Capability < T > capability , @ Nullable EnumFacing side ) <nl> + { <nl> + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) <nl> + { <nl> + return CapabilityAnimation . ANIMATION _ CAPABILITY . cast ( asm ) ; <nl> + } <nl> + return super . getCapability ( capability , side ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasFastRenderer ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + <nl> public static class Chest extends TileEntity <nl> { <nl> @ Nullable <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json <nl> new file mode 100644 <nl> index 0000000 . . 45d922d <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + { <nl> + " joints " : { <nl> + " wall " : { " 0 " : [ 1 . 0 ] } , <nl> + " wall2 " : { " 1 " : [ 1 . 0 ] } , <nl> + " stick " : { " 2 " : [ 1 . 0 ] } , <nl> + " cube " : { " 3 " : [ 1 . 0 ] } <nl> + } , <nl> + " clips " : { <nl> + " default " : { <nl> + " loop " : true , <nl> + " joint _ clips " : { <nl> + " stick " : [ <nl> + { <nl> + " variable " : " offset _ x " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " linear " , <nl> + " samples " : [ 0 , 0 . 6875 , 0 ] <nl> + } <nl> + ] , <nl> + " cube " : [ <nl> + { <nl> + " variable " : " offset _ x " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " linear " , <nl> + " samples " : [ 0 , 0 . 6875 , 0 ] <nl> + } , <nl> + { <nl> + " variable " : " axis _ z " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " nearest " , <nl> + " samples " : [ 1 ] <nl> + } , <nl> + { <nl> + " variable " : " origin _ x " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " nearest " , <nl> + " samples " : [ 0 . 15625 ] <nl> + } , <nl> + { <nl> + " variable " : " origin _ y " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " nearest " , <nl> + " samples " : [ 0 . 40625 ] <nl> + } , <nl> + { <nl> + " variable " : " angle " , <nl> + " type " : " uniform " , <nl> + " interpolation " : " linear " , <nl> + " samples " : [ 0 , 120 , 240 , 0 , 120 , 240 ] <nl> + } <nl> + ] <nl> + } , <nl> + " events " : { } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json <nl> new file mode 100644 <nl> index 0000000 . . de347b3 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " parameters " : { <nl> + <nl> + } , <nl> + " clips " : { <nl> + " default " : [ " apply " , " forgedebugmodelanimation : block / rotatest @ default " , " # cycle " ] <nl> + } , <nl> + " states " : [ <nl> + " default " <nl> + ] , <nl> + " transitions " : { } , <nl> + " start _ state " : " default " <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json <nl> new file mode 100644 <nl> index 0000000 . . 1246516 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json <nl> @ @ - 0 , 0 + 1 , 13 @ @ <nl> + { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " model " : " forgedebugmodelanimation : rotatest " <nl> + } , <nl> + " variants " : { <nl> + " normal " : [ { } ] , <nl> + " static " : { <nl> + " true " : { } , <nl> + " false " : { } <nl> + } <nl> + } <nl> + } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json <nl> new file mode 100644 <nl> index 0000000 . . 33b89d1 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json <nl> @ @ - 0 , 0 + 1 , 60 @ @ <nl> + { <nl> + " textures " : { <nl> + " 0 " : " blocks / log _ oak " , <nl> + " 1 " : " blocks / iron _ block " , <nl> + " 2 " : " blocks / stone _ slab _ top " , <nl> + " 3 " : " blocks / sponge " <nl> + } , <nl> + " elements " : [ <nl> + { <nl> + " name " : " WallA " , <nl> + " from " : [ 0 . 0 , 0 . 0 , 0 . 0 ] , <nl> + " to " : [ 16 . 0 , 8 . 0 , 2 . 0 ] , <nl> + " faces " : { <nl> + " north " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , <nl> + " east " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , <nl> + " south " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , <nl> + " west " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , <nl> + " up " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } , <nl> + " down " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } <nl> + } <nl> + } , <nl> + { <nl> + " name " : " WallB " , <nl> + " from " : [ 0 . 0 , 0 . 0 , 14 . 0 ] , <nl> + " to " : [ 16 . 0 , 8 . 0 , 16 . 0 ] , <nl> + " faces " : { <nl> + " north " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , <nl> + " east " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , <nl> + " south " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , <nl> + " west " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , <nl> + " up " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } , <nl> + " down " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } <nl> + } <nl> + } , <nl> + { <nl> + " name " : " Stick " , <nl> + " from " : [ 2 . 0 , 6 . 0 , 2 . 0 ] , <nl> + " to " : [ 3 . 0 , 7 . 0 , 14 . 0 ] , <nl> + " faces " : { <nl> + " east " : { " texture " : " # 2 " , " uv " : [ 1 . 0 , 1 . 0 , 13 . 0 , 2 . 0 ] } , <nl> + " west " : { " texture " : " # 2 " , " uv " : [ 1 . 0 , 2 . 0 , 13 . 0 , 3 . 0 ] } , <nl> + " up " : { " texture " : " # 2 " , " uv " : [ 0 . 0 , 0 . 0 , 1 . 0 , 12 . 0 ] } , <nl> + " down " : { " texture " : " # 2 " , " uv " : [ 0 . 0 , 0 . 0 , 1 . 0 , 12 . 0 ] } <nl> + } <nl> + } , <nl> + { <nl> + " name " : " Rotate " , <nl> + " from " : [ 1 . 0 , 5 . 0 , 6 . 5 ] , <nl> + " to " : [ 4 . 0 , 8 . 0 , 9 . 5 ] , <nl> + " faces " : { <nl> + " north " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , <nl> + " east " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , <nl> + " south " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , <nl> + " west " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , <nl> + " up " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , <nl> + " down " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } <nl> + } <nl> + } <nl> + ] <nl> + }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> index a24be3d . . 2eef166 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch <nl> @ @ - 1 , 6 + 1 , 31 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java <nl> - @ @ - 129 , 6 + 129 , 12 @ @ <nl> + @ @ - 49 , 6 + 49 , 24 @ @ <nl> + { <nl> + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; <nl> + + <nl> + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) <nl> + + { <nl> + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; <nl> + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) <nl> + + { <nl> + + if ( block . canRenderInLayer ( layer ) ) <nl> + + { <nl> + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; <nl> + + <nl> + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; <nl> + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + + } <nl> + + } <nl> + + return ; <nl> + + } <nl> + + <nl> + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; <nl> + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; <nl> + } <nl> + @ @ - 129 , 6 + 147 , 12 @ @ <nl> ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> new file mode 100644 <nl> index 0000000 . . 593101c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java <nl> @ @ - 0 , 0 + 1 , 265 @ @ <nl> + <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import com . google . common . primitives . Ints ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . material . Material ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> + import net . minecraft . client . resources . model . IBakedModel ; <nl> + import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . init . Blocks ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . EnumWorldBlockLayer ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> + import net . minecraftforge . client . model . IModelPart ; <nl> + import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ISmartBlockModel ; <nl> + import net . minecraftforge . client . model . TRSRTransformation ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) <nl> + public class LayerBreakingTest <nl> + { <nl> + <nl> + public static final boolean ENABLE = true ; <nl> + public static TestBlock testBlock ; <nl> + <nl> + class TestBakedModel implements IFlexibleBakedModel <nl> + { <nl> + <nl> + TextureAtlasSprite texture ; <nl> + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; <nl> + <nl> + private int [ ] vertexToInts ( <nl> + float x , <nl> + float y , <nl> + float z , <nl> + int color , <nl> + TextureAtlasSprite texture , <nl> + int u , <nl> + int v ) <nl> + { <nl> + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; <nl> + } <nl> + <nl> + public TestBakedModel ( <nl> + TextureAtlasSprite sprite , <nl> + boolean top ) <nl> + { <nl> + texture = sprite ; <nl> + if ( top ) <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; <nl> + } <nl> + else <nl> + { <nl> + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return texture ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getFaceQuads ( <nl> + EnumFacing side ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List < BakedQuad > getGeneralQuads ( ) <nl> + { <nl> + return list ; <nl> + } <nl> + <nl> + @ Override <nl> + public VertexFormat getFormat ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class TestBlock extends Block <nl> + { <nl> + <nl> + protected TestBlock ( ) <nl> + { <nl> + super ( Material . glass ) ; <nl> + setHardness ( 7 ) ; <nl> + setCreativeTab ( CreativeTabs . tabBlock ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isOpaqueCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + public boolean isFullCube ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean canRenderInLayer ( <nl> + EnumWorldBlockLayer layer ) <nl> + { <nl> + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + class SmartModel implements IBakedModel , ISmartBlockModel <nl> + { <nl> + <nl> + IFlexibleBakedModel solid ; <nl> + IFlexibleBakedModel translucent ; <nl> + <nl> + private class DefState implements IModelState <nl> + { <nl> + <nl> + @ Override <nl> + public TRSRTransformation apply ( <nl> + IModelPart part ) <nl> + { <nl> + return TRSRTransformation . identity ( ) ; <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ Override <nl> + public List getFaceQuads ( <nl> + EnumFacing p _ 177551 _ 1 _ ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public List getGeneralQuads ( ) <nl> + { <nl> + return Collections . emptyList ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isAmbientOcclusion ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isGui3d ( ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean isBuiltInRenderer ( ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + @ Override <nl> + public TextureAtlasSprite getTexture ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public ItemCameraTransforms getItemCameraTransforms ( ) <nl> + { <nl> + return ItemCameraTransforms . DEFAULT ; <nl> + } <nl> + <nl> + @ Override <nl> + public IBakedModel handleBlockState ( <nl> + IBlockState state ) <nl> + { <nl> + if ( solid = = null ) <nl> + { <nl> + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; <nl> + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; <nl> + <nl> + translucent = new TestBakedModel ( a , true ) ; <nl> + solid = new TestBakedModel ( b , false ) ; <nl> + } <nl> + <nl> + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) <nl> + { <nl> + return solid ; <nl> + } <nl> + else <nl> + { <nl> + return translucent ; <nl> + } <nl> + } <nl> + <nl> + } ; <nl> + <nl> + @ SubscribeEvent <nl> + public void onModelBakeEvent ( <nl> + ModelBakeEvent event ) <nl> + { <nl> + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; <nl> + } <nl> + <nl> + @ EventHandler <nl> + public void init ( <nl> + FMLInitializationEvent event ) <nl> + { <nl> + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; <nl> + } <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 index f9f5ead . . 29bf147 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / ModelBlockAnimation . java 
 @ @ - 329 , 6 + 329 , 7 @ @ public class ModelBlockAnimation 
 time - = Math . floor ( time ) ; 
 Vector3f translation = new Vector3f ( 0 , 0 , 0 ) ; 
 Vector3f scale = new Vector3f ( 1 , 1 , 1 ) ; 
 + Vector3f origin = new Vector3f ( 0 , 0 , 0 ) ; 
 AxisAngle4f rotation = new AxisAngle4f ( 0 , 0 , 0 , 0 ) ; 
 for ( MBVariableClip var : variables ) 
 { 
 @ @ - 393 , 11 + 394 , 24 @ @ public class ModelBlockAnimation 
 case ZS : 
 scale . z = value ; 
 break ; 
 + case XORIGIN : 
 + origin . x = value - 0 . 5F ; 
 + break ; 
 + case YORIGIN : 
 + origin . y = value - 0 . 5F ; 
 + break ; 
 + case ZORIGIN : 
 + origin . z = value - 0 . 5F ; 
 + break ; 
 } 
 } 
 Quat4f rot = new Quat4f ( ) ; 
 rot . set ( rotation ) ; 
 - return TRSRTransformation . blockCenterToCorner ( new TRSRTransformation ( translation , rot , scale , null ) ) ; 
 + TRSRTransformation base = new TRSRTransformation ( translation , rot , scale , null ) ; 
 + Vector3f negOrigin = new Vector3f ( origin ) ; 
 + negOrigin . negate ( ) ; 
 + base = new TRSRTransformation ( origin , null , null , null ) . compose ( base ) . compose ( new TRSRTransformation ( negOrigin , null , null , null ) ) ; 
 + return TRSRTransformation . blockCenterToCorner ( base ) ; 
 } 
 } 
 } 
 @ @ - 503 , 7 + 517 , 13 @ @ public class ModelBlockAnimation 
 @ SerializedName ( " scale _ y " ) 
 YS , 
 @ SerializedName ( " scale _ z " ) 
 - ZS ; 
 + ZS , 
 + @ SerializedName ( " origin _ x " ) 
 + XORIGIN , 
 + @ SerializedName ( " origin _ y " ) 
 + YORIGIN , 
 + @ SerializedName ( " origin _ z " ) 
 + ZORIGIN ; 
 } 
 
 public static enum Type 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 index 9c2c9ac . . bc1265a 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelAnimationDebug . java 
 @ @ - 22 , 9 + 22 , 7 @ @ import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . tileentity . TileEntity ; 
 - import net . minecraft . util . EnumFacing ; 
 - import net . minecraft . util . EnumHand ; 
 - import net . minecraft . util . ResourceLocation ; 
 + import net . minecraft . util . * ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . world . IBlockAccess ; 
 import net . minecraft . world . World ; 
 @ @ - 79 , 6 + 77 , 10 @ @ public class ModelAnimationDebug 
 @ ObjectHolder ( blockName ) 
 public static final Item TEST _ ITEM = null ; 
 
 + public static final String rotateBlockName = " rotatest " ; 
 + @ ObjectHolder ( rotateBlockName ) 
 + public static final Block TEST _ ROTATE _ BLOCK = null ; 
 + 
 @ Instance ( MODID ) 
 public static ModelAnimationDebug instance ; 
 
 @ @ - 94 , 6 + 96 , 7 @ @ public class ModelAnimationDebug 
 public static void registerBlocks ( RegistryEvent . Register < Block > event ) 
 { 
 GameRegistry . registerTileEntity ( Chest . class , MODID + " : " + " tile _ " + blockName ) ; 
 + GameRegistry . registerTileEntity ( Spin . class , MODID + " : " + " tile _ " + rotateBlockName ) ; 
 event . getRegistry ( ) . register ( 
 new Block ( Material . WOOD ) 
 { 
 @ @ - 181 , 6 + 184 , 56 @ @ public class ModelAnimationDebug 
 return true ; 
 } 
 } ) ; 
 + 
 + event . getRegistry ( ) . register ( new Block ( Material . WOOD ) { 
 + { 
 + setCreativeTab ( CreativeTabs . BUILDING _ BLOCKS ) ; 
 + setUnlocalizedName ( MODID + " . " + rotateBlockName ) ; 
 + setRegistryName ( new ResourceLocation ( MODID , rotateBlockName ) ) ; 
 + } 
 + 
 + @ Override 
 + public ExtendedBlockState createBlockState ( ) 
 + { 
 + return new ExtendedBlockState ( this , new IProperty [ ] { Properties . StaticProperty } , new IUnlistedProperty [ ] { Properties . AnimationProperty } ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( IBlockState state ) { return false ; } 
 + 
 + @ Override 
 + public boolean isFullCube ( IBlockState state ) { return false ; } 
 + 
 + @ Override 
 + public boolean hasTileEntity ( IBlockState state ) { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getActualState ( IBlockState state , IBlockAccess world , BlockPos pos ) { 
 + return state . withProperty ( Properties . StaticProperty , false ) ; 
 + } 
 + 
 + @ Override 
 + public int getMetaFromState ( IBlockState state ) { 
 + return 0 ; 
 + } 
 + 
 + @ Override 
 + public EnumBlockRenderType getRenderType ( IBlockState state ) { 
 + return EnumBlockRenderType . ENTITYBLOCK _ ANIMATED ; 
 + } 
 + 
 + @ Override 
 + public IBlockState getStateFromMeta ( int meta ) { 
 + return getDefaultState ( ) ; 
 + } 
 + 
 + @ Override 
 + public TileEntity createTileEntity ( World world , IBlockState state ) { 
 + return new Spin ( ) ; 
 + } 
 + } ) ; 
 } 
 
 @ SubscribeEvent 
 @ @ - 196 , 6 + 249 , 11 @ @ public class ModelAnimationDebug 
 } 
 } . setRegistryName ( TEST _ BLOCK . getRegistryName ( ) ) 
 ) ; 
 + event . getRegistry ( ) . register ( 
 + new ItemBlock ( TEST _ ROTATE _ BLOCK ) { 
 + 
 + } . setRegistryName ( TEST _ ROTATE _ BLOCK . getRegistryName ( ) ) 
 + ) ; 
 } 
 } 
 
 @ @ - 229 , 6 + 287 , 7 @ @ public class ModelAnimationDebug 
 chest . handleEvents ( time , pastEvents ) ; 
 } 
 } ) ; 
 + ClientRegistry . bindTileEntitySpecialRenderer ( Spin . class , new AnimationTESR < Spin > ( ) ) ; 
 String entityName = MODID + " : entity _ chest " ; 
 / / EntityRegistry . registerGlobalEntityID ( EntityChest . class , entityName , EntityRegistry . findGlobalUniqueEntityId ( ) ) ; 
 EntityRegistry . registerModEntity ( new ResourceLocation ( entityName ) , EntityChest . class , entityName , 0 , ModelAnimationDebug . instance , 64 , 20 , true , 0xFFAAAA00 , 0xFFDDDD00 ) ; 
 @ @ - 298 , 6 + 357 , 50 @ @ public class ModelAnimationDebug 
 logger = event . getModLog ( ) ; 
 } 
 
 + public static class Spin extends TileEntity implements ITickable , ICapabilityProvider { 
 + 
 + @ Nullable 
 + private final IAnimationStateMachine asm ; 
 + private final VariableValue cycle = new VariableValue ( 0 ) ; 
 + 
 + public Spin ( ) { 
 + asm = proxy . load ( new ResourceLocation ( MODID , " asms / block / rotatest . json " ) , ImmutableMap . < String , ITimeValue > of ( " cycle " , cycle ) ) ; 
 + 
 + } 
 + 
 + int tickcounter ; 
 + 
 + @ Override 
 + public void update ( ) { 
 + tickcounter + + ; 
 + if ( world . isRemote ) { 
 + cycle . setValue ( tickcounter / 40 . 0F ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean hasCapability ( @ Nonnull Capability < ? > capability , @ Nullable EnumFacing side ) { 
 + return capability = = CapabilityAnimation . ANIMATION _ CAPABILITY | | super . hasCapability ( capability , side ) ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public < T > T getCapability ( @ Nonnull Capability < T > capability , @ Nullable EnumFacing side ) 
 + { 
 + if ( capability = = CapabilityAnimation . ANIMATION _ CAPABILITY ) 
 + { 
 + return CapabilityAnimation . ANIMATION _ CAPABILITY . cast ( asm ) ; 
 + } 
 + return super . getCapability ( capability , side ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasFastRenderer ( ) 
 + { 
 + return true ; 
 + } 
 + } 
 + 
 public static class Chest extends TileEntity 
 { 
 @ Nullable 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json 
 new file mode 100644 
 index 0000000 . . 45d922d 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / armatures / block / rotatest . json 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + { 
 + " joints " : { 
 + " wall " : { " 0 " : [ 1 . 0 ] } , 
 + " wall2 " : { " 1 " : [ 1 . 0 ] } , 
 + " stick " : { " 2 " : [ 1 . 0 ] } , 
 + " cube " : { " 3 " : [ 1 . 0 ] } 
 + } , 
 + " clips " : { 
 + " default " : { 
 + " loop " : true , 
 + " joint _ clips " : { 
 + " stick " : [ 
 + { 
 + " variable " : " offset _ x " , 
 + " type " : " uniform " , 
 + " interpolation " : " linear " , 
 + " samples " : [ 0 , 0 . 6875 , 0 ] 
 + } 
 + ] , 
 + " cube " : [ 
 + { 
 + " variable " : " offset _ x " , 
 + " type " : " uniform " , 
 + " interpolation " : " linear " , 
 + " samples " : [ 0 , 0 . 6875 , 0 ] 
 + } , 
 + { 
 + " variable " : " axis _ z " , 
 + " type " : " uniform " , 
 + " interpolation " : " nearest " , 
 + " samples " : [ 1 ] 
 + } , 
 + { 
 + " variable " : " origin _ x " , 
 + " type " : " uniform " , 
 + " interpolation " : " nearest " , 
 + " samples " : [ 0 . 15625 ] 
 + } , 
 + { 
 + " variable " : " origin _ y " , 
 + " type " : " uniform " , 
 + " interpolation " : " nearest " , 
 + " samples " : [ 0 . 40625 ] 
 + } , 
 + { 
 + " variable " : " angle " , 
 + " type " : " uniform " , 
 + " interpolation " : " linear " , 
 + " samples " : [ 0 , 120 , 240 , 0 , 120 , 240 ] 
 + } 
 + ] 
 + } , 
 + " events " : { } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json 
 new file mode 100644 
 index 0000000 . . de347b3 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / asms / block / rotatest . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " parameters " : { 
 + 
 + } , 
 + " clips " : { 
 + " default " : [ " apply " , " forgedebugmodelanimation : block / rotatest @ default " , " # cycle " ] 
 + } , 
 + " states " : [ 
 + " default " 
 + ] , 
 + " transitions " : { } , 
 + " start _ state " : " default " 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json 
 new file mode 100644 
 index 0000000 . . 1246516 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / blockstates / rotatest . json 
 @ @ - 0 , 0 + 1 , 13 @ @ 
 + { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " model " : " forgedebugmodelanimation : rotatest " 
 + } , 
 + " variants " : { 
 + " normal " : [ { } ] , 
 + " static " : { 
 + " true " : { } , 
 + " false " : { } 
 + } 
 + } 
 + } 
 diff - - git a / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json b / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json 
 new file mode 100644 
 index 0000000 . . 33b89d1 
 - - - / dev / null 
 + + + b / src / test / resources / assets / forgedebugmodelanimation / models / block / rotatest . json 
 @ @ - 0 , 0 + 1 , 60 @ @ 
 + { 
 + " textures " : { 
 + " 0 " : " blocks / log _ oak " , 
 + " 1 " : " blocks / iron _ block " , 
 + " 2 " : " blocks / stone _ slab _ top " , 
 + " 3 " : " blocks / sponge " 
 + } , 
 + " elements " : [ 
 + { 
 + " name " : " WallA " , 
 + " from " : [ 0 . 0 , 0 . 0 , 0 . 0 ] , 
 + " to " : [ 16 . 0 , 8 . 0 , 2 . 0 ] , 
 + " faces " : { 
 + " north " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , 
 + " east " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , 
 + " south " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , 
 + " west " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , 
 + " up " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } , 
 + " down " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } 
 + } 
 + } , 
 + { 
 + " name " : " WallB " , 
 + " from " : [ 0 . 0 , 0 . 0 , 14 . 0 ] , 
 + " to " : [ 16 . 0 , 8 . 0 , 16 . 0 ] , 
 + " faces " : { 
 + " north " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , 
 + " east " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , 
 + " south " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 16 . 0 , 8 . 0 ] } , 
 + " west " : { " texture " : " # 0 " , " uv " : [ 0 . 0 , 0 . 0 , 2 . 0 , 8 . 0 ] } , 
 + " up " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } , 
 + " down " : { " texture " : " # 1 " , " uv " : [ 0 . 0 , 1 . 0 , 16 . 0 , 3 . 0 ] } 
 + } 
 + } , 
 + { 
 + " name " : " Stick " , 
 + " from " : [ 2 . 0 , 6 . 0 , 2 . 0 ] , 
 + " to " : [ 3 . 0 , 7 . 0 , 14 . 0 ] , 
 + " faces " : { 
 + " east " : { " texture " : " # 2 " , " uv " : [ 1 . 0 , 1 . 0 , 13 . 0 , 2 . 0 ] } , 
 + " west " : { " texture " : " # 2 " , " uv " : [ 1 . 0 , 2 . 0 , 13 . 0 , 3 . 0 ] } , 
 + " up " : { " texture " : " # 2 " , " uv " : [ 0 . 0 , 0 . 0 , 1 . 0 , 12 . 0 ] } , 
 + " down " : { " texture " : " # 2 " , " uv " : [ 0 . 0 , 0 . 0 , 1 . 0 , 12 . 0 ] } 
 + } 
 + } , 
 + { 
 + " name " : " Rotate " , 
 + " from " : [ 1 . 0 , 5 . 0 , 6 . 5 ] , 
 + " to " : [ 4 . 0 , 8 . 0 , 9 . 5 ] , 
 + " faces " : { 
 + " north " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , 
 + " east " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , 
 + " south " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , 
 + " west " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , 
 + " up " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } , 
 + " down " : { " texture " : " # 3 " , " uv " : [ 0 . 0 , 0 . 0 , 3 . 0 , 3 . 0 ] } 
 + } 
 + } 
 + ] 
 + }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 index a24be3d . . 2eef166 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java . patch 
 @ @ - 1 , 6 + 1 , 31 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockRendererDispatcher . java 
 - @ @ - 129 , 6 + 129 , 12 @ @ 
 + @ @ - 49 , 6 + 49 , 24 @ @ 
 + { 
 + p _ 175020 _ 1 _ = block . func _ 176221 _ a ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + IBakedModel ibakedmodel = this . field _ 175028 _ a . func _ 178125 _ b ( p _ 175020 _ 1 _ ) ; 
 + + 
 + + if ( ibakedmodel instanceof net . minecraftforge . client . model . ISmartBlockModel ) 
 + + { 
 + + IBlockState extendedState = block . getExtendedState ( p _ 175020 _ 1 _ , p _ 175020 _ 4 _ , p _ 175020 _ 2 _ ) ; 
 + + for ( net . minecraft . util . EnumWorldBlockLayer layer : net . minecraft . util . EnumWorldBlockLayer . values ( ) ) 
 + + { 
 + + if ( block . canRenderInLayer ( layer ) ) 
 + + { 
 + + net . minecraftforge . client . ForgeHooksClient . setRenderLayer ( layer ) ; 
 + + 
 + + IBakedModel targetLayer = ( ( net . minecraftforge . client . model . ISmartBlockModel ) ibakedmodel ) . handleBlockState ( extendedState ) ; 
 + + IBakedModel damageModel = ( new SimpleBakedModel . Builder ( targetLayer , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , damageModel , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + + } 
 + + } 
 + + return ; 
 + + } 
 + + 
 + IBakedModel ibakedmodel1 = ( new SimpleBakedModel . Builder ( ibakedmodel , p _ 175020 _ 3 _ ) ) . func _ 177645 _ b ( ) ; 
 + this . field _ 175027 _ c . func _ 178259 _ a ( p _ 175020 _ 4 _ , ibakedmodel1 , p _ 175020 _ 1 _ , p _ 175020 _ 2 _ , Tessellator . func _ 178181 _ a ( ) . func _ 178180 _ c ( ) ) ; 
 + } 
 + @ @ - 129 , 6 + 147 , 12 @ @ 
 ibakedmodel = ( ( WeightedBakedModel ) ibakedmodel ) . func _ 177564 _ a ( MathHelper . func _ 180186 _ a ( p _ 175022 _ 3 _ ) ) ; 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 new file mode 100644 
 index 0000000 . . 593101c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / LayerBreakingTest . java 
 @ @ - 0 , 0 + 1 , 265 @ @ 
 + 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import com . google . common . primitives . Ints ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . material . Material ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . BakedQuad ; 
 + import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 + import net . minecraft . client . resources . model . IBakedModel ; 
 + import net . minecraft . client . resources . model . ModelResourceLocation ; 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . init . Blocks ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . EnumWorldBlockLayer ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 + import net . minecraftforge . client . model . IModelPart ; 
 + import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ISmartBlockModel ; 
 + import net . minecraftforge . client . model . TRSRTransformation ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . Mod . EventHandler ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + @ Mod ( modid = " LayerBreakingTest " , name = " LayerBreakingTest " , version = " 0 . 0 . 0 " ) 
 + public class LayerBreakingTest 
 + { 
 + 
 + public static final boolean ENABLE = true ; 
 + public static TestBlock testBlock ; 
 + 
 + class TestBakedModel implements IFlexibleBakedModel 
 + { 
 + 
 + TextureAtlasSprite texture ; 
 + List < BakedQuad > list = new ArrayList < BakedQuad > ( ) ; 
 + 
 + private int [ ] vertexToInts ( 
 + float x , 
 + float y , 
 + float z , 
 + int color , 
 + TextureAtlasSprite texture , 
 + int u , 
 + int v ) 
 + { 
 + return new int [ ] { Float . floatToRawIntBits ( x ) , Float . floatToRawIntBits ( y ) , Float . floatToRawIntBits ( z ) , color , Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 0 } ; 
 + } 
 + 
 + public TestBakedModel ( 
 + TextureAtlasSprite sprite , 
 + boolean top ) 
 + { 
 + texture = sprite ; 
 + if ( top ) 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 1 , 1 . 0f , 1 , - 1 , texture , 16 , 16 ) , vertexToInts ( 1 , 1 . 0f , 0 , - 1 , texture , 16 , 0 ) ) , - 1 , EnumFacing . UP ) ) ; 
 + } 
 + else 
 + { 
 + list . add ( new BakedQuad ( Ints . concat ( vertexToInts ( 0 , 1 . 0f , 0 , - 1 , texture , 0 , 0 ) , vertexToInts ( 0 , 1 . 0f , 1 , - 1 , texture , 0 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 1 , - 1 , texture , 8 , 16 ) , vertexToInts ( 0 . 5f , 1 . 0f , 0 , - 1 , texture , 8 , 0 ) ) , - 1 , EnumFacing . DOWN ) ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return texture ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getFaceQuads ( 
 + EnumFacing side ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List < BakedQuad > getGeneralQuads ( ) 
 + { 
 + return list ; 
 + } 
 + 
 + @ Override 
 + public VertexFormat getFormat ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + } ; 
 + 
 + class TestBlock extends Block 
 + { 
 + 
 + protected TestBlock ( ) 
 + { 
 + super ( Material . glass ) ; 
 + setHardness ( 7 ) ; 
 + setCreativeTab ( CreativeTabs . tabBlock ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isOpaqueCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + public boolean isFullCube ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public boolean canRenderInLayer ( 
 + EnumWorldBlockLayer layer ) 
 + { 
 + return layer = = EnumWorldBlockLayer . SOLID | | layer = = EnumWorldBlockLayer . TRANSLUCENT ; 
 + } 
 + 
 + } ; 
 + 
 + class SmartModel implements IBakedModel , ISmartBlockModel 
 + { 
 + 
 + IFlexibleBakedModel solid ; 
 + IFlexibleBakedModel translucent ; 
 + 
 + private class DefState implements IModelState 
 + { 
 + 
 + @ Override 
 + public TRSRTransformation apply ( 
 + IModelPart part ) 
 + { 
 + return TRSRTransformation . identity ( ) ; 
 + } 
 + 
 + } ; 
 + 
 + @ Override 
 + public List getFaceQuads ( 
 + EnumFacing p _ 177551 _ 1 _ ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public List getGeneralQuads ( ) 
 + { 
 + return Collections . emptyList ( ) ; 
 + } 
 + 
 + @ Override 
 + public boolean isAmbientOcclusion ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isGui3d ( ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public boolean isBuiltInRenderer ( ) 
 + { 
 + return false ; 
 + } 
 + 
 + @ Override 
 + public TextureAtlasSprite getTexture ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public ItemCameraTransforms getItemCameraTransforms ( ) 
 + { 
 + return ItemCameraTransforms . DEFAULT ; 
 + } 
 + 
 + @ Override 
 + public IBakedModel handleBlockState ( 
 + IBlockState state ) 
 + { 
 + if ( solid = = null ) 
 + { 
 + TextureAtlasSprite a = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . stained _ glass . getStateFromMeta ( 3 ) ) . getTexture ( ) ; 
 + TextureAtlasSprite b = Minecraft . getMinecraft ( ) . getBlockRendererDispatcher ( ) . getBlockModelShapes ( ) . getModelForState ( Blocks . cobblestone . getDefaultState ( ) ) . getTexture ( ) ; 
 + 
 + translucent = new TestBakedModel ( a , true ) ; 
 + solid = new TestBakedModel ( b , false ) ; 
 + } 
 + 
 + if ( net . minecraftforge . client . MinecraftForgeClient . getRenderLayer ( ) = = EnumWorldBlockLayer . SOLID ) 
 + { 
 + return solid ; 
 + } 
 + else 
 + { 
 + return translucent ; 
 + } 
 + } 
 + 
 + } ; 
 + 
 + @ SubscribeEvent 
 + public void onModelBakeEvent ( 
 + ModelBakeEvent event ) 
 + { 
 + event . modelRegistry . putObject ( new ModelResourceLocation ( " LayerBreakingTest : LayerBreakingTest " ) , new SmartModel ( ) ) ; 
 + } 
 + 
 + @ EventHandler 
 + public void init ( 
 + FMLInitializationEvent event ) 
 + { 
 + if ( ENABLE & & event . getSide ( ) = = Side . CLIENT ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + GameRegistry . registerBlock ( testBlock = new TestBlock ( ) , " LayerBreakingTest " ) ; 
 + } 
 + } 
 + 
 + }
