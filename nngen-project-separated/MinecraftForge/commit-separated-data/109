BLEU SCORE: 0.02383853510228548

TEST MSG: Fix RuntimeEnumExtender creating new enums with incorrect ordinal value
GENERATED MSG: Add Forge fluid handler test

TEST DIFF (one line): diff - - git a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> index 2188ce2 . . 1ebed7d 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java <nl> @ @ - 157 , 14 + 157 , 12 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { <nl> <nl> { <nl> vars + = 1 ; / / enum ret ; <nl> - / / ret = new ThisType ( name , VALUES . length + 1 , args . . ) <nl> + / / ret = new ThisType ( name , VALUES . length , args . . ) <nl> ins . anew ( classType ) ; <nl> ins . dup ( ) ; <nl> ins . load ( 0 , STRING ) ; <nl> ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; <nl> ins . arraylength ( ) ; <nl> - ins . iconst ( 1 ) ; <nl> - ins . add ( Type . INT _ TYPE ) ; <nl> int idx = 1 ; <nl> for ( int x = 1 ; x < args . length ; x + + ) <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java b / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java <nl> index fab30f3 . . 77f3a4a 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java <nl> @ @ - 21 , 56 + 21 , 41 @ @ package net . minecraftforge . debug . misc ; <nl> <nl> import net . minecraftforge . common . BiomeManager . BiomeType ; <nl> import net . minecraftforge . common . EnumPlantType ; <nl> + import net . minecraftforge . eventbus . api . SubscribeEvent ; <nl> + import net . minecraftforge . fml . DeferredWorkQueue ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> - import net . minecraftforge . fml . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . event . FMLPreInitializationEvent ; <nl> + import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; <nl> + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> - @ Mod ( modid = " enumplanttypetest " , name = " EnumPlantTypeTest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> + @ Mod ( " enumplanttypetest " ) <nl> public class EnumPlantTypeTest <nl> { <nl> - private static Logger logger ; <nl> + private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> - @ Mod . EventHandler <nl> - public void onPreInit ( FMLPreInitializationEvent event ) <nl> + public EnumPlantTypeTest ( ) <nl> { <nl> - logger = event . getModLog ( ) ; <nl> + FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; <nl> } <nl> <nl> - @ Mod . EventHandler <nl> - public void onInit ( FMLInitializationEvent event ) <nl> + @ SubscribeEvent <nl> + public void setup ( final FMLCommonSetupEvent event ) <nl> { <nl> - BiomeType biomeType = null ; <nl> - try <nl> + DeferredWorkQueue . runLater ( ( ) - > <nl> { <nl> - biomeType = BiomeType . getType ( " FAKE " ) ; <nl> - } <nl> - catch ( NullPointerException npe ) <nl> - { <nl> - logger . warn ( " EnumHelper in BiomeType is working incorrectly ! " , npe ) ; <nl> - } <nl> - finally <nl> - { <nl> - if ( biomeType = = null | | ! biomeType . name ( ) . equals ( " FAKE " ) ) <nl> + int index = BiomeType . values ( ) . length ; <nl> + BiomeType biomeType = BiomeType . create ( " FAKE " ) ; <nl> + if ( biomeType = = null | | ! biomeType . name ( ) . equals ( " FAKE " ) | | biomeType . ordinal ( ) ! = index ) <nl> { <nl> - logger . warn ( " EnumHelper in BiomeType is working incorrectly ! " ) ; <nl> + LOGGER . warn ( " RuntimeEnumExtender is working incorrectly for BiomeType ! " ) ; <nl> } <nl> - } <nl> - EnumPlantType plantType = null ; <nl> - try <nl> - { <nl> - plantType = EnumPlantType . getPlantType ( " FAKE " ) ; <nl> - } <nl> - catch ( NullPointerException npe ) <nl> - { <nl> - logger . warn ( " EnumHelper in EnumPlantType is working incorrectly ! " , npe ) ; <nl> - } <nl> - finally <nl> - { <nl> - if ( plantType = = null | | ! plantType . name ( ) . equals ( " FAKE " ) ) <nl> + <nl> + EnumPlantType plantType = EnumPlantType . create ( " FAKE " ) ; <nl> + if ( plantType = = null | | ! plantType . name ( ) . equals ( " FAKE " ) | | plantType ! = EnumPlantType . create ( " FAKE " ) ) <nl> { <nl> - logger . warn ( " EnumHelper in EnumPlantType is working incorrectly ! " ) ; <nl> + LOGGER . warn ( " RuntimeEnumExtender is working incorrectly for EnumPlantType ! " ) ; <nl> } <nl> - } <nl> + } ) ; <nl> } <nl> } <nl> diff - - git a / src / test / resources / META - INF / mods . toml b / src / test / resources / META - INF / mods . toml <nl> index 11d1f6d . . 8c48762 100644 <nl> - - - a / src / test / resources / META - INF / mods . toml <nl> + + + b / src / test / resources / META - INF / mods . toml <nl> @ @ - 69 , 3 + 69 , 8 @ @ key = " value " <nl> [ [ mods ] ] <nl> # A minimal mod <nl> modId = " minimalmod " <nl> + # debug / misc <nl> + [ [ mods ] ] <nl> + modId = " enumplanttypetest " <nl> + version = " 1 . 0 " <nl> + displayName = " EnumPlantTypeTest "
NEAREST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index e38452f . . ba06fcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest <nl> private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; <nl> private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; <nl> <nl> + private static final boolean ENABLE = false ; <nl> + <nl> static <nl> { <nl> - FluidRegistry . enableUniversalBucket ( ) ; <nl> + if ( ENABLE ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> } <nl> <nl> @ SidedProxy <nl> @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> GameRegistry . register ( new TestItem ( ) , testItemName ) ; <nl> Block tank = new BlockSimpleTank ( ) ; <nl> GameRegistry . register ( tank , simpleTankName ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> index 9d92565 . . ccbfb40 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug <nl> public static final String MODID = " ForgeDebugModelFluid " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> <nl> + public static final boolean ENABLE = false ; <nl> + <nl> @ SidedProxy <nl> public static CommonProxy proxy ; <nl> <nl> public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; <nl> <nl> @ EventHandler <nl> - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> <nl> public static class CommonProxy <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed4331 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) <nl> + public class FluidHandlerTest <nl> + { <nl> + 	 public static final boolean ENABLE = false ; <nl> + <nl> + 	 @ Mod . EventHandler <nl> + 	 public void loadComplete ( FMLLoadCompleteEvent event ) <nl> + 	 { <nl> + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) <nl> + 	 	 	 return ; <nl> + <nl> + 	 	 for ( ItemStack stack : getAllItems ( ) ) <nl> + 	 	 { <nl> + 	 	 	 testFluidContainer ( stack ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static void testFluidContainer ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 ItemStack drainedStack = stack . copy ( ) ; <nl> + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; <nl> + 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 { <nl> + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; <nl> + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; <nl> + <nl> + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; <nl> + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; <nl> + 	 	 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 	 	 { <nl> + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; <nl> + 	 	 	 	 	 if ( filled > 0 ) <nl> + 	 	 	 	 	 { <nl> + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; <nl> + 	 	 	 	 	 } <nl> + 	 	 	 	 } <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String fluidString ( FluidStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null ) <nl> + 	 	 { <nl> + 	 	 	 return " no fluid " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String stackString ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) <nl> + 	 	 { <nl> + 	 	 	 return " no item " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 String resourceDomain ; <nl> + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = " unknown " ; <nl> + 	 	 	 } <nl> + 	 	 	 else <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; <nl> + 	 	 	 } <nl> + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static List < ItemStack > getAllItems ( ) <nl> + 	 { <nl> + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; <nl> + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + 	 	 { <nl> + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 item . getSubItems ( item , tab , list ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 	 return list ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 index 2188ce2 . . 1ebed7d 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / common / asm / RuntimeEnumExtender . java 
 @ @ - 157 , 14 + 157 , 12 @ @ public class RuntimeEnumExtender implements ILaunchPluginService { 
 
 { 
 vars + = 1 ; / / enum ret ; 
 - / / ret = new ThisType ( name , VALUES . length + 1 , args . . ) 
 + / / ret = new ThisType ( name , VALUES . length , args . . ) 
 ins . anew ( classType ) ; 
 ins . dup ( ) ; 
 ins . load ( 0 , STRING ) ; 
 ins . getstatic ( classType . getInternalName ( ) , values . name , values . desc ) ; 
 ins . arraylength ( ) ; 
 - ins . iconst ( 1 ) ; 
 - ins . add ( Type . INT _ TYPE ) ; 
 int idx = 1 ; 
 for ( int x = 1 ; x < args . length ; x + + ) 
 { 
 diff - - git a / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java b / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java 
 index fab30f3 . . 77f3a4a 100644 
 - - - a / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / misc / EnumPlantTypeTest . java 
 @ @ - 21 , 56 + 21 , 41 @ @ package net . minecraftforge . debug . misc ; 
 
 import net . minecraftforge . common . BiomeManager . BiomeType ; 
 import net . minecraftforge . common . EnumPlantType ; 
 + import net . minecraftforge . eventbus . api . SubscribeEvent ; 
 + import net . minecraftforge . fml . DeferredWorkQueue ; 
 import net . minecraftforge . fml . common . Mod ; 
 - import net . minecraftforge . fml . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . event . FMLPreInitializationEvent ; 
 + import net . minecraftforge . fml . event . lifecycle . FMLCommonSetupEvent ; 
 + import net . minecraftforge . fml . javafmlmod . FMLModLoadingContext ; 
 + import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 - @ Mod ( modid = " enumplanttypetest " , name = " EnumPlantTypeTest " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 + @ Mod ( " enumplanttypetest " ) 
 public class EnumPlantTypeTest 
 { 
 - private static Logger logger ; 
 + private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 - @ Mod . EventHandler 
 - public void onPreInit ( FMLPreInitializationEvent event ) 
 + public EnumPlantTypeTest ( ) 
 { 
 - logger = event . getModLog ( ) ; 
 + FMLModLoadingContext . get ( ) . getModEventBus ( ) . addListener ( this : : setup ) ; 
 } 
 
 - @ Mod . EventHandler 
 - public void onInit ( FMLInitializationEvent event ) 
 + @ SubscribeEvent 
 + public void setup ( final FMLCommonSetupEvent event ) 
 { 
 - BiomeType biomeType = null ; 
 - try 
 + DeferredWorkQueue . runLater ( ( ) - > 
 { 
 - biomeType = BiomeType . getType ( " FAKE " ) ; 
 - } 
 - catch ( NullPointerException npe ) 
 - { 
 - logger . warn ( " EnumHelper in BiomeType is working incorrectly ! " , npe ) ; 
 - } 
 - finally 
 - { 
 - if ( biomeType = = null | | ! biomeType . name ( ) . equals ( " FAKE " ) ) 
 + int index = BiomeType . values ( ) . length ; 
 + BiomeType biomeType = BiomeType . create ( " FAKE " ) ; 
 + if ( biomeType = = null | | ! biomeType . name ( ) . equals ( " FAKE " ) | | biomeType . ordinal ( ) ! = index ) 
 { 
 - logger . warn ( " EnumHelper in BiomeType is working incorrectly ! " ) ; 
 + LOGGER . warn ( " RuntimeEnumExtender is working incorrectly for BiomeType ! " ) ; 
 } 
 - } 
 - EnumPlantType plantType = null ; 
 - try 
 - { 
 - plantType = EnumPlantType . getPlantType ( " FAKE " ) ; 
 - } 
 - catch ( NullPointerException npe ) 
 - { 
 - logger . warn ( " EnumHelper in EnumPlantType is working incorrectly ! " , npe ) ; 
 - } 
 - finally 
 - { 
 - if ( plantType = = null | | ! plantType . name ( ) . equals ( " FAKE " ) ) 
 + 
 + EnumPlantType plantType = EnumPlantType . create ( " FAKE " ) ; 
 + if ( plantType = = null | | ! plantType . name ( ) . equals ( " FAKE " ) | | plantType ! = EnumPlantType . create ( " FAKE " ) ) 
 { 
 - logger . warn ( " EnumHelper in EnumPlantType is working incorrectly ! " ) ; 
 + LOGGER . warn ( " RuntimeEnumExtender is working incorrectly for EnumPlantType ! " ) ; 
 } 
 - } 
 + } ) ; 
 } 
 } 
 diff - - git a / src / test / resources / META - INF / mods . toml b / src / test / resources / META - INF / mods . toml 
 index 11d1f6d . . 8c48762 100644 
 - - - a / src / test / resources / META - INF / mods . toml 
 + + + b / src / test / resources / META - INF / mods . toml 
 @ @ - 69 , 3 + 69 , 8 @ @ key = " value " 
 [ [ mods ] ] 
 # A minimal mod 
 modId = " minimalmod " 
 + # debug / misc 
 + [ [ mods ] ] 
 + modId = " enumplanttypetest " 
 + version = " 1 . 0 " 
 + displayName = " EnumPlantTypeTest "

NEAREST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index e38452f . . ba06fcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest 
 private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; 
 private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; 
 
 + private static final boolean ENABLE = false ; 
 + 
 static 
 { 
 - FluidRegistry . enableUniversalBucket ( ) ; 
 + if ( ENABLE ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 } 
 
 @ SidedProxy 
 @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 GameRegistry . register ( new TestItem ( ) , testItemName ) ; 
 Block tank = new BlockSimpleTank ( ) ; 
 GameRegistry . register ( tank , simpleTankName ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 index 9d92565 . . ccbfb40 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug 
 public static final String MODID = " ForgeDebugModelFluid " ; 
 public static final String VERSION = " 1 . 0 " ; 
 
 + public static final boolean ENABLE = false ; 
 + 
 @ SidedProxy 
 public static CommonProxy proxy ; 
 
 public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; 
 
 @ EventHandler 
 - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 
 public static class CommonProxy 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 0ed4331 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) 
 + public class FluidHandlerTest 
 + { 
 + 	 public static final boolean ENABLE = false ; 
 + 
 + 	 @ Mod . EventHandler 
 + 	 public void loadComplete ( FMLLoadCompleteEvent event ) 
 + 	 { 
 + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) 
 + 	 	 	 return ; 
 + 
 + 	 	 for ( ItemStack stack : getAllItems ( ) ) 
 + 	 	 { 
 + 	 	 	 testFluidContainer ( stack ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static void testFluidContainer ( ItemStack stack ) 
 + 	 { 
 + 	 	 ItemStack drainedStack = stack . copy ( ) ; 
 + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; 
 + 	 	 if ( fluidHandler ! = null ) 
 + 	 	 { 
 + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; 
 + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; 
 + 
 + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; 
 + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; 
 + 	 	 	 	 if ( fluidHandler ! = null ) 
 + 	 	 	 	 { 
 + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; 
 + 	 	 	 	 	 if ( filled > 0 ) 
 + 	 	 	 	 	 { 
 + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; 
 + 	 	 	 	 	 } 
 + 	 	 	 	 } 
 + 	 	 	 } 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String fluidString ( FluidStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null ) 
 + 	 	 { 
 + 	 	 	 return " no fluid " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String stackString ( ItemStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) 
 + 	 	 { 
 + 	 	 	 return " no item " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 String resourceDomain ; 
 + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = " unknown " ; 
 + 	 	 	 } 
 + 	 	 	 else 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; 
 + 	 	 	 } 
 + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static List < ItemStack > getAllItems ( ) 
 + 	 { 
 + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; 
 + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + 	 	 { 
 + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 item . getSubItems ( item , tab , list ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 	 	 return list ; 
 + 	 } 
 + }
