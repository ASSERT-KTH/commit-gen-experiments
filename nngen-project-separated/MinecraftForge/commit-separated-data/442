BLEU SCORE: 0.02407485903547034

TEST MSG: Fix shapeless recipes not being able to use NBT on output , and fixed issue with null groups .
GENERATED MSG: Unbind Shaped / Shapeless Ore Recipies from Array list to normal List .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index df928ff . . 7178d20 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 503 , 7 + 503 , 7 @ @ public class CraftingHelper { <nl> if ( ings . size ( ) > 9 ) <nl> throw new JsonParseException ( " Too many ingredients for shapeless recipe " ) ; <nl> <nl> - ItemStack itemstack = ShapedRecipes . deserializeItem ( JsonUtils . getJsonObject ( json , " result " ) , true ) ; <nl> + ItemStack itemstack = CraftingHelper . getItemStack ( JsonUtils . getJsonObject ( json , " result " ) , context ) ; <nl> return new ShapelessRecipes ( group , itemstack , ings ) ; <nl> } ) ; <nl> registerR ( " forge : ore _ shaped " , ShapedOreRecipe : : factory ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index aa813b6 . . 4c11ead 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 40 , 6 + 40 , 7 @ @ import java . util . Set ; <nl> import java . util . Map . Entry ; <nl> <nl> import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> @ @ - 171 , 7 + 172 , 7 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement <nl> @ Nonnull <nl> public String getGroup ( ) <nl> { <nl> - return this . group . toString ( ) ; <nl> + return this . group = = null ? " " : this . group . toString ( ) ; <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index 0771a46 . . 7dc1906 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 162 , 7 + 162 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem <nl> if ( ings . isEmpty ( ) ) <nl> throw new JsonParseException ( " No ingredients for shapeless recipe " ) ; <nl> <nl> - ItemStack itemstack = ShapedRecipes . deserializeItem ( JsonUtils . getJsonObject ( json , " result " ) , true ) ; <nl> + ItemStack itemstack = CraftingHelper . getItemStack ( JsonUtils . getJsonObject ( json , " result " ) , context ) ; <nl> return new ShapelessOreRecipe ( group . isEmpty ( ) ? null : new ResourceLocation ( group ) , ings , itemstack ) ; <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index 0b5f5eb . . 58538c6 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> package net . minecraftforge . oredict ; <nl> <nl> - import java . util . ArrayList ; <nl> + import java . util . List ; <nl> import java . util . HashMap ; <nl> import java . util . Iterator ; <nl> import java . util . Map ; <nl> @ @ - 215 , 11 + 215 , 11 @ @ public class ShapedOreRecipe implements IRecipe <nl> return false ; <nl> } <nl> } <nl> - else if ( target instanceof ArrayList ) <nl> + else if ( target instanceof List ) <nl> { <nl> boolean matched = false ; <nl> <nl> - Iterator < ItemStack > itr = ( ( ArrayList < ItemStack > ) target ) . iterator ( ) ; <nl> + Iterator < ItemStack > itr = ( ( List < ItemStack > ) target ) . iterator ( ) ; <nl> while ( itr . hasNext ( ) & & ! matched ) <nl> { <nl> matched = OreDictionary . itemMatches ( itr . next ( ) , slot , false ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index 1fdc23d . . b69b121 100644 <nl> - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 110 , 9 + 110 , 9 @ @ public class ShapelessOreRecipe implements IRecipe <nl> { <nl> match = OreDictionary . itemMatches ( ( ItemStack ) next , slot , false ) ; <nl> } <nl> - else if ( next instanceof ArrayList ) <nl> + else if ( next instanceof List ) <nl> { <nl> - Iterator < ItemStack > itr = ( ( ArrayList < ItemStack > ) next ) . iterator ( ) ; <nl> + Iterator < ItemStack > itr = ( ( List < ItemStack > ) next ) . iterator ( ) ; <nl> while ( itr . hasNext ( ) & & ! match ) <nl> { <nl> match = OreDictionary . itemMatches ( itr . next ( ) , slot , false ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index df928ff . . 7178d20 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 503 , 7 + 503 , 7 @ @ public class CraftingHelper { 
 if ( ings . size ( ) > 9 ) 
 throw new JsonParseException ( " Too many ingredients for shapeless recipe " ) ; 
 
 - ItemStack itemstack = ShapedRecipes . deserializeItem ( JsonUtils . getJsonObject ( json , " result " ) , true ) ; 
 + ItemStack itemstack = CraftingHelper . getItemStack ( JsonUtils . getJsonObject ( json , " result " ) , context ) ; 
 return new ShapelessRecipes ( group , itemstack , ings ) ; 
 } ) ; 
 registerR ( " forge : ore _ shaped " , ShapedOreRecipe : : factory ) ; 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index aa813b6 . . 4c11ead 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 40 , 6 + 40 , 7 @ @ import java . util . Set ; 
 import java . util . Map . Entry ; 
 
 import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 @ @ - 171 , 7 + 172 , 7 @ @ public class ShapedOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implement 
 @ Nonnull 
 public String getGroup ( ) 
 { 
 - return this . group . toString ( ) ; 
 + return this . group = = null ? " " : this . group . toString ( ) ; 
 } 
 
 @ Override 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index 0771a46 . . 7dc1906 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 162 , 7 + 162 , 7 @ @ public class ShapelessOreRecipe extends IForgeRegistryEntry . Impl < IRecipe > implem 
 if ( ings . isEmpty ( ) ) 
 throw new JsonParseException ( " No ingredients for shapeless recipe " ) ; 
 
 - ItemStack itemstack = ShapedRecipes . deserializeItem ( JsonUtils . getJsonObject ( json , " result " ) , true ) ; 
 + ItemStack itemstack = CraftingHelper . getItemStack ( JsonUtils . getJsonObject ( json , " result " ) , context ) ; 
 return new ShapelessOreRecipe ( group . isEmpty ( ) ? null : new ResourceLocation ( group ) , ings , itemstack ) ; 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index 0b5f5eb . . 58538c6 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 package net . minecraftforge . oredict ; 
 
 - import java . util . ArrayList ; 
 + import java . util . List ; 
 import java . util . HashMap ; 
 import java . util . Iterator ; 
 import java . util . Map ; 
 @ @ - 215 , 11 + 215 , 11 @ @ public class ShapedOreRecipe implements IRecipe 
 return false ; 
 } 
 } 
 - else if ( target instanceof ArrayList ) 
 + else if ( target instanceof List ) 
 { 
 boolean matched = false ; 
 
 - Iterator < ItemStack > itr = ( ( ArrayList < ItemStack > ) target ) . iterator ( ) ; 
 + Iterator < ItemStack > itr = ( ( List < ItemStack > ) target ) . iterator ( ) ; 
 while ( itr . hasNext ( ) & & ! matched ) 
 { 
 matched = OreDictionary . itemMatches ( itr . next ( ) , slot , false ) ; 
 diff - - git a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index 1fdc23d . . b69b121 100644 
 - - - a / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / src / main / java / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 110 , 9 + 110 , 9 @ @ public class ShapelessOreRecipe implements IRecipe 
 { 
 match = OreDictionary . itemMatches ( ( ItemStack ) next , slot , false ) ; 
 } 
 - else if ( next instanceof ArrayList ) 
 + else if ( next instanceof List ) 
 { 
 - Iterator < ItemStack > itr = ( ( ArrayList < ItemStack > ) next ) . iterator ( ) ; 
 + Iterator < ItemStack > itr = ( ( List < ItemStack > ) next ) . iterator ( ) ; 
 while ( itr . hasNext ( ) & & ! match ) 
 { 
 match = OreDictionary . itemMatches ( itr . next ( ) , slot , false ) ;
