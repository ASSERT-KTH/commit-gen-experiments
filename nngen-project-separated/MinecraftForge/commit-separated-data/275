BLEU SCORE: 0.03283637368030199

TEST MSG: Maintain deterministic order in deserialised Forge blockstates
GENERATED MSG: Lex doesn ' t like this .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> index cda7c8b . . aa6eb40 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java <nl> @ @ - 82 , 7 + 82 , 7 @ @ public class BlockStateLoader <nl> { <nl> case 1 : / / Version 1 <nl> ForgeBlockStateV1 v1 = GSON . fromJson ( reader , ForgeBlockStateV1 . class ) ; <nl> - Map < String , VariantList > variants = Maps . newHashMap ( ) ; <nl> + Map < String , VariantList > variants = Maps . newLinkedHashMap ( ) ; <nl> <nl> for ( Entry < String , Collection < ForgeBlockStateV1 . Variant > > entry : v1 . variants . asMap ( ) . entrySet ( ) ) <nl> { / / Convert Version1 variants into vanilla variants for the ModelBlockDefinition . <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> index dfde59b . . 4272e68 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java <nl> @ @ - 24 , 8 + 24 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . EnumMap ; <nl> - import java . util . HashMap ; <nl> - import java . util . Iterator ; <nl> + import java . util . LinkedHashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> @ @ - 48 , 8 + 47 , 9 @ @ import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import java . util . Objects ; <nl> import java . util . Optional ; <nl> - import com . google . common . collect . HashMultimap ; <nl> + <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . LinkedHashMultimap ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 63 , 7 + 63 , 7 @ @ import com . google . gson . JsonParseException ; <nl> public class ForgeBlockStateV1 extends Marker <nl> { <nl> ForgeBlockStateV1 . Variant defaults ; <nl> - Multimap < String , ForgeBlockStateV1 . Variant > variants = HashMultimap . create ( ) ; <nl> + Multimap < String , ForgeBlockStateV1 . Variant > variants = LinkedHashMultimap . create ( ) ; <nl> <nl> public static class Deserializer implements JsonDeserializer < ForgeBlockStateV1 > <nl> { <nl> @ @ - 83 , 8 + 83 , 8 @ @ public class ForgeBlockStateV1 extends Marker <nl> throw new RuntimeException ( " \ " defaults \ " variant cannot contain a simple \ " submodel \ " definition . " ) ; <nl> } <nl> <nl> - Map < String , Map < String , ForgeBlockStateV1 . Variant > > condensed = Maps . newHashMap ( ) ; / / map ( property name - > map ( property value - > variant ) ) <nl> - Multimap < String , ForgeBlockStateV1 . Variant > specified = HashMultimap . create ( ) ; / / Multimap containing all the states specified with " property = value " . <nl> + Map < String , Map < String , ForgeBlockStateV1 . Variant > > condensed = Maps . newLinkedHashMap ( ) ; / / map ( property name - > map ( property value - > variant ) ) <nl> + Multimap < String , ForgeBlockStateV1 . Variant > specified = LinkedHashMultimap . create ( ) ; / / Multimap containing all the states specified with " property = value " . <nl> <nl> for ( Entry < String , JsonElement > e : JsonUtils . getJsonObject ( json , " variants " ) . entrySet ( ) ) <nl> { <nl> @ @ - 103 , 7 + 103 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> if ( obj . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . isJsonObject ( ) ) <nl> { <nl> / / first value is a json object , so we know it ' s not a fully - defined variant <nl> - Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; <nl> + Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newLinkedHashMap ( ) ; <nl> condensed . put ( e . getKey ( ) , subs ) ; <nl> for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) <nl> { <nl> @ @ - 236 , 7 + 236 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> { <nl> List < String > sorted = Lists . newArrayList ( base . keySet ( ) ) ; <nl> Collections . sort ( sorted ) ; / / Sort to get consistent results . <nl> - return getPermutations ( sorted , base , 0 , " " , HashMultimap . create ( ) , null ) ; <nl> + return getPermutations ( sorted , base , 0 , " " , LinkedHashMultimap . create ( ) , null ) ; <nl> } <nl> <nl> private List < ForgeBlockStateV1 . Variant > getSubmodelPermutations ( ForgeBlockStateV1 . Variant baseVar , List < String > sorted , Map < String , List < ForgeBlockStateV1 . Variant > > map , int depth , Map < String , ForgeBlockStateV1 . Variant > parts , List < ForgeBlockStateV1 . Variant > ret ) <nl> @ @ - 277 , 7 + 277 , 7 @ @ public class ForgeBlockStateV1 extends Marker <nl> { <nl> List < String > sorted = Lists . newArrayList ( variants . keySet ( ) ) ; <nl> Collections . sort ( sorted ) ; / / Sort to get consistent results . <nl> - return getSubmodelPermutations ( baseVar , sorted , variants , 0 , new HashMap < > ( ) , new ArrayList < > ( ) ) ; <nl> + return getSubmodelPermutations ( baseVar , sorted , variants , 0 , new LinkedHashMap < > ( ) , new ArrayList < > ( ) ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index feccc96 . . 484be8b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 31 , 17 + 31 , 15 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ConcurrentHashMap ; <nl> - import java . util . stream . Collectors ; <nl> - import java . util . stream . Stream ; <nl> <nl> - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> - import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> + import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . InjectedModContainer ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 62 , 7 + 60 , 6 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> / / This is the minecraft version we ' re building for - used in various places in Forge / FML code <nl> - / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions <nl> public static final String mcVersion = " 1 . 12 . 1 " ; <nl> / / This is the MCP data version we ' re using <nl> public static final String mcpVersion = " 9 . 41 " ; <nl> @ @ - 71 , 12 + 68 , 6 @ @ public class ForgeVersion <nl> @ SuppressWarnings ( " unused " ) <nl> private static String target = null ; <nl> <nl> - / * <nl> - * Version compatibility . Add new version strings for each version we ' re SRG compatible with . <nl> - * Reset the list to empty only when incompatible changes occur . <nl> - * / <nl> - private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; <nl> - <nl> private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; <nl> <nl> public static int getMajorVersion ( ) <nl> @ @ - 116 , 15 + 107 , 6 @ @ public class ForgeVersion <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> <nl> - / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility <nl> - private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) <nl> - . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; <nl> - <nl> - / / Tests the mod supplied version range for compatibility with our version compatibility list <nl> - public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { <nl> - return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; <nl> - } <nl> - <nl> public static enum Status <nl> { <nl> PENDING ( ) , <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index e8a1d15 . . c7b1577 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 67 , 6 + 67 , 7 @ @ import java . util . function . Function ; <nl> import com . google . common . base . Strings ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableList . Builder ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . ListMultimap ; <nl> @ @ - 255 , 7 + 256 , 16 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> <nl> String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> - <nl> + if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . <nl> + if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> + " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | <nl> + " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | <nl> + " [ 1 . 10 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; <nl> + if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; <nl> + if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) <nl> + mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; <nl> if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) <nl> { <nl> minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index e484d47 . . 5646f8b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . net . MalformedURLException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> @ @ - 34 , 7 + 35 , 6 @ @ import java . util . Properties ; <nl> import java . util . Set ; <nl> <nl> import net . minecraft . util . ResourceLocation ; <nl> - import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . capabilities . CapabilityManager ; <nl> import net . minecraftforge . common . config . ConfigManager ; <nl> import net . minecraftforge . common . crafting . CraftingHelper ; <nl> @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . commons . io . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> + import java . util . function . Function ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> @ @ - 237 , 9 + 238 , 9 @ @ public class Loader <nl> ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> { <nl> - if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) <nl> + if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) <nl> { <nl> - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; <nl> + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; <nl> WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; <nl> FMLLog . log . fatal ( ret . getMessage ( ) ) ; <nl> wrongMinecraftExceptions . add ( ret ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 index cda7c8b . . aa6eb40 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / BlockStateLoader . java 
 @ @ - 82 , 7 + 82 , 7 @ @ public class BlockStateLoader 
 { 
 case 1 : / / Version 1 
 ForgeBlockStateV1 v1 = GSON . fromJson ( reader , ForgeBlockStateV1 . class ) ; 
 - Map < String , VariantList > variants = Maps . newHashMap ( ) ; 
 + Map < String , VariantList > variants = Maps . newLinkedHashMap ( ) ; 
 
 for ( Entry < String , Collection < ForgeBlockStateV1 . Variant > > entry : v1 . variants . asMap ( ) . entrySet ( ) ) 
 { / / Convert Version1 variants into vanilla variants for the ModelBlockDefinition . 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 index dfde59b . . 4272e68 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ForgeBlockStateV1 . java 
 @ @ - 24 , 8 + 24 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . EnumMap ; 
 - import java . util . HashMap ; 
 - import java . util . Iterator ; 
 + import java . util . LinkedHashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 @ @ - 48 , 8 + 47 , 9 @ @ import net . minecraftforge . fml . common . FMLLog ; 
 
 import java . util . Objects ; 
 import java . util . Optional ; 
 - import com . google . common . collect . HashMultimap ; 
 + 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . LinkedHashMultimap ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 63 , 7 + 63 , 7 @ @ import com . google . gson . JsonParseException ; 
 public class ForgeBlockStateV1 extends Marker 
 { 
 ForgeBlockStateV1 . Variant defaults ; 
 - Multimap < String , ForgeBlockStateV1 . Variant > variants = HashMultimap . create ( ) ; 
 + Multimap < String , ForgeBlockStateV1 . Variant > variants = LinkedHashMultimap . create ( ) ; 
 
 public static class Deserializer implements JsonDeserializer < ForgeBlockStateV1 > 
 { 
 @ @ - 83 , 8 + 83 , 8 @ @ public class ForgeBlockStateV1 extends Marker 
 throw new RuntimeException ( " \ " defaults \ " variant cannot contain a simple \ " submodel \ " definition . " ) ; 
 } 
 
 - Map < String , Map < String , ForgeBlockStateV1 . Variant > > condensed = Maps . newHashMap ( ) ; / / map ( property name - > map ( property value - > variant ) ) 
 - Multimap < String , ForgeBlockStateV1 . Variant > specified = HashMultimap . create ( ) ; / / Multimap containing all the states specified with " property = value " . 
 + Map < String , Map < String , ForgeBlockStateV1 . Variant > > condensed = Maps . newLinkedHashMap ( ) ; / / map ( property name - > map ( property value - > variant ) ) 
 + Multimap < String , ForgeBlockStateV1 . Variant > specified = LinkedHashMultimap . create ( ) ; / / Multimap containing all the states specified with " property = value " . 
 
 for ( Entry < String , JsonElement > e : JsonUtils . getJsonObject ( json , " variants " ) . entrySet ( ) ) 
 { 
 @ @ - 103 , 7 + 103 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 if ( obj . entrySet ( ) . iterator ( ) . next ( ) . getValue ( ) . isJsonObject ( ) ) 
 { 
 / / first value is a json object , so we know it ' s not a fully - defined variant 
 - Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newHashMap ( ) ; 
 + Map < String , ForgeBlockStateV1 . Variant > subs = Maps . newLinkedHashMap ( ) ; 
 condensed . put ( e . getKey ( ) , subs ) ; 
 for ( Entry < String , JsonElement > se : e . getValue ( ) . getAsJsonObject ( ) . entrySet ( ) ) 
 { 
 @ @ - 236 , 7 + 236 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 { 
 List < String > sorted = Lists . newArrayList ( base . keySet ( ) ) ; 
 Collections . sort ( sorted ) ; / / Sort to get consistent results . 
 - return getPermutations ( sorted , base , 0 , " " , HashMultimap . create ( ) , null ) ; 
 + return getPermutations ( sorted , base , 0 , " " , LinkedHashMultimap . create ( ) , null ) ; 
 } 
 
 private List < ForgeBlockStateV1 . Variant > getSubmodelPermutations ( ForgeBlockStateV1 . Variant baseVar , List < String > sorted , Map < String , List < ForgeBlockStateV1 . Variant > > map , int depth , Map < String , ForgeBlockStateV1 . Variant > parts , List < ForgeBlockStateV1 . Variant > ret ) 
 @ @ - 277 , 7 + 277 , 7 @ @ public class ForgeBlockStateV1 extends Marker 
 { 
 List < String > sorted = Lists . newArrayList ( variants . keySet ( ) ) ; 
 Collections . sort ( sorted ) ; / / Sort to get consistent results . 
 - return getSubmodelPermutations ( baseVar , sorted , variants , 0 , new HashMap < > ( ) , new ArrayList < > ( ) ) ; 
 + return getSubmodelPermutations ( baseVar , sorted , variants , 0 , new LinkedHashMap < > ( ) , new ArrayList < > ( ) ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index feccc96 . . 484be8b 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 31 , 17 + 31 , 15 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ConcurrentHashMap ; 
 - import java . util . stream . Collectors ; 
 - import java . util . stream . Stream ; 
 
 - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 - import net . minecraftforge . fml . common . versioning . VersionRange ; 
 + import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 + import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . InjectedModContainer ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 62 , 7 + 60 , 6 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 / / This is the minecraft version we ' re building for - used in various places in Forge / FML code 
 - / / Update version compatibility list below if there is SRG compatibility between this version and some previous versions 
 public static final String mcVersion = " 1 . 12 . 1 " ; 
 / / This is the MCP data version we ' re using 
 public static final String mcpVersion = " 9 . 41 " ; 
 @ @ - 71 , 12 + 68 , 6 @ @ public class ForgeVersion 
 @ SuppressWarnings ( " unused " ) 
 private static String target = null ; 
 
 - / * 
 - * Version compatibility . Add new version strings for each version we ' re SRG compatible with . 
 - * Reset the list to empty only when incompatible changes occur . 
 - * / 
 - private static String [ ] extraCompatibleVersions = { " 1 . 12 " } ; 
 - 
 private static final Logger log = LogManager . getLogger ( " ForgeVersionCheck " ) ; 
 
 public static int getMajorVersion ( ) 
 @ @ - 116 , 15 + 107 , 6 @ @ public class ForgeVersion 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 
 - / / We add in the current version ( we ' re compatible with it ) and test additional versions for compatibility 
 - private static List < DefaultArtifactVersion > COMPATIBLE _ VERSIONS = Stream . concat ( Stream . of ( mcVersion ) , Stream . of ( extraCompatibleVersions ) ) 
 - . map ( s - > new DefaultArtifactVersion ( " dummy " , s ) ) . collect ( Collectors . toList ( ) ) ; 
 - 
 - / / Tests the mod supplied version range for compatibility with our version compatibility list 
 - public static boolean testMinecraftVersionCompatibility ( VersionRange modVersion ) { 
 - return COMPATIBLE _ VERSIONS . stream ( ) . anyMatch ( modVersion : : containsVersion ) ; 
 - } 
 - 
 public static enum Status 
 { 
 PENDING ( ) , 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index e8a1d15 . . c7b1577 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 67 , 6 + 67 , 7 @ @ import java . util . function . Function ; 
 import com . google . common . base . Strings ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableList . Builder ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . ListMultimap ; 
 @ @ - 255 , 7 + 256 , 16 @ @ public class FMLModContainer implements ModContainer 
 } 
 
 String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 - 
 + if ( " [ 1 . 8 . 8 ] " . equals ( mcVersionString ) ) mcVersionString = " [ 1 . 8 . 8 , 1 . 8 . 9 ] " ; / / MC 1 . 8 . 8 and 1 . 8 . 9 is forward SRG compatible so accept these versions by default . 
 + if ( " [ 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 + " [ 1 . 9 , 1 . 9 . 4 ] " . equals ( mcVersionString ) | | 
 + " [ 1 . 9 . 4 , 1 . 10 ) " . equals ( mcVersionString ) | | 
 + " [ 1 . 10 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 9 . 4 , 1 . 10 . 2 ] " ; 
 + if ( " [ 1 . 11 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 11 , 1 . 11 . 2 ] " ; 
 + if ( " [ 1 . 12 ] " . equals ( mcVersionString ) ) 
 + mcVersionString = " [ 1 . 12 , 1 . 12 . 1 ] " ; 
 if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) 
 { 
 minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index e484d47 . . 5646f8b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . net . MalformedURLException ; 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 @ @ - 34 , 7 + 35 , 6 @ @ import java . util . Properties ; 
 import java . util . Set ; 
 
 import net . minecraft . util . ResourceLocation ; 
 - import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . capabilities . CapabilityManager ; 
 import net . minecraftforge . common . config . ConfigManager ; 
 import net . minecraftforge . common . crafting . CraftingHelper ; 
 @ @ - 62 , 6 + 62 , 7 @ @ import org . apache . commons . io . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . CharMatcher ; 
 + import java . util . function . Function ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . ArrayListMultimap ; 
 @ @ - 237 , 9 + 238 , 9 @ @ public class Loader 
 ArrayListMultimap < String , String > reqList = ArrayListMultimap . create ( ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 { 
 - if ( ! ForgeVersion . testMinecraftVersionCompatibility ( mod . acceptableMinecraftVersionRange ( ) ) ) 
 + if ( ! mod . acceptableMinecraftVersionRange ( ) . containsVersion ( minecraft . getProcessedVersion ( ) ) ) 
 { 
 - FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . It is compatible with { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) , mod . acceptableMinecraftVersionRange ( ) ) ; 
 + FMLLog . log . fatal ( " The mod { } does not wish to run in Minecraft version { } . You will have to remove it to play . " , mod . getModId ( ) , getMCVersionString ( ) ) ; 
 WrongMinecraftVersionException ret = new WrongMinecraftVersionException ( mod , getMCVersionString ( ) ) ; 
 FMLLog . log . fatal ( ret . getMessage ( ) ) ; 
 wrongMinecraftExceptions . add ( ret ) ;
