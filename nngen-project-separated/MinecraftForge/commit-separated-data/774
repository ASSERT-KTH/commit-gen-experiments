BLEU SCORE: 0.017911710595643587

TEST MSG: Ignore blocks / items with null registry name during model loading . Fixes NPE during resource reloading in worlds with removed blocks / items .
GENERATED MSG: Add a mechanism to dump the registry - useful for mod developers .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 6f0e62b . . 4014840 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 82 , 10 + 82 , 12 @ @ import org . apache . commons . lang3 . tuple . Pair ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Joiner ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . collect . HashMultimap ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> @ @ - 179 , 7 + 181 , 13 @ @ public final class ModelLoader extends ModelBakery <nl> @ Override <nl> protected void loadBlocks ( ) <nl> { <nl> - List < Block > blocks = Lists . newArrayList ( Block . blockRegistry ) ; <nl> + List < Block > blocks = Lists . newArrayList ( Iterables . filter ( Block . blockRegistry , new Predicate < Block > ( ) <nl> + { <nl> + public boolean apply ( Block block ) <nl> + { <nl> + return block . getRegistryName ( ) ! = null ; <nl> + } <nl> + } ) ) ; <nl> Collections . sort ( blocks , new Comparator < Block > ( ) <nl> { <nl> public int compare ( Block b1 , Block b2 ) <nl> @ @ - 257 , 7 + 265 , 13 @ @ public final class ModelLoader extends ModelBakery <nl> <nl> registerVariantNames ( ) ; <nl> <nl> - List < Item > items = Lists . newArrayList ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; <nl> + List < Item > items = Lists . newArrayList ( Iterables . filter ( Item . itemRegistry , new Predicate < Item > ( ) <nl> + { <nl> + public boolean apply ( Item item ) <nl> + { <nl> + return item . getRegistryName ( ) ! = null ; <nl> + } <nl> + } ) ) ; <nl> Collections . sort ( items , new Comparator < Item > ( ) <nl> { <nl> public int compare ( Item i1 , Item i2 )
NEAREST DIFF (one line): diff - - git a / fml / common / cpw / mods / fml / common / Loader . java b / fml / common / cpw / mods / fml / common / Loader . java <nl> index f5a7314 . . 320defe 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / Loader . java <nl> + + + b / fml / common / cpw / mods / fml / common / Loader . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package cpw . mods . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . FileReader ; <nl> import java . io . IOException ; <nl> import java . net . MalformedURLException ; <nl> @ @ - 26 , 15 + 27 , 20 @ @ import java . util . concurrent . Callable ; <nl> import java . util . logging . Level ; <nl> <nl> import net . minecraft . crash . CallableMinecraftVersion ; <nl> + import net . minecraft . item . ItemStack ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> + import com . google . common . base . Charsets ; <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Joiner ; <nl> + import com . google . common . base . Joiner . MapJoiner ; <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . ArrayListMultimap ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . ImmutableList ; <nl> + import com . google . common . collect . ImmutableListMultimap ; <nl> + import com . google . common . collect . ImmutableListMultimap . Builder ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableMultiset ; <nl> import com . google . common . collect . Iterables ; <nl> @ @ - 47 , 7 + 53 , 9 @ @ import com . google . common . collect . Multiset . Entry ; <nl> import com . google . common . collect . Multisets ; <nl> import com . google . common . collect . Ordering ; <nl> import com . google . common . collect . Sets . SetView ; <nl> + import com . google . common . collect . Table ; <nl> import com . google . common . collect . TreeMultimap ; <nl> + import com . google . common . io . Files ; <nl> <nl> import cpw . mods . fml . common . LoaderState . ModState ; <nl> import cpw . mods . fml . common . discovery . ModDiscoverer ; <nl> @ @ - 686 , 6 + 694 , 8 @ @ public class Loader <nl> modController . distributeStateMessage ( LoaderState . POSTINITIALIZATION ) ; <nl> modController . transition ( LoaderState . AVAILABLE ) ; <nl> modController . distributeStateMessage ( LoaderState . AVAILABLE ) ; <nl> + / / Dump the custom registry data map , if necessary <nl> + GameData . dumpRegistry ( minecraftDir ) ; <nl> FMLLog . info ( " Forge Mod Loader has successfully loaded % d mod % s " , mods . size ( ) , mods . size ( ) = = 1 ? " " : " s " ) ; <nl> } <nl> <nl> @ @ - 810 , 4 + 820 , 5 @ @ public class Loader <nl> } <nl> return true ; <nl> } <nl> + <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / common / registry / GameData . java b / fml / common / cpw / mods / fml / common / registry / GameData . java <nl> index aeb74ce . . 6af788e 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / registry / GameData . java <nl> + + + b / fml / common / cpw / mods / fml / common / registry / GameData . java <nl> @ @ - 29 , 9 + 29 , 13 @ @ import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> <nl> + import com . google . common . base . Charsets ; <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Joiner ; <nl> import com . google . common . base . Throwables ; <nl> + import com . google . common . base . Joiner . MapJoiner ; <nl> import com . google . common . collect . HashBasedTable ; <nl> + import com . google . common . collect . ImmutableListMultimap ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableTable ; <nl> import com . google . common . collect . ImmutableTable . Builder ; <nl> @ @ - 42 , 6 + 46 , 7 @ @ import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . collect . Table ; <nl> import com . google . common . collect . Table . Cell ; <nl> + import com . google . common . io . Files ; <nl> <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> @ @ - 329 , 4 + 334 , 31 @ @ public class GameData { <nl> { <nl> customItemStacks . put ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , name , itemStack ) ; <nl> } <nl> + <nl> + public static void dumpRegistry ( File minecraftDir ) <nl> + { <nl> + if ( customItemStacks = = null ) <nl> + { <nl> + return ; <nl> + } <nl> + if ( Boolean . valueOf ( System . getProperty ( " fml . dumpRegistry " , " false " ) ) . booleanValue ( ) ) <nl> + { <nl> + ImmutableListMultimap . Builder < String , String > builder = ImmutableListMultimap . builder ( ) ; <nl> + for ( String modId : customItemStacks . rowKeySet ( ) ) <nl> + { <nl> + builder . putAll ( modId , customItemStacks . row ( modId ) . keySet ( ) ) ; <nl> + } <nl> + <nl> + File f = new File ( minecraftDir , " itemStackRegistry . csv " ) ; <nl> + MapJoiner mapJoiner = Joiner . on ( " \ n " ) . withKeyValueSeparator ( " , " ) ; <nl> + try <nl> + { <nl> + Files . write ( mapJoiner . join ( builder . build ( ) . entries ( ) ) , f , Charsets . UTF _ 8 ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , e , " Failed to write registry data to % s " , f . getAbsolutePath ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 6f0e62b . . 4014840 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 82 , 10 + 82 , 12 @ @ import org . apache . commons . lang3 . tuple . Pair ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Joiner ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . collect . HashMultimap ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 @ @ - 179 , 7 + 181 , 13 @ @ public final class ModelLoader extends ModelBakery 
 @ Override 
 protected void loadBlocks ( ) 
 { 
 - List < Block > blocks = Lists . newArrayList ( Block . blockRegistry ) ; 
 + List < Block > blocks = Lists . newArrayList ( Iterables . filter ( Block . blockRegistry , new Predicate < Block > ( ) 
 + { 
 + public boolean apply ( Block block ) 
 + { 
 + return block . getRegistryName ( ) ! = null ; 
 + } 
 + } ) ) ; 
 Collections . sort ( blocks , new Comparator < Block > ( ) 
 { 
 public int compare ( Block b1 , Block b2 ) 
 @ @ - 257 , 7 + 265 , 13 @ @ public final class ModelLoader extends ModelBakery 
 
 registerVariantNames ( ) ; 
 
 - List < Item > items = Lists . newArrayList ( GameData . getItemRegistry ( ) . typeSafeIterable ( ) ) ; 
 + List < Item > items = Lists . newArrayList ( Iterables . filter ( Item . itemRegistry , new Predicate < Item > ( ) 
 + { 
 + public boolean apply ( Item item ) 
 + { 
 + return item . getRegistryName ( ) ! = null ; 
 + } 
 + } ) ) ; 
 Collections . sort ( items , new Comparator < Item > ( ) 
 { 
 public int compare ( Item i1 , Item i2 )

NEAREST DIFF:
diff - - git a / fml / common / cpw / mods / fml / common / Loader . java b / fml / common / cpw / mods / fml / common / Loader . java 
 index f5a7314 . . 320defe 100644 
 - - - a / fml / common / cpw / mods / fml / common / Loader . java 
 + + + b / fml / common / cpw / mods / fml / common / Loader . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package cpw . mods . fml . common ; 
 
 import java . io . File ; 
 + import java . io . FileOutputStream ; 
 import java . io . FileReader ; 
 import java . io . IOException ; 
 import java . net . MalformedURLException ; 
 @ @ - 26 , 15 + 27 , 20 @ @ import java . util . concurrent . Callable ; 
 import java . util . logging . Level ; 
 
 import net . minecraft . crash . CallableMinecraftVersion ; 
 + import net . minecraft . item . ItemStack ; 
 
 import com . google . common . base . CharMatcher ; 
 + import com . google . common . base . Charsets ; 
 import com . google . common . base . Function ; 
 import com . google . common . base . Joiner ; 
 + import com . google . common . base . Joiner . MapJoiner ; 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . ArrayListMultimap ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . ImmutableList ; 
 + import com . google . common . collect . ImmutableListMultimap ; 
 + import com . google . common . collect . ImmutableListMultimap . Builder ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableMultiset ; 
 import com . google . common . collect . Iterables ; 
 @ @ - 47 , 7 + 53 , 9 @ @ import com . google . common . collect . Multiset . Entry ; 
 import com . google . common . collect . Multisets ; 
 import com . google . common . collect . Ordering ; 
 import com . google . common . collect . Sets . SetView ; 
 + import com . google . common . collect . Table ; 
 import com . google . common . collect . TreeMultimap ; 
 + import com . google . common . io . Files ; 
 
 import cpw . mods . fml . common . LoaderState . ModState ; 
 import cpw . mods . fml . common . discovery . ModDiscoverer ; 
 @ @ - 686 , 6 + 694 , 8 @ @ public class Loader 
 modController . distributeStateMessage ( LoaderState . POSTINITIALIZATION ) ; 
 modController . transition ( LoaderState . AVAILABLE ) ; 
 modController . distributeStateMessage ( LoaderState . AVAILABLE ) ; 
 + / / Dump the custom registry data map , if necessary 
 + GameData . dumpRegistry ( minecraftDir ) ; 
 FMLLog . info ( " Forge Mod Loader has successfully loaded % d mod % s " , mods . size ( ) , mods . size ( ) = = 1 ? " " : " s " ) ; 
 } 
 
 @ @ - 810 , 4 + 820 , 5 @ @ public class Loader 
 } 
 return true ; 
 } 
 + 
 } 
 diff - - git a / fml / common / cpw / mods / fml / common / registry / GameData . java b / fml / common / cpw / mods / fml / common / registry / GameData . java 
 index aeb74ce . . 6af788e 100644 
 - - - a / fml / common / cpw / mods / fml / common / registry / GameData . java 
 + + + b / fml / common / cpw / mods / fml / common / registry / GameData . java 
 @ @ - 29 , 9 + 29 , 13 @ @ import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 
 + import com . google . common . base . Charsets ; 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Joiner ; 
 import com . google . common . base . Throwables ; 
 + import com . google . common . base . Joiner . MapJoiner ; 
 import com . google . common . collect . HashBasedTable ; 
 + import com . google . common . collect . ImmutableListMultimap ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableTable ; 
 import com . google . common . collect . ImmutableTable . Builder ; 
 @ @ - 42 , 6 + 46 , 7 @ @ import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . collect . Table ; 
 import com . google . common . collect . Table . Cell ; 
 + import com . google . common . io . Files ; 
 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 @ @ - 329 , 4 + 334 , 31 @ @ public class GameData { 
 { 
 customItemStacks . put ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , name , itemStack ) ; 
 } 
 + 
 + public static void dumpRegistry ( File minecraftDir ) 
 + { 
 + if ( customItemStacks = = null ) 
 + { 
 + return ; 
 + } 
 + if ( Boolean . valueOf ( System . getProperty ( " fml . dumpRegistry " , " false " ) ) . booleanValue ( ) ) 
 + { 
 + ImmutableListMultimap . Builder < String , String > builder = ImmutableListMultimap . builder ( ) ; 
 + for ( String modId : customItemStacks . rowKeySet ( ) ) 
 + { 
 + builder . putAll ( modId , customItemStacks . row ( modId ) . keySet ( ) ) ; 
 + } 
 + 
 + File f = new File ( minecraftDir , " itemStackRegistry . csv " ) ; 
 + MapJoiner mapJoiner = Joiner . on ( " \ n " ) . withKeyValueSeparator ( " , " ) ; 
 + try 
 + { 
 + Files . write ( mapJoiner . join ( builder . build ( ) . entries ( ) ) , f , Charsets . UTF _ 8 ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + FMLLog . log ( Level . SEVERE , e , " Failed to write registry data to % s " , f . getAbsolutePath ( ) ) ; 
 + } 
 + } 
 + } 
 }
