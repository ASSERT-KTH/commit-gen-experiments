BLEU SCORE: 0.04278179264606696

TEST MSG: Fix uncaught ClassCastException from invalid recipe file
GENERATED MSG: Fix parseShaped missing Empty slot item . Closes # 3990

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 0dc77d6 . . 58575ce 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 735 , 7 + 735 , 7 @ @ public class CraftingHelper { <nl> { <nl> reader = Files . newBufferedReader ( f ) ; <nl> JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; <nl> - if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( json . getAsJsonArray ( " conditions " ) , ctx ) ) <nl> + if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) <nl> continue ; <nl> IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; <nl> ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; <nl> diff - - git a / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json b / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json <nl> new file mode 100644 <nl> index 0000000 . . 49f8109 <nl> - - - / dev / null <nl> + + + b / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json <nl> @ @ - 0 , 0 + 1 , 21 @ @ <nl> + { <nl> + " conditions " : { <nl> + " not an array " : " conditions property must be an array " <nl> + } , <nl> + " type " : " crafting _ shaped " , <nl> + " group " : " planks " , <nl> + " pattern " : [ <nl> + " # " <nl> + ] , <nl> + " key " : { <nl> + " # " : { <nl> + " item " : " minecraft : log2 " , <nl> + " data " : 0 <nl> + } <nl> + } , <nl> + " result " : { <nl> + " item " : " minecraft : planks " , <nl> + " data " : 4 , <nl> + " count " : 4 <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 788f8d1 . . abc31a2 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 308 , 6 + 308 , 7 @ @ public class CraftingHelper { <nl> } <nl> <nl> HashMap < Character , Ingredient > itemMap = Maps . newHashMap ( ) ; <nl> + itemMap . put ( ' ' , Ingredient . field _ 193370 _ a ) ; <nl> <nl> for ( ; idx < recipe . length ; idx + = 2 ) <nl> { <nl> @ @ - 315 , 6 + 316 , 9 @ @ public class CraftingHelper { <nl> Object in = recipe [ idx + 1 ] ; <nl> Ingredient ing = CraftingHelper . getIngredient ( in ) ; <nl> <nl> + if ( ' ' = = chr . charValue ( ) ) <nl> + throw new JsonSyntaxException ( " Invalid key entry : ' ' is a reserved symbol . " ) ; <nl> + <nl> if ( ing ! = null ) <nl> { <nl> itemMap . put ( chr , ing ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 0dc77d6 . . 58575ce 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 735 , 7 + 735 , 7 @ @ public class CraftingHelper { 
 { 
 reader = Files . newBufferedReader ( f ) ; 
 JsonObject json = JsonUtils . fromJson ( GSON , reader , JsonObject . class ) ; 
 - if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( json . getAsJsonArray ( " conditions " ) , ctx ) ) 
 + if ( json . has ( " conditions " ) & & ! CraftingHelper . processConditions ( JsonUtils . getJsonArray ( json , " conditions " ) , ctx ) ) 
 continue ; 
 IRecipe recipe = CraftingHelper . getRecipe ( json , ctx ) ; 
 ForgeRegistries . RECIPES . register ( recipe . setRegistryName ( key ) ) ; 
 diff - - git a / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json b / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json 
 new file mode 100644 
 index 0000000 . . 49f8109 
 - - - / dev / null 
 + + + b / src / test / resources / assets / crafting _ system _ test / recipes / conditions _ property _ not _ array . json 
 @ @ - 0 , 0 + 1 , 21 @ @ 
 + { 
 + " conditions " : { 
 + " not an array " : " conditions property must be an array " 
 + } , 
 + " type " : " crafting _ shaped " , 
 + " group " : " planks " , 
 + " pattern " : [ 
 + " # " 
 + ] , 
 + " key " : { 
 + " # " : { 
 + " item " : " minecraft : log2 " , 
 + " data " : 0 
 + } 
 + } , 
 + " result " : { 
 + " item " : " minecraft : planks " , 
 + " data " : 4 , 
 + " count " : 4 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 788f8d1 . . abc31a2 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 308 , 6 + 308 , 7 @ @ public class CraftingHelper { 
 } 
 
 HashMap < Character , Ingredient > itemMap = Maps . newHashMap ( ) ; 
 + itemMap . put ( ' ' , Ingredient . field _ 193370 _ a ) ; 
 
 for ( ; idx < recipe . length ; idx + = 2 ) 
 { 
 @ @ - 315 , 6 + 316 , 9 @ @ public class CraftingHelper { 
 Object in = recipe [ idx + 1 ] ; 
 Ingredient ing = CraftingHelper . getIngredient ( in ) ; 
 
 + if ( ' ' = = chr . charValue ( ) ) 
 + throw new JsonSyntaxException ( " Invalid key entry : ' ' is a reserved symbol . " ) ; 
 + 
 if ( ing ! = null ) 
 { 
 itemMap . put ( chr , ing ) ;
