BLEU SCORE: 0.03089055318156698

TEST MSG: Fix some resources that are never closed , close in a finally block
GENERATED MSG: Introduce a new centralized version checking system .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / config / Configuration . java b / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> index 985d61c . . dc68d66 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> + + + b / src / main / java / net / minecraftforge / common / config / Configuration . java <nl> @ @ - 62 , 6 + 62 , 7 @ @ import net . minecraftforge . fml . client . config . IConfigElement ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . relauncher . FMLInjectionData ; <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> <nl> / * * <nl> * This class offers advanced configurations capabilities , allowing to provide <nl> @ @ - 1055 , 20 + 1056 , 8 @ @ public class Configuration <nl> } <nl> finally <nl> { <nl> - if ( buffer ! = null ) <nl> - { <nl> - try <nl> - { <nl> - buffer . close ( ) ; <nl> - } catch ( IOException e ) { } <nl> - } <nl> - if ( input ! = null ) <nl> - { <nl> - try <nl> - { <nl> - input . close ( ) ; <nl> - } catch ( IOException e ) { } <nl> - } <nl> + IOUtils . closeQuietly ( buffer ) ; <nl> + IOUtils . closeQuietly ( input ) ; <nl> } <nl> <nl> resetChangedState ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index a78247c . . 69fa05e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . client ; <nl> import java . io . File ; <nl> import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . lang . ref . WeakReference ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> @ @ - 107 , 6 + 108 , 7 @ @ import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> import net . minecraftforge . fml . common . toposort . ModSortingException ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> @ @ - 297 , 9 + 299 , 17 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> Class < ? > optifineConfig = Class . forName ( " Config " , false , Loader . instance ( ) . getModClassLoader ( ) ) ; <nl> String optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; <nl> Map < String , Object > dummyOptifineMeta = ImmutableMap . < String , Object > builder ( ) . put ( " name " , " Optifine " ) . put ( " version " , optifineVersion ) . build ( ) ; <nl> - ModMetadata optifineMetadata = MetadataCollection . from ( getClass ( ) . getResourceAsStream ( " optifinemod . info " ) , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; <nl> - optifineContainer = new DummyModContainer ( optifineMetadata ) ; <nl> - FMLLog . info ( " Forge Mod Loader has detected optifine % s , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; <nl> + InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ; <nl> + try <nl> + { <nl> + ModMetadata optifineMetadata = MetadataCollection . from ( optifineModInfoInputStream , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; <nl> + optifineContainer = new DummyModContainer ( optifineMetadata ) ; <nl> + FMLLog . info ( " Forge Mod Loader has detected optifine % s , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( optifineModInfoInputStream ) ; <nl> + } <nl> } <nl> catch ( Exception e ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index e1e19b2 . . 92a809e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> import java . io . FileInputStream ; <nl> + import java . io . InputStream ; <nl> import java . lang . annotation . Annotation ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 53 , 6 + 54 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; <nl> import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . commons . lang3 . StringUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 289 , 7 + 291 , 15 @ @ public class FMLModContainer implements ModContainer <nl> if ( versionFile ! = null ) <nl> { <nl> version = new Properties ( ) ; <nl> - version . load ( source . getInputStream ( versionFile ) ) ; <nl> + InputStream sourceInputStream = source . getInputStream ( versionFile ) ; <nl> + try <nl> + { <nl> + version . load ( sourceInputStream ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( sourceInputStream ) ; <nl> + } <nl> } <nl> source . close ( ) ; <nl> } <nl> @ @ - 300 , 8 + 310 , 14 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> version = new Properties ( ) ; <nl> FileInputStream fis = new FileInputStream ( propsFile ) ; <nl> - version . load ( fis ) ; <nl> - fis . close ( ) ; <nl> + try <nl> + { <nl> + version . load ( fis ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( fis ) ; <nl> + } <nl> } <nl> } <nl> return version ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index e85ff11 . . 8b482a6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; <nl> import java . io . FileReader ; <nl> import java . io . FileWriter ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . MalformedURLException ; <nl> import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> @ @ - 59 , 6 + 60 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; <nl> import net . minecraftforge . fml . relauncher . ModListHelper ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . CharMatcher ; <nl> @ @ - 213 , 7 + 215 , 15 @ @ public class Loader <nl> } <nl> <nl> minecraft = new MinecraftDummyContainer ( MC _ VERSION ) ; <nl> - mcp = new MCPDummyContainer ( MetadataCollection . from ( getClass ( ) . getResourceAsStream ( " / mcpmod . info " ) , " MCP " ) . getMetadataForId ( " mcp " , null ) ) ; <nl> + InputStream mcpModInputStream = getClass ( ) . getResourceAsStream ( " / mcpmod . info " ) ; <nl> + try <nl> + { <nl> + mcp = new MCPDummyContainer ( MetadataCollection . from ( mcpModInputStream , " MCP " ) . getMetadataForId ( " mcp " , null ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( mcpModInputStream ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java b / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java <nl> index b25385b . . a461fa4 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . asm ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . net . URLDecoder ; <nl> import java . security . CodeSource ; <nl> import java . security . cert . Certificate ; <nl> @ @ - 28 , 6 + 29 , 7 @ @ import java . util . Map ; <nl> import java . util . jar . JarEntry ; <nl> import java . util . jar . JarFile ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> @ @ - 113 , 7 + 115 , 15 @ @ public class FMLSanityChecker implements IFMLCallHook <nl> mcJarFile = new JarFile ( mcPath , true ) ; <nl> mcJarFile . getManifest ( ) ; <nl> JarEntry cbrEntry = mcJarFile . getJarEntry ( " net / minecraft / client / ClientBrandRetriever . class " ) ; <nl> - ByteStreams . toByteArray ( mcJarFile . getInputStream ( cbrEntry ) ) ; <nl> + InputStream mcJarFileInputStream = mcJarFile . getInputStream ( cbrEntry ) ; <nl> + try <nl> + { <nl> + ByteStreams . toByteArray ( mcJarFileInputStream ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( mcJarFileInputStream ) ; <nl> + } <nl> Certificate [ ] certificates = cbrEntry . getCertificates ( ) ; <nl> certCount = certificates ! = null ? certificates . length : 0 ; <nl> if ( certificates ! = null ) <nl> @ @ - 136 , 17 + 146 , 7 @ @ public class FMLSanityChecker implements IFMLCallHook <nl> } <nl> finally <nl> { <nl> - if ( mcJarFile ! = null ) <nl> - { <nl> - try <nl> - { <nl> - mcJarFile . close ( ) ; <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - / / Noise <nl> - } <nl> - } <nl> + IOUtils . closeQuietly ( mcJarFile ) ; <nl> } <nl> } <nl> else <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> index dab7b17 . . aa048b0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java <nl> @ @ - 45 , 6 + 45 , 7 @ @ import java . util . zip . ZipOutputStream ; <nl> import net . minecraft . launchwrapper . IClassTransformer ; <nl> import net . minecraftforge . fml . relauncher . FMLRelaunchLog ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . objectweb . asm . ClassReader ; <nl> import org . objectweb . asm . ClassWriter ; <nl> import org . objectweb . asm . tree . AbstractInsnNode ; <nl> @ @ - 469 , 27 + 470 , 8 @ @ public class AccessTransformer implements IClassTransformer <nl> } <nl> finally <nl> { <nl> - if ( outJar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - outJar . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - if ( inJar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - inJar . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - } <nl> - } <nl> + IOUtils . closeQuietly ( outJar ) ; <nl> + IOUtils . closeQuietly ( inJar ) ; <nl> } <nl> } <nl> Multimap < String , Modifier > getModifiers ( ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java <nl> index f4db8d0 . . 7be0c74 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java <nl> @ @ - 35 , 6 + 35 , 7 @ @ import java . util . zip . ZipOutputStream ; <nl> <nl> import net . minecraft . launchwrapper . IClassTransformer ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . objectweb . asm . ClassReader ; <nl> import org . objectweb . asm . ClassWriter ; <nl> import org . objectweb . asm . tree . ClassNode ; <nl> @ @ - 269 , 27 + 270 , 8 @ @ public class MarkerTransformer implements IClassTransformer <nl> } <nl> finally <nl> { <nl> - if ( outJar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - outJar . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - } <nl> - } <nl> - <nl> - if ( inJar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - inJar . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - } <nl> - } <nl> + IOUtils . closeQuietly ( outJar ) ; <nl> + IOUtils . closeQuietly ( inJar ) ; <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> index 0ee312f . . 3848717 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java <nl> @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModContainerFactory ; <nl> import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Throwables ; <nl> @ @ - 73 , 8 + 74 , 14 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer <nl> try <nl> { <nl> FileInputStream fis = new FileInputStream ( metadata ) ; <nl> - mc = MetadataCollection . from ( fis , modDir . getName ( ) ) ; <nl> - fis . close ( ) ; <nl> + try <nl> + { <nl> + mc = MetadataCollection . from ( fis , modDir . getName ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( fis ) ; <nl> + } <nl> FMLLog . fine ( " Found an mcmod . info file in directory % s " , modDir . getName ( ) ) ; <nl> } <nl> catch ( Exception e ) <nl> @ @ - 101 , 11 + 108 , 11 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer <nl> if ( match . matches ( ) ) <nl> { <nl> ASMModParser modParser = null ; <nl> + FileInputStream fis = null ; <nl> try <nl> { <nl> - FileInputStream fis = new FileInputStream ( file ) ; <nl> + fis = new FileInputStream ( file ) ; <nl> modParser = new ASMModParser ( fis ) ; <nl> - fis . close ( ) ; <nl> candidate . addClassEntry ( path + file . getName ( ) ) ; <nl> } <nl> catch ( LoaderException e ) <nl> @ @ - 115 , 7 + 122 , 11 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer <nl> } <nl> catch ( Exception e ) <nl> { <nl> - Throwables . propagate ( e ) ; <nl> + throw Throwables . propagate ( e ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( fis ) ; <nl> } <nl> <nl> modParser . validate ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> index 2e4b68f . . 816cc1f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ <nl> <nl> package net . minecraftforge . fml . common . discovery ; <nl> <nl> + import java . io . InputStream ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . jar . JarFile ; <nl> @ @ - 30 , 6 + 31 , 7 @ @ import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModContainerFactory ; <nl> import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import java . util . regex . Matcher ; <nl> @ @ - 54 , 7 + 56 , 15 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> if ( modInfo ! = null ) <nl> { <nl> FMLLog . finer ( " Located mcmod . info file in file % s " , candidate . getModContainer ( ) . getName ( ) ) ; <nl> - mc = MetadataCollection . from ( jar . getInputStream ( modInfo ) , candidate . getModContainer ( ) . getName ( ) ) ; <nl> + InputStream inputStream = jar . getInputStream ( modInfo ) ; <nl> + try <nl> + { <nl> + mc = MetadataCollection . from ( inputStream , candidate . getModContainer ( ) . getName ( ) ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( inputStream ) ; <nl> + } <nl> } <nl> else <nl> { <nl> @ @ - 73 , 7 + 83 , 15 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> ASMModParser modParser ; <nl> try <nl> { <nl> - modParser = new ASMModParser ( jar . getInputStream ( ze ) ) ; <nl> + InputStream inputStream = jar . getInputStream ( ze ) ; <nl> + try <nl> + { <nl> + modParser = new ASMModParser ( inputStream ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( inputStream ) ; <nl> + } <nl> candidate . addClassEntry ( ze . getName ( ) ) ; <nl> } <nl> catch ( LoaderException e ) <nl> @ @ - 101 , 16 + 119 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer <nl> } <nl> finally <nl> { <nl> - if ( jar ! = null ) <nl> - { <nl> - try <nl> - { <nl> - jar . close ( ) ; <nl> - } <nl> - catch ( Exception e ) <nl> - { <nl> - } <nl> - } <nl> + IOUtils . closeQuietly ( jar ) ; <nl> } <nl> return foundMods ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> index ceaf763 . . 2a9b107 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java <nl> @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . patcher ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 30 , 6 + 31 , 7 @ @ import java . util . jar . JarFile ; <nl> import net . minecraftforge . fml . common . asm . transformers . deobf . FMLDeobfuscatingRemapper ; <nl> import net . minecraftforge . fml . repackage . com . nothome . delta . Delta ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> import org . apache . logging . log4j . LogManager ; <nl> <nl> @ @ - 40 , 6 + 42 , 8 @ @ import com . google . common . io . ByteArrayDataOutput ; <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . common . io . Files ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> public class GenDiffSet { <nl> <nl> private static final List < String > RESERVED _ NAMES = Arrays . asList ( " CON " , " PRN " , " AUX " , " NUL " , " COM1 " , " COM2 " , " COM3 " , " COM4 " , " COM5 " , " COM6 " , " COM7 " , " COM8 " , " COM9 " , " LPT1 " , " LPT2 " , " LPT3 " , " LPT4 " , " LPT5 " , " LPT6 " , " LPT7 " , " LPT8 " , " LPT9 " ) ; <nl> @ @ - 78 , 8 + 82 , 7 @ @ public class GenDiffSet { <nl> String sourceClassName = name . replace ( ' / ' , ' . ' ) ; <nl> String targetClassName = remapper . map ( name ) . replace ( ' / ' , ' . ' ) ; <nl> JarEntry entry = sourceZip . getJarEntry ( jarName ) ; <nl> - <nl> - byte [ ] vanillaBytes = entry ! = null ? ByteStreams . toByteArray ( sourceZip . getInputStream ( entry ) ) : new byte [ 0 ] ; <nl> + byte [ ] vanillaBytes = toByteArray ( sourceZip , entry ) ; <nl> byte [ ] patchedBytes = Files . toByteArray ( targetFile ) ; <nl> <nl> byte [ ] diff = delta . compute ( vanillaBytes , patchedBytes ) ; <nl> @ @ - 117 , 4 + 120 , 21 @ @ public class GenDiffSet { <nl> sourceZip . close ( ) ; <nl> } <nl> <nl> + private static byte [ ] toByteArray ( JarFile sourceZip , @ Nullable JarEntry entry ) throws IOException <nl> + { <nl> + if ( entry = = null ) <nl> + { <nl> + return new byte [ 0 ] ; <nl> + } <nl> + <nl> + InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ; <nl> + try <nl> + { <nl> + return ByteStreams . toByteArray ( sourceZipInputStream ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( sourceZipInputStream ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 81fe60d . . cdfb7e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 24 , 6 + 24 , 7 @ @ import java . io . FileFilter ; <nl> import java . io . FileOutputStream ; <nl> import java . io . FilenameFilter ; <nl> import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> import java . lang . reflect . Method ; <nl> import java . net . MalformedURLException ; <nl> import java . net . URL ; <nl> @ @ - 55 , 6 + 56 , 7 @ @ import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . Name ; <nl> import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . SortingIndex ; <nl> import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . TransformerExclusions ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Strings ; <nl> @ @ - 464 , 9 + 466 , 19 @ @ public class CoreModManager { <nl> try <nl> { <nl> Files . createParentDirs ( target ) ; <nl> - FileOutputStream targ = new FileOutputStream ( target ) ; <nl> - ByteStreams . copy ( jar . getInputStream ( jarEntry ) , targ ) ; <nl> - targ . close ( ) ; <nl> + FileOutputStream targetOutputStream = null ; <nl> + InputStream jarInputStream = null ; <nl> + try <nl> + { <nl> + targetOutputStream = new FileOutputStream ( target ) ; <nl> + jarInputStream = jar . getInputStream ( jarEntry ) ; <nl> + ByteStreams . copy ( jarInputStream , targetOutputStream ) ; <nl> + } <nl> + finally <nl> + { <nl> + IOUtils . closeQuietly ( targetOutputStream ) ; <nl> + IOUtils . closeQuietly ( jarInputStream ) ; <nl> + } <nl> FMLRelaunchLog . log ( Level . DEBUG , " Extracted ContainedDep % s from % s to % s " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; <nl> result . put ( dep , target ) ; <nl> } catch ( IOException e ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java b / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java <nl> index 77ca86c . . 6b40f80 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java <nl> + + + b / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java <nl> @ @ - 19 , 6 + 19 , 8 @ @ <nl> <nl> package net . minecraftforge . fml . repackage . com . nothome . delta ; <nl> <nl> + import org . apache . commons . compress . utils . IOUtils ; <nl> + <nl> import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ INT ; <nl> import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ UBYTE ; <nl> import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ USHORT ; <nl> @ @ - 70 , 16 + 72 , 16 @ @ public class GDiffPatcher { <nl> 	 	 throws IOException <nl> 	 { <nl> RandomAccessFileSeekableSource source = new RandomAccessFileSeekableSource ( new RandomAccessFile ( sourceFile , " r " ) ) ; <nl> - InputStream patch = new FileInputStream ( patchFile ) ; <nl> - OutputStream output = new FileOutputStream ( outputFile ) ; <nl> + InputStream patch = null ; <nl> + OutputStream output = null ; <nl> try { <nl> + patch = new FileInputStream ( patchFile ) ; <nl> + output = new FileOutputStream ( outputFile ) ; <nl> patch ( source , patch , output ) ; <nl> - } catch ( IOException e ) { <nl> - throw e ; <nl> } finally { <nl> - source . close ( ) ; <nl> - patch . close ( ) ; <nl> - output . close ( ) ; <nl> + IOUtils . closeQuietly ( source ) ; <nl> + IOUtils . closeQuietly ( patch ) ; <nl> + IOUtils . closeQuietly ( output ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index fa4f6a5 . . 05c00ea 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 260 , 15 + 260 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> finally <nl> { <nl> IOUtils . closeQuietly ( stream ) ; <nl> - try <nl> - { <nl> - if ( zip ! = null ) <nl> - zip . close ( ) ; <nl> - } <nl> - catch ( IOException e ) <nl> - { <nl> - / / shush <nl> - } <nl> + IOUtils . closeQuietly ( zip ) ; <nl> } <nl> } <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> index 1f3e186 . . fcfee4e 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> @ @ - 6 , 42 + 6 , 38 @ @ <nl> package net . minecraftforge . client . gui ; <nl> <nl> import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . TreeMap ; <nl> - import java . util . regex . Pattern ; <nl> <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . client . gui . GuiScreen ; <nl> - import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . resources . I18n ; <nl> import net . minecraftforge . common . ForgeChunkManager ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . config . ConfigCategory ; <nl> import net . minecraftforge . common . config . ConfigElement ; <nl> import net . minecraftforge . common . config . Configuration ; <nl> import net . minecraftforge . common . config . Property ; <nl> import net . minecraftforge . fml . client . IModGuiFactory ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; <nl> - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; <nl> import net . minecraftforge . fml . client . config . ConfigGuiType ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement ; <nl> import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; <nl> - import net . minecraftforge . fml . client . config . GuiButtonExt ; <nl> import net . minecraftforge . fml . client . config . GuiConfig ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; <nl> import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; <nl> - import net . minecraftforge . fml . client . config . HoverChecker ; <nl> import net . minecraftforge . fml . client . config . IConfigElement ; <nl> - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; <nl> <nl> / * * <nl> * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . <nl> @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; <nl> list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; <nl> + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; <nl> return list ; <nl> } <nl> <nl> @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> } <nl> <nl> / * * <nl> + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . <nl> + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> + * / <nl> + public static class VersionCheckEntry extends CategoryEntry <nl> + { <nl> + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) <nl> + { <nl> + super ( owningScreen , owningEntryList , prop ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected GuiScreen buildChildScreen ( ) <nl> + { <nl> + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; <nl> + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; <nl> + values . remove ( " Global " ) ; <nl> + <nl> + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; <nl> + <nl> + List < Property > props = new ArrayList < Property > ( ) ; <nl> + <nl> + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) <nl> + { <nl> + values . remove ( mod . getModId ( ) ) ; <nl> + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config <nl> + } <nl> + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config <nl> + Collections . sort ( props , new Comparator < Property > ( ) <nl> + { <nl> + @ Override <nl> + public int compare ( Property o1 , Property o2 ) <nl> + { <nl> + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; <nl> + } <nl> + } ) ; <nl> + <nl> + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> + list . add ( new ConfigElement ( global ) ) ; <nl> + for ( Property prop : props ) <nl> + { <nl> + list . add ( new ConfigElement ( prop ) ) ; <nl> + } <nl> + <nl> + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent <nl> + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . <nl> + return new GuiConfig ( this . owningScreen , <nl> + list , <nl> + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , <nl> + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . <nl> * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . <nl> * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 7105295 . . 3805d49 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; <nl> import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; <nl> <nl> import java . io . File ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> <nl> - import net . minecraft . init . Blocks ; <nl> import net . minecraft . nbt . NBTBase ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . world . storage . SaveHandler ; <nl> @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; <nl> <nl> public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer <nl> { <nl> + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; <nl> public static int clumpingThreshold = 64 ; <nl> public static boolean removeErroringEntities = false ; <nl> public static boolean removeErroringTileEntities = false ; <nl> @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static boolean forgeLightPipelineEnabled = true ; <nl> <nl> private static Configuration config ; <nl> + private static ForgeModContainer INSTANCE ; <nl> + public static ForgeModContainer getInstance ( ) <nl> + { <nl> + return INSTANCE ; <nl> + } <nl> + <nl> + private URL updateJSONUrl = null ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . name = " Minecraft Forge " ; <nl> meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> meta . credits = " Made possible with help from many people " ; <nl> - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; <nl> + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; <nl> meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + <nl> " to work cooperatively together . It allows many mods to be created without " + <nl> " them editing the main Minecraft code . " ; <nl> @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; <nl> meta . screenshots = new String [ 0 ] ; <nl> meta . logoFile = " / forge _ logo . png " ; <nl> + try { <nl> + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + } catch ( MalformedURLException e ) { } <nl> <nl> config = null ; <nl> File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; <nl> config = new Configuration ( cfgFile ) ; <nl> <nl> syncConfig ( true ) ; <nl> + <nl> + INSTANCE = this ; <nl> } <nl> <nl> @ Override <nl> @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> <nl> config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; <nl> <nl> + propOrder = new ArrayList < String > ( ) ; <nl> + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; <nl> + propOrder . add ( " Global " ) ; <nl> + <nl> + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> ForgeChunkManager . syncConfigDefaults ( ) ; <nl> ForgeChunkManager . loadConfiguration ( ) ; <nl> } <nl> + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) <nl> + { <nl> + syncConfig ( false ) ; <nl> + } <nl> } <nl> } <nl> <nl> @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; <nl> return certificates ! = null ? certificates [ 0 ] : null ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index bc5db2f . . 71d594c 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> import java . io . InputStream ; <nl> import java . net . URL ; <nl> + import java . util . ArrayList ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + import java . util . LinkedHashMap ; <nl> + import java . util . List ; <nl> import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . concurrent . ConcurrentHashMap ; <nl> + <nl> + import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . io . ByteStreams ; <nl> import com . google . gson . Gson ; <nl> <nl> - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; <nl> - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . InjectedModContainer ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . ModContainer ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion <nl> <nl> public static Status getStatus ( ) <nl> { <nl> - return status ; <nl> + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; <nl> } <nl> <nl> public static String getTarget ( ) <nl> { <nl> - return target ; <nl> + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; <nl> + return res . target ! = null ? res . target . toString ( ) : null ; <nl> } <nl> <nl> public static String getVersion ( ) <nl> @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion <nl> BETA _ OUTDATED <nl> } <nl> <nl> + public static class CheckResult <nl> + { <nl> + public final Status status ; <nl> + public final ComparableVersion target ; <nl> + public final Map < ComparableVersion , String > changes ; <nl> + public final String url ; <nl> + <nl> + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) <nl> + { <nl> + this . status = status ; <nl> + this . target = target ; <nl> + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; <nl> + this . url = url ; <nl> + } <nl> + } <nl> + <nl> public static void startVersionCheck ( ) <nl> { <nl> new Thread ( " Forge Version Check " ) <nl> { <nl> - @ SuppressWarnings ( " unchecked " ) <nl> @ Override <nl> public void run ( ) <nl> { <nl> + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; <nl> + return ; <nl> + } <nl> + <nl> + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) <nl> + { <nl> + ModContainer mod = entry . getKey ( ) ; <nl> + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) <nl> + { <nl> + process ( mod , entry . getValue ( ) ) ; <nl> + } <nl> + else <nl> + { <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + private void process ( ModContainer mod , URL url ) <nl> + { <nl> try <nl> { <nl> - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; <nl> + Status status = PENDING ; <nl> + ComparableVersion target = null ; <nl> + <nl> InputStream con = url . openStream ( ) ; <nl> String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> con . close ( ) ; <nl> <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; <nl> + <nl> + <nl> Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> - / / String homepage = ( String ) json . get ( " homepage " ) ; <nl> Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + String display _ url = ( String ) json . get ( " homepage " ) ; <nl> <nl> String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; <nl> <nl> if ( rec ! = null ) <nl> { <nl> - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + ComparableVersion recommended = new ComparableVersion ( rec ) ; <nl> int diff = recommended . compareTo ( current ) ; <nl> <nl> if ( diff = = 0 ) <nl> @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion <nl> status = AHEAD ; <nl> if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> } <nl> } <nl> else <nl> { <nl> status = OUTDATED ; <nl> - target = rec ; <nl> + target = recommended ; <nl> } <nl> } <nl> else if ( lat ! = null ) <nl> { <nl> - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + ComparableVersion latest = new ComparableVersion ( lat ) ; <nl> + if ( current . compareTo ( latest ) < 0 ) <nl> { <nl> status = BETA _ OUTDATED ; <nl> - target = lat ; <nl> + target = latest ; <nl> } <nl> else <nl> status = BETA ; <nl> } <nl> else <nl> status = BETA ; <nl> + <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; <nl> + <nl> + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; <nl> + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; <nl> + if ( tmp ! = null ) <nl> + { <nl> + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; <nl> + for ( String key : tmp . keySet ( ) ) <nl> + { <nl> + ComparableVersion ver = new ComparableVersion ( key ) ; <nl> + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) <nl> + { <nl> + ordered . add ( ver ) ; <nl> + } <nl> + } <nl> + Collections . sort ( ordered ) ; <nl> + <nl> + for ( ComparableVersion ver : ordered ) <nl> + { <nl> + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; <nl> + } <nl> + } <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> - e . printStackTrace ( ) ; <nl> + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; <nl> status = FAILED ; <nl> } <nl> } <nl> } . start ( ) ; <nl> } <nl> + <nl> + / / Gather a list of mods that have opted in to this update system by providing a URL . <nl> + / / Small hack needed to support a interface change until we force a recompile . <nl> + public static Map < ModContainer , URL > gatherMods ( ) <nl> + { <nl> + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; <nl> + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) <nl> + { <nl> + URL url = null ; <nl> + try { <nl> + url = mod . getUpdateUrl ( ) ; <nl> + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? <nl> + if ( url ! = null ) <nl> + ret . put ( mod , url ) ; <nl> + } <nl> + return ret ; <nl> + } <nl> + <nl> + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; <nl> + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; <nl> + <nl> + public static CheckResult getResult ( ModContainer mod ) <nl> + { <nl> + if ( mod instanceof InjectedModContainer ) <nl> + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; <nl> + CheckResult ret = results . get ( mod ) ; <nl> + return ret = = null ? PENDING _ CHECK : ret ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> index ba0085f . . 720e3e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java <nl> @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; <nl> import java . util . Collections ; <nl> import java . util . Comparator ; <nl> import java . util . List ; <nl> + import java . util . Map . Entry ; <nl> <nl> import javax . imageio . ImageIO ; <nl> <nl> @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . StringUtils ; <nl> import net . minecraftforge . common . ForgeHooks ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> import net . minecraftforge . fml . common . ModContainer . Disableable ; <nl> + import net . minecraftforge . fml . common . versioning . ComparableVersion ; <nl> import static net . minecraft . util . EnumChatFormatting . * ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen <nl> ResourceLocation logoPath = null ; <nl> Dimension logoDims = new Dimension ( 0 , 0 ) ; <nl> List < String > lines = new ArrayList < String > ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; <nl> <nl> String logoFile = selectedMod . getMetadata ( ) . logoFile ; <nl> if ( ! logoFile . isEmpty ( ) ) <nl> @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen <nl> else <nl> lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; <nl> <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( selectedMod . getMetadata ( ) . description ) ; <nl> @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( WHITE + selectedMod . getName ( ) ) ; <nl> lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; <nl> lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; <nl> - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) <nl> + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; <nl> <nl> lines . add ( null ) ; <nl> lines . add ( RED + " No mod information found " ) ; <nl> lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; <nl> } <nl> <nl> - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) <nl> { <nl> lines . add ( null ) ; <nl> lines . add ( " Changes : " ) ; <nl> @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen <nl> lines . add ( entry . getValue ( ) ) ; <nl> lines . add ( null ) ; <nl> } <nl> - } * / <nl> + } <nl> <nl> modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> index 1d47fea . . 90198e1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java <nl> @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; <nl> import net . minecraft . client . gui . FontRenderer ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . util . StringUtils ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . CheckResult ; <nl> import net . minecraftforge . fml . common . Loader ; <nl> import net . minecraftforge . fml . common . LoaderState . ModState ; <nl> import net . minecraftforge . fml . common . ModContainer ; <nl> @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; <nl> String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; <nl> FontRenderer font = this . parent . getFontRenderer ( ) ; <nl> - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; <nl> <nl> if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) <nl> { <nl> @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; <nl> font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; <nl> <nl> - / * switch ( vercheck . status ) / / TODO : Change to icons ? <nl> + switch ( vercheck . status ) / / TODO : Change to icons ? <nl> { <nl> case BETA _ OUTDATED : <nl> case OUTDATED : <nl> @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList <nl> case PENDING : <nl> case UP _ TO _ DATE : <nl> break ; <nl> - } * / <nl> + } <nl> } <nl> } <nl> - <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> index 88b171c . . d9e11b3 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return null ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 60ae2c6 . . 05ea505 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; <nl> import java . lang . reflect . Field ; <nl> import java . lang . reflect . Method ; <nl> import java . lang . reflect . Modifier ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . Arrays ; <nl> import java . util . List ; <nl> @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer <nl> private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> + private URL updateJSONUrl ; <nl> <nl> public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; <nl> } <nl> + <nl> + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; <nl> + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) <nl> + { <nl> + try <nl> + { <nl> + this . updateJSONUrl = new URL ( jsonURL ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; <nl> + } <nl> + } <nl> } <nl> <nl> public Properties searchForVersionProperties ( ) <nl> @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer <nl> <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return updateJSONUrl ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> index af91db1 . . 783c28b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer <nl> { <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public URL getUpdateUrl ( ) <nl> + { <nl> + return wrappedContainer . getUpdateUrl ( ) ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index a2ad320 . . 7513fdf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod <nl> * @ return The language the mod is authored in <nl> * / <nl> String modLanguage ( ) default " java " ; <nl> - <nl> + <nl> / * * <nl> * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a <nl> * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . <nl> - * <nl> + * <nl> * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and <nl> * halt loading . <nl> - * <nl> + * <nl> * @ return The full class name of the language adapter <nl> * / <nl> String modLanguageAdapter ( ) default " " ; <nl> - <nl> + <nl> / * * <nl> * NOT YET IMPLEMENTED . < / br > <nl> * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given <nl> @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod <nl> * @ return The name of a class implementing { @ link IModGuiFactory } <nl> * / <nl> String guiFactory ( ) default " " ; <nl> + <nl> + / * * <nl> + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated <nl> + * version of this mod and notify the end user . For more information see ForgeVersion . <nl> + * @ return URL to update metadata json <nl> + * / <nl> + String updateJSON ( ) default " " ; <nl> + <nl> / * * <nl> * A list of custom properties for this mod . Completely up to the mod author if / when they <nl> * want to put anything in here . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> index dde8dde . . 883f8b9 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java <nl> @ @ - 13 , 6 + 13 , 7 @ @ <nl> package net . minecraftforge . fml . common ; <nl> <nl> import java . io . File ; <nl> + import java . net . URL ; <nl> import java . security . cert . Certificate ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer <nl> List < String > getOwnedPackages ( ) ; <nl> <nl> boolean shouldLoadInEnvironment ( ) ; <nl> + <nl> + URL getUpdateUrl ( ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> index add4b37 . . f0173ca 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java <nl> @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata <nl> public String description = " " ; <nl> <nl> public String url = " " ; <nl> + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . <nl> public String updateUrl = " " ; <nl> + / * * <nl> + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 <nl> + * / <nl> + public String updateJSON = " " ; <nl> <nl> public String logoFile = " " ; <nl> public String version = " " ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / config / Configuration . java b / src / main / java / net / minecraftforge / common / config / Configuration . java 
 index 985d61c . . dc68d66 100644 
 - - - a / src / main / java / net / minecraftforge / common / config / Configuration . java 
 + + + b / src / main / java / net / minecraftforge / common / config / Configuration . java 
 @ @ - 62 , 6 + 62 , 7 @ @ import net . minecraftforge . fml . client . config . IConfigElement ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . relauncher . FMLInjectionData ; 
 + import org . apache . commons . compress . utils . IOUtils ; 
 
 / * * 
 * This class offers advanced configurations capabilities , allowing to provide 
 @ @ - 1055 , 20 + 1056 , 8 @ @ public class Configuration 
 } 
 finally 
 { 
 - if ( buffer ! = null ) 
 - { 
 - try 
 - { 
 - buffer . close ( ) ; 
 - } catch ( IOException e ) { } 
 - } 
 - if ( input ! = null ) 
 - { 
 - try 
 - { 
 - input . close ( ) ; 
 - } catch ( IOException e ) { } 
 - } 
 + IOUtils . closeQuietly ( buffer ) ; 
 + IOUtils . closeQuietly ( input ) ; 
 } 
 
 resetChangedState ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index a78247c . . 69fa05e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . client ; 
 import java . io . File ; 
 import java . io . FileInputStream ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . lang . ref . WeakReference ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 @ @ - 107 , 6 + 108 , 7 @ @ import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 import net . minecraftforge . fml . common . toposort . ModSortingException ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 @ @ - 297 , 9 + 299 , 17 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 Class < ? > optifineConfig = Class . forName ( " Config " , false , Loader . instance ( ) . getModClassLoader ( ) ) ; 
 String optifineVersion = ( String ) optifineConfig . getField ( " VERSION " ) . get ( null ) ; 
 Map < String , Object > dummyOptifineMeta = ImmutableMap . < String , Object > builder ( ) . put ( " name " , " Optifine " ) . put ( " version " , optifineVersion ) . build ( ) ; 
 - ModMetadata optifineMetadata = MetadataCollection . from ( getClass ( ) . getResourceAsStream ( " optifinemod . info " ) , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; 
 - optifineContainer = new DummyModContainer ( optifineMetadata ) ; 
 - FMLLog . info ( " Forge Mod Loader has detected optifine % s , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; 
 + InputStream optifineModInfoInputStream = getClass ( ) . getResourceAsStream ( " optifinemod . info " ) ; 
 + try 
 + { 
 + ModMetadata optifineMetadata = MetadataCollection . from ( optifineModInfoInputStream , " optifine " ) . getMetadataForId ( " optifine " , dummyOptifineMeta ) ; 
 + optifineContainer = new DummyModContainer ( optifineMetadata ) ; 
 + FMLLog . info ( " Forge Mod Loader has detected optifine % s , enabling compatibility features " , optifineContainer . getVersion ( ) ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( optifineModInfoInputStream ) ; 
 + } 
 } 
 catch ( Exception e ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index e1e19b2 . . 92a809e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 20 , 6 + 20 , 7 @ @ package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 import java . io . FileInputStream ; 
 + import java . io . InputStream ; 
 import java . lang . annotation . Annotation ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 @ @ - 53 , 6 + 54 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; 
 import net . minecraftforge . fml . common . versioning . VersionRange ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . commons . lang3 . StringUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 289 , 7 + 291 , 15 @ @ public class FMLModContainer implements ModContainer 
 if ( versionFile ! = null ) 
 { 
 version = new Properties ( ) ; 
 - version . load ( source . getInputStream ( versionFile ) ) ; 
 + InputStream sourceInputStream = source . getInputStream ( versionFile ) ; 
 + try 
 + { 
 + version . load ( sourceInputStream ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( sourceInputStream ) ; 
 + } 
 } 
 source . close ( ) ; 
 } 
 @ @ - 300 , 8 + 310 , 14 @ @ public class FMLModContainer implements ModContainer 
 { 
 version = new Properties ( ) ; 
 FileInputStream fis = new FileInputStream ( propsFile ) ; 
 - version . load ( fis ) ; 
 - fis . close ( ) ; 
 + try 
 + { 
 + version . load ( fis ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( fis ) ; 
 + } 
 } 
 } 
 return version ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index e85ff11 . . 8b482a6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 23 , 6 + 23 , 7 @ @ import java . io . File ; 
 import java . io . FileReader ; 
 import java . io . FileWriter ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . MalformedURLException ; 
 import java . util . ArrayList ; 
 import java . util . Collections ; 
 @ @ - 59 , 6 + 60 , 7 @ @ import net . minecraftforge . fml . common . versioning . VersionParser ; 
 import net . minecraftforge . fml . relauncher . ModListHelper ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . CharMatcher ; 
 @ @ - 213 , 7 + 215 , 15 @ @ public class Loader 
 } 
 
 minecraft = new MinecraftDummyContainer ( MC _ VERSION ) ; 
 - mcp = new MCPDummyContainer ( MetadataCollection . from ( getClass ( ) . getResourceAsStream ( " / mcpmod . info " ) , " MCP " ) . getMetadataForId ( " mcp " , null ) ) ; 
 + InputStream mcpModInputStream = getClass ( ) . getResourceAsStream ( " / mcpmod . info " ) ; 
 + try 
 + { 
 + mcp = new MCPDummyContainer ( MetadataCollection . from ( mcpModInputStream , " MCP " ) . getMetadataForId ( " mcp " , null ) ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( mcpModInputStream ) ; 
 + } 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java b / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java 
 index b25385b . . a461fa4 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / asm / FMLSanityChecker . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . asm ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . net . URLDecoder ; 
 import java . security . CodeSource ; 
 import java . security . cert . Certificate ; 
 @ @ - 28 , 6 + 29 , 7 @ @ import java . util . Map ; 
 import java . util . jar . JarEntry ; 
 import java . util . jar . JarFile ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 @ @ - 113 , 7 + 115 , 15 @ @ public class FMLSanityChecker implements IFMLCallHook 
 mcJarFile = new JarFile ( mcPath , true ) ; 
 mcJarFile . getManifest ( ) ; 
 JarEntry cbrEntry = mcJarFile . getJarEntry ( " net / minecraft / client / ClientBrandRetriever . class " ) ; 
 - ByteStreams . toByteArray ( mcJarFile . getInputStream ( cbrEntry ) ) ; 
 + InputStream mcJarFileInputStream = mcJarFile . getInputStream ( cbrEntry ) ; 
 + try 
 + { 
 + ByteStreams . toByteArray ( mcJarFileInputStream ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( mcJarFileInputStream ) ; 
 + } 
 Certificate [ ] certificates = cbrEntry . getCertificates ( ) ; 
 certCount = certificates ! = null ? certificates . length : 0 ; 
 if ( certificates ! = null ) 
 @ @ - 136 , 17 + 146 , 7 @ @ public class FMLSanityChecker implements IFMLCallHook 
 } 
 finally 
 { 
 - if ( mcJarFile ! = null ) 
 - { 
 - try 
 - { 
 - mcJarFile . close ( ) ; 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - / / Noise 
 - } 
 - } 
 + IOUtils . closeQuietly ( mcJarFile ) ; 
 } 
 } 
 else 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 index dab7b17 . . aa048b0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / AccessTransformer . java 
 @ @ - 45 , 6 + 45 , 7 @ @ import java . util . zip . ZipOutputStream ; 
 import net . minecraft . launchwrapper . IClassTransformer ; 
 import net . minecraftforge . fml . relauncher . FMLRelaunchLog ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . objectweb . asm . ClassReader ; 
 import org . objectweb . asm . ClassWriter ; 
 import org . objectweb . asm . tree . AbstractInsnNode ; 
 @ @ - 469 , 27 + 470 , 8 @ @ public class AccessTransformer implements IClassTransformer 
 } 
 finally 
 { 
 - if ( outJar ! = null ) 
 - { 
 - try 
 - { 
 - outJar . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - } 
 - } 
 - 
 - if ( inJar ! = null ) 
 - { 
 - try 
 - { 
 - inJar . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - } 
 - } 
 + IOUtils . closeQuietly ( outJar ) ; 
 + IOUtils . closeQuietly ( inJar ) ; 
 } 
 } 
 Multimap < String , Modifier > getModifiers ( ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java b / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java 
 index f4db8d0 . . 7be0c74 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / asm / transformers / MarkerTransformer . java 
 @ @ - 35 , 6 + 35 , 7 @ @ import java . util . zip . ZipOutputStream ; 
 
 import net . minecraft . launchwrapper . IClassTransformer ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . objectweb . asm . ClassReader ; 
 import org . objectweb . asm . ClassWriter ; 
 import org . objectweb . asm . tree . ClassNode ; 
 @ @ - 269 , 27 + 270 , 8 @ @ public class MarkerTransformer implements IClassTransformer 
 } 
 finally 
 { 
 - if ( outJar ! = null ) 
 - { 
 - try 
 - { 
 - outJar . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - } 
 - } 
 - 
 - if ( inJar ! = null ) 
 - { 
 - try 
 - { 
 - inJar . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - } 
 - } 
 + IOUtils . closeQuietly ( outJar ) ; 
 + IOUtils . closeQuietly ( inJar ) ; 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 index 0ee312f . . 3848717 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / DirectoryDiscoverer . java 
 @ @ - 33 , 6 + 33 , 7 @ @ import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModContainerFactory ; 
 import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Throwables ; 
 @ @ - 73 , 8 + 74 , 14 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer 
 try 
 { 
 FileInputStream fis = new FileInputStream ( metadata ) ; 
 - mc = MetadataCollection . from ( fis , modDir . getName ( ) ) ; 
 - fis . close ( ) ; 
 + try 
 + { 
 + mc = MetadataCollection . from ( fis , modDir . getName ( ) ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( fis ) ; 
 + } 
 FMLLog . fine ( " Found an mcmod . info file in directory % s " , modDir . getName ( ) ) ; 
 } 
 catch ( Exception e ) 
 @ @ - 101 , 11 + 108 , 11 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer 
 if ( match . matches ( ) ) 
 { 
 ASMModParser modParser = null ; 
 + FileInputStream fis = null ; 
 try 
 { 
 - FileInputStream fis = new FileInputStream ( file ) ; 
 + fis = new FileInputStream ( file ) ; 
 modParser = new ASMModParser ( fis ) ; 
 - fis . close ( ) ; 
 candidate . addClassEntry ( path + file . getName ( ) ) ; 
 } 
 catch ( LoaderException e ) 
 @ @ - 115 , 7 + 122 , 11 @ @ public class DirectoryDiscoverer implements ITypeDiscoverer 
 } 
 catch ( Exception e ) 
 { 
 - Throwables . propagate ( e ) ; 
 + throw Throwables . propagate ( e ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( fis ) ; 
 } 
 
 modParser . validate ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 index 2e4b68f . . 816cc1f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / discovery / JarDiscoverer . java 
 @ @ - 19 , 6 + 19 , 7 @ @ 
 
 package net . minecraftforge . fml . common . discovery ; 
 
 + import java . io . InputStream ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . jar . JarFile ; 
 @ @ - 30 , 6 + 31 , 7 @ @ import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModContainerFactory ; 
 import net . minecraftforge . fml . common . discovery . asm . ASMModParser ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import java . util . regex . Matcher ; 
 @ @ - 54 , 7 + 56 , 15 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 if ( modInfo ! = null ) 
 { 
 FMLLog . finer ( " Located mcmod . info file in file % s " , candidate . getModContainer ( ) . getName ( ) ) ; 
 - mc = MetadataCollection . from ( jar . getInputStream ( modInfo ) , candidate . getModContainer ( ) . getName ( ) ) ; 
 + InputStream inputStream = jar . getInputStream ( modInfo ) ; 
 + try 
 + { 
 + mc = MetadataCollection . from ( inputStream , candidate . getModContainer ( ) . getName ( ) ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( inputStream ) ; 
 + } 
 } 
 else 
 { 
 @ @ - 73 , 7 + 83 , 15 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 ASMModParser modParser ; 
 try 
 { 
 - modParser = new ASMModParser ( jar . getInputStream ( ze ) ) ; 
 + InputStream inputStream = jar . getInputStream ( ze ) ; 
 + try 
 + { 
 + modParser = new ASMModParser ( inputStream ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( inputStream ) ; 
 + } 
 candidate . addClassEntry ( ze . getName ( ) ) ; 
 } 
 catch ( LoaderException e ) 
 @ @ - 101 , 16 + 119 , 7 @ @ public class JarDiscoverer implements ITypeDiscoverer 
 } 
 finally 
 { 
 - if ( jar ! = null ) 
 - { 
 - try 
 - { 
 - jar . close ( ) ; 
 - } 
 - catch ( Exception e ) 
 - { 
 - } 
 - } 
 + IOUtils . closeQuietly ( jar ) ; 
 } 
 return foundMods ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 index ceaf763 . . 2a9b107 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / patcher / GenDiffSet . java 
 @ @ - 21 , 6 + 21 , 7 @ @ package net . minecraftforge . fml . common . patcher ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 30 , 6 + 31 , 7 @ @ import java . util . jar . JarFile ; 
 import net . minecraftforge . fml . common . asm . transformers . deobf . FMLDeobfuscatingRemapper ; 
 import net . minecraftforge . fml . repackage . com . nothome . delta . Delta ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 import org . apache . logging . log4j . LogManager ; 
 
 @ @ - 40 , 6 + 42 , 8 @ @ import com . google . common . io . ByteArrayDataOutput ; 
 import com . google . common . io . ByteStreams ; 
 import com . google . common . io . Files ; 
 
 + import javax . annotation . Nullable ; 
 + 
 public class GenDiffSet { 
 
 private static final List < String > RESERVED _ NAMES = Arrays . asList ( " CON " , " PRN " , " AUX " , " NUL " , " COM1 " , " COM2 " , " COM3 " , " COM4 " , " COM5 " , " COM6 " , " COM7 " , " COM8 " , " COM9 " , " LPT1 " , " LPT2 " , " LPT3 " , " LPT4 " , " LPT5 " , " LPT6 " , " LPT7 " , " LPT8 " , " LPT9 " ) ; 
 @ @ - 78 , 8 + 82 , 7 @ @ public class GenDiffSet { 
 String sourceClassName = name . replace ( ' / ' , ' . ' ) ; 
 String targetClassName = remapper . map ( name ) . replace ( ' / ' , ' . ' ) ; 
 JarEntry entry = sourceZip . getJarEntry ( jarName ) ; 
 - 
 - byte [ ] vanillaBytes = entry ! = null ? ByteStreams . toByteArray ( sourceZip . getInputStream ( entry ) ) : new byte [ 0 ] ; 
 + byte [ ] vanillaBytes = toByteArray ( sourceZip , entry ) ; 
 byte [ ] patchedBytes = Files . toByteArray ( targetFile ) ; 
 
 byte [ ] diff = delta . compute ( vanillaBytes , patchedBytes ) ; 
 @ @ - 117 , 4 + 120 , 21 @ @ public class GenDiffSet { 
 sourceZip . close ( ) ; 
 } 
 
 + private static byte [ ] toByteArray ( JarFile sourceZip , @ Nullable JarEntry entry ) throws IOException 
 + { 
 + if ( entry = = null ) 
 + { 
 + return new byte [ 0 ] ; 
 + } 
 + 
 + InputStream sourceZipInputStream = sourceZip . getInputStream ( entry ) ; 
 + try 
 + { 
 + return ByteStreams . toByteArray ( sourceZipInputStream ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( sourceZipInputStream ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 81fe60d . . cdfb7e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 24 , 6 + 24 , 7 @ @ import java . io . FileFilter ; 
 import java . io . FileOutputStream ; 
 import java . io . FilenameFilter ; 
 import java . io . IOException ; 
 + import java . io . InputStream ; 
 import java . lang . reflect . Method ; 
 import java . net . MalformedURLException ; 
 import java . net . URL ; 
 @ @ - 55 , 6 + 56 , 7 @ @ import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . Name ; 
 import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . SortingIndex ; 
 import net . minecraftforge . fml . relauncher . IFMLLoadingPlugin . TransformerExclusions ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Strings ; 
 @ @ - 464 , 9 + 466 , 19 @ @ public class CoreModManager { 
 try 
 { 
 Files . createParentDirs ( target ) ; 
 - FileOutputStream targ = new FileOutputStream ( target ) ; 
 - ByteStreams . copy ( jar . getInputStream ( jarEntry ) , targ ) ; 
 - targ . close ( ) ; 
 + FileOutputStream targetOutputStream = null ; 
 + InputStream jarInputStream = null ; 
 + try 
 + { 
 + targetOutputStream = new FileOutputStream ( target ) ; 
 + jarInputStream = jar . getInputStream ( jarEntry ) ; 
 + ByteStreams . copy ( jarInputStream , targetOutputStream ) ; 
 + } 
 + finally 
 + { 
 + IOUtils . closeQuietly ( targetOutputStream ) ; 
 + IOUtils . closeQuietly ( jarInputStream ) ; 
 + } 
 FMLRelaunchLog . log ( Level . DEBUG , " Extracted ContainedDep % s from % s to % s " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; 
 result . put ( dep , target ) ; 
 } catch ( IOException e ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java b / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java 
 index 77ca86c . . 6b40f80 100644 
 - - - a / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java 
 + + + b / src / main / java / net / minecraftforge / fml / repackage / com / nothome / delta / GDiffPatcher . java 
 @ @ - 19 , 6 + 19 , 8 @ @ 
 
 package net . minecraftforge . fml . repackage . com . nothome . delta ; 
 
 + import org . apache . commons . compress . utils . IOUtils ; 
 + 
 import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ INT ; 
 import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ UBYTE ; 
 import static net . minecraftforge . fml . repackage . com . nothome . delta . GDiffWriter . COPY _ INT _ USHORT ; 
 @ @ - 70 , 16 + 72 , 16 @ @ public class GDiffPatcher { 
 	 	 throws IOException 
 	 { 
 RandomAccessFileSeekableSource source = new RandomAccessFileSeekableSource ( new RandomAccessFile ( sourceFile , " r " ) ) ; 
 - InputStream patch = new FileInputStream ( patchFile ) ; 
 - OutputStream output = new FileOutputStream ( outputFile ) ; 
 + InputStream patch = null ; 
 + OutputStream output = null ; 
 try { 
 + patch = new FileInputStream ( patchFile ) ; 
 + output = new FileOutputStream ( outputFile ) ; 
 patch ( source , patch , output ) ; 
 - } catch ( IOException e ) { 
 - throw e ; 
 } finally { 
 - source . close ( ) ; 
 - patch . close ( ) ; 
 - output . close ( ) ; 
 + IOUtils . closeQuietly ( source ) ; 
 + IOUtils . closeQuietly ( patch ) ; 
 + IOUtils . closeQuietly ( output ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index fa4f6a5 . . 05c00ea 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 260 , 15 + 260 , 7 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 finally 
 { 
 IOUtils . closeQuietly ( stream ) ; 
 - try 
 - { 
 - if ( zip ! = null ) 
 - zip . close ( ) ; 
 - } 
 - catch ( IOException e ) 
 - { 
 - / / shush 
 - } 
 + IOUtils . closeQuietly ( zip ) ; 
 } 
 } 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 index 1f3e186 . . fcfee4e 100644 
 - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 @ @ - 6 , 42 + 6 , 38 @ @ 
 package net . minecraftforge . client . gui ; 
 
 import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . TreeMap ; 
 - import java . util . regex . Pattern ; 
 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . client . gui . GuiScreen ; 
 - import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . resources . I18n ; 
 import net . minecraftforge . common . ForgeChunkManager ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . config . ConfigCategory ; 
 import net . minecraftforge . common . config . ConfigElement ; 
 import net . minecraftforge . common . config . Configuration ; 
 import net . minecraftforge . common . config . Property ; 
 import net . minecraftforge . fml . client . IModGuiFactory ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionCategoryElement ; 
 - import net . minecraftforge . fml . client . IModGuiFactory . RuntimeOptionGuiHandler ; 
 import net . minecraftforge . fml . client . config . ConfigGuiType ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement ; 
 import net . minecraftforge . fml . client . config . DummyConfigElement . DummyCategoryElement ; 
 - import net . minecraftforge . fml . client . config . GuiButtonExt ; 
 import net . minecraftforge . fml . client . config . GuiConfig ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . CategoryEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . IConfigEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . SelectValueEntry ; 
 import net . minecraftforge . fml . client . config . GuiConfigEntries . BooleanEntry ; 
 - import net . minecraftforge . fml . client . config . HoverChecker ; 
 import net . minecraftforge . fml . client . config . IConfigElement ; 
 - import net . minecraftforge . fml . client . config . GuiConfigEntries . ListEntryBase ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - import net . minecraftforge . fml . relauncher . SideOnly ; 
 + import static net . minecraftforge . common . ForgeModContainer . VERSION _ CHECK _ CAT ; 
 
 / * * 
 * This is the base GuiConfig screen class that all the other Forge - specific config screens will be called from . 
 @ @ - 109 , 6 + 105 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 list . add ( new DummyCategoryElement ( " forgeCfg " , " forge . configgui . ctgy . forgeGeneralConfig " , GeneralEntry . class ) ) ; 
 list . add ( new DummyCategoryElement ( " forgeChunkLoadingCfg " , " forge . configgui . ctgy . forgeChunkLoadingConfig " , ChunkLoaderEntry . class ) ) ; 
 + list . add ( new DummyCategoryElement ( " forgeVersionCheckCfg " , " forge . configgui . ctgy . VersionCheckConfig " , VersionCheckEntry . class ) ) ; 
 return list ; 
 } 
 
 @ @ - 167 , 6 + 164 , 59 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 } 
 
 / * * 
 + * This custom list entry provides the Forge Version Checking Config entry on the Minecraft Forge Configuration screen . 
 + * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 + * / 
 + public static class VersionCheckEntry extends CategoryEntry 
 + { 
 + public VersionCheckEntry ( GuiConfig owningScreen , GuiConfigEntries owningEntryList , IConfigElement prop ) 
 + { 
 + super ( owningScreen , owningEntryList , prop ) ; 
 + } 
 + 
 + @ Override 
 + protected GuiScreen buildChildScreen ( ) 
 + { 
 + ConfigCategory cfg = ForgeModContainer . getConfig ( ) . getCategory ( VERSION _ CHECK _ CAT ) ; 
 + Map < String , Property > values = new HashMap < String , Property > ( cfg . getValues ( ) ) ; 
 + values . remove ( " Global " ) ; 
 + 
 + Property global = ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , " Global " , true ) ; 
 + 
 + List < Property > props = new ArrayList < Property > ( ) ; 
 + 
 + for ( ModContainer mod : ForgeVersion . gatherMods ( ) . keySet ( ) ) 
 + { 
 + values . remove ( mod . getModId ( ) ) ; 
 + props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config 
 + } 
 + props . addAll ( values . values ( ) ) ; / / Add any left overs from the config 
 + Collections . sort ( props , new Comparator < Property > ( ) 
 + { 
 + @ Override 
 + public int compare ( Property o1 , Property o2 ) 
 + { 
 + return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; 
 + } 
 + } ) ; 
 + 
 + List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 + list . add ( new ConfigElement ( global ) ) ; 
 + for ( Property prop : props ) 
 + { 
 + list . add ( new ConfigElement ( prop ) ) ; 
 + } 
 + 
 + / / This GuiConfig object specifies the configID of the object and as such will force - save when it is closed . The parent 
 + / / GuiConfig object ' s propertyList will also be refreshed to reflect the changes . 
 + return new GuiConfig ( this . owningScreen , 
 + list , 
 + this . owningScreen . modID , VERSION _ CHECK _ CAT , true , true , 
 + GuiConfig . getAbridgedConfigPath ( ForgeModContainer . getConfig ( ) . toString ( ) ) ) ; 
 + } 
 + } 
 + 
 + / * * 
 * This custom list entry provides the Mod Overrides entry on the Forge Chunk Loading config screen . 
 * It extends the base Category entry class and defines the IConfigElement objects that will be used to build the child screen . 
 * In this case it adds the custom entry for adding a new mod override and lists the existing mod overrides . 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 7105295 . . 3805d49 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 12 , 13 + 12 , 14 @ @ import static net . minecraftforge . common . ForgeVersion . revisionVersion ; 
 import static net . minecraftforge . common . config . Configuration . CATEGORY _ GENERAL ; 
 
 import java . io . File ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 import java . util . Map ; 
 
 - import net . minecraft . init . Blocks ; 
 import net . minecraft . nbt . NBTBase ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . world . storage . SaveHandler ; 
 @ @ - 58 , 6 + 59 , 7 @ @ import net . minecraftforge . fml . common . network . NetworkRegistry ; 
 
 public class ForgeModContainer extends DummyModContainer implements WorldAccessContainer 
 { 
 + public static final String VERSION _ CHECK _ CAT = " version _ checking " ; 
 public static int clumpingThreshold = 64 ; 
 public static boolean removeErroringEntities = false ; 
 public static boolean removeErroringTileEntities = false ; 
 @ @ - 73 , 6 + 75 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static boolean forgeLightPipelineEnabled = true ; 
 
 private static Configuration config ; 
 + private static ForgeModContainer INSTANCE ; 
 + public static ForgeModContainer getInstance ( ) 
 + { 
 + return INSTANCE ; 
 + } 
 + 
 + private URL updateJSONUrl = null ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 82 , 7 + 91 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . name = " Minecraft Forge " ; 
 meta . version = String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 meta . credits = " Made possible with help from many people " ; 
 - meta . authorList = Arrays . asList ( " LexManos " , " Eloraam " , " Spacetoad " ) ; 
 + meta . authorList = Arrays . asList ( " LexManos " , " Cpw " ) ; 
 meta . description = " Minecraft Forge is a common open source API allowing a broad range of mods " + 
 " to work cooperatively together . It allows many mods to be created without " + 
 " them editing the main Minecraft code . " ; 
 @ @ - 90 , 12 + 99 , 17 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 meta . updateUrl = " http : / / MinecraftForge . net / forum / index . php / topic , 5 . 0 . html " ; 
 meta . screenshots = new String [ 0 ] ; 
 meta . logoFile = " / forge _ logo . png " ; 
 + try { 
 + updateJSONUrl = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + } catch ( MalformedURLException e ) { } 
 
 config = null ; 
 File cfgFile = new File ( Loader . instance ( ) . getConfigDir ( ) , " forge . cfg " ) ; 
 config = new Configuration ( cfgFile ) ; 
 
 syncConfig ( true ) ; 
 + 
 + INSTANCE = this ; 
 } 
 
 @ Override 
 @ @ - 230 , 6 + 244 , 12 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 
 config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; 
 
 + propOrder = new ArrayList < String > ( ) ; 
 + prop = config . get ( VERSION _ CHECK _ CAT , " Global " , true , " Enable the entire mod update check system . This only applies to mods using the Forge system . " ) ; 
 + propOrder . add ( " Global " ) ; 
 + 
 + config . setCategoryPropertyOrder ( VERSION _ CHECK _ CAT , propOrder ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 @ @ - 254 , 6 + 274 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 ForgeChunkManager . syncConfigDefaults ( ) ; 
 ForgeChunkManager . loadConfiguration ( ) ; 
 } 
 + else if ( VERSION _ CHECK _ CAT . equals ( event . configID ) ) 
 + { 
 + syncConfig ( false ) ; 
 + } 
 } 
 } 
 
 @ @ - 396 , 4 + 420 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 Certificate [ ] certificates = getClass ( ) . getProtectionDomain ( ) . getCodeSource ( ) . getCertificates ( ) ; 
 return certificates ! = null ? certificates [ 0 ] : null ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index bc5db2f . . 71d594c 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 8 , 13 + 8 , 25 @ @ import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 import java . io . InputStream ; 
 import java . net . URL ; 
 + import java . util . ArrayList ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + import java . util . LinkedHashMap ; 
 + import java . util . List ; 
 import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . concurrent . ConcurrentHashMap ; 
 + 
 + import org . apache . logging . log4j . Level ; 
 
 import com . google . common . io . ByteStreams ; 
 import com . google . gson . Gson ; 
 
 - import net . minecraftforge . fml . common . versioning . ArtifactVersion ; 
 - import net . minecraftforge . fml . common . versioning . DefaultArtifactVersion ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . InjectedModContainer ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . ModContainer ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 55 , 12 + 67 , 13 @ @ public class ForgeVersion 
 
 public static Status getStatus ( ) 
 { 
 - return status ; 
 + return getResult ( ForgeModContainer . getInstance ( ) ) . status ; 
 } 
 
 public static String getTarget ( ) 
 { 
 - return target ; 
 + CheckResult res = getResult ( ForgeModContainer . getInstance ( ) ) ; 
 + return res . target ! = null ? res . target . toString ( ) : null ; 
 } 
 
 public static String getVersion ( ) 
 @ @ - 79 , 32 + 92 , 75 @ @ public class ForgeVersion 
 BETA _ OUTDATED 
 } 
 
 + public static class CheckResult 
 + { 
 + public final Status status ; 
 + public final ComparableVersion target ; 
 + public final Map < ComparableVersion , String > changes ; 
 + public final String url ; 
 + 
 + private CheckResult ( Status status , ComparableVersion target , Map < ComparableVersion , String > changes , String url ) 
 + { 
 + this . status = status ; 
 + this . target = target ; 
 + this . changes = changes = = null ? null : Collections . unmodifiableMap ( changes ) ; 
 + this . url = url ; 
 + } 
 + } 
 + 
 public static void startVersionCheck ( ) 
 { 
 new Thread ( " Forge Version Check " ) 
 { 
 - @ SuppressWarnings ( " unchecked " ) 
 @ Override 
 public void run ( ) 
 { 
 + if ( ! ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , " Global " , true ) . getBoolean ( ) ) 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " Global Forge version check system disabeld , no futher processing . " ) ; 
 + return ; 
 + } 
 + 
 + for ( Entry < ModContainer , URL > entry : gatherMods ( ) . entrySet ( ) ) 
 + { 
 + ModContainer mod = entry . getKey ( ) ; 
 + if ( ForgeModContainer . getConfig ( ) . get ( ForgeModContainer . VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) . getBoolean ( ) ) 
 + { 
 + process ( mod , entry . getValue ( ) ) ; 
 + } 
 + else 
 + { 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Skipped version check " , mod . getModId ( ) ) ; 
 + } 
 + } 
 + } 
 + 
 + private void process ( ModContainer mod , URL url ) 
 + { 
 try 
 { 
 - URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Starting version check at % s " , mod . getModId ( ) , url . toString ( ) ) ; 
 + Status status = PENDING ; 
 + ComparableVersion target = null ; 
 + 
 InputStream con = url . openStream ( ) ; 
 String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 con . close ( ) ; 
 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , " [ % s ] Received version check data : \ n % s " , mod . getModId ( ) , data ) ; 
 + 
 + 
 Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 - / / String homepage = ( String ) json . get ( " homepage " ) ; 
 Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + String display _ url = ( String ) json . get ( " homepage " ) ; 
 
 String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 - ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + ComparableVersion current = new ComparableVersion ( mod . getVersion ( ) ) ; 
 
 if ( rec ! = null ) 
 { 
 - ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + ComparableVersion recommended = new ComparableVersion ( rec ) ; 
 int diff = recommended . compareTo ( current ) ; 
 
 if ( diff = = 0 ) 
 @ @ - 114 , 39 + 170 , 95 @ @ public class ForgeVersion 
 status = AHEAD ; 
 if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 } 
 } 
 else 
 { 
 status = OUTDATED ; 
 - target = rec ; 
 + target = recommended ; 
 } 
 } 
 else if ( lat ! = null ) 
 { 
 - if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + ComparableVersion latest = new ComparableVersion ( lat ) ; 
 + if ( current . compareTo ( latest ) < 0 ) 
 { 
 status = BETA _ OUTDATED ; 
 - target = lat ; 
 + target = latest ; 
 } 
 else 
 status = BETA ; 
 } 
 else 
 status = BETA ; 
 + 
 + FMLLog . log ( " ForgeVersionCheck " , Level . INFO , " [ % s ] Found status : % s Target : % s " , mod . getModId ( ) , status , target ) ; 
 + 
 + Map < ComparableVersion , String > changes = new LinkedHashMap < ComparableVersion , String > ( ) ; 
 + Map < String , String > tmp = ( Map < String , String > ) json . get ( MinecraftForge . MC _ VERSION ) ; 
 + if ( tmp ! = null ) 
 + { 
 + List < ComparableVersion > ordered = new ArrayList < ComparableVersion > ( ) ; 
 + for ( String key : tmp . keySet ( ) ) 
 + { 
 + ComparableVersion ver = new ComparableVersion ( key ) ; 
 + if ( ver . compareTo ( current ) > 0 & & ( target = = null | | ver . compareTo ( target ) < 1 ) ) 
 + { 
 + ordered . add ( ver ) ; 
 + } 
 + } 
 + Collections . sort ( ordered ) ; 
 + 
 + for ( ComparableVersion ver : ordered ) 
 + { 
 + changes . put ( ver , tmp . get ( ver . toString ( ) ) ) ; 
 + } 
 + } 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + results . put ( mod , new CheckResult ( status , target , changes , display _ url ) ) ; 
 } 
 catch ( Exception e ) 
 { 
 - e . printStackTrace ( ) ; 
 + FMLLog . log ( " ForgeVersionCheck " , Level . DEBUG , e , " Failed to process update information " ) ; 
 status = FAILED ; 
 } 
 } 
 } . start ( ) ; 
 } 
 + 
 + / / Gather a list of mods that have opted in to this update system by providing a URL . 
 + / / Small hack needed to support a interface change until we force a recompile . 
 + public static Map < ModContainer , URL > gatherMods ( ) 
 + { 
 + Map < ModContainer , URL > ret = new HashMap < ModContainer , URL > ( ) ; 
 + for ( ModContainer mod : Loader . instance ( ) . getActiveModList ( ) ) 
 + { 
 + URL url = null ; 
 + try { 
 + url = mod . getUpdateUrl ( ) ; 
 + } catch ( AbstractMethodError abs ) { } / / TODO : Remove this in 1 . 8 . 8 + ? 
 + if ( url ! = null ) 
 + ret . put ( mod , url ) ; 
 + } 
 + return ret ; 
 + } 
 + 
 + private static Map < ModContainer , CheckResult > results = new ConcurrentHashMap < ModContainer , CheckResult > ( ) ; 
 + private static final CheckResult PENDING _ CHECK = new CheckResult ( PENDING , null , null , null ) ; 
 + 
 + public static CheckResult getResult ( ModContainer mod ) 
 + { 
 + if ( mod instanceof InjectedModContainer ) 
 + mod = ( ( InjectedModContainer ) mod ) . wrappedContainer ; 
 + CheckResult ret = results . get ( mod ) ; 
 + return ret = = null ? PENDING _ CHECK : ret ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiModList . java b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 index ba0085f . . 720e3e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiModList . java 
 @ @ - 22 , 6 + 22 , 7 @ @ import java . util . ArrayList ; 
 import java . util . Collections ; 
 import java . util . Comparator ; 
 import java . util . List ; 
 + import java . util . Map . Entry ; 
 
 import javax . imageio . ImageIO ; 
 
 @ @ - 43 , 10 + 44 , 14 @ @ import net . minecraft . util . IChatComponent ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . StringUtils ; 
 import net . minecraftforge . common . ForgeHooks ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 import net . minecraftforge . fml . common . ModContainer . Disableable ; 
 + import net . minecraftforge . fml . common . versioning . ComparableVersion ; 
 import static net . minecraft . util . EnumChatFormatting . * ; 
 
 import org . apache . logging . log4j . Level ; 
 @ @ - 343 , 7 + 348 , 7 @ @ public class GuiModList extends GuiScreen 
 ResourceLocation logoPath = null ; 
 Dimension logoDims = new Dimension ( 0 , 0 ) ; 
 List < String > lines = new ArrayList < String > ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( selectedMod ) ; 
 
 String logoFile = selectedMod . getMetadata ( ) . logoFile ; 
 if ( ! logoFile . isEmpty ( ) ) 
 @ @ - 408 , 8 + 413 , 8 @ @ public class GuiModList extends GuiScreen 
 else 
 lines . add ( " Child mods : " + selectedMod . getMetadata ( ) . getChildModList ( ) ) ; 
 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( selectedMod . getMetadata ( ) . description ) ; 
 @ @ - 419 , 15 + 424 , 15 @ @ public class GuiModList extends GuiScreen 
 lines . add ( WHITE + selectedMod . getName ( ) ) ; 
 lines . add ( WHITE + " Version : " + selectedMod . getVersion ( ) ) ; 
 lines . add ( WHITE + " Mod State : " + Loader . instance ( ) . getModState ( selectedMod ) ) ; 
 - / / if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 - / / lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 + if ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) 
 + lines . add ( " Update Avalible : " + ( vercheck . url = = null ? " " : vercheck . url ) ) ; 
 
 lines . add ( null ) ; 
 lines . add ( RED + " No mod information found " ) ; 
 lines . add ( RED + " Ask your mod author to provide a mod mcmod . info file " ) ; 
 } 
 
 - / * if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 + if ( ( vercheck . status = = Status . OUTDATED | | vercheck . status = = Status . BETA _ OUTDATED ) & & vercheck . changes . size ( ) > 0 ) 
 { 
 lines . add ( null ) ; 
 lines . add ( " Changes : " ) ; 
 @ @ - 437 , 7 + 442 , 7 @ @ public class GuiModList extends GuiScreen 
 lines . add ( entry . getValue ( ) ) ; 
 lines . add ( null ) ; 
 } 
 - } * / 
 + } 
 
 modInfo = new Info ( this . width - this . listWidth - 30 , lines , logoPath , logoDims ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 index 1d47fea . . 90198e1 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / GuiSlotModList . java 
 @ @ - 17 , 6 + 17 , 8 @ @ import java . util . ArrayList ; 
 import net . minecraft . client . gui . FontRenderer ; 
 import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . util . StringUtils ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . CheckResult ; 
 import net . minecraftforge . fml . common . Loader ; 
 import net . minecraftforge . fml . common . LoaderState . ModState ; 
 import net . minecraftforge . fml . common . ModContainer ; 
 @ @ - 79 , 7 + 81 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 String name = StringUtils . stripControlCodes ( mc . getName ( ) ) ; 
 String version = StringUtils . stripControlCodes ( mc . getDisplayVersion ( ) ) ; 
 FontRenderer font = this . parent . getFontRenderer ( ) ; 
 - / / CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 + CheckResult vercheck = ForgeVersion . getResult ( mc ) ; 
 
 if ( Loader . instance ( ) . getModState ( mc ) = = ModState . DISABLED ) 
 { 
 @ @ - 93 , 7 + 95 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 font . drawString ( font . trimStringToWidth ( version , listWidth - 10 ) , this . left + 3 , top + 12 , 0xCCCCCC ) ; 
 font . drawString ( font . trimStringToWidth ( mc . getMetadata ( ) ! = null ? mc . getMetadata ( ) . getChildModCountString ( ) : " Metadata not found " , listWidth - 10 ) , this . left + 3 , top + 22 , 0xCCCCCC ) ; 
 
 - / * switch ( vercheck . status ) / / TODO : Change to icons ? 
 + switch ( vercheck . status ) / / TODO : Change to icons ? 
 { 
 case BETA _ OUTDATED : 
 case OUTDATED : 
 @ @ - 105 , 8 + 107 , 7 @ @ public class GuiSlotModList extends GuiScrollingList 
 case PENDING : 
 case UP _ TO _ DATE : 
 break ; 
 - } * / 
 + } 
 } 
 } 
 - 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 index 88b171c . . d9e11b3 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / DummyModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Collections ; 
 import java . util . List ; 
 @ @ - 206 , 4 + 207 , 10 @ @ public class DummyModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return null ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 60ae2c6 . . 05ea505 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 18 , 6 + 18 , 8 @ @ import java . lang . annotation . Annotation ; 
 import java . lang . reflect . Field ; 
 import java . lang . reflect . Method ; 
 import java . lang . reflect . Modifier ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . Arrays ; 
 import java . util . List ; 
 @ @ - 87 , 6 + 89 , 7 @ @ public class FMLModContainer implements ModContainer 
 private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 + private URL updateJSONUrl ; 
 
 public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 @ @ - 215 , 6 + 218 , 19 @ @ public class FMLModContainer implements ModContainer 
 { 
 minecraftAccepted = Loader . instance ( ) . getMinecraftModContainer ( ) . getStaticVersionRange ( ) ; 
 } 
 + 
 + String jsonURL = ( String ) descriptor . get ( " updateJSON " ) ; 
 + if ( ! Strings . isNullOrEmpty ( jsonURL ) ) 
 + { 
 + try 
 + { 
 + this . updateJSONUrl = new URL ( jsonURL ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + FMLLog . log ( getModId ( ) , Level . DEBUG , " Specified json URL invalid : % s " , jsonURL ) ; 
 + } 
 + } 
 } 
 
 public Properties searchForVersionProperties ( ) 
 @ @ - 663 , 4 + 679 , 10 @ @ public class FMLModContainer implements ModContainer 
 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return updateJSONUrl ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 index af91db1 . . 783c28b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / InjectedModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 207 , 4 + 208 , 10 @ @ public class InjectedModContainer implements ModContainer 
 { 
 return true ; 
 } 
 + 
 + @ Override 
 + public URL getUpdateUrl ( ) 
 + { 
 + return wrappedContainer . getUpdateUrl ( ) ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index a2ad320 . . 7513fdf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 157 , 18 + 157 , 18 @ @ public @ interface Mod 
 * @ return The language the mod is authored in 
 * / 
 String modLanguage ( ) default " java " ; 
 - 
 + 
 / * * 
 * The language adapter to be used to load this mod . This overrides the value of modLanguage . The class must have a 
 * public zero variable constructor and implement { @ link ILanguageAdapter } just like the Java and Scala adapters . 
 - * 
 + * 
 * A class with an invalid constructor or that doesn ' t implement { @ link ILanguageAdapter } will throw an exception and 
 * halt loading . 
 - * 
 + * 
 * @ return The full class name of the language adapter 
 * / 
 String modLanguageAdapter ( ) default " " ; 
 - 
 + 
 / * * 
 * NOT YET IMPLEMENTED . < / br > 
 * An optional ASM hook class , that can be used to apply ASM to classes loaded from this mod . It is also given 
 @ @ - 198 , 6 + 198 , 14 @ @ public @ interface Mod 
 * @ return The name of a class implementing { @ link IModGuiFactory } 
 * / 
 String guiFactory ( ) default " " ; 
 + 
 + / * * 
 + * An optional URL to a JSON file that will be checked once per launch to determine if there is an updated 
 + * version of this mod and notify the end user . For more information see ForgeVersion . 
 + * @ return URL to update metadata json 
 + * / 
 + String updateJSON ( ) default " " ; 
 + 
 / * * 
 * A list of custom properties for this mod . Completely up to the mod author if / when they 
 * want to put anything in here . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModContainer . java b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 index dde8dde . . 883f8b9 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModContainer . java 
 @ @ - 13 , 6 + 13 , 7 @ @ 
 package net . minecraftforge . fml . common ; 
 
 import java . io . File ; 
 + import java . net . URL ; 
 import java . security . cert . Certificate ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 149 , 4 + 150 , 6 @ @ public interface ModContainer 
 List < String > getOwnedPackages ( ) ; 
 
 boolean shouldLoadInEnvironment ( ) ; 
 + 
 + URL getUpdateUrl ( ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 index add4b37 . . f0173ca 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ModMetadata . java 
 @ @ - 35 , 7 + 35 , 12 @ @ public class ModMetadata 
 public String description = " " ; 
 
 public String url = " " ; 
 + @ Deprecated / / Never really used for anything and format is undefined . See updateJSON for replacement . 
 public String updateUrl = " " ; 
 + / * * 
 + * URL to update json file . Format is defined here : https : / / gist . github . com / LexManos / 7aacb9aa991330523884 
 + * / 
 + public String updateJSON = " " ; 
 
 public String logoFile = " " ; 
 public String version = " " ;
