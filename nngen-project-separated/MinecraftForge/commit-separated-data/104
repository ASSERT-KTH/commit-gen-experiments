BLEU SCORE: 0.02133165846478451

TEST MSG: Properly set context classloader in mod loading threads .
GENERATED MSG: Improve error message on server when a vanilla client connects

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java <nl> index 8c9af83 . . 396e441 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModList . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModList . java <nl> @ @ - 34 , 6 + 34 , 7 @ @ import java . util . Objects ; <nl> import java . util . Optional ; <nl> import java . util . concurrent . ExecutionException ; <nl> import java . util . concurrent . ForkJoinPool ; <nl> + import java . util . concurrent . ForkJoinWorkerThread ; <nl> import java . util . concurrent . FutureTask ; <nl> import java . util . function . BiConsumer ; <nl> import java . util . function . Consumer ; <nl> @ @ - 55 , 7 + 56 , 14 @ @ public class ModList <nl> private final Map < String , ModFileInfo > fileById ; <nl> private List < ModContainer > mods ; <nl> private Map < String , ModContainer > indexedMods ; <nl> - private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( ) ; <nl> + private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , pool - > <nl> + { <nl> + ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; <nl> + thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; <nl> + / / The default sets it to the SystemClassloader , so copy the current one . <nl> + thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; <nl> + return thread ; <nl> + } , null , false ) ; <nl> private List < ModFileScanData > modFileScanData ; <nl> <nl> private ModList ( final List < ModFile > modFiles , final List < ModInfo > sortedList ) <nl> @ @ - 131 , 7 + 139 , 7 @ @ public class ModList <nl> { <nl> return Optional . ofNullable ( this . indexedMods . get ( modId ) ) ; <nl> } <nl> - <nl> + <nl> public Optional < ? extends ModContainer > getModContainerByObject ( Object obj ) <nl> { <nl> return mods . stream ( ) . filter ( mc - > mc . getMod ( ) = = obj ) . findFirst ( ) ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> index 1be0b02 . . 99f4725 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java <nl> @ @ - 26 , 6 + 26 , 7 @ @ import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . lang . ref . WeakReference ; <nl> import java . nio . charset . StandardCharsets ; <nl> + import java . util . Collection ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 635 , 8 + 636 , 9 @ @ public class FMLCommonHandler <nl> if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN & & ( ! NetworkRegistry . INSTANCE . isVanillaAccepted ( Side . CLIENT ) & & ! packet . hasFMLMarker ( ) ) ) <nl> { <nl> manager . setConnectionState ( EnumConnectionState . LOGIN ) ; <nl> - TextComponentString text = new TextComponentString ( " This server requires FML / Forge to be installed . Contact your server admin for more details . " ) ; <nl> - FMLLog . log . info ( " Disconnecting Player : { } " , text . getUnformattedText ( ) ) ; <nl> + TextComponentString text = new TextComponentString ( " This server has mods that require FML / Forge to be installed on the client . Contact your server admin for more details . " ) ; <nl> + Collection < String > modNames = NetworkRegistry . INSTANCE . getRequiredMods ( Side . CLIENT ) ; <nl> + FMLLog . log . info ( " Disconnecting Player : This server has mods that require FML / Forge to be installed on the client : { } " , modNames ) ; <nl> manager . sendPacket ( new SPacketDisconnect ( text ) ) ; <nl> manager . closeChannel ( text ) ; <nl> return false ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> index 53aeed7 . . 4d658b0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java <nl> @ @ - 24 , 10 + 24 , 12 @ @ import io . netty . channel . ChannelHandlerContext ; <nl> import io . netty . handler . codec . MessageToMessageCodec ; <nl> import io . netty . util . AttributeKey ; <nl> <nl> + import java . util . Collection ; <nl> import java . util . EnumMap ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> @ @ - 304 , 13 + 306 , 19 @ @ public enum NetworkRegistry <nl> <nl> public boolean isVanillaAccepted ( Side from ) <nl> { <nl> - boolean result = true ; <nl> - for ( Entry < ModContainer , NetworkModHolder > e : registry . entrySet ( ) ) <nl> - { <nl> - result & = e . getValue ( ) . acceptsVanilla ( from ) ; <nl> - } <nl> - return result ; <nl> + return registry . values ( ) . stream ( ) <nl> + . allMatch ( mod - > mod . acceptsVanilla ( from ) ) ; <nl> } <nl> + <nl> + public Collection < String > getRequiredMods ( Side from ) <nl> + { <nl> + return registry . values ( ) . stream ( ) <nl> + . filter ( mod - > ! mod . acceptsVanilla ( from ) ) <nl> + . map ( mod - > mod . getContainer ( ) . getName ( ) ) <nl> + . sorted ( ) <nl> + . collect ( Collectors . toList ( ) ) ; <nl> + } <nl> + <nl> public Map < ModContainer , NetworkModHolder > registry ( ) <nl> { <nl> return ImmutableMap . copyOf ( registry ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / ModList . java b / src / main / java / net / minecraftforge / fml / ModList . java 
 index 8c9af83 . . 396e441 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModList . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModList . java 
 @ @ - 34 , 6 + 34 , 7 @ @ import java . util . Objects ; 
 import java . util . Optional ; 
 import java . util . concurrent . ExecutionException ; 
 import java . util . concurrent . ForkJoinPool ; 
 + import java . util . concurrent . ForkJoinWorkerThread ; 
 import java . util . concurrent . FutureTask ; 
 import java . util . function . BiConsumer ; 
 import java . util . function . Consumer ; 
 @ @ - 55 , 7 + 56 , 14 @ @ public class ModList 
 private final Map < String , ModFileInfo > fileById ; 
 private List < ModContainer > mods ; 
 private Map < String , ModContainer > indexedMods ; 
 - private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( ) ; 
 + private ForkJoinPool modLoadingThreadPool = new ForkJoinPool ( Runtime . getRuntime ( ) . availableProcessors ( ) , pool - > 
 + { 
 + ForkJoinWorkerThread thread = ForkJoinPool . defaultForkJoinWorkerThreadFactory . newThread ( pool ) ; 
 + thread . setName ( " modloading - worker - " + thread . getPoolIndex ( ) ) ; 
 + / / The default sets it to the SystemClassloader , so copy the current one . 
 + thread . setContextClassLoader ( Thread . currentThread ( ) . getContextClassLoader ( ) ) ; 
 + return thread ; 
 + } , null , false ) ; 
 private List < ModFileScanData > modFileScanData ; 
 
 private ModList ( final List < ModFile > modFiles , final List < ModInfo > sortedList ) 
 @ @ - 131 , 7 + 139 , 7 @ @ public class ModList 
 { 
 return Optional . ofNullable ( this . indexedMods . get ( modId ) ) ; 
 } 
 - 
 + 
 public Optional < ? extends ModContainer > getModContainerByObject ( Object obj ) 
 { 
 return mods . stream ( ) . filter ( mc - > mc . getMod ( ) = = obj ) . findFirst ( ) ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 index 1be0b02 . . 99f4725 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLCommonHandler . java 
 @ @ - 26 , 6 + 26 , 7 @ @ import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . lang . ref . WeakReference ; 
 import java . nio . charset . StandardCharsets ; 
 + import java . util . Collection ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 635 , 8 + 636 , 9 @ @ public class FMLCommonHandler 
 if ( packet . getRequestedState ( ) = = EnumConnectionState . LOGIN & & ( ! NetworkRegistry . INSTANCE . isVanillaAccepted ( Side . CLIENT ) & & ! packet . hasFMLMarker ( ) ) ) 
 { 
 manager . setConnectionState ( EnumConnectionState . LOGIN ) ; 
 - TextComponentString text = new TextComponentString ( " This server requires FML / Forge to be installed . Contact your server admin for more details . " ) ; 
 - FMLLog . log . info ( " Disconnecting Player : { } " , text . getUnformattedText ( ) ) ; 
 + TextComponentString text = new TextComponentString ( " This server has mods that require FML / Forge to be installed on the client . Contact your server admin for more details . " ) ; 
 + Collection < String > modNames = NetworkRegistry . INSTANCE . getRequiredMods ( Side . CLIENT ) ; 
 + FMLLog . log . info ( " Disconnecting Player : This server has mods that require FML / Forge to be installed on the client : { } " , modNames ) ; 
 manager . sendPacket ( new SPacketDisconnect ( text ) ) ; 
 manager . closeChannel ( text ) ; 
 return false ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 index 53aeed7 . . 4d658b0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / NetworkRegistry . java 
 @ @ - 24 , 10 + 24 , 12 @ @ import io . netty . channel . ChannelHandlerContext ; 
 import io . netty . handler . codec . MessageToMessageCodec ; 
 import io . netty . util . AttributeKey ; 
 
 + import java . util . Collection ; 
 import java . util . EnumMap ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 + import java . util . stream . Collectors ; 
 
 import org . apache . logging . log4j . Level ; 
 
 @ @ - 304 , 13 + 306 , 19 @ @ public enum NetworkRegistry 
 
 public boolean isVanillaAccepted ( Side from ) 
 { 
 - boolean result = true ; 
 - for ( Entry < ModContainer , NetworkModHolder > e : registry . entrySet ( ) ) 
 - { 
 - result & = e . getValue ( ) . acceptsVanilla ( from ) ; 
 - } 
 - return result ; 
 + return registry . values ( ) . stream ( ) 
 + . allMatch ( mod - > mod . acceptsVanilla ( from ) ) ; 
 } 
 + 
 + public Collection < String > getRequiredMods ( Side from ) 
 + { 
 + return registry . values ( ) . stream ( ) 
 + . filter ( mod - > ! mod . acceptsVanilla ( from ) ) 
 + . map ( mod - > mod . getContainer ( ) . getName ( ) ) 
 + . sorted ( ) 
 + . collect ( Collectors . toList ( ) ) ; 
 + } 
 + 
 public Map < ModContainer , NetworkModHolder > registry ( ) 
 { 
 return ImmutableMap . copyOf ( registry ) ;
