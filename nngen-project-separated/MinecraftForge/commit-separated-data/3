BLEU SCORE: 1.0968465764902027E-6

TEST MSG: Allow custom DataSerializers to be registered safely
GENERATED MSG: Add a version check mechanic to startup , it is done in a seperate thread and has a config option to compleetly disable it . This allows us to notify users of new recomended builds . Hopefully stemming the flow of outdated help request . Also adds a warning to the main screen if you are running a ' Beta ' Forge . Which means a Forge for a new version of Minecraft that we have not promoted a recomended build for yet .

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch b / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 8d3f6d8 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + - - - a / net / minecraft / network / datasync / DataSerializers . java <nl> + + + + b / net / minecraft / network / datasync / DataSerializers . java <nl> + @ @ - 320 , 16 + 320 , 16 @ @ <nl> + } ; <nl> + <nl> + public static void func _ 187189 _ a ( DataSerializer < ? > p _ 187189 _ 0 _ ) { <nl> + - field _ 187204 _ n . func _ 186808 _ c ( p _ 187189 _ 0 _ ) ; <nl> + + if ( field _ 187204 _ n . func _ 186808 _ c ( p _ 187189 _ 0 _ ) > = 256 ) throw new RuntimeException ( " Vanilla DataSerializer ID limit exceeded " ) ; <nl> + } <nl> + <nl> + @ Nullable <nl> + public static DataSerializer < ? > func _ 187190 _ a ( int p _ 187190 _ 0 _ ) { <nl> + - return field _ 187204 _ n . func _ 186813 _ a ( p _ 187190 _ 0 _ ) ; <nl> + + return net . minecraftforge . common . ForgeHooks . getSerializer ( p _ 187190 _ 0 _ , field _ 187204 _ n ) ; <nl> + } <nl> + <nl> + public static int func _ 187188 _ b ( DataSerializer < ? > p _ 187188 _ 0 _ ) { <nl> + - return field _ 187204 _ n . func _ 186815 _ a ( p _ 187188 _ 0 _ ) ; <nl> + + return net . minecraftforge . common . ForgeHooks . getSerializerId ( p _ 187188 _ 0 _ , field _ 187204 _ n ) ; <nl> + } <nl> + <nl> + static { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 36c9750 . . 62cc8f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Collections ; <nl> import java . util . Deque ; <nl> import java . util . HashSet ; <nl> import java . util . List ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . Set ; <nl> import java . util . function . Function ; <nl> @ @ - 79 , 6 + 80 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> import net . minecraft . nbt . NBTTagList ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . Packet ; <nl> + import net . minecraft . network . datasync . DataSerializer ; <nl> import net . minecraft . network . play . server . SPacketBlockChange ; <nl> import net . minecraft . potion . PotionType ; <nl> import net . minecraft . potion . PotionUtils ; <nl> @ @ - 90 , 6 + 92 , 7 @ @ import net . minecraft . util . DamageSource ; <nl> import net . minecraft . util . EnumActionResult ; <nl> import net . minecraft . util . EnumFacing ; <nl> import net . minecraft . util . EnumHand ; <nl> + import net . minecraft . util . IntIdentityHashBiMap ; <nl> import net . minecraft . util . JsonUtils ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . util . WeightedRandom ; <nl> @ @ - 141 , 6 + 144 , 10 @ @ import net . minecraftforge . event . world . BlockEvent ; <nl> import net . minecraftforge . event . world . NoteBlockEvent ; <nl> import net . minecraftforge . eventbus . api . Event . Result ; <nl> import net . minecraftforge . registries . ForgeRegistries ; <nl> + import net . minecraftforge . registries . DataSerializerEntry ; <nl> + import net . minecraftforge . registries . ForgeRegistry ; <nl> + import net . minecraftforge . registries . GameData ; <nl> + <nl> import javax . annotation . Nonnull ; <nl> import javax . annotation . Nullable ; <nl> <nl> @ @ - 1180 , 4 + 1187 , 31 @ @ public class ForgeHooks <nl> } <nl> } <nl> } <nl> + <nl> + private static final Map < DataSerializer < ? > , DataSerializerEntry > serializerEntries = GameData . getSerializerMap ( ) ; <nl> + / / private static final ForgeRegistry < DataSerializerEntry > serializerRegistry = ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ; <nl> + / / Do not reimplement this ^ it introduces a chicken - egg scenario by classloading registries during bootstrap <nl> + <nl> + @ Nullable <nl> + public static DataSerializer < ? > getSerializer ( int id , IntIdentityHashBiMap < DataSerializer < ? > > vanilla ) <nl> + { <nl> + DataSerializer < ? > serializer = vanilla . get ( id ) ; <nl> + if ( serializer = = null ) <nl> + { <nl> + DataSerializerEntry entry = ( ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ) . getValue ( id ) ; <nl> + if ( entry ! = null ) serializer = entry . getSerializer ( ) ; <nl> + } <nl> + return serializer ; <nl> + } <nl> + <nl> + public static int getSerializerId ( DataSerializer < ? > serializer , IntIdentityHashBiMap < DataSerializer < ? > > vanilla ) <nl> + { <nl> + int id = vanilla . getId ( serializer ) ; <nl> + if ( id < 0 ) <nl> + { <nl> + DataSerializerEntry entry = serializerEntries . get ( serializer ) ; <nl> + if ( entry ! = null ) id = ( ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ) . getID ( entry ) ; <nl> + } <nl> + return id ; <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java b / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java <nl> new file mode 100644 <nl> index 0000000 . . e55dce4 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . registries ; <nl> + <nl> + import net . minecraft . network . datasync . DataSerializer ; <nl> + <nl> + public final class DataSerializerEntry extends ForgeRegistryEntry < DataSerializerEntry > <nl> + { <nl> + private final DataSerializer < ? > serializer ; <nl> + <nl> + public DataSerializerEntry ( DataSerializer < ? > serializer ) <nl> + { <nl> + this . serializer = serializer ; <nl> + } <nl> + <nl> + public DataSerializer < ? > getSerializer ( ) <nl> + { <nl> + return serializer ; <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> index 5d5c8d9 . . ebc7218 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java <nl> @ @ - 54 , 6 + 54 , 8 @ @ public class ForgeRegistries <nl> public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . <nl> public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; <nl> public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; <nl> + public static final IForgeRegistry < DataSerializerEntry > DATA _ SERIALIZERS = RegistryManager . ACTIVE . getRegistry ( DataSerializerEntry . class ) ; <nl> + <nl> / * * <nl> * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . <nl> * / <nl> diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java <nl> index 75a7758 . . 0280f50 100644 <nl> - - - a / src / main / java / net / minecraftforge / registries / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / registries / GameData . java <nl> @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . enchantment . Enchantment ; <nl> import net . minecraft . entity . EntityType ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> + import net . minecraft . network . datasync . DataSerializer ; <nl> import net . minecraft . potion . Potion ; <nl> import net . minecraft . potion . PotionType ; <nl> import net . minecraft . state . StateContainer ; <nl> @ @ - 57 , 6 + 58 , 7 @ @ import org . apache . logging . log4j . Logger ; <nl> import javax . annotation . Nullable ; <nl> import java . lang . reflect . Field ; <nl> import java . util . Collection ; <nl> + import java . util . IdentityHashMap ; <nl> import java . util . LinkedHashMap ; <nl> import java . util . List ; <nl> import java . util . Locale ; <nl> @ @ - 87 , 6 + 89 , 8 @ @ public class GameData <nl> public static final ResourceLocation TILEENTITIES = new ResourceLocation ( " minecraft : tileentities " ) ; <nl> public static final ResourceLocation PROFESSIONS = new ResourceLocation ( " minecraft : villagerprofessions " ) ; <nl> public static final ResourceLocation MODDIMENSIONS = new ResourceLocation ( " forge : moddimensions " ) ; <nl> + public static final ResourceLocation SERIALIZERS = new ResourceLocation ( " minecraft : dataserializers " ) ; <nl> + <nl> private static final int MAX _ REGISTRY _ SIZE = Integer . MAX _ VALUE > > 5 ; <nl> private static final int MAX _ BLOCK _ ID = 4095 ; <nl> private static final int MAX _ ITEM _ ID = 31999 ; <nl> @ @ - 98 , 9 + 102 , 13 @ @ public class GameData <nl> private static final int MAX _ ENTITY _ ID = MAX _ REGISTRY _ SIZE ; / / Varint ( SPacketSpawnMob ) <nl> private static final int MAX _ TILE _ ENTITY _ ID = Integer . MAX _ VALUE ; / / Doesnt seem to be serialized anywhere , so no max . <nl> private static final int MAX _ PROFESSION _ ID = 1024 ; / / TODO : Is this serialized anywhere anymore ? <nl> + private static final int MIN _ SERIALIZER _ ID = 256 ; / / Leave room for vanilla entries <nl> + private static final int MAX _ SERIALIZER _ ID = Integer . MAX _ VALUE > > 5 ; / / Varint ( EntityDataManager ) <nl> <nl> private static final ResourceLocation BLOCK _ TO _ ITEM = new ResourceLocation ( " minecraft : blocktoitemmap " ) ; <nl> private static final ResourceLocation BLOCKSTATE _ TO _ ID = new ResourceLocation ( " minecraft : blockstatetoid " ) ; <nl> + private static final ResourceLocation SERIALIZER _ TO _ ENTRY = new ResourceLocation ( " forge : serializer _ to _ entry " ) ; <nl> + <nl> private static boolean hasInit = false ; <nl> private static final boolean DISABLE _ VANILLA _ REGISTRIES = Boolean . parseBoolean ( System . getProperty ( " forge . disableVanillaGameData " , " false " ) ) ; / / Use for unit tests / debugging <nl> private static final BiConsumer < ResourceLocation , ForgeRegistry < ? > > LOCK _ VANILLA = ( name , reg ) - > reg . slaves . values ( ) . stream ( ) . filter ( o - > o instanceof ILockableRegistry ) . forEach ( o - > ( ( ILockableRegistry ) o ) . lock ( ) ) ; <nl> @ @ - 132 , 12 + 140 , 17 @ @ public class GameData <nl> makeRegistry ( ENTITIES , EntityType . class , MAX _ ENTITY _ ID ) . create ( ) ; <nl> makeRegistry ( TILEENTITIES , TileEntityType . class , MAX _ TILE _ ENTITY _ ID ) . disableSaving ( ) . create ( ) ; <nl> makeRegistry ( MODDIMENSIONS , ModDimension . class , MAX _ REGISTRY _ SIZE ) . disableSaving ( ) . create ( ) ; <nl> + makeRegistry ( SERIALIZERS , DataSerializerEntry . class , MIN _ SERIALIZER _ ID , MAX _ SERIALIZER _ ID ) . disableSaving ( ) . disableOverrides ( ) . addCallback ( SerializerCallbacks . INSTANCE ) . create ( ) ; <nl> } <nl> <nl> private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int max ) <nl> { <nl> return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setMaxID ( max ) . addCallback ( new NamespacedWrapper . Factory < T > ( ) ) ; <nl> } <nl> + private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int min , int max ) <nl> + { <nl> + return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setIDRange ( min , max ) . addCallback ( new NamespacedWrapper . Factory < T > ( ) ) ; <nl> + } <nl> private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int max , ResourceLocation _ default ) <nl> { <nl> return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setMaxID ( max ) . addCallback ( new NamespacedDefaultedWrapper . Factory < T > ( ) ) . setDefaultKey ( _ default ) ; <nl> @ @ - 175 , 6 + 188 , 12 @ @ public class GameData <nl> return RegistryManager . ACTIVE . getRegistry ( Block . class ) . getSlaveMap ( BLOCKSTATE _ TO _ ID , ObjectIntIdentityMap . class ) ; <nl> } <nl> <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public static Map < DataSerializer < ? > , DataSerializerEntry > getSerializerMap ( ) <nl> + { <nl> + return RegistryManager . ACTIVE . getRegistry ( DataSerializerEntry . class ) . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) ; <nl> + } <nl> + <nl> public static < K extends IForgeRegistryEntry < K > > K register _ impl ( K value ) <nl> { <nl> Validate . notNull ( value , " Attempted to register a null object " ) ; <nl> @ @ - 539 , 6 + 558 , 32 @ @ public class GameData <nl> } <nl> * / <nl> <nl> + private static class SerializerCallbacks implements IForgeRegistry . AddCallback < DataSerializerEntry > , IForgeRegistry . ClearCallback < DataSerializerEntry > , IForgeRegistry . CreateCallback < DataSerializerEntry > <nl> + { <nl> + static final SerializerCallbacks INSTANCE = new SerializerCallbacks ( ) ; <nl> + <nl> + @ Override <nl> + public void onAdd ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage , int id , DataSerializerEntry entry , @ Nullable DataSerializerEntry oldEntry ) <nl> + { <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + Map < DataSerializer < ? > , DataSerializerEntry > map = owner . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) ; <nl> + if ( oldEntry ! = null ) map . remove ( oldEntry . getSerializer ( ) ) ; <nl> + map . put ( entry . getSerializer ( ) , entry ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onClear ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage ) <nl> + { <nl> + owner . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) . clear ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public void onCreate ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage ) <nl> + { <nl> + owner . setSlaveMap ( SERIALIZER _ TO _ ENTRY , new IdentityHashMap < > ( ) ) ; <nl> + } <nl> + } <nl> + <nl> private static < T extends IForgeRegistryEntry < T > > void loadRegistry ( final ResourceLocation registryName , final RegistryManager from , final RegistryManager to , final Class < T > regType , boolean freeze ) <nl> { <nl> ForgeRegistry < T > fromRegistry = from . getRegistry ( registryName ) ;
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> new file mode 100644 <nl> index 0000000 . . 5cd478c <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch <nl> @ @ - 0 , 0 + 1 , 18 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java <nl> + @ @ - 30 , 6 + 30 , 7 @ @ <nl> + import net . minecraft . world . demo . DemoWorldServer ; <nl> + import net . minecraft . world . storage . ISaveFormat ; <nl> + import net . minecraft . world . storage . WorldInfo ; <nl> + + import net . minecraftforge . client . ForgeHooksClient ; <nl> + import org . apache . commons . io . Charsets ; <nl> + import org . apache . logging . log4j . LogManager ; <nl> + import org . apache . logging . log4j . Logger ; <nl> + @ @ - 630 , 6 + 631 , 7 @ @ <nl> + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; <nl> + } <nl> + } <nl> + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; <nl> + String s1 = " Copyright Mojang AB . Do not distribute ! " ; <nl> + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index 10266a2 . . 4ec67c7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 1 , 6 + 1 , 12 @ @ <nl> package net . minecraftforge . client ; <nl> <nl> + import java . io . IOException ; <nl> + import java . io . InputStream ; <nl> + import java . net . MalformedURLException ; <nl> + import java . net . URL ; <nl> + import java . net . URLConnection ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> import java . util . Random ; <nl> import java . util . TreeSet ; <nl> <nl> @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; <nl> <nl> import net . minecraftforge . client . event . MouseEvent ; <nl> import net . minecraft . client . entity . EntityPlayerSP ; <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . client . gui . GuiMainMenu ; <nl> import net . minecraftforge . client . event . FOVUpdateEvent ; <nl> <nl> import org . lwjgl . LWJGLException ; <nl> @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; <nl> import org . lwjgl . opengl . GL12 ; <nl> import org . lwjgl . opengl . PixelFormat ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + import com . google . gson . JsonParseException ; <nl> + <nl> import cpw . mods . fml . client . FMLClientHandler ; <nl> import cpw . mods . fml . client . registry . RenderingRegistry ; <nl> + import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> import net . minecraft . client . Minecraft ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . BlockLiquid ; <nl> @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemBlock ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ChatComponentTranslation ; <nl> + import net . minecraft . util . EnumChatFormatting ; <nl> import net . minecraft . util . MathHelper ; <nl> import net . minecraft . util . MovingObjectPosition ; <nl> import net . minecraft . util . ResourceLocation ; <nl> @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; <nl> import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> + import net . minecraftforge . common . ForgeVersion ; <nl> + import net . minecraftforge . common . ForgeVersion . Status ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fluids . RenderBlockFluid ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; <nl> import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> <nl> public class ForgeHooksClient <nl> { <nl> @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient <nl> / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; <nl> / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; <nl> } <nl> + <nl> + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) <nl> + { <nl> + Status status = ForgeVersion . getStatus ( ) ; <nl> + if ( status = = BETA | | status = = BETA _ OUTDATED ) <nl> + { <nl> + / / render a warning at the top of the screen , <nl> + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + line = " Major issues may arise , verify before reporting . " ; <nl> + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + <nl> + String line = null ; <nl> + switch ( status ) <nl> + { <nl> + / / case FAILED : line = " Version check failed " ; break ; <nl> + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; <nl> + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; <nl> + case OUTDATED : <nl> + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; <nl> + default : break ; <nl> + } <nl> + <nl> + if ( line ! = null ) <nl> + { <nl> + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line <nl> + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> index d18f81a . . 86de438 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java <nl> @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame <nl> private ScaledResolution res = null ; <nl> private FontRenderer fontrenderer = null ; <nl> private RenderGameOverlayEvent eventParent ; <nl> - private static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; <nl> <nl> public GuiIngameForge ( Minecraft mc ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 145a3c5 . . 9ca5fab 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; <nl> <nl> public class ForgeHooks <nl> { <nl> - static class GrassEntry extends WeightedRandom . Item <nl> - { <nl> - public final Block block ; <nl> - public final int metadata ; <nl> - public GrassEntry ( Block block , int meta , int weight ) <nl> - { <nl> - super ( weight ) ; <nl> - this . block = block ; <nl> - this . metadata = meta ; <nl> - } <nl> - } <nl> - <nl> static class SeedEntry extends WeightedRandom . Item <nl> { <nl> public final ItemStack seed ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 4072090 . . d54730a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static double zombieSummonBaseChance = 0 . 1 ; <nl> public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; <nl> public static float zombieBabyChance = 0 . 05f ; <nl> - public static boolean shouldSortRecipies = false ; <nl> + public static boolean shouldSortRecipies = true ; <nl> + public static boolean disableVersionCheck = false ; <nl> <nl> public ForgeModContainer ( ) <nl> { <nl> @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; <nl> shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; <nl> <nl> + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; <nl> + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; <nl> + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; <nl> + <nl> if ( config . hasChanged ( ) ) <nl> { <nl> config . save ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> index 3dfe78e . . 0d4d751 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java <nl> @ @ - 4 , 6 + 4 , 17 @ @ <nl> * / <nl> <nl> package net . minecraftforge . common ; <nl> + import static net . minecraftforge . common . ForgeVersion . Status . * ; <nl> + <nl> + import java . io . InputStream ; <nl> + import java . net . URL ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . io . ByteStreams ; <nl> + import com . google . gson . Gson ; <nl> + <nl> + import cpw . mods . fml . common . versioning . ArtifactVersion ; <nl> + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; <nl> <nl> public class ForgeVersion <nl> { <nl> @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion <nl> / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . <nl> public static final int buildVersion = 0 ; <nl> <nl> + private static Status status = PENDING ; <nl> + private static String target = null ; <nl> + <nl> public static int getMajorVersion ( ) <nl> { <nl> return majorVersion ; <nl> @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion <nl> return buildVersion ; <nl> } <nl> <nl> + public static Status getStatus ( ) <nl> + { <nl> + return status ; <nl> + } <nl> + <nl> + public static String getTarget ( ) <nl> + { <nl> + return target ; <nl> + } <nl> + <nl> public static String getVersion ( ) <nl> { <nl> return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; <nl> } <nl> + <nl> + public static enum Status <nl> + { <nl> + PENDING , <nl> + FAILED , <nl> + UP _ TO _ DATE , <nl> + OUTDATED , <nl> + AHEAD , <nl> + BETA , <nl> + BETA _ OUTDATED <nl> + } <nl> + <nl> + public static void startVersionCheck ( ) <nl> + { <nl> + new Thread ( " Forge Version Check " ) <nl> + { <nl> + @ Override <nl> + public void run ( ) <nl> + { <nl> + try <nl> + { <nl> + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; <nl> + InputStream con = url . openStream ( ) ; <nl> + String data = new String ( ByteStreams . toByteArray ( con ) ) ; <nl> + con . close ( ) ; <nl> + <nl> + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; <nl> + String homepage = ( String ) json . get ( " homepage " ) ; <nl> + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; <nl> + <nl> + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; <nl> + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; <nl> + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; <nl> + <nl> + if ( rec ! = null ) <nl> + { <nl> + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; <nl> + int diff = recommended . compareTo ( current ) ; <nl> + <nl> + if ( diff = = 0 ) <nl> + status = UP _ TO _ DATE ; <nl> + else if ( diff < 0 ) <nl> + { <nl> + status = AHEAD ; <nl> + if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + } <nl> + } <nl> + else <nl> + { <nl> + status = OUTDATED ; <nl> + target = rec ; <nl> + } <nl> + } <nl> + else if ( lat ! = null ) <nl> + { <nl> + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) <nl> + { <nl> + status = BETA _ OUTDATED ; <nl> + target = lat ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + else <nl> + status = BETA ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + e . printStackTrace ( ) ; <nl> + status = FAILED ; <nl> + } <nl> + } <nl> + } . start ( ) ; <nl> + } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> index bb4a94e . . 3a98b16 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java <nl> @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; <nl> import net . minecraft . entity . monster . EntityEnderman ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> - import net . minecraftforge . common . ForgeHooks . GrassEntry ; <nl> import net . minecraftforge . common . ForgeHooks . SeedEntry ; <nl> import net . minecraftforge . event . entity . EntityEvent ; <nl> import net . minecraftforge . oredict . OreDictionary ; <nl> @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge <nl> public static final EventBus EVENT _ BUS = new EventBus ( ) ; <nl> public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; <nl> public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; <nl> + public static final String MC _ VERSION = " 1 . 7 . 2 " ; <nl> <nl> private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; <nl> <nl> @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge <nl> EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; <nl> OreDictionary . getOreName ( 0 ) ; <nl> <nl> + if ( ! ForgeModContainer . disableVersionCheck ) <nl> + { <nl> + ForgeVersion . startVersionCheck ( ) ; <nl> + } <nl> + <nl> / / Force these classes to be defined , Should prevent derp error hiding . <nl> new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; <nl> }

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch b / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch 
 new file mode 100644 
 index 0000000 . . 8d3f6d8 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / network / datasync / DataSerializers . java . patch 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + - - - a / net / minecraft / network / datasync / DataSerializers . java 
 + + + + b / net / minecraft / network / datasync / DataSerializers . java 
 + @ @ - 320 , 16 + 320 , 16 @ @ 
 + } ; 
 + 
 + public static void func _ 187189 _ a ( DataSerializer < ? > p _ 187189 _ 0 _ ) { 
 + - field _ 187204 _ n . func _ 186808 _ c ( p _ 187189 _ 0 _ ) ; 
 + + if ( field _ 187204 _ n . func _ 186808 _ c ( p _ 187189 _ 0 _ ) > = 256 ) throw new RuntimeException ( " Vanilla DataSerializer ID limit exceeded " ) ; 
 + } 
 + 
 + @ Nullable 
 + public static DataSerializer < ? > func _ 187190 _ a ( int p _ 187190 _ 0 _ ) { 
 + - return field _ 187204 _ n . func _ 186813 _ a ( p _ 187190 _ 0 _ ) ; 
 + + return net . minecraftforge . common . ForgeHooks . getSerializer ( p _ 187190 _ 0 _ , field _ 187204 _ n ) ; 
 + } 
 + 
 + public static int func _ 187188 _ b ( DataSerializer < ? > p _ 187188 _ 0 _ ) { 
 + - return field _ 187204 _ n . func _ 186815 _ a ( p _ 187188 _ 0 _ ) ; 
 + + return net . minecraftforge . common . ForgeHooks . getSerializerId ( p _ 187188 _ 0 _ , field _ 187204 _ n ) ; 
 + } 
 + 
 + static { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 36c9750 . . 62cc8f3 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import java . util . Collections ; 
 import java . util . Deque ; 
 import java . util . HashSet ; 
 import java . util . List ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . Set ; 
 import java . util . function . Function ; 
 @ @ - 79 , 6 + 80 , 7 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 import net . minecraft . nbt . NBTTagList ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . Packet ; 
 + import net . minecraft . network . datasync . DataSerializer ; 
 import net . minecraft . network . play . server . SPacketBlockChange ; 
 import net . minecraft . potion . PotionType ; 
 import net . minecraft . potion . PotionUtils ; 
 @ @ - 90 , 6 + 92 , 7 @ @ import net . minecraft . util . DamageSource ; 
 import net . minecraft . util . EnumActionResult ; 
 import net . minecraft . util . EnumFacing ; 
 import net . minecraft . util . EnumHand ; 
 + import net . minecraft . util . IntIdentityHashBiMap ; 
 import net . minecraft . util . JsonUtils ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . util . WeightedRandom ; 
 @ @ - 141 , 6 + 144 , 10 @ @ import net . minecraftforge . event . world . BlockEvent ; 
 import net . minecraftforge . event . world . NoteBlockEvent ; 
 import net . minecraftforge . eventbus . api . Event . Result ; 
 import net . minecraftforge . registries . ForgeRegistries ; 
 + import net . minecraftforge . registries . DataSerializerEntry ; 
 + import net . minecraftforge . registries . ForgeRegistry ; 
 + import net . minecraftforge . registries . GameData ; 
 + 
 import javax . annotation . Nonnull ; 
 import javax . annotation . Nullable ; 
 
 @ @ - 1180 , 4 + 1187 , 31 @ @ public class ForgeHooks 
 } 
 } 
 } 
 + 
 + private static final Map < DataSerializer < ? > , DataSerializerEntry > serializerEntries = GameData . getSerializerMap ( ) ; 
 + / / private static final ForgeRegistry < DataSerializerEntry > serializerRegistry = ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ; 
 + / / Do not reimplement this ^ it introduces a chicken - egg scenario by classloading registries during bootstrap 
 + 
 + @ Nullable 
 + public static DataSerializer < ? > getSerializer ( int id , IntIdentityHashBiMap < DataSerializer < ? > > vanilla ) 
 + { 
 + DataSerializer < ? > serializer = vanilla . get ( id ) ; 
 + if ( serializer = = null ) 
 + { 
 + DataSerializerEntry entry = ( ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ) . getValue ( id ) ; 
 + if ( entry ! = null ) serializer = entry . getSerializer ( ) ; 
 + } 
 + return serializer ; 
 + } 
 + 
 + public static int getSerializerId ( DataSerializer < ? > serializer , IntIdentityHashBiMap < DataSerializer < ? > > vanilla ) 
 + { 
 + int id = vanilla . getId ( serializer ) ; 
 + if ( id < 0 ) 
 + { 
 + DataSerializerEntry entry = serializerEntries . get ( serializer ) ; 
 + if ( entry ! = null ) id = ( ( ForgeRegistry < DataSerializerEntry > ) ForgeRegistries . DATA _ SERIALIZERS ) . getID ( entry ) ; 
 + } 
 + return id ; 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java b / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java 
 new file mode 100644 
 index 0000000 . . e55dce4 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / registries / DataSerializerEntry . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . registries ; 
 + 
 + import net . minecraft . network . datasync . DataSerializer ; 
 + 
 + public final class DataSerializerEntry extends ForgeRegistryEntry < DataSerializerEntry > 
 + { 
 + private final DataSerializer < ? > serializer ; 
 + 
 + public DataSerializerEntry ( DataSerializer < ? > serializer ) 
 + { 
 + this . serializer = serializer ; 
 + } 
 + 
 + public DataSerializer < ? > getSerializer ( ) 
 + { 
 + return serializer ; 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 index 5d5c8d9 . . ebc7218 100644 
 - - - a / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 + + + b / src / main / java / net / minecraftforge / registries / ForgeRegistries . java 
 @ @ - 54 , 6 + 54 , 8 @ @ public class ForgeRegistries 
 public static final IForgeRegistry < EntityType < ? > > ENTITIES = RegistryManager . ACTIVE . getRegistry ( EntityType . class ) ; / / Untyped casys needed to fix javac issues . 
 public static final IForgeRegistry < TileEntityType < ? > > TILE _ ENTITIES = RegistryManager . ACTIVE . getRegistry ( TileEntityType . class ) ; 
 public static final IForgeRegistry < ModDimension > MOD _ DIMENSIONS = RegistryManager . ACTIVE . getRegistry ( ModDimension . class ) ; 
 + public static final IForgeRegistry < DataSerializerEntry > DATA _ SERIALIZERS = RegistryManager . ACTIVE . getRegistry ( DataSerializerEntry . class ) ; 
 + 
 / * * 
 * This function is just to make sure static inializers in other classes have run and setup their registries before we query them . 
 * / 
 diff - - git a / src / main / java / net / minecraftforge / registries / GameData . java b / src / main / java / net / minecraftforge / registries / GameData . java 
 index 75a7758 . . 0280f50 100644 
 - - - a / src / main / java / net / minecraftforge / registries / GameData . java 
 + + + b / src / main / java / net / minecraftforge / registries / GameData . java 
 @ @ - 28 , 6 + 28 , 7 @ @ import net . minecraft . enchantment . Enchantment ; 
 import net . minecraft . entity . EntityType ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 + import net . minecraft . network . datasync . DataSerializer ; 
 import net . minecraft . potion . Potion ; 
 import net . minecraft . potion . PotionType ; 
 import net . minecraft . state . StateContainer ; 
 @ @ - 57 , 6 + 58 , 7 @ @ import org . apache . logging . log4j . Logger ; 
 import javax . annotation . Nullable ; 
 import java . lang . reflect . Field ; 
 import java . util . Collection ; 
 + import java . util . IdentityHashMap ; 
 import java . util . LinkedHashMap ; 
 import java . util . List ; 
 import java . util . Locale ; 
 @ @ - 87 , 6 + 89 , 8 @ @ public class GameData 
 public static final ResourceLocation TILEENTITIES = new ResourceLocation ( " minecraft : tileentities " ) ; 
 public static final ResourceLocation PROFESSIONS = new ResourceLocation ( " minecraft : villagerprofessions " ) ; 
 public static final ResourceLocation MODDIMENSIONS = new ResourceLocation ( " forge : moddimensions " ) ; 
 + public static final ResourceLocation SERIALIZERS = new ResourceLocation ( " minecraft : dataserializers " ) ; 
 + 
 private static final int MAX _ REGISTRY _ SIZE = Integer . MAX _ VALUE > > 5 ; 
 private static final int MAX _ BLOCK _ ID = 4095 ; 
 private static final int MAX _ ITEM _ ID = 31999 ; 
 @ @ - 98 , 9 + 102 , 13 @ @ public class GameData 
 private static final int MAX _ ENTITY _ ID = MAX _ REGISTRY _ SIZE ; / / Varint ( SPacketSpawnMob ) 
 private static final int MAX _ TILE _ ENTITY _ ID = Integer . MAX _ VALUE ; / / Doesnt seem to be serialized anywhere , so no max . 
 private static final int MAX _ PROFESSION _ ID = 1024 ; / / TODO : Is this serialized anywhere anymore ? 
 + private static final int MIN _ SERIALIZER _ ID = 256 ; / / Leave room for vanilla entries 
 + private static final int MAX _ SERIALIZER _ ID = Integer . MAX _ VALUE > > 5 ; / / Varint ( EntityDataManager ) 
 
 private static final ResourceLocation BLOCK _ TO _ ITEM = new ResourceLocation ( " minecraft : blocktoitemmap " ) ; 
 private static final ResourceLocation BLOCKSTATE _ TO _ ID = new ResourceLocation ( " minecraft : blockstatetoid " ) ; 
 + private static final ResourceLocation SERIALIZER _ TO _ ENTRY = new ResourceLocation ( " forge : serializer _ to _ entry " ) ; 
 + 
 private static boolean hasInit = false ; 
 private static final boolean DISABLE _ VANILLA _ REGISTRIES = Boolean . parseBoolean ( System . getProperty ( " forge . disableVanillaGameData " , " false " ) ) ; / / Use for unit tests / debugging 
 private static final BiConsumer < ResourceLocation , ForgeRegistry < ? > > LOCK _ VANILLA = ( name , reg ) - > reg . slaves . values ( ) . stream ( ) . filter ( o - > o instanceof ILockableRegistry ) . forEach ( o - > ( ( ILockableRegistry ) o ) . lock ( ) ) ; 
 @ @ - 132 , 12 + 140 , 17 @ @ public class GameData 
 makeRegistry ( ENTITIES , EntityType . class , MAX _ ENTITY _ ID ) . create ( ) ; 
 makeRegistry ( TILEENTITIES , TileEntityType . class , MAX _ TILE _ ENTITY _ ID ) . disableSaving ( ) . create ( ) ; 
 makeRegistry ( MODDIMENSIONS , ModDimension . class , MAX _ REGISTRY _ SIZE ) . disableSaving ( ) . create ( ) ; 
 + makeRegistry ( SERIALIZERS , DataSerializerEntry . class , MIN _ SERIALIZER _ ID , MAX _ SERIALIZER _ ID ) . disableSaving ( ) . disableOverrides ( ) . addCallback ( SerializerCallbacks . INSTANCE ) . create ( ) ; 
 } 
 
 private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int max ) 
 { 
 return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setMaxID ( max ) . addCallback ( new NamespacedWrapper . Factory < T > ( ) ) ; 
 } 
 + private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int min , int max ) 
 + { 
 + return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setIDRange ( min , max ) . addCallback ( new NamespacedWrapper . Factory < T > ( ) ) ; 
 + } 
 private static < T extends IForgeRegistryEntry < T > > RegistryBuilder < T > makeRegistry ( ResourceLocation name , Class < T > type , int max , ResourceLocation _ default ) 
 { 
 return new RegistryBuilder < T > ( ) . setName ( name ) . setType ( type ) . setMaxID ( max ) . addCallback ( new NamespacedDefaultedWrapper . Factory < T > ( ) ) . setDefaultKey ( _ default ) ; 
 @ @ - 175 , 6 + 188 , 12 @ @ public class GameData 
 return RegistryManager . ACTIVE . getRegistry ( Block . class ) . getSlaveMap ( BLOCKSTATE _ TO _ ID , ObjectIntIdentityMap . class ) ; 
 } 
 
 + @ SuppressWarnings ( " unchecked " ) 
 + public static Map < DataSerializer < ? > , DataSerializerEntry > getSerializerMap ( ) 
 + { 
 + return RegistryManager . ACTIVE . getRegistry ( DataSerializerEntry . class ) . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) ; 
 + } 
 + 
 public static < K extends IForgeRegistryEntry < K > > K register _ impl ( K value ) 
 { 
 Validate . notNull ( value , " Attempted to register a null object " ) ; 
 @ @ - 539 , 6 + 558 , 32 @ @ public class GameData 
 } 
 * / 
 
 + private static class SerializerCallbacks implements IForgeRegistry . AddCallback < DataSerializerEntry > , IForgeRegistry . ClearCallback < DataSerializerEntry > , IForgeRegistry . CreateCallback < DataSerializerEntry > 
 + { 
 + static final SerializerCallbacks INSTANCE = new SerializerCallbacks ( ) ; 
 + 
 + @ Override 
 + public void onAdd ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage , int id , DataSerializerEntry entry , @ Nullable DataSerializerEntry oldEntry ) 
 + { 
 + @ SuppressWarnings ( " unchecked " ) 
 + Map < DataSerializer < ? > , DataSerializerEntry > map = owner . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) ; 
 + if ( oldEntry ! = null ) map . remove ( oldEntry . getSerializer ( ) ) ; 
 + map . put ( entry . getSerializer ( ) , entry ) ; 
 + } 
 + 
 + @ Override 
 + public void onClear ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage ) 
 + { 
 + owner . getSlaveMap ( SERIALIZER _ TO _ ENTRY , Map . class ) . clear ( ) ; 
 + } 
 + 
 + @ Override 
 + public void onCreate ( IForgeRegistryInternal < DataSerializerEntry > owner , RegistryManager stage ) 
 + { 
 + owner . setSlaveMap ( SERIALIZER _ TO _ ENTRY , new IdentityHashMap < > ( ) ) ; 
 + } 
 + } 
 + 
 private static < T extends IForgeRegistryEntry < T > > void loadRegistry ( final ResourceLocation registryName , final RegistryManager from , final RegistryManager to , final Class < T > regType , boolean freeze ) 
 { 
 ForgeRegistry < T > fromRegistry = from . getRegistry ( registryName ) ;

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 new file mode 100644 
 index 0000000 . . 5cd478c 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiMainMenu . java . patch 
 @ @ - 0 , 0 + 1 , 18 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiMainMenu . java 
 + @ @ - 30 , 6 + 30 , 7 @ @ 
 + import net . minecraft . world . demo . DemoWorldServer ; 
 + import net . minecraft . world . storage . ISaveFormat ; 
 + import net . minecraft . world . storage . WorldInfo ; 
 + + import net . minecraftforge . client . ForgeHooksClient ; 
 + import org . apache . commons . io . Charsets ; 
 + import org . apache . logging . log4j . LogManager ; 
 + import org . apache . logging . log4j . Logger ; 
 + @ @ - 630 , 6 + 631 , 7 @ @ 
 + this . drawString ( this . field _ 146289 _ q , brd , 2 , this . field _ 146295 _ m - ( 10 + i * ( this . field _ 146289 _ q . FONT _ HEIGHT + 1 ) ) , 16777215 ) ; 
 + } 
 + } 
 + + ForgeHooksClient . renderMainMenu ( this , field _ 146289 _ q , field _ 146294 _ l , field _ 146295 _ m ) ; 
 + String s1 = " Copyright Mojang AB . Do not distribute ! " ; 
 + this . drawString ( this . field _ 146289 _ q , s1 , this . field _ 146294 _ l - this . field _ 146289 _ q . getStringWidth ( s1 ) - 2 , this . field _ 146295 _ m - 10 , - 1 ) ; 
 + 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index 10266a2 . . 4ec67c7 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 1 , 6 + 1 , 12 @ @ 
 package net . minecraftforge . client ; 
 
 + import java . io . IOException ; 
 + import java . io . InputStream ; 
 + import java . net . MalformedURLException ; 
 + import java . net . URL ; 
 + import java . net . URLConnection ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 import java . util . Random ; 
 import java . util . TreeSet ; 
 
 @ @ - 8 , 6 + 14 , 8 @ @ import javax . imageio . ImageIO ; 
 
 import net . minecraftforge . client . event . MouseEvent ; 
 import net . minecraft . client . entity . EntityPlayerSP ; 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . client . gui . GuiMainMenu ; 
 import net . minecraftforge . client . event . FOVUpdateEvent ; 
 
 import org . lwjgl . LWJGLException ; 
 @ @ - 16 , 9 + 24 , 16 @ @ import org . lwjgl . opengl . GL11 ; 
 import org . lwjgl . opengl . GL12 ; 
 import org . lwjgl . opengl . PixelFormat ; 
 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + import com . google . gson . JsonParseException ; 
 + 
 import cpw . mods . fml . client . FMLClientHandler ; 
 import cpw . mods . fml . client . registry . RenderingRegistry ; 
 + import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 import net . minecraft . client . Minecraft ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . BlockLiquid ; 
 @ @ - 31 , 6 + 46 , 7 @ @ import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemBlock ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ChatComponentTranslation ; 
 + import net . minecraft . util . EnumChatFormatting ; 
 import net . minecraft . util . MathHelper ; 
 import net . minecraft . util . MovingObjectPosition ; 
 import net . minecraft . util . ResourceLocation ; 
 @ @ - 50 , 11 + 66 , 14 @ @ import net . minecraftforge . client . event . DrawBlockHighlightEvent ; 
 import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 + import net . minecraftforge . common . ForgeVersion ; 
 + import net . minecraftforge . common . ForgeVersion . Status ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fluids . RenderBlockFluid ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRenderType . * ; 
 import static net . minecraftforge . client . IItemRenderer . ItemRendererHelper . * ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 
 public class ForgeHooksClient 
 { 
 @ @ - 404 , 4 + 423 , 34 @ @ public class ForgeHooksClient 
 / / FluidRegistry . renderIdFluid = RenderingRegistry . getNextAvailableRenderId ( ) ; 
 / / RenderingRegistry . registerBlockHandler ( RenderBlockFluid . instance ) ; 
 } 
 + 
 + public static void renderMainMenu ( GuiMainMenu gui , FontRenderer font , int width , int height ) 
 + { 
 + Status status = ForgeVersion . getStatus ( ) ; 
 + if ( status = = BETA | | status = = BETA _ OUTDATED ) 
 + { 
 + / / render a warning at the top of the screen , 
 + String line = EnumChatFormatting . RED + " WARNING : " + EnumChatFormatting . RESET + " Forge Beta , " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 0 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + line = " Major issues may arise , verify before reporting . " ; 
 + gui . drawString ( font , line , ( width - font . getStringWidth ( line ) ) / 2 , 4 + ( 1 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + 
 + String line = null ; 
 + switch ( status ) 
 + { 
 + / / case FAILED : line = " Version check failed " ; break ; 
 + / / case UP _ TO _ DATE : line = " Forge up to date " } ; break ; 
 + / / case AHEAD : line = " Using non - recommended Forge build , issues may arise . " } ; break ; 
 + case OUTDATED : 
 + case BETA _ OUTDATED : line = " New Forge version avalible : " + ForgeVersion . getTarget ( ) ; break ; 
 + default : break ; 
 + } 
 + 
 + if ( line ! = null ) 
 + { 
 + / / if we have a line , render it in the bottom right , above Mojang ' s copyright line 
 + gui . drawString ( font , line , width - font . getStringWidth ( line ) - 2 , height - ( 2 * ( font . FONT _ HEIGHT + 1 ) ) , - 1 ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / GuiIngameForge . java b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 index d18f81a . . 86de438 100644 
 - - - a / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 + + + b / src / main / java / net / minecraftforge / client / GuiIngameForge . java 
 @ @ - 81 , 7 + 81 , 7 @ @ public class GuiIngameForge extends GuiIngame 
 private ScaledResolution res = null ; 
 private FontRenderer fontrenderer = null ; 
 private RenderGameOverlayEvent eventParent ; 
 - private static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 + private static final String MC _ VERSION = MinecraftForge . MC _ VERSION ; 
 
 public GuiIngameForge ( Minecraft mc ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 145a3c5 . . 9ca5fab 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 60 , 18 + 60 , 6 @ @ import static net . minecraft . init . Blocks . * ; 
 
 public class ForgeHooks 
 { 
 - static class GrassEntry extends WeightedRandom . Item 
 - { 
 - public final Block block ; 
 - public final int metadata ; 
 - public GrassEntry ( Block block , int meta , int weight ) 
 - { 
 - super ( weight ) ; 
 - this . block = block ; 
 - this . metadata = meta ; 
 - } 
 - } 
 - 
 static class SeedEntry extends WeightedRandom . Item 
 { 
 public final ItemStack seed ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 4072090 . . d54730a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 54 , 7 + 54 , 8 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static double zombieSummonBaseChance = 0 . 1 ; 
 public static int [ ] blendRanges = { 2 , 4 , 6 , 8 , 10 , 12 , 14 , 16 , 18 , 20 , 22 , 24 , 26 , 28 , 30 , 32 } ; 
 public static float zombieBabyChance = 0 . 05f ; 
 - public static boolean shouldSortRecipies = false ; 
 + public static boolean shouldSortRecipies = true ; 
 + public static boolean disableVersionCheck = false ; 
 
 public ForgeModContainer ( ) 
 { 
 @ @ - 159 , 6 + 160 , 10 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . comment = " Set to true to enable the post initlization sorting of crafting recipes using Froge ' s sorter . May cause desyncing on conflicting recipies . ToDo : Set to true by default in 1 . 7 " ; 
 shouldSortRecipies = prop . getBoolean ( shouldSortRecipies ) ; 
 
 + prop = config . get ( CATEGORY _ GENERAL , " disableVersionCheck " , disableVersionCheck ) ; 
 + prop . comment = " Set to true to disable Forge ' s version check mechanics , Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . " ; 
 + disableVersionCheck = prop . getBoolean ( disableVersionCheck ) ; 
 + 
 if ( config . hasChanged ( ) ) 
 { 
 config . save ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeVersion . java b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 index 3dfe78e . . 0d4d751 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeVersion . java 
 @ @ - 4 , 6 + 4 , 17 @ @ 
 * / 
 
 package net . minecraftforge . common ; 
 + import static net . minecraftforge . common . ForgeVersion . Status . * ; 
 + 
 + import java . io . InputStream ; 
 + import java . net . URL ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . io . ByteStreams ; 
 + import com . google . gson . Gson ; 
 + 
 + import cpw . mods . fml . common . versioning . ArtifactVersion ; 
 + import cpw . mods . fml . common . versioning . DefaultArtifactVersion ; 
 
 public class ForgeVersion 
 { 
 @ @ - 16 , 6 + 27 , 9 @ @ public class ForgeVersion 
 / / This number is incremented every time Jenkins builds Forge , and never reset . Should always be 0 in the repo code . 
 public static final int buildVersion = 0 ; 
 
 + private static Status status = PENDING ; 
 + private static String target = null ; 
 + 
 public static int getMajorVersion ( ) 
 { 
 return majorVersion ; 
 @ @ - 36 , 9 + 50 , 99 @ @ public class ForgeVersion 
 return buildVersion ; 
 } 
 
 + public static Status getStatus ( ) 
 + { 
 + return status ; 
 + } 
 + 
 + public static String getTarget ( ) 
 + { 
 + return target ; 
 + } 
 + 
 public static String getVersion ( ) 
 { 
 return String . format ( " % d . % d . % d . % d " , majorVersion , minorVersion , revisionVersion , buildVersion ) ; 
 } 
 + 
 + public static enum Status 
 + { 
 + PENDING , 
 + FAILED , 
 + UP _ TO _ DATE , 
 + OUTDATED , 
 + AHEAD , 
 + BETA , 
 + BETA _ OUTDATED 
 + } 
 + 
 + public static void startVersionCheck ( ) 
 + { 
 + new Thread ( " Forge Version Check " ) 
 + { 
 + @ Override 
 + public void run ( ) 
 + { 
 + try 
 + { 
 + URL url = new URL ( " http : / / files . minecraftforge . net / maven / net / minecraftforge / forge / promotions _ slim . json " ) ; 
 + InputStream con = url . openStream ( ) ; 
 + String data = new String ( ByteStreams . toByteArray ( con ) ) ; 
 + con . close ( ) ; 
 + 
 + Map < String , Object > json = new Gson ( ) . fromJson ( data , Map . class ) ; 
 + String homepage = ( String ) json . get ( " homepage " ) ; 
 + Map < String , String > promos = ( Map < String , String > ) json . get ( " promos " ) ; 
 + 
 + String rec = promos . get ( MinecraftForge . MC _ VERSION + " - recommended " ) ; 
 + String lat = promos . get ( MinecraftForge . MC _ VERSION + " - latest " ) ; 
 + ArtifactVersion current = new DefaultArtifactVersion ( getVersion ( ) ) ; 
 + 
 + if ( rec ! = null ) 
 + { 
 + ArtifactVersion recommended = new DefaultArtifactVersion ( rec ) ; 
 + int diff = recommended . compareTo ( current ) ; 
 + 
 + if ( diff = = 0 ) 
 + status = UP _ TO _ DATE ; 
 + else if ( diff < 0 ) 
 + { 
 + status = AHEAD ; 
 + if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = OUTDATED ; 
 + target = lat ; 
 + } 
 + } 
 + } 
 + else 
 + { 
 + status = OUTDATED ; 
 + target = rec ; 
 + } 
 + } 
 + else if ( lat ! = null ) 
 + { 
 + if ( current . compareTo ( new DefaultArtifactVersion ( lat ) ) < 0 ) 
 + { 
 + status = BETA _ OUTDATED ; 
 + target = lat ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + else 
 + status = BETA ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + e . printStackTrace ( ) ; 
 + status = FAILED ; 
 + } 
 + } 
 + } . start ( ) ; 
 + } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / MinecraftForge . java b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 index bb4a94e . . 3a98b16 100644 
 - - - a / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 + + + b / src / main / java / net / minecraftforge / common / MinecraftForge . java 
 @ @ - 17 , 7 + 17 , 6 @ @ import net . minecraft . crash . CrashReport ; 
 import net . minecraft . entity . monster . EntityEnderman ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 - import net . minecraftforge . common . ForgeHooks . GrassEntry ; 
 import net . minecraftforge . common . ForgeHooks . SeedEntry ; 
 import net . minecraftforge . event . entity . EntityEvent ; 
 import net . minecraftforge . oredict . OreDictionary ; 
 @ @ - 35 , 6 + 34 , 7 @ @ public class MinecraftForge 
 public static final EventBus EVENT _ BUS = new EventBus ( ) ; 
 public static final EventBus TERRAIN _ GEN _ BUS = new EventBus ( ) ; 
 public static final EventBus ORE _ GEN _ BUS = new EventBus ( ) ; 
 + public static final String MC _ VERSION = " 1 . 7 . 2 " ; 
 
 private static final ForgeInternalHandler INTERNAL _ HANDLER = new ForgeInternalHandler ( ) ; 
 
 @ @ - 60 , 6 + 60 , 11 @ @ public class MinecraftForge 
 EVENT _ BUS . register ( INTERNAL _ HANDLER ) ; 
 OreDictionary . getOreName ( 0 ) ; 
 
 + if ( ! ForgeModContainer . disableVersionCheck ) 
 + { 
 + ForgeVersion . startVersionCheck ( ) ; 
 + } 
 + 
 / / Force these classes to be defined , Should prevent derp error hiding . 
 new CrashReport ( " ThisIsFake " , new Exception ( " Not real " ) ) ; 
 }
