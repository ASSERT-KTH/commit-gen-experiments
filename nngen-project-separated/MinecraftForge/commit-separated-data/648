BLEU SCORE: 0.013878192778615909

TEST MSG: Forge will now load extra mods from mods / mod _ list . json and mods / mc _ version / mod _ list . json .
GENERATED MSG: Canonicalized file paths in modListFile handling with the minecraftDirectory .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java <nl> index 1146d47 . . 6ecfb7d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java <nl> @ @ - 62 , 12 + 62 , 28 @ @ public class ModListHelper { <nl> tryAddFile ( modFile , null , modFile ) ; <nl> } <nl> } <nl> + <nl> + String [ ] extras = new String [ ] <nl> + { <nl> + " mods / mod _ list . json " , <nl> + " mods / " + FMLInjectionData . mccversion + " / mod _ list . json " <nl> + } ; <nl> + <nl> + for ( String extra : extras ) <nl> + { <nl> + if ( ( new File ( mcDirectory , extra ) ) . exists ( ) ) <nl> + parseListFile ( extra ) ; <nl> + } <nl> + <nl> } <nl> private static void parseListFile ( String listFile ) { <nl> File f ; <nl> try <nl> { <nl> - f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; <nl> + if ( listFile . startsWith ( " absolute : " ) ) <nl> + f = new File ( listFile . substring ( 9 ) ) . getCanonicalFile ( ) ; <nl> + else <nl> + f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; <nl> } catch ( IOException e2 ) <nl> { <nl> FMLRelaunchLog . log ( Level . INFO , e2 , " Unable to canonicalize path % s relative to % s " , listFile , mcDirectory . getAbsolutePath ( ) ) ;
NEAREST DIFF (one line): diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> index d30f5fe . . 6474acc 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java <nl> @ @ - 217 , 7 + 217 , 7 @ @ public class CoreModManager { <nl> <nl> private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) <nl> { <nl> - ModListHelper . parseModList ( ) ; <nl> + ModListHelper . parseModList ( mcDir ) ; <nl> FMLRelaunchLog . fine ( " Discovering coremods " ) ; <nl> File coreMods = setupCoreModDir ( mcDir ) ; <nl> FilenameFilter ff = new FilenameFilter ( ) { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java b / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java <nl> index 1afb9d2 . . b08b1af 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java <nl> @ @ - 2 , 34 + 2 , 31 @ @ package cpw . mods . fml . relauncher ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> - import java . util . ArrayList ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> - <nl> + import net . minecraft . launchwrapper . Launch ; <nl> import org . apache . logging . log4j . Level ; <nl> - <nl> import com . google . common . base . Charsets ; <nl> - import com . google . common . collect . Lists ; <nl> import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> import com . google . common . io . Files ; <nl> import com . google . gson . Gson ; <nl> import com . google . gson . JsonSyntaxException ; <nl> <nl> - import net . minecraft . launchwrapper . Launch ; <nl> - <nl> public class ModListHelper { <nl> public static class JsonModList { <nl> public String repositoryRoot ; <nl> public List < String > modRef ; <nl> public String parentList ; <nl> } <nl> + private static File mcDirectory ; <nl> private static Set < File > visitedFiles = Sets . newHashSet ( ) ; <nl> public static final Map < String , File > additionalMods = Maps . newLinkedHashMap ( ) ; <nl> - static void parseModList ( ) <nl> + static void parseModList ( File minecraftDirectory ) <nl> { <nl> - FMLRelaunchLog . fine ( " Attempting to load commandline specified mods " ) ; <nl> + FMLRelaunchLog . fine ( " Attempting to load commandline specified mods , relative to % s " , minecraftDirectory . getAbsolutePath ( ) ) ; <nl> + mcDirectory = minecraftDirectory ; <nl> @ SuppressWarnings ( " unchecked " ) <nl> Map < String , String > args = ( Map < String , String > ) Launch . blackboard . get ( " launchArgs " ) ; <nl> String listFile = args . get ( " - - modListFile " ) ; <nl> @ @ - 48 , 10 + 45 , 18 @ @ public class ModListHelper { <nl> } <nl> } <nl> private static void parseListFile ( String listFile ) { <nl> - File f = new File ( listFile ) ; <nl> + File f ; <nl> + try <nl> + { <nl> + f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; <nl> + } catch ( IOException e2 ) <nl> + { <nl> + FMLRelaunchLog . log ( Level . INFO , e2 , " Unable to canonicalize path % s relative to % s " , listFile , mcDirectory . getAbsolutePath ( ) ) ; <nl> + return ; <nl> + } <nl> if ( ! f . exists ( ) ) <nl> { <nl> - FMLRelaunchLog . info ( " Failed to find modList file % s " , listFile ) ; <nl> + FMLRelaunchLog . info ( " Failed to find modList file % s " , f . getAbsolutePath ( ) ) ; <nl> return ; <nl> } <nl> if ( visitedFiles . contains ( f ) ) <nl> @ @ - 109 , 7 + 114 , 7 @ @ public class ModListHelper { <nl> } <nl> } <nl> private static void tryAddFile ( String modFileName , File repoRoot , String descriptor ) { <nl> - File modFile = repoRoot ! = null ? new File ( repoRoot , modFileName ) : new File ( modFileName ) ; <nl> + File modFile = repoRoot ! = null ? new File ( repoRoot , modFileName ) : new File ( mcDirectory , modFileName ) ; <nl> if ( ! modFile . exists ( ) ) <nl> { <nl> FMLRelaunchLog . info ( " Failed to find mod file % s ( % s ) " , descriptor , modFile . getAbsolutePath ( ) ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java b / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java 
 index 1146d47 . . 6ecfb7d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / ModListHelper . java 
 @ @ - 62 , 12 + 62 , 28 @ @ public class ModListHelper { 
 tryAddFile ( modFile , null , modFile ) ; 
 } 
 } 
 + 
 + String [ ] extras = new String [ ] 
 + { 
 + " mods / mod _ list . json " , 
 + " mods / " + FMLInjectionData . mccversion + " / mod _ list . json " 
 + } ; 
 + 
 + for ( String extra : extras ) 
 + { 
 + if ( ( new File ( mcDirectory , extra ) ) . exists ( ) ) 
 + parseListFile ( extra ) ; 
 + } 
 + 
 } 
 private static void parseListFile ( String listFile ) { 
 File f ; 
 try 
 { 
 - f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; 
 + if ( listFile . startsWith ( " absolute : " ) ) 
 + f = new File ( listFile . substring ( 9 ) ) . getCanonicalFile ( ) ; 
 + else 
 + f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; 
 } catch ( IOException e2 ) 
 { 
 FMLRelaunchLog . log ( Level . INFO , e2 , " Unable to canonicalize path % s relative to % s " , listFile , mcDirectory . getAbsolutePath ( ) ) ;

NEAREST DIFF:
diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 index d30f5fe . . 6474acc 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 + + + b / fml / src / main / java / cpw / mods / fml / relauncher / CoreModManager . java 
 @ @ - 217 , 7 + 217 , 7 @ @ public class CoreModManager { 
 
 private static void discoverCoreMods ( File mcDir , LaunchClassLoader classLoader ) 
 { 
 - ModListHelper . parseModList ( ) ; 
 + ModListHelper . parseModList ( mcDir ) ; 
 FMLRelaunchLog . fine ( " Discovering coremods " ) ; 
 File coreMods = setupCoreModDir ( mcDir ) ; 
 FilenameFilter ff = new FilenameFilter ( ) { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java b / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java 
 index 1afb9d2 . . b08b1af 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java 
 + + + b / fml / src / main / java / cpw / mods / fml / relauncher / ModListHelper . java 
 @ @ - 2 , 34 + 2 , 31 @ @ package cpw . mods . fml . relauncher ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 - import java . util . ArrayList ; 
 import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 - 
 + import net . minecraft . launchwrapper . Launch ; 
 import org . apache . logging . log4j . Level ; 
 - 
 import com . google . common . base . Charsets ; 
 - import com . google . common . collect . Lists ; 
 import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 import com . google . common . io . Files ; 
 import com . google . gson . Gson ; 
 import com . google . gson . JsonSyntaxException ; 
 
 - import net . minecraft . launchwrapper . Launch ; 
 - 
 public class ModListHelper { 
 public static class JsonModList { 
 public String repositoryRoot ; 
 public List < String > modRef ; 
 public String parentList ; 
 } 
 + private static File mcDirectory ; 
 private static Set < File > visitedFiles = Sets . newHashSet ( ) ; 
 public static final Map < String , File > additionalMods = Maps . newLinkedHashMap ( ) ; 
 - static void parseModList ( ) 
 + static void parseModList ( File minecraftDirectory ) 
 { 
 - FMLRelaunchLog . fine ( " Attempting to load commandline specified mods " ) ; 
 + FMLRelaunchLog . fine ( " Attempting to load commandline specified mods , relative to % s " , minecraftDirectory . getAbsolutePath ( ) ) ; 
 + mcDirectory = minecraftDirectory ; 
 @ SuppressWarnings ( " unchecked " ) 
 Map < String , String > args = ( Map < String , String > ) Launch . blackboard . get ( " launchArgs " ) ; 
 String listFile = args . get ( " - - modListFile " ) ; 
 @ @ - 48 , 10 + 45 , 18 @ @ public class ModListHelper { 
 } 
 } 
 private static void parseListFile ( String listFile ) { 
 - File f = new File ( listFile ) ; 
 + File f ; 
 + try 
 + { 
 + f = new File ( mcDirectory , listFile ) . getCanonicalFile ( ) ; 
 + } catch ( IOException e2 ) 
 + { 
 + FMLRelaunchLog . log ( Level . INFO , e2 , " Unable to canonicalize path % s relative to % s " , listFile , mcDirectory . getAbsolutePath ( ) ) ; 
 + return ; 
 + } 
 if ( ! f . exists ( ) ) 
 { 
 - FMLRelaunchLog . info ( " Failed to find modList file % s " , listFile ) ; 
 + FMLRelaunchLog . info ( " Failed to find modList file % s " , f . getAbsolutePath ( ) ) ; 
 return ; 
 } 
 if ( visitedFiles . contains ( f ) ) 
 @ @ - 109 , 7 + 114 , 7 @ @ public class ModListHelper { 
 } 
 } 
 private static void tryAddFile ( String modFileName , File repoRoot , String descriptor ) { 
 - File modFile = repoRoot ! = null ? new File ( repoRoot , modFileName ) : new File ( modFileName ) ; 
 + File modFile = repoRoot ! = null ? new File ( repoRoot , modFileName ) : new File ( mcDirectory , modFileName ) ; 
 if ( ! modFile . exists ( ) ) 
 { 
 FMLRelaunchLog . info ( " Failed to find mod file % s ( % s ) " , descriptor , modFile . getAbsolutePath ( ) ) ;
