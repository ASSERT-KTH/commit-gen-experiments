BLEU SCORE: 0.016087046643979717

TEST MSG: Improve javadocs for Mod dependencies
GENERATED MSG: Revert commits related to filtering proxy and Automatic Subscriber annotations .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> index 830bddc . . 7ff9bd6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java <nl> @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; <nl> import net . minecraftforge . fml . common . event . FMLInterModComms . IMCEvent ; <nl> import net . minecraftforge . fml . common . network . NetworkCheckHandler ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> + import net . minecraftforge . fml . common . versioning . VersionRange ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> / * * <nl> @ @ - 83 , 18 + 84 , 44 @ @ public @ interface Mod <nl> * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . <nl> * / <nl> String modid ( ) ; <nl> + <nl> / * * <nl> * A user friendly name for the mod <nl> * / <nl> String name ( ) default " " ; <nl> + <nl> / * * <nl> - * A version string for this mod <nl> + * A version string for this mod . <nl> + * <nl> + * The version string here should be just numbers separated by dots , <nl> + * to make specifying { @ link # dependencies ( ) } simple for other mods . <nl> * / <nl> String version ( ) default " " ; <nl> + <nl> / * * <nl> - * A simple dependency string for this mod ( see modloader ' s " priorities " string specification ) <nl> + * A dependency string for this mod , which specifies which mod ( s ) it depends on in order to run . <nl> + * <nl> + * A dependency string can start with the following four prefixes : <nl> + * before , after , required - before , required - after <nl> + * Then " : " and the mod id . <nl> + * <nl> + * Optionally , a version range can be specified for the mod by adding " @ " and then the version range . <nl> + * The version range format is described in the javadoc here : { @ link VersionRange # createFromVersionSpec ( java . lang . String ) } <nl> + * <nl> + * If a " required " mod is missing , or a mod exists with a version outside the specified range , <nl> + * the game will not start and an error screen will tell the player which versions are required . <nl> + * <nl> + * Example : <nl> + * Our example mod is a dedicated addon to mod1 and has optional integration with mod2 . <nl> + * It uses new features that were introduced in forge version 14 . 21 . 1 . 2395 and mod2 version 4 . 7 . 0 <nl> + * <nl> + * the dependencies string = " after : forge @ [ 14 . 21 . 1 . 2395 , ) ; required - after : mod1 ; after : mod2 @ [ 4 . 7 . 0 , ) ; " <nl> + * <nl> + * This will stop the game and display an error message if any of these is true : <nl> + * The installed forge is too old , mod1 is missing , or an old version of mod2 is present . <nl> * / <nl> String dependencies ( ) default " " ; <nl> + <nl> / * * <nl> * Whether to use the mcmod . info metadata by default for this mod . <nl> * If true , settings in the mcmod . info file will override settings in these annotations .
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> index 230abe4 . . d1fe342 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java <nl> @ @ - 51 , 24 + 51 , 6 @ @ public class AutomaticEventSubscriber <nl> { <nl> try <nl> { <nl> - / / Filter out handlers for things that arnt this mod . <nl> - / / Perhaps find a way to make this more generic for multiple mods <nl> - / / from the same source . . . . <nl> - boolean register = true ; <nl> - for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) <nl> - { <nl> - if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) <nl> - { <nl> - if ( ! mod . getModId ( ) . equals ( a . getAnnotationInfo ( ) . get ( " modid " ) ) ) <nl> - { <nl> - register = false ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - if ( ! register ) <nl> - continue ; <nl> - <nl> / / noinspection unchecked <nl> List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; <nl> EnumSet < Side > sides = DEFAULT ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> index d159168 . . 9c66694 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java <nl> @ @ - 47 , 30 + 47 , 6 @ @ public class ProxyInjector <nl> { <nl> try <nl> { <nl> - / / Pull this from the ASM data so we do not prematurely initialize mods with the below Class . forName <nl> - String modid = ( String ) targ . getAnnotationInfo ( ) . get ( " modId " ) ; <nl> - if ( modid = = null ) <nl> - { <nl> - for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) <nl> - { <nl> - if ( isProxyFromMod ( a . getClassName ( ) , targ . getClassName ( ) ) ) <nl> - { <nl> - modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - if ( modid = = null ) <nl> - { <nl> - FMLLog . warning ( " Unable to determine the associated mod for proxy injection for % s . % s , assuming it ' s from % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> - } <nl> - else if ( ! modid . equals ( mod . getModId ( ) ) ) <nl> - { <nl> - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s , it should belong to % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) , modid ) ; <nl> - continue ; <nl> - } <nl> - <nl> Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; <nl> Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; <nl> if ( target = = null ) <nl> @ @ - 82 , 6 + 58 , 11 @ @ public class ProxyInjector <nl> target . setAccessible ( true ) ; <nl> <nl> SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; <nl> + if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) <nl> + { <nl> + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; <nl> + continue ; <nl> + } <nl> String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; <nl> if ( targetType . equals ( " " ) ) <nl> { <nl> @ @ - 111 , 36 + 92 , 4 @ @ public class ProxyInjector <nl> / / Allow language specific proxy injection . <nl> languageAdapter . setInternalProxies ( mod , side , mcl ) ; <nl> } <nl> - <nl> - / * * <nl> - * Checks if a proxy is part of a mod . <nl> - * <nl> - * Checks that the proxy is somewhere in the same package that holds the mod . <nl> - * For example , the @ Mod is ' com . modname . Mod ' , the Proxy is ' com . modname . proxies . ProxyClient ' <nl> - * The package of the mod is ' com . modname ' , and Proxy is in that package , so it is from the mod . <nl> - * <nl> - * Compares each path section in a for loop instead of simply using { @ link String # startsWith ( String ) } <nl> - * because a mod like ' com . modname . Mod ' with package ' com . modname ' <nl> - * does not own a proxy from ' com . modnametools . proxies . ProxyClient ' even though they start the same . <nl> - * / <nl> - private static boolean isProxyFromMod ( String modClassName , String proxyClassName ) <nl> - { <nl> - if ( modClassName . equals ( proxyClassName ) ) <nl> - return true ; <nl> - <nl> - String [ ] modPath = modClassName . split ( " \ \ . " ) ; <nl> - String [ ] proxyPath = proxyClassName . split ( " \ \ . " ) ; <nl> - if ( proxyPath . length < modPath . length ) <nl> - return false ; <nl> - <nl> - for ( int i = 0 ; i < modPath . length - 1 ; i + + ) <nl> - { <nl> - if ( ! modPath [ i ] . equals ( proxyPath [ i ] ) ) <nl> - { <nl> - return false ; <nl> - } <nl> - } <nl> - <nl> - return true ; <nl> - } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / Mod . java b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 index 830bddc . . 7ff9bd6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Mod . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Mod . java 
 @ @ - 39 , 6 + 39 , 7 @ @ import net . minecraftforge . fml . common . event . FMLServerStoppingEvent ; 
 import net . minecraftforge . fml . common . event . FMLInterModComms . IMCEvent ; 
 import net . minecraftforge . fml . common . network . NetworkCheckHandler ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 + import net . minecraftforge . fml . common . versioning . VersionRange ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 / * * 
 @ @ - 83 , 18 + 84 , 44 @ @ public @ interface Mod 
 * By default , you will have a resource domain that matches the modid . All these uses require that constraints are imposed on the format of the modid . 
 * / 
 String modid ( ) ; 
 + 
 / * * 
 * A user friendly name for the mod 
 * / 
 String name ( ) default " " ; 
 + 
 / * * 
 - * A version string for this mod 
 + * A version string for this mod . 
 + * 
 + * The version string here should be just numbers separated by dots , 
 + * to make specifying { @ link # dependencies ( ) } simple for other mods . 
 * / 
 String version ( ) default " " ; 
 + 
 / * * 
 - * A simple dependency string for this mod ( see modloader ' s " priorities " string specification ) 
 + * A dependency string for this mod , which specifies which mod ( s ) it depends on in order to run . 
 + * 
 + * A dependency string can start with the following four prefixes : 
 + * before , after , required - before , required - after 
 + * Then " : " and the mod id . 
 + * 
 + * Optionally , a version range can be specified for the mod by adding " @ " and then the version range . 
 + * The version range format is described in the javadoc here : { @ link VersionRange # createFromVersionSpec ( java . lang . String ) } 
 + * 
 + * If a " required " mod is missing , or a mod exists with a version outside the specified range , 
 + * the game will not start and an error screen will tell the player which versions are required . 
 + * 
 + * Example : 
 + * Our example mod is a dedicated addon to mod1 and has optional integration with mod2 . 
 + * It uses new features that were introduced in forge version 14 . 21 . 1 . 2395 and mod2 version 4 . 7 . 0 
 + * 
 + * the dependencies string = " after : forge @ [ 14 . 21 . 1 . 2395 , ) ; required - after : mod1 ; after : mod2 @ [ 4 . 7 . 0 , ) ; " 
 + * 
 + * This will stop the game and display an error message if any of these is true : 
 + * The installed forge is too old , mod1 is missing , or an old version of mod2 is present . 
 * / 
 String dependencies ( ) default " " ; 
 + 
 / * * 
 * Whether to use the mcmod . info metadata by default for this mod . 
 * If true , settings in the mcmod . info file will override settings in these annotations .

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 index 230abe4 . . d1fe342 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / AutomaticEventSubscriber . java 
 @ @ - 51 , 24 + 51 , 6 @ @ public class AutomaticEventSubscriber 
 { 
 try 
 { 
 - / / Filter out handlers for things that arnt this mod . 
 - / / Perhaps find a way to make this more generic for multiple mods 
 - / / from the same source . . . . 
 - boolean register = true ; 
 - for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) 
 - { 
 - if ( a . getClassName ( ) . equals ( targ . getClassName ( ) ) ) 
 - { 
 - if ( ! mod . getModId ( ) . equals ( a . getAnnotationInfo ( ) . get ( " modid " ) ) ) 
 - { 
 - register = false ; 
 - break ; 
 - } 
 - } 
 - } 
 - if ( ! register ) 
 - continue ; 
 - 
 / / noinspection unchecked 
 List < ModAnnotation . EnumHolder > sidesEnum = ( List < ModAnnotation . EnumHolder > ) targ . getAnnotationInfo ( ) . get ( " value " ) ; 
 EnumSet < Side > sides = DEFAULT ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 index d159168 . . 9c66694 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / ProxyInjector . java 
 @ @ - 47 , 30 + 47 , 6 @ @ public class ProxyInjector 
 { 
 try 
 { 
 - / / Pull this from the ASM data so we do not prematurely initialize mods with the below Class . forName 
 - String modid = ( String ) targ . getAnnotationInfo ( ) . get ( " modId " ) ; 
 - if ( modid = = null ) 
 - { 
 - for ( ASMData a : data . getAll ( Mod . class . getName ( ) ) ) 
 - { 
 - if ( isProxyFromMod ( a . getClassName ( ) , targ . getClassName ( ) ) ) 
 - { 
 - modid = ( String ) a . getAnnotationInfo ( ) . get ( " modid " ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - 
 - if ( modid = = null ) 
 - { 
 - FMLLog . warning ( " Unable to determine the associated mod for proxy injection for % s . % s , assuming it ' s from % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 - } 
 - else if ( ! modid . equals ( mod . getModId ( ) ) ) 
 - { 
 - FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s , it should belong to % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) , modid ) ; 
 - continue ; 
 - } 
 - 
 Class < ? > proxyTarget = Class . forName ( targ . getClassName ( ) , true , mcl ) ; 
 Field target = proxyTarget . getDeclaredField ( targ . getObjectName ( ) ) ; 
 if ( target = = null ) 
 @ @ - 82 , 6 + 58 , 11 @ @ public class ProxyInjector 
 target . setAccessible ( true ) ; 
 
 SidedProxy annotation = target . getAnnotation ( SidedProxy . class ) ; 
 + if ( ! Strings . isNullOrEmpty ( annotation . modId ( ) ) & & ! annotation . modId ( ) . equals ( mod . getModId ( ) ) ) 
 + { 
 + FMLLog . fine ( " Skipping proxy injection for % s . % s since it is not for mod % s " , targ . getClassName ( ) , targ . getObjectName ( ) , mod . getModId ( ) ) ; 
 + continue ; 
 + } 
 String targetType = side . isClient ( ) ? annotation . clientSide ( ) : annotation . serverSide ( ) ; 
 if ( targetType . equals ( " " ) ) 
 { 
 @ @ - 111 , 36 + 92 , 4 @ @ public class ProxyInjector 
 / / Allow language specific proxy injection . 
 languageAdapter . setInternalProxies ( mod , side , mcl ) ; 
 } 
 - 
 - / * * 
 - * Checks if a proxy is part of a mod . 
 - * 
 - * Checks that the proxy is somewhere in the same package that holds the mod . 
 - * For example , the @ Mod is ' com . modname . Mod ' , the Proxy is ' com . modname . proxies . ProxyClient ' 
 - * The package of the mod is ' com . modname ' , and Proxy is in that package , so it is from the mod . 
 - * 
 - * Compares each path section in a for loop instead of simply using { @ link String # startsWith ( String ) } 
 - * because a mod like ' com . modname . Mod ' with package ' com . modname ' 
 - * does not own a proxy from ' com . modnametools . proxies . ProxyClient ' even though they start the same . 
 - * / 
 - private static boolean isProxyFromMod ( String modClassName , String proxyClassName ) 
 - { 
 - if ( modClassName . equals ( proxyClassName ) ) 
 - return true ; 
 - 
 - String [ ] modPath = modClassName . split ( " \ \ . " ) ; 
 - String [ ] proxyPath = proxyClassName . split ( " \ \ . " ) ; 
 - if ( proxyPath . length < modPath . length ) 
 - return false ; 
 - 
 - for ( int i = 0 ; i < modPath . length - 1 ; i + + ) 
 - { 
 - if ( ! modPath [ i ] . equals ( proxyPath [ i ] ) ) 
 - { 
 - return false ; 
 - } 
 - } 
 - 
 - return true ; 
 - } 
 }
