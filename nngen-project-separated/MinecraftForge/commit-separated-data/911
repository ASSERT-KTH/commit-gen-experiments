BLEU SCORE: 0.00882875838860343

TEST MSG: Fix language adapter loading .
GENERATED MSG: Attempt to inject coremods as tweakers , so both can share a dependency ordering

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 05ea505 . . eec059f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 86 , 12 + 86 , 12 @ @ public class FMLModContainer implements ModContainer <nl> private String modLanguage ; <nl> private ILanguageAdapter languageAdapter ; <nl> private Disableable disableability ; <nl> - private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; <nl> + private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; <nl> private Map < String , String > customModProperties ; <nl> private ModCandidate candidate ; <nl> private URL updateJSONUrl ; <nl> <nl> - public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> + public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) <nl> { <nl> this . className = className ; <nl> this . source = container . getModContainer ( ) ; <nl> @ @ - 99 , 7 + 99 , 7 @ @ public class FMLModContainer implements ModContainer <nl> this . descriptor = modDescriptor ; <nl> this . eventMethods = ArrayListMultimap . create ( ) ; <nl> <nl> - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; <nl> String languageAdapterType = ( String ) modDescriptor . get ( " modLanguageAdapter " ) ; <nl> if ( Strings . isNullOrEmpty ( languageAdapterType ) ) <nl> { <nl> @ @ - 107 , 27 + 107 , 33 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> else <nl> { <nl> + / / Delay loading of the adapter until the mod is on the classpath , in case the mod itself contains it . <nl> + this . languageAdapter = null ; <nl> + FMLLog . finer ( " Using custom language adapter % s for % s ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private ILanguageAdapter getLanguageAdapter ( ) <nl> + { <nl> + if ( languageAdapter = = null ) <nl> + { <nl> try <nl> { <nl> - this . languageAdapter = ( ILanguageAdapter ) Class . forName ( languageAdapterType , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; <nl> - FMLLog . finer ( " Using custom language adapter % s ( type % s ) for % s ( modid % s ) " , this . languageAdapter , languageAdapterType , this . className , getModId ( ) ) ; <nl> + languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) descriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; <nl> } <nl> catch ( Exception ex ) <nl> { <nl> - FMLLog . log ( Level . ERROR , ex , " Error constructing custom mod language adapter % s ( referenced by % s ) ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; <nl> - throw new LoaderException ( ex ) ; <nl> + FMLLog . log ( Level . ERROR , ex , " Error constructing custom mod language adapter referenced by % s ( modid : % s ) " , this . className , getModId ( ) ) ; <nl> + throw new RuntimeException ( ex ) ; <nl> } <nl> } <nl> - } <nl> - <nl> - private ILanguageAdapter getLanguageAdapter ( ) <nl> - { <nl> return languageAdapter ; <nl> } <nl> + <nl> @ Override <nl> public String getModId ( ) <nl> { <nl> - return ( String ) descriptor . get ( " modid " ) ; <nl> + return ( String ) descriptor . get ( " modid " ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 169 , 7 + 175 , 7 @ @ public class FMLModContainer implements ModContainer <nl> Set < ArtifactVersion > requirements = Sets . newHashSet ( ) ; <nl> List < ArtifactVersion > dependencies = Lists . newArrayList ( ) ; <nl> List < ArtifactVersion > dependants = Lists . newArrayList ( ) ; <nl> - annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; <nl> + annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; <nl> Loader . instance ( ) . computeDependencies ( annotationDependencies , requirements , dependencies , dependants ) ; <nl> dependants . addAll ( Loader . instance ( ) . getInjectedBefore ( getModId ( ) ) ) ; <nl> dependencies . addAll ( Loader . instance ( ) . getInjectedAfter ( getModId ( ) ) ) ; <nl> @ @ - 184 , 16 + 190 , 16 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> if ( Strings . isNullOrEmpty ( modMetadata . name ) ) <nl> { <nl> - FMLLog . log ( getModId ( ) , Level . INFO , " Mod % s is missing the required element ' name ' . Substituting % s " , getModId ( ) , getModId ( ) ) ; <nl> + FMLLog . log ( getModId ( ) , Level . INFO , " Mod % s is missing the required element ' name ' . Substituting % s " , getModId ( ) , getModId ( ) ) ; <nl> modMetadata . name = getModId ( ) ; <nl> } <nl> - internalVersion = ( String ) descriptor . get ( " version " ) ; <nl> + internalVersion = ( String ) descriptor . get ( " version " ) ; <nl> if ( Strings . isNullOrEmpty ( internalVersion ) ) <nl> { <nl> Properties versionProps = searchForVersionProperties ( ) ; <nl> if ( versionProps ! = null ) <nl> { <nl> - internalVersion = versionProps . getProperty ( getModId ( ) + " . version " ) ; <nl> + internalVersion = versionProps . getProperty ( getModId ( ) + " . version " ) ; <nl> FMLLog . log ( getModId ( ) , Level . DEBUG , " Found version % s for mod % s in version . properties , using " , internalVersion , getModId ( ) ) ; <nl> } <nl> <nl> @ @ - 209 , 7 + 215 , 7 @ @ public class FMLModContainer implements ModContainer <nl> modMetadata . version = internalVersion = " 1 . 0 " ; <nl> } <nl> <nl> - String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> + String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; <nl> if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) <nl> { <nl> minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; <nl> @ @ - 237 , 13 + 243 , 13 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> try <nl> { <nl> - FMLLog . log ( getModId ( ) , Level . DEBUG , " Attempting to load the file version . properties from % s to locate a version number for % s " , getSource ( ) . getName ( ) , getModId ( ) ) ; <nl> + FMLLog . log ( getModId ( ) , Level . DEBUG , " Attempting to load the file version . properties from % s to locate a version number for % s " , getSource ( ) . getName ( ) , getModId ( ) ) ; <nl> Properties version = null ; <nl> if ( getSource ( ) . isFile ( ) ) <nl> { <nl> ZipFile source = new ZipFile ( getSource ( ) ) ; <nl> ZipEntry versionFile = source . getEntry ( " version . properties " ) ; <nl> - if ( versionFile ! = null ) <nl> + if ( versionFile ! = null ) <nl> { <nl> version = new Properties ( ) ; <nl> version . load ( source . getInputStream ( versionFile ) ) ; <nl> @ @ - 252 , 7 + 258 , 7 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> else if ( getSource ( ) . isDirectory ( ) ) <nl> { <nl> - File propsFile = new File ( getSource ( ) , " version . properties " ) ; <nl> + File propsFile = new File ( getSource ( ) , " version . properties " ) ; <nl> if ( propsFile . exists ( ) & & propsFile . isFile ( ) ) <nl> { <nl> version = new Properties ( ) ; <nl> @ @ - 343 , 11 + 349 , 11 @ @ public class FMLModContainer implements ModContainer <nl> if ( m . getParameterTypes ( ) . length = = 1 & & FMLEvent . class . isAssignableFrom ( m . getParameterTypes ( ) [ 0 ] ) ) <nl> { <nl> m . setAccessible ( true ) ; <nl> - eventMethods . put ( ( Class < ? extends FMLEvent > ) m . getParameterTypes ( ) [ 0 ] , m ) ; <nl> + eventMethods . put ( ( Class < ? extends FMLEvent > ) m . getParameterTypes ( ) [ 0 ] , m ) ; <nl> } <nl> else <nl> { <nl> - FMLLog . log ( getModId ( ) , Level . ERROR , " The mod % s appears to have an invalid event annotation % s . This annotation can only apply to methods with recognized event arguments - it will not be called " , getModId ( ) , a . annotationType ( ) . getSimpleName ( ) ) ; <nl> + FMLLog . log ( getModId ( ) , Level . ERROR , " The mod % s appears to have an invalid event annotation % s . This annotation can only apply to methods with recognized event arguments - it will not be called " , getModId ( ) , a . annotationType ( ) . getSimpleName ( ) ) ; <nl> } <nl> } <nl> else if ( a . annotationType ( ) . equals ( Mod . InstanceFactory . class ) ) <nl> @ @ - 359 , 7 + 365 , 7 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> else if ( ! ( Modifier . isStatic ( m . getModifiers ( ) ) & & m . getParameterTypes ( ) . length = = 0 ) ) <nl> { <nl> - FMLLog . log ( getModId ( ) , Level . ERROR , " The InstanceFactory annotation can only apply to a static method , taking zero arguments - it will be ignored on % s ( % s ) " , m . getName ( ) , Arrays . asList ( m . getParameterTypes ( ) ) ) ; <nl> + FMLLog . log ( getModId ( ) , Level . ERROR , " The InstanceFactory annotation can only apply to a static method , taking zero arguments - it will be ignored on % s ( % s ) " , m . getName ( ) , Arrays . asList ( m . getParameterTypes ( ) ) ) ; <nl> } <nl> else if ( factoryMethod ! = null ) <nl> { <nl> @ @ - 399 , 7 + 405 , 7 @ @ public class FMLModContainer implements ModContainer <nl> String annotationName = annName [ annName . length - 1 ] ; <nl> for ( ASMData targets : annotations . get ( annotationClassName ) ) <nl> { <nl> - String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; <nl> + String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; <nl> Field f = null ; <nl> Object injectedMod = null ; <nl> ModContainer mc = this ; <nl> @ @ - 475 , 7 + 481 , 7 @ @ public class FMLModContainer implements ModContainer <nl> ImmutableList < String > certList = certBuilder . build ( ) ; <nl> sourceFingerprints = ImmutableSet . copyOf ( certList ) ; <nl> <nl> - String expectedFingerprint = ( String ) descriptor . get ( " certificateFingerprint " ) ; <nl> + String expectedFingerprint = ( String ) descriptor . get ( " certificateFingerprint " ) ; <nl> <nl> fingerprintNotPresent = true ; <nl> <nl> @ @ - 498 , 13 + 504 , 13 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> - List < Map < String , Object > > props = ( List < Map < String , Object > > ) descriptor . get ( " customProperties " ) ; <nl> + List < Map < String , Object > > props = ( List < Map < String , Object > > ) descriptor . get ( " customProperties " ) ; <nl> if ( props ! = null ) <nl> { <nl> - com . google . common . collect . ImmutableMap . Builder < String , String > builder = ImmutableMap . < String , String > builder ( ) ; <nl> + com . google . common . collect . ImmutableMap . Builder < String , String > builder = ImmutableMap . < String , String > builder ( ) ; <nl> for ( Map < String , Object > p : props ) <nl> { <nl> - builder . put ( ( String ) p . get ( " k " ) , ( String ) p . get ( " v " ) ) ; <nl> + builder . put ( ( String ) p . get ( " k " ) , ( String ) p . get ( " v " ) ) ; <nl> } <nl> customModProperties = builder . build ( ) ; <nl> } <nl> @ @ - 513 , 7 + 519 , 7 @ @ public class FMLModContainer implements ModContainer <nl> customModProperties = EMPTY _ PROPERTIES ; <nl> } <nl> <nl> - Boolean hasDisableableFlag = ( Boolean ) descriptor . get ( " canBeDeactivated " ) ; <nl> + Boolean hasDisableableFlag = ( Boolean ) descriptor . get ( " canBeDeactivated " ) ; <nl> boolean hasReverseDepends = ! event . getReverseDependencies ( ) . get ( getModId ( ) ) . isEmpty ( ) ; <nl> if ( hasDisableableFlag ! = null & & hasDisableableFlag ) <nl> { <nl> @ @ - 524 , 7 + 530 , 7 @ @ public class FMLModContainer implements ModContainer <nl> disableability = hasReverseDepends ? Disableable . DEPENDENCIES : Disableable . RESTART ; <nl> } <nl> Method factoryMethod = gatherAnnotations ( clazz ) ; <nl> - modInstance = getLanguageAdapter ( ) . getNewInstance ( this , clazz , modClassLoader , factoryMethod ) ; <nl> + modInstance = getLanguageAdapter ( ) . getNewInstance ( this , clazz , modClassLoader , factoryMethod ) ; <nl> NetworkRegistry . INSTANCE . register ( this , clazz , ( String ) ( descriptor . containsKey ( " acceptableRemoteVersions " ) ? descriptor . get ( " acceptableRemoteVersions " ) : null ) , event . getASMHarvestedData ( ) ) ; <nl> if ( fingerprintNotPresent ) <nl> { <nl> @ @ - 568 , 6 + 574 , 7 @ @ public class FMLModContainer implements ModContainer <nl> } <nl> return processedVersion ; <nl> } <nl> + <nl> @ Override <nl> public boolean isImmutable ( ) <nl> { <nl> @ @ - 595 , 7 + 602 , 7 @ @ public class FMLModContainer implements ModContainer <nl> @ Override <nl> public String toString ( ) <nl> { <nl> - return " FMLMod : " + getModId ( ) + " { " + getVersion ( ) + " } " ; <nl> + return " FMLMod : " + getModId ( ) + " { " + getVersion ( ) + " } " ; <nl> } <nl> <nl> @ Override <nl> @ @ - 609 , 20 + 616 , 21 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> try <nl> { <nl> - return getSource ( ) . isDirectory ( ) ? Class . forName ( " net . minecraftforge . fml . client . FMLFolderResourcePack " , true , getClass ( ) . getClassLoader ( ) ) : Class . forName ( " net . minecraftforge . fml . client . FMLFileResourcePack " , true , getClass ( ) . getClassLoader ( ) ) ; <nl> + return getSource ( ) . isDirectory ( ) ? Class . forName ( " net . minecraftforge . fml . client . FMLFolderResourcePack " , true , getClass ( ) . getClassLoader ( ) ) : Class . forName ( " net . minecraftforge . fml . client . FMLFileResourcePack " , true , getClass ( ) . getClassLoader ( ) ) ; <nl> } <nl> catch ( ClassNotFoundException e ) <nl> { <nl> return null ; <nl> } <nl> } <nl> + <nl> @ Override <nl> public Map < String , String > getSharedModDescriptor ( ) <nl> { <nl> - Map < String , String > descriptor = Maps . newHashMap ( ) ; <nl> + Map < String , String > descriptor = Maps . newHashMap ( ) ; <nl> descriptor . put ( " modsystem " , " FML " ) ; <nl> descriptor . put ( " id " , getModId ( ) ) ; <nl> - descriptor . put ( " version " , getDisplayVersion ( ) ) ; <nl> + descriptor . put ( " version " , getDisplayVersion ( ) ) ; <nl> descriptor . put ( " name " , getName ( ) ) ; <nl> descriptor . put ( " url " , modMetadata . url ) ; <nl> descriptor . put ( " authors " , modMetadata . getAuthorList ( ) ) ; <nl> @ @ - 639 , 7 + 647 , 7 @ @ public class FMLModContainer implements ModContainer <nl> @ Override <nl> public String getGuiClassName ( ) <nl> { <nl> - return ( String ) descriptor . get ( " guiFactory " ) ; <nl> + return ( String ) descriptor . get ( " guiFactory " ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 650 , 7 + 658 , 10 @ @ public class FMLModContainer implements ModContainer <nl> <nl> private boolean isTrue ( Boolean value ) <nl> { <nl> - if ( value = = null ) return false ; <nl> + if ( value = = null ) <nl> + { <nl> + return false ; <nl> + } <nl> return value . booleanValue ( ) ; <nl> } <nl> <nl> @ @ - 661 , 7 + 672 , 9 @ @ public class FMLModContainer implements ModContainer <nl> boolean serverSideOnly = isTrue ( ( Boolean ) descriptor . get ( " serverSideOnly " ) ) ; <nl> <nl> if ( clientSideOnly & & serverSideOnly ) <nl> + { <nl> throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; <nl> + } <nl> <nl> Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; <nl> <nl> @ @ - 685 , 4 + 698 , 4 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> return updateJSONUrl ; <nl> } <nl> - } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java b / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java <nl> deleted file mode 100644 <nl> index feb701e . . 0000000 <nl> - - - a / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java <nl> + + + / dev / null <nl> @ @ - 1 , 12 + 0 , 0 @ @ <nl> - package cpw . mods . fml . common . launcher ; <nl> - <nl> - import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; <nl> - <nl> - public class ASMCoreModTweakWrapperGenerator { <nl> - private IFMLLoadingPlugin coreModToWrap ; <nl> - <nl> - public ASMCoreModTweakWrapperGenerator ( IFMLLoadingPlugin toWrap ) { <nl> - <nl> - } <nl> - <nl> - } <nl> diff - - git a / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java b / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java <nl> new file mode 100644 <nl> index 0000000 . . bfb4b55 <nl> - - - / dev / null <nl> + + + b / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java <nl> @ @ - 0 , 0 + 1 , 54 @ @ <nl> + package cpw . mods . fml . common . launcher ; <nl> + <nl> + import java . io . File ; <nl> + import java . util . List ; <nl> + <nl> + import cpw . mods . fml . relauncher . CoreModManager ; <nl> + <nl> + import net . minecraft . launchwrapper . ITweaker ; <nl> + import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> + <nl> + / * * <nl> + * This class is to manage the injection of coremods as tweakers into the tweak framework . <nl> + * It has to inject the coremod tweaks during construction , because that is the only time <nl> + * the tweak list is writeable . <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + public class FMLInjectionAndSortingTweaker implements ITweaker { <nl> + private boolean run ; <nl> + public FMLInjectionAndSortingTweaker ( ) <nl> + { <nl> + CoreModManager . injectCoreModTweaks ( this ) ; <nl> + run = false ; <nl> + } <nl> + <nl> + @ Override <nl> + public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) <nl> + { <nl> + if ( ! run ) <nl> + { <nl> + / / We sort the tweak list here so that it obeys the tweakordering <nl> + CoreModManager . sortTweakList ( ) ; <nl> + } <nl> + run = true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void injectIntoClassLoader ( LaunchClassLoader classLoader ) <nl> + { <nl> + } <nl> + <nl> + @ Override <nl> + public String getLaunchTarget ( ) <nl> + { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getLaunchArguments ( ) <nl> + { <nl> + return new String [ 0 ] ; <nl> + } <nl> + <nl> + } <nl> diff - - git a / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java b / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> index ed13b35 . . 0fef1c1 100644 <nl> - - - a / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> + + + b / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java <nl> @ @ - 38 , 7 + 38 , 6 @ @ public class FMLTweaker implements ITweaker { <nl> private Map < String , String > launchArgs ; <nl> private List < String > standaloneArgs ; <nl> private static URI jarLocation ; <nl> - private List < Integer > sortOrderValues = Lists . newArrayList ( ) ; <nl> <nl> @ Override <nl> public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) <nl> @ @ - 158 , 24 + 157 , 9 @ @ public class FMLTweaker implements ITweaker { <nl> return jarLocation ; <nl> } <nl> <nl> - public void injectCascadingTweak ( String tweakClassName , Integer sortingOrder ) <nl> + public void injectCascadingTweak ( String tweakClassName ) <nl> { <nl> List < String > tweakClasses = ( List < String > ) Launch . blackboard . get ( " TweakClasses " ) ; <nl> - if ( tweakClasses . size ( ) ! = sortOrderValues . size ( ) ) <nl> - { <nl> - throw new RuntimeException ( " Sort ordering mismatch ! " ) ; <nl> - } <nl> - int i = 0 ; <nl> - for ( i = 0 ; i < sortOrderValues . size ( ) ; i + + ) <nl> - { <nl> - Integer sort = sortOrderValues . get ( i ) ; <nl> - if ( sort . compareTo ( sortingOrder ) > 0 ) <nl> - { <nl> - break ; <nl> - } <nl> - } <nl> - tweakClasses . add ( i , tweakClassName ) ; <nl> - sortOrderValues . add ( i , sortingOrder ) ; <nl> + tweakClasses . add ( tweakClassName ) ; <nl> } <nl> - <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / relauncher / CoreModManager . java b / fml / common / cpw / mods / fml / relauncher / CoreModManager . java <nl> index 20946ec . . 0e8c0d9 100644 <nl> - - - a / fml / common / cpw / mods / fml / relauncher / CoreModManager . java <nl> + + + b / fml / common / cpw / mods / fml / relauncher / CoreModManager . java <nl> @ @ - 21 , 6 + 21 , 8 @ @ import java . net . URL ; <nl> import java . net . URLClassLoader ; <nl> import java . util . ArrayList ; <nl> import java . util . Arrays ; <nl> + import java . util . Collections ; <nl> + import java . util . Comparator ; <nl> import java . util . HashMap ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 40 , 17 + 42 , 18 @ @ import com . google . common . collect . ObjectArrays ; <nl> import com . google . common . primitives . Ints ; <nl> <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker ; <nl> import cpw . mods . fml . common . launcher . FMLTweaker ; <nl> import cpw . mods . fml . common . toposort . TopologicalSort ; <nl> import cpw . mods . fml . relauncher . IFMLLoadingPlugin . DependsOn ; <nl> import cpw . mods . fml . relauncher . IFMLLoadingPlugin . MCVersion ; <nl> import cpw . mods . fml . relauncher . IFMLLoadingPlugin . Name ; <nl> + import cpw . mods . fml . relauncher . IFMLLoadingPlugin . SortingIndex ; <nl> import cpw . mods . fml . relauncher . IFMLLoadingPlugin . TransformerExclusions ; <nl> <nl> - public class CoreModManager <nl> - { <nl> + public class CoreModManager { <nl> private static final Attributes . Name COREMODCONTAINSFMLMOD = new Attributes . Name ( " FMLCorePluginContainsFMLMod " ) ; <nl> - private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> private static List < String > loadedCoremods = Lists . newArrayList ( ) ; <nl> private static List < FMLPluginWrapper > loadPlugins ; <nl> private static boolean deobfuscatedEnvironment ; <nl> @ @ - 58 , 19 + 61 , 20 @ @ public class CoreModManager <nl> private static File mcDir ; <nl> private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; <nl> <nl> - private static class FMLPluginWrapper <nl> - { <nl> + private static class FMLPluginWrapper implements ITweaker { <nl> public final String name ; <nl> public final IFMLLoadingPlugin coreModInstance ; <nl> public final List < String > predepends ; <nl> public final File location ; <nl> + public final int sortIndex ; <nl> <nl> - public FMLPluginWrapper ( String name , IFMLLoadingPlugin coreModInstance , File location , String . . . predepends ) <nl> + public FMLPluginWrapper ( String name , IFMLLoadingPlugin coreModInstance , File location , int sortIndex , String . . . predepends ) <nl> { <nl> super ( ) ; <nl> this . name = name ; <nl> this . coreModInstance = coreModInstance ; <nl> this . location = location ; <nl> + this . sortIndex = sortIndex ; <nl> this . predepends = Lists . newArrayList ( predepends ) ; <nl> } <nl> <nl> @ @ - 79 , 6 + 83 , 72 @ @ public class CoreModManager <nl> { <nl> return String . format ( " % s { % s } " , this . name , this . predepends ) ; <nl> } <nl> + <nl> + @ Override <nl> + public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) <nl> + { <nl> + / / NO OP <nl> + } <nl> + <nl> + @ Override <nl> + public void injectIntoClassLoader ( LaunchClassLoader classLoader ) <nl> + { <nl> + FMLRelaunchLog . fine ( " Injecting coremod % s { % s } class transformers " , name , coreModInstance . getClass ( ) . getName ( ) ) ; <nl> + if ( coreModInstance . getASMTransformerClass ( ) ! = null ) for ( String transformer : coreModInstance . getASMTransformerClass ( ) ) <nl> + { <nl> + FMLRelaunchLog . finest ( " Registering transformer % s " , transformer ) ; <nl> + classLoader . registerTransformer ( transformer ) ; <nl> + } <nl> + FMLRelaunchLog . fine ( " Injection complete " ) ; <nl> + <nl> + FMLRelaunchLog . fine ( " Running coremod plugin for % s { % s } " , name , coreModInstance . getClass ( ) . getName ( ) ) ; <nl> + Map < String , Object > data = new HashMap < String , Object > ( ) ; <nl> + data . put ( " mcLocation " , mcDir ) ; <nl> + data . put ( " coremodList " , loadPlugins ) ; <nl> + data . put ( " runtimeDeobfuscationEnabled " , ! deobfuscatedEnvironment ) ; <nl> + FMLRelaunchLog . fine ( " Running coremod plugin % s " , name ) ; <nl> + data . put ( " coremodLocation " , location ) ; <nl> + coreModInstance . injectData ( data ) ; <nl> + String setupClass = coreModInstance . getSetupClass ( ) ; <nl> + if ( setupClass ! = null ) <nl> + { <nl> + try <nl> + { <nl> + IFMLCallHook call = ( IFMLCallHook ) Class . forName ( setupClass , true , classLoader ) . newInstance ( ) ; <nl> + Map < String , Object > callData = new HashMap < String , Object > ( ) ; <nl> + callData . put ( " mcLocation " , mcDir ) ; <nl> + callData . put ( " classLoader " , classLoader ) ; <nl> + callData . put ( " coremodLocation " , location ) ; <nl> + callData . put ( " deobfuscationFileName " , FMLInjectionData . debfuscationDataName ( ) ) ; <nl> + call . injectData ( callData ) ; <nl> + call . call ( ) ; <nl> + } <nl> + catch ( Exception e ) <nl> + { <nl> + throw new RuntimeException ( e ) ; <nl> + } <nl> + } <nl> + FMLRelaunchLog . fine ( " Coremod plugin class % s run successfully " , coreModInstance . getClass ( ) . getSimpleName ( ) ) ; <nl> + <nl> + String modContainer = coreModInstance . getModContainerClass ( ) ; <nl> + if ( modContainer ! = null ) <nl> + { <nl> + FMLInjectionData . containers . add ( modContainer ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public String getLaunchTarget ( ) <nl> + { <nl> + return " " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getLaunchArguments ( ) <nl> + { <nl> + return new String [ 0 ] ; <nl> + } <nl> + <nl> } <nl> <nl> public static void handleLaunch ( File mcDir , LaunchClassLoader classLoader , FMLTweaker tweaker ) <nl> @ @ - 104 , 6 + 174 , 7 @ @ public class CoreModManager <nl> FMLRelaunchLog . fine ( " Enabling runtime deobfuscation " ) ; <nl> } <nl> <nl> + tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker " ) ; <nl> try <nl> { <nl> classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . PatchingTransformer " ) ; <nl> @ @ - 126 , 8 + 197 , 9 @ @ public class CoreModManager <nl> } <nl> <nl> FMLRelaunchLog . fine ( " All fundamental core mods are successfully located " ) ; <nl> - / / Now that we have the root plugins loaded - lets see what else might be around <nl> - String commandLineCoremods = System . getProperty ( " fml . coreMods . load " , " " ) ; <nl> + / / Now that we have the root plugins loaded - lets see what else might <nl> + / / be around <nl> + String commandLineCoremods = System . getProperty ( " fml . coreMods . load " , " " ) ; <nl> for ( String coreModClassName : commandLineCoremods . split ( " , " ) ) <nl> { <nl> if ( coreModClassName . isEmpty ( ) ) <nl> @ @ - 145 , 8 + 217 , 7 @ @ public class CoreModManager <nl> { <nl> FMLRelaunchLog . fine ( " Discovering coremods " ) ; <nl> File coreMods = setupCoreModDir ( mcDir ) ; <nl> - FilenameFilter ff = new FilenameFilter ( ) <nl> - { <nl> + FilenameFilter ff = new FilenameFilter ( ) { <nl> @ Override <nl> public boolean accept ( File dir , String name ) <nl> { <nl> @ @ - 154 , 11 + 225 , 11 @ @ public class CoreModManager <nl> } <nl> } ; <nl> File [ ] coreModList = coreMods . listFiles ( ff ) ; <nl> - File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; <nl> + File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; <nl> if ( versionedModDir . isDirectory ( ) ) <nl> { <nl> File [ ] versionedCoreMods = versionedModDir . listFiles ( ff ) ; <nl> - coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; <nl> + coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; <nl> } <nl> <nl> Arrays . sort ( coreModList ) ; <nl> @ @ - 185 , 7 + 256 , 7 @ @ public class CoreModManager <nl> } <nl> finally <nl> { <nl> - if ( jar ! = null ) <nl> + if ( jar ! = null ) <nl> { <nl> try <nl> { <nl> @ @ - 226 , 7 + 297 , 8 @ @ public class CoreModManager <nl> } <nl> else <nl> { <nl> - FMLRelaunchLog . finest ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , coreMod . getName ( ) ) ; <nl> + FMLRelaunchLog . finest ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , <nl> + coreMod . getName ( ) ) ; <nl> reparsedCoremods . add ( coreMod . getName ( ) ) ; <nl> } <nl> } <nl> @ @ - 240 , 6 + 312 , 7 @ @ public class CoreModManager <nl> } <nl> <nl> private static Method ADDURL ; <nl> + <nl> private static void handleCascadingTweak ( File coreMod , JarFile jar , String cascadedTweaker , LaunchClassLoader classLoader , Integer sortingOrder ) <nl> { <nl> try <nl> @ @ - 252 , 7 + 325 , 8 @ @ public class CoreModManager <nl> } <nl> ADDURL . invoke ( classLoader . getClass ( ) . getClassLoader ( ) , coreMod . toURI ( ) . toURL ( ) ) ; <nl> classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; <nl> - CoreModManager . tweaker . injectCascadingTweak ( cascadedTweaker , sortingOrder ) ; <nl> + CoreModManager . tweaker . injectCascadingTweak ( cascadedTweaker ) ; <nl> + tweakSorting . put ( cascadedTweaker , sortingOrder ) ; <nl> } <nl> catch ( Exception e ) <nl> { <nl> @ @ - 260 , 20 + 334 , 26 @ @ public class CoreModManager <nl> } <nl> } <nl> <nl> + private static void injectTweakWrapper ( FMLPluginWrapper wrapper ) <nl> + { <nl> + loadPlugins . add ( wrapper ) ; <nl> + } <nl> + <nl> / * * <nl> - * @ param mcDir the minecraft home directory <nl> + * @ param mcDir <nl> + * the minecraft home directory <nl> * @ return the coremod directory <nl> * / <nl> private static File setupCoreModDir ( File mcDir ) <nl> { <nl> - File coreModDir = new File ( mcDir , " mods " ) ; <nl> + File coreModDir = new File ( mcDir , " mods " ) ; <nl> try <nl> { <nl> coreModDir = coreModDir . getCanonicalFile ( ) ; <nl> } <nl> catch ( IOException e ) <nl> { <nl> - throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; <nl> + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; <nl> } <nl> if ( ! coreModDir . exists ( ) ) <nl> { <nl> @ @ - 298 , 14 + 378 , 14 @ @ public class CoreModManager <nl> <nl> private static FMLPluginWrapper loadCoreMod ( LaunchClassLoader classLoader , String coreModClass , File location ) <nl> { <nl> - String coreModName = coreModClass . substring ( coreModClass . lastIndexOf ( ' . ' ) + 1 ) ; <nl> + String coreModName = coreModClass . substring ( coreModClass . lastIndexOf ( ' . ' ) + 1 ) ; <nl> try <nl> { <nl> FMLRelaunchLog . fine ( " Instantiating coremod class % s " , coreModName ) ; <nl> classLoader . addTransformerExclusion ( coreModClass ) ; <nl> Class < ? > coreModClazz = Class . forName ( coreModClass , true , classLoader ) ; <nl> Name coreModNameAnn = coreModClazz . getAnnotation ( IFMLLoadingPlugin . Name . class ) ; <nl> - if ( coreModNameAnn ! = null & & ! Strings . isNullOrEmpty ( coreModNameAnn . value ( ) ) ) <nl> + if ( coreModNameAnn ! = null & & ! Strings . isNullOrEmpty ( coreModNameAnn . value ( ) ) ) <nl> { <nl> coreModName = coreModNameAnn . value ( ) ; <nl> FMLRelaunchLog . finest ( " coremod named % s is loading " , coreModName ) ; <nl> @ @ - 313 , 19 + 393 , 22 @ @ public class CoreModManager <nl> MCVersion requiredMCVersion = coreModClazz . getAnnotation ( IFMLLoadingPlugin . MCVersion . class ) ; <nl> if ( ! Arrays . asList ( rootPlugins ) . contains ( coreModClass ) & & ( requiredMCVersion = = null | | Strings . isNullOrEmpty ( requiredMCVersion . value ( ) ) ) ) <nl> { <nl> - FMLRelaunchLog . log ( Level . WARNING , " The coremod % s does not have a MCVersion annotation , it may cause issues with this version of Minecraft " , coreModClass ) ; <nl> + FMLRelaunchLog . log ( Level . WARNING , " The coremod % s does not have a MCVersion annotation , it may cause issues with this version of Minecraft " , <nl> + coreModClass ) ; <nl> } <nl> - else if ( requiredMCVersion ! = null & & ! FMLInjectionData . mccversion . equals ( requiredMCVersion . value ( ) ) ) <nl> + else if ( requiredMCVersion ! = null & & ! FMLInjectionData . mccversion . equals ( requiredMCVersion . value ( ) ) ) <nl> { <nl> - FMLRelaunchLog . log ( Level . SEVERE , " The coremod % s is requesting minecraft version % s and minecraft is % s . It will be ignored . " , coreModClass , requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; <nl> + FMLRelaunchLog . log ( Level . SEVERE , " The coremod % s is requesting minecraft version % s and minecraft is % s . It will be ignored . " , coreModClass , <nl> + requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; <nl> return null ; <nl> } <nl> - else if ( requiredMCVersion ! = null ) <nl> + else if ( requiredMCVersion ! = null ) <nl> { <nl> - FMLRelaunchLog . log ( Level . FINE , " The coremod % s requested minecraft version % s and minecraft is % s . It will be loaded . " , coreModClass , requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; <nl> + FMLRelaunchLog . log ( Level . FINE , " The coremod % s requested minecraft version % s and minecraft is % s . It will be loaded . " , coreModClass , <nl> + requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; <nl> } <nl> TransformerExclusions trExclusions = coreModClazz . getAnnotation ( IFMLLoadingPlugin . TransformerExclusions . class ) ; <nl> - if ( trExclusions ! = null ) <nl> + if ( trExclusions ! = null ) <nl> { <nl> for ( String st : trExclusions . value ( ) ) <nl> { <nl> @ @ - 338 , 11 + 421 , 13 @ @ public class CoreModManager <nl> { <nl> dependencies = deplist . value ( ) ; <nl> } <nl> - IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClazz . newInstance ( ) ; <nl> - FMLPluginWrapper wrap = new FMLPluginWrapper ( coreModName , plugin , location , dependencies ) ; <nl> + SortingIndex index = coreModClazz . getAnnotation ( IFMLLoadingPlugin . SortingIndex . class ) ; <nl> + int sortIndex = index ! = null ? index . value ( ) : 0 ; <nl> <nl> + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClazz . newInstance ( ) ; <nl> + FMLPluginWrapper wrap = new FMLPluginWrapper ( coreModName , plugin , location , sortIndex , dependencies ) ; <nl> loadPlugins . add ( wrap ) ; <nl> - FMLRelaunchLog . fine ( " Loaded coremod % s " , coreModName ) ; <nl> + FMLRelaunchLog . fine ( " Enqueued coremod % s " , coreModName ) ; <nl> return wrap ; <nl> } <nl> catch ( ClassNotFoundException cnfe ) <nl> @ @ - 400 , 61 + 485 , 73 @ @ public class CoreModManager <nl> throw Throwables . propagate ( e ) ; <nl> } <nl> } <nl> + <nl> public static void injectTransformers ( LaunchClassLoader classLoader ) <nl> { <nl> <nl> - for ( FMLPluginWrapper wrap : loadPlugins ) <nl> + Launch . blackboard . put ( " fml . deobfuscatedEnvironment " , deobfuscatedEnvironment ) ; <nl> + tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " ) ; <nl> + tweakSorting . put ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " , Integer . valueOf ( 1000 ) ) ; <nl> + } <nl> + <nl> + public static void injectCoreModTweaks ( FMLInjectionAndSortingTweaker fmlInjectionAndSortingTweaker ) <nl> + { <nl> + List < ITweaker > tweakers = ( List < ITweaker > ) Launch . blackboard . get ( " Tweaks " ) ; <nl> + / / Add the sorting tweaker first - it ' ll appear twice in the list <nl> + tweakers . add ( 0 , fmlInjectionAndSortingTweaker ) ; <nl> + for ( FMLPluginWrapper wrapper : loadPlugins ) <nl> { <nl> - IFMLLoadingPlugin plug = wrap . coreModInstance ; <nl> - if ( plug . getASMTransformerClass ( ) ! = null ) <nl> + tweakers . add ( wrapper ) ; <nl> + } <nl> + } <nl> + <nl> + private static Map < String , Integer > tweakSorting = Maps . newHashMap ( ) ; <nl> + <nl> + public static void sortTweakList ( ) <nl> + { <nl> + List < ITweaker > tweakers = ( List < ITweaker > ) Launch . blackboard . get ( " Tweaks " ) ; <nl> + Collections . sort ( tweakers , new Comparator < ITweaker > ( ) { <nl> + @ Override <nl> + public int compare ( ITweaker o1 , ITweaker o2 ) <nl> { <nl> - for ( String xformClass : plug . getASMTransformerClass ( ) ) <nl> + Integer first = null ; <nl> + Integer second = null ; <nl> + if ( o1 instanceof FMLInjectionAndSortingTweaker ) <nl> { <nl> - FMLRelaunchLog . finest ( " Registering transformer % s " , xformClass ) ; <nl> - classLoader . registerTransformer ( xformClass ) ; <nl> + first = Integer . MIN _ VALUE ; <nl> } <nl> - } <nl> - } <nl> - FMLRelaunchLog . fine ( " Running coremod plugins " ) ; <nl> - Map < String , Object > data = new HashMap < String , Object > ( ) ; <nl> - data . put ( " mcLocation " , mcDir ) ; <nl> - data . put ( " coremodList " , loadPlugins ) ; <nl> - data . put ( " runtimeDeobfuscationEnabled " , ! deobfuscatedEnvironment ) ; <nl> - for ( FMLPluginWrapper pluginWrapper : loadPlugins ) <nl> - { <nl> - IFMLLoadingPlugin plugin = pluginWrapper . coreModInstance ; <nl> - FMLRelaunchLog . fine ( " Running coremod plugin % s " , pluginWrapper . name ) ; <nl> - data . put ( " coremodLocation " , pluginWrapper . location ) ; <nl> - plugin . injectData ( data ) ; <nl> - String setupClass = plugin . getSetupClass ( ) ; <nl> - if ( setupClass ! = null ) <nl> - { <nl> - try <nl> + if ( o2 instanceof FMLInjectionAndSortingTweaker ) <nl> { <nl> - IFMLCallHook call = ( IFMLCallHook ) Class . forName ( setupClass , true , classLoader ) . newInstance ( ) ; <nl> - Map < String , Object > callData = new HashMap < String , Object > ( ) ; <nl> - callData . put ( " mcLocation " , mcDir ) ; <nl> - callData . put ( " classLoader " , classLoader ) ; <nl> - callData . put ( " coremodLocation " , pluginWrapper . location ) ; <nl> - callData . put ( " deobfuscationFileName " , FMLInjectionData . debfuscationDataName ( ) ) ; <nl> - call . injectData ( callData ) ; <nl> - call . call ( ) ; <nl> + second = Integer . MIN _ VALUE ; <nl> } <nl> - catch ( Exception e ) <nl> + <nl> + if ( o1 instanceof FMLPluginWrapper ) <nl> { <nl> - throw new RuntimeException ( e ) ; <nl> + first = ( ( FMLPluginWrapper ) o1 ) . sortIndex ; <nl> + } <nl> + else if ( first = = null ) <nl> + { <nl> + first = tweakSorting . get ( o1 . getClass ( ) . getName ( ) ) ; <nl> + } <nl> + if ( o2 instanceof FMLPluginWrapper ) <nl> + { <nl> + second = ( ( FMLPluginWrapper ) o2 ) . sortIndex ; <nl> + } <nl> + else if ( second = = null ) <nl> + { <nl> + second = tweakSorting . get ( o2 . getClass ( ) . getName ( ) ) ; <nl> + } <nl> + if ( first = = null ) <nl> + { <nl> + first = 0 ; <nl> + } <nl> + if ( second = = null ) <nl> + { <nl> + second = 0 ; <nl> } <nl> - } <nl> - FMLRelaunchLog . fine ( " Coremod plugin % s run successfully " , plugin . getClass ( ) . getSimpleName ( ) ) ; <nl> <nl> - String modContainer = plugin . getModContainerClass ( ) ; <nl> - if ( modContainer ! = null ) <nl> - { <nl> - FMLInjectionData . containers . add ( modContainer ) ; <nl> + return Ints . saturatedCast ( ( long ) first - ( long ) second ) ; <nl> } <nl> - } <nl> - <nl> - Launch . blackboard . put ( " fml . deobfuscatedEnvironment " , deobfuscatedEnvironment ) ; <nl> - tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " , Integer . valueOf ( 1000 ) ) ; <nl> + } ) ; <nl> } <nl> } <nl> diff - - git a / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java b / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java <nl> index cc36db6 . . 568a5f3 100644 <nl> - - - a / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java <nl> + + + b / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java <nl> @ @ - 122 , 4 + 122 , 16 @ @ public interface IFMLLoadingPlugin <nl> public String [ ] value ( ) default { } ; <nl> } <nl> <nl> + / * * <nl> + * A simple sorting index , interleaved with other tweakers from other sources , as well as FML <nl> + * @ author cpw <nl> + * <nl> + * / <nl> + @ Retention ( RetentionPolicy . RUNTIME ) <nl> + @ Target ( ElementType . TYPE ) <nl> + public @ interface SortingIndex <nl> + { <nl> + public int value ( ) default 0 ; <nl> + } <nl> + <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 05ea505 . . eec059f 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 86 , 12 + 86 , 12 @ @ public class FMLModContainer implements ModContainer 
 private String modLanguage ; 
 private ILanguageAdapter languageAdapter ; 
 private Disableable disableability ; 
 - private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; 
 + private ListMultimap < Class < ? extends FMLEvent > , Method > eventMethods ; 
 private Map < String , String > customModProperties ; 
 private ModCandidate candidate ; 
 private URL updateJSONUrl ; 
 
 - public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 + public FMLModContainer ( String className , ModCandidate container , Map < String , Object > modDescriptor ) 
 { 
 this . className = className ; 
 this . source = container . getModContainer ( ) ; 
 @ @ - 99 , 7 + 99 , 7 @ @ public class FMLModContainer implements ModContainer 
 this . descriptor = modDescriptor ; 
 this . eventMethods = ArrayListMultimap . create ( ) ; 
 
 - this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 + this . modLanguage = ( String ) modDescriptor . get ( " modLanguage " ) ; 
 String languageAdapterType = ( String ) modDescriptor . get ( " modLanguageAdapter " ) ; 
 if ( Strings . isNullOrEmpty ( languageAdapterType ) ) 
 { 
 @ @ - 107 , 27 + 107 , 33 @ @ public class FMLModContainer implements ModContainer 
 } 
 else 
 { 
 + / / Delay loading of the adapter until the mod is on the classpath , in case the mod itself contains it . 
 + this . languageAdapter = null ; 
 + FMLLog . finer ( " Using custom language adapter % s for % s ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; 
 + } 
 + } 
 + 
 + private ILanguageAdapter getLanguageAdapter ( ) 
 + { 
 + if ( languageAdapter = = null ) 
 + { 
 try 
 { 
 - this . languageAdapter = ( ILanguageAdapter ) Class . forName ( languageAdapterType , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; 
 - FMLLog . finer ( " Using custom language adapter % s ( type % s ) for % s ( modid % s ) " , this . languageAdapter , languageAdapterType , this . className , getModId ( ) ) ; 
 + languageAdapter = ( ILanguageAdapter ) Class . forName ( ( String ) descriptor . get ( " modLanguageAdapter " ) , true , Loader . instance ( ) . getModClassLoader ( ) ) . newInstance ( ) ; 
 } 
 catch ( Exception ex ) 
 { 
 - FMLLog . log ( Level . ERROR , ex , " Error constructing custom mod language adapter % s ( referenced by % s ) ( modid : % s ) " , languageAdapterType , this . className , getModId ( ) ) ; 
 - throw new LoaderException ( ex ) ; 
 + FMLLog . log ( Level . ERROR , ex , " Error constructing custom mod language adapter referenced by % s ( modid : % s ) " , this . className , getModId ( ) ) ; 
 + throw new RuntimeException ( ex ) ; 
 } 
 } 
 - } 
 - 
 - private ILanguageAdapter getLanguageAdapter ( ) 
 - { 
 return languageAdapter ; 
 } 
 + 
 @ Override 
 public String getModId ( ) 
 { 
 - return ( String ) descriptor . get ( " modid " ) ; 
 + return ( String ) descriptor . get ( " modid " ) ; 
 } 
 
 @ Override 
 @ @ - 169 , 7 + 175 , 7 @ @ public class FMLModContainer implements ModContainer 
 Set < ArtifactVersion > requirements = Sets . newHashSet ( ) ; 
 List < ArtifactVersion > dependencies = Lists . newArrayList ( ) ; 
 List < ArtifactVersion > dependants = Lists . newArrayList ( ) ; 
 - annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; 
 + annotationDependencies = ( String ) descriptor . get ( " dependencies " ) ; 
 Loader . instance ( ) . computeDependencies ( annotationDependencies , requirements , dependencies , dependants ) ; 
 dependants . addAll ( Loader . instance ( ) . getInjectedBefore ( getModId ( ) ) ) ; 
 dependencies . addAll ( Loader . instance ( ) . getInjectedAfter ( getModId ( ) ) ) ; 
 @ @ - 184 , 16 + 190 , 16 @ @ public class FMLModContainer implements ModContainer 
 } 
 if ( Strings . isNullOrEmpty ( modMetadata . name ) ) 
 { 
 - FMLLog . log ( getModId ( ) , Level . INFO , " Mod % s is missing the required element ' name ' . Substituting % s " , getModId ( ) , getModId ( ) ) ; 
 + FMLLog . log ( getModId ( ) , Level . INFO , " Mod % s is missing the required element ' name ' . Substituting % s " , getModId ( ) , getModId ( ) ) ; 
 modMetadata . name = getModId ( ) ; 
 } 
 - internalVersion = ( String ) descriptor . get ( " version " ) ; 
 + internalVersion = ( String ) descriptor . get ( " version " ) ; 
 if ( Strings . isNullOrEmpty ( internalVersion ) ) 
 { 
 Properties versionProps = searchForVersionProperties ( ) ; 
 if ( versionProps ! = null ) 
 { 
 - internalVersion = versionProps . getProperty ( getModId ( ) + " . version " ) ; 
 + internalVersion = versionProps . getProperty ( getModId ( ) + " . version " ) ; 
 FMLLog . log ( getModId ( ) , Level . DEBUG , " Found version % s for mod % s in version . properties , using " , internalVersion , getModId ( ) ) ; 
 } 
 
 @ @ - 209 , 7 + 215 , 7 @ @ public class FMLModContainer implements ModContainer 
 modMetadata . version = internalVersion = " 1 . 0 " ; 
 } 
 
 - String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 + String mcVersionString = ( String ) descriptor . get ( " acceptedMinecraftVersions " ) ; 
 if ( ! Strings . isNullOrEmpty ( mcVersionString ) ) 
 { 
 minecraftAccepted = VersionParser . parseRange ( mcVersionString ) ; 
 @ @ - 237 , 13 + 243 , 13 @ @ public class FMLModContainer implements ModContainer 
 { 
 try 
 { 
 - FMLLog . log ( getModId ( ) , Level . DEBUG , " Attempting to load the file version . properties from % s to locate a version number for % s " , getSource ( ) . getName ( ) , getModId ( ) ) ; 
 + FMLLog . log ( getModId ( ) , Level . DEBUG , " Attempting to load the file version . properties from % s to locate a version number for % s " , getSource ( ) . getName ( ) , getModId ( ) ) ; 
 Properties version = null ; 
 if ( getSource ( ) . isFile ( ) ) 
 { 
 ZipFile source = new ZipFile ( getSource ( ) ) ; 
 ZipEntry versionFile = source . getEntry ( " version . properties " ) ; 
 - if ( versionFile ! = null ) 
 + if ( versionFile ! = null ) 
 { 
 version = new Properties ( ) ; 
 version . load ( source . getInputStream ( versionFile ) ) ; 
 @ @ - 252 , 7 + 258 , 7 @ @ public class FMLModContainer implements ModContainer 
 } 
 else if ( getSource ( ) . isDirectory ( ) ) 
 { 
 - File propsFile = new File ( getSource ( ) , " version . properties " ) ; 
 + File propsFile = new File ( getSource ( ) , " version . properties " ) ; 
 if ( propsFile . exists ( ) & & propsFile . isFile ( ) ) 
 { 
 version = new Properties ( ) ; 
 @ @ - 343 , 11 + 349 , 11 @ @ public class FMLModContainer implements ModContainer 
 if ( m . getParameterTypes ( ) . length = = 1 & & FMLEvent . class . isAssignableFrom ( m . getParameterTypes ( ) [ 0 ] ) ) 
 { 
 m . setAccessible ( true ) ; 
 - eventMethods . put ( ( Class < ? extends FMLEvent > ) m . getParameterTypes ( ) [ 0 ] , m ) ; 
 + eventMethods . put ( ( Class < ? extends FMLEvent > ) m . getParameterTypes ( ) [ 0 ] , m ) ; 
 } 
 else 
 { 
 - FMLLog . log ( getModId ( ) , Level . ERROR , " The mod % s appears to have an invalid event annotation % s . This annotation can only apply to methods with recognized event arguments - it will not be called " , getModId ( ) , a . annotationType ( ) . getSimpleName ( ) ) ; 
 + FMLLog . log ( getModId ( ) , Level . ERROR , " The mod % s appears to have an invalid event annotation % s . This annotation can only apply to methods with recognized event arguments - it will not be called " , getModId ( ) , a . annotationType ( ) . getSimpleName ( ) ) ; 
 } 
 } 
 else if ( a . annotationType ( ) . equals ( Mod . InstanceFactory . class ) ) 
 @ @ - 359 , 7 + 365 , 7 @ @ public class FMLModContainer implements ModContainer 
 } 
 else if ( ! ( Modifier . isStatic ( m . getModifiers ( ) ) & & m . getParameterTypes ( ) . length = = 0 ) ) 
 { 
 - FMLLog . log ( getModId ( ) , Level . ERROR , " The InstanceFactory annotation can only apply to a static method , taking zero arguments - it will be ignored on % s ( % s ) " , m . getName ( ) , Arrays . asList ( m . getParameterTypes ( ) ) ) ; 
 + FMLLog . log ( getModId ( ) , Level . ERROR , " The InstanceFactory annotation can only apply to a static method , taking zero arguments - it will be ignored on % s ( % s ) " , m . getName ( ) , Arrays . asList ( m . getParameterTypes ( ) ) ) ; 
 } 
 else if ( factoryMethod ! = null ) 
 { 
 @ @ - 399 , 7 + 405 , 7 @ @ public class FMLModContainer implements ModContainer 
 String annotationName = annName [ annName . length - 1 ] ; 
 for ( ASMData targets : annotations . get ( annotationClassName ) ) 
 { 
 - String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; 
 + String targetMod = ( String ) targets . getAnnotationInfo ( ) . get ( " value " ) ; 
 Field f = null ; 
 Object injectedMod = null ; 
 ModContainer mc = this ; 
 @ @ - 475 , 7 + 481 , 7 @ @ public class FMLModContainer implements ModContainer 
 ImmutableList < String > certList = certBuilder . build ( ) ; 
 sourceFingerprints = ImmutableSet . copyOf ( certList ) ; 
 
 - String expectedFingerprint = ( String ) descriptor . get ( " certificateFingerprint " ) ; 
 + String expectedFingerprint = ( String ) descriptor . get ( " certificateFingerprint " ) ; 
 
 fingerprintNotPresent = true ; 
 
 @ @ - 498 , 13 + 504 , 13 @ @ public class FMLModContainer implements ModContainer 
 } 
 
 @ SuppressWarnings ( " unchecked " ) 
 - List < Map < String , Object > > props = ( List < Map < String , Object > > ) descriptor . get ( " customProperties " ) ; 
 + List < Map < String , Object > > props = ( List < Map < String , Object > > ) descriptor . get ( " customProperties " ) ; 
 if ( props ! = null ) 
 { 
 - com . google . common . collect . ImmutableMap . Builder < String , String > builder = ImmutableMap . < String , String > builder ( ) ; 
 + com . google . common . collect . ImmutableMap . Builder < String , String > builder = ImmutableMap . < String , String > builder ( ) ; 
 for ( Map < String , Object > p : props ) 
 { 
 - builder . put ( ( String ) p . get ( " k " ) , ( String ) p . get ( " v " ) ) ; 
 + builder . put ( ( String ) p . get ( " k " ) , ( String ) p . get ( " v " ) ) ; 
 } 
 customModProperties = builder . build ( ) ; 
 } 
 @ @ - 513 , 7 + 519 , 7 @ @ public class FMLModContainer implements ModContainer 
 customModProperties = EMPTY _ PROPERTIES ; 
 } 
 
 - Boolean hasDisableableFlag = ( Boolean ) descriptor . get ( " canBeDeactivated " ) ; 
 + Boolean hasDisableableFlag = ( Boolean ) descriptor . get ( " canBeDeactivated " ) ; 
 boolean hasReverseDepends = ! event . getReverseDependencies ( ) . get ( getModId ( ) ) . isEmpty ( ) ; 
 if ( hasDisableableFlag ! = null & & hasDisableableFlag ) 
 { 
 @ @ - 524 , 7 + 530 , 7 @ @ public class FMLModContainer implements ModContainer 
 disableability = hasReverseDepends ? Disableable . DEPENDENCIES : Disableable . RESTART ; 
 } 
 Method factoryMethod = gatherAnnotations ( clazz ) ; 
 - modInstance = getLanguageAdapter ( ) . getNewInstance ( this , clazz , modClassLoader , factoryMethod ) ; 
 + modInstance = getLanguageAdapter ( ) . getNewInstance ( this , clazz , modClassLoader , factoryMethod ) ; 
 NetworkRegistry . INSTANCE . register ( this , clazz , ( String ) ( descriptor . containsKey ( " acceptableRemoteVersions " ) ? descriptor . get ( " acceptableRemoteVersions " ) : null ) , event . getASMHarvestedData ( ) ) ; 
 if ( fingerprintNotPresent ) 
 { 
 @ @ - 568 , 6 + 574 , 7 @ @ public class FMLModContainer implements ModContainer 
 } 
 return processedVersion ; 
 } 
 + 
 @ Override 
 public boolean isImmutable ( ) 
 { 
 @ @ - 595 , 7 + 602 , 7 @ @ public class FMLModContainer implements ModContainer 
 @ Override 
 public String toString ( ) 
 { 
 - return " FMLMod : " + getModId ( ) + " { " + getVersion ( ) + " } " ; 
 + return " FMLMod : " + getModId ( ) + " { " + getVersion ( ) + " } " ; 
 } 
 
 @ Override 
 @ @ - 609 , 20 + 616 , 21 @ @ public class FMLModContainer implements ModContainer 
 { 
 try 
 { 
 - return getSource ( ) . isDirectory ( ) ? Class . forName ( " net . minecraftforge . fml . client . FMLFolderResourcePack " , true , getClass ( ) . getClassLoader ( ) ) : Class . forName ( " net . minecraftforge . fml . client . FMLFileResourcePack " , true , getClass ( ) . getClassLoader ( ) ) ; 
 + return getSource ( ) . isDirectory ( ) ? Class . forName ( " net . minecraftforge . fml . client . FMLFolderResourcePack " , true , getClass ( ) . getClassLoader ( ) ) : Class . forName ( " net . minecraftforge . fml . client . FMLFileResourcePack " , true , getClass ( ) . getClassLoader ( ) ) ; 
 } 
 catch ( ClassNotFoundException e ) 
 { 
 return null ; 
 } 
 } 
 + 
 @ Override 
 public Map < String , String > getSharedModDescriptor ( ) 
 { 
 - Map < String , String > descriptor = Maps . newHashMap ( ) ; 
 + Map < String , String > descriptor = Maps . newHashMap ( ) ; 
 descriptor . put ( " modsystem " , " FML " ) ; 
 descriptor . put ( " id " , getModId ( ) ) ; 
 - descriptor . put ( " version " , getDisplayVersion ( ) ) ; 
 + descriptor . put ( " version " , getDisplayVersion ( ) ) ; 
 descriptor . put ( " name " , getName ( ) ) ; 
 descriptor . put ( " url " , modMetadata . url ) ; 
 descriptor . put ( " authors " , modMetadata . getAuthorList ( ) ) ; 
 @ @ - 639 , 7 + 647 , 7 @ @ public class FMLModContainer implements ModContainer 
 @ Override 
 public String getGuiClassName ( ) 
 { 
 - return ( String ) descriptor . get ( " guiFactory " ) ; 
 + return ( String ) descriptor . get ( " guiFactory " ) ; 
 } 
 
 @ Override 
 @ @ - 650 , 7 + 658 , 10 @ @ public class FMLModContainer implements ModContainer 
 
 private boolean isTrue ( Boolean value ) 
 { 
 - if ( value = = null ) return false ; 
 + if ( value = = null ) 
 + { 
 + return false ; 
 + } 
 return value . booleanValue ( ) ; 
 } 
 
 @ @ - 661 , 7 + 672 , 9 @ @ public class FMLModContainer implements ModContainer 
 boolean serverSideOnly = isTrue ( ( Boolean ) descriptor . get ( " serverSideOnly " ) ) ; 
 
 if ( clientSideOnly & & serverSideOnly ) 
 + { 
 throw new RuntimeException ( " Mod annotation claims to be both client and server side only ! " ) ; 
 + } 
 
 Side side = FMLCommonHandler . instance ( ) . getSide ( ) ; 
 
 @ @ - 685 , 4 + 698 , 4 @ @ public class FMLModContainer implements ModContainer 
 { 
 return updateJSONUrl ; 
 } 
 - } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java b / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java 
 deleted file mode 100644 
 index feb701e . . 0000000 
 - - - a / fml / common / cpw / mods / fml / common / launcher / ASMCoreModTweakWrapperGenerator . java 
 + + + / dev / null 
 @ @ - 1 , 12 + 0 , 0 @ @ 
 - package cpw . mods . fml . common . launcher ; 
 - 
 - import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; 
 - 
 - public class ASMCoreModTweakWrapperGenerator { 
 - private IFMLLoadingPlugin coreModToWrap ; 
 - 
 - public ASMCoreModTweakWrapperGenerator ( IFMLLoadingPlugin toWrap ) { 
 - 
 - } 
 - 
 - } 
 diff - - git a / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java b / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java 
 new file mode 100644 
 index 0000000 . . bfb4b55 
 - - - / dev / null 
 + + + b / fml / common / cpw / mods / fml / common / launcher / FMLInjectionAndSortingTweaker . java 
 @ @ - 0 , 0 + 1 , 54 @ @ 
 + package cpw . mods . fml . common . launcher ; 
 + 
 + import java . io . File ; 
 + import java . util . List ; 
 + 
 + import cpw . mods . fml . relauncher . CoreModManager ; 
 + 
 + import net . minecraft . launchwrapper . ITweaker ; 
 + import net . minecraft . launchwrapper . LaunchClassLoader ; 
 + 
 + / * * 
 + * This class is to manage the injection of coremods as tweakers into the tweak framework . 
 + * It has to inject the coremod tweaks during construction , because that is the only time 
 + * the tweak list is writeable . 
 + * @ author cpw 
 + * 
 + * / 
 + public class FMLInjectionAndSortingTweaker implements ITweaker { 
 + private boolean run ; 
 + public FMLInjectionAndSortingTweaker ( ) 
 + { 
 + CoreModManager . injectCoreModTweaks ( this ) ; 
 + run = false ; 
 + } 
 + 
 + @ Override 
 + public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) 
 + { 
 + if ( ! run ) 
 + { 
 + / / We sort the tweak list here so that it obeys the tweakordering 
 + CoreModManager . sortTweakList ( ) ; 
 + } 
 + run = true ; 
 + } 
 + 
 + @ Override 
 + public void injectIntoClassLoader ( LaunchClassLoader classLoader ) 
 + { 
 + } 
 + 
 + @ Override 
 + public String getLaunchTarget ( ) 
 + { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public String [ ] getLaunchArguments ( ) 
 + { 
 + return new String [ 0 ] ; 
 + } 
 + 
 + } 
 diff - - git a / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java b / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java 
 index ed13b35 . . 0fef1c1 100644 
 - - - a / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java 
 + + + b / fml / common / cpw / mods / fml / common / launcher / FMLTweaker . java 
 @ @ - 38 , 7 + 38 , 6 @ @ public class FMLTweaker implements ITweaker { 
 private Map < String , String > launchArgs ; 
 private List < String > standaloneArgs ; 
 private static URI jarLocation ; 
 - private List < Integer > sortOrderValues = Lists . newArrayList ( ) ; 
 
 @ Override 
 public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) 
 @ @ - 158 , 24 + 157 , 9 @ @ public class FMLTweaker implements ITweaker { 
 return jarLocation ; 
 } 
 
 - public void injectCascadingTweak ( String tweakClassName , Integer sortingOrder ) 
 + public void injectCascadingTweak ( String tweakClassName ) 
 { 
 List < String > tweakClasses = ( List < String > ) Launch . blackboard . get ( " TweakClasses " ) ; 
 - if ( tweakClasses . size ( ) ! = sortOrderValues . size ( ) ) 
 - { 
 - throw new RuntimeException ( " Sort ordering mismatch ! " ) ; 
 - } 
 - int i = 0 ; 
 - for ( i = 0 ; i < sortOrderValues . size ( ) ; i + + ) 
 - { 
 - Integer sort = sortOrderValues . get ( i ) ; 
 - if ( sort . compareTo ( sortingOrder ) > 0 ) 
 - { 
 - break ; 
 - } 
 - } 
 - tweakClasses . add ( i , tweakClassName ) ; 
 - sortOrderValues . add ( i , sortingOrder ) ; 
 + tweakClasses . add ( tweakClassName ) ; 
 } 
 - 
 } 
 diff - - git a / fml / common / cpw / mods / fml / relauncher / CoreModManager . java b / fml / common / cpw / mods / fml / relauncher / CoreModManager . java 
 index 20946ec . . 0e8c0d9 100644 
 - - - a / fml / common / cpw / mods / fml / relauncher / CoreModManager . java 
 + + + b / fml / common / cpw / mods / fml / relauncher / CoreModManager . java 
 @ @ - 21 , 6 + 21 , 8 @ @ import java . net . URL ; 
 import java . net . URLClassLoader ; 
 import java . util . ArrayList ; 
 import java . util . Arrays ; 
 + import java . util . Collections ; 
 + import java . util . Comparator ; 
 import java . util . HashMap ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 40 , 17 + 42 , 18 @ @ import com . google . common . collect . ObjectArrays ; 
 import com . google . common . primitives . Ints ; 
 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker ; 
 import cpw . mods . fml . common . launcher . FMLTweaker ; 
 import cpw . mods . fml . common . toposort . TopologicalSort ; 
 import cpw . mods . fml . relauncher . IFMLLoadingPlugin . DependsOn ; 
 import cpw . mods . fml . relauncher . IFMLLoadingPlugin . MCVersion ; 
 import cpw . mods . fml . relauncher . IFMLLoadingPlugin . Name ; 
 + import cpw . mods . fml . relauncher . IFMLLoadingPlugin . SortingIndex ; 
 import cpw . mods . fml . relauncher . IFMLLoadingPlugin . TransformerExclusions ; 
 
 - public class CoreModManager 
 - { 
 + public class CoreModManager { 
 private static final Attributes . Name COREMODCONTAINSFMLMOD = new Attributes . Name ( " FMLCorePluginContainsFMLMod " ) ; 
 - private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 private static List < String > loadedCoremods = Lists . newArrayList ( ) ; 
 private static List < FMLPluginWrapper > loadPlugins ; 
 private static boolean deobfuscatedEnvironment ; 
 @ @ - 58 , 19 + 61 , 20 @ @ public class CoreModManager 
 private static File mcDir ; 
 private static List < String > reparsedCoremods = Lists . newArrayList ( ) ; 
 
 - private static class FMLPluginWrapper 
 - { 
 + private static class FMLPluginWrapper implements ITweaker { 
 public final String name ; 
 public final IFMLLoadingPlugin coreModInstance ; 
 public final List < String > predepends ; 
 public final File location ; 
 + public final int sortIndex ; 
 
 - public FMLPluginWrapper ( String name , IFMLLoadingPlugin coreModInstance , File location , String . . . predepends ) 
 + public FMLPluginWrapper ( String name , IFMLLoadingPlugin coreModInstance , File location , int sortIndex , String . . . predepends ) 
 { 
 super ( ) ; 
 this . name = name ; 
 this . coreModInstance = coreModInstance ; 
 this . location = location ; 
 + this . sortIndex = sortIndex ; 
 this . predepends = Lists . newArrayList ( predepends ) ; 
 } 
 
 @ @ - 79 , 6 + 83 , 72 @ @ public class CoreModManager 
 { 
 return String . format ( " % s { % s } " , this . name , this . predepends ) ; 
 } 
 + 
 + @ Override 
 + public void acceptOptions ( List < String > args , File gameDir , File assetsDir , String profile ) 
 + { 
 + / / NO OP 
 + } 
 + 
 + @ Override 
 + public void injectIntoClassLoader ( LaunchClassLoader classLoader ) 
 + { 
 + FMLRelaunchLog . fine ( " Injecting coremod % s { % s } class transformers " , name , coreModInstance . getClass ( ) . getName ( ) ) ; 
 + if ( coreModInstance . getASMTransformerClass ( ) ! = null ) for ( String transformer : coreModInstance . getASMTransformerClass ( ) ) 
 + { 
 + FMLRelaunchLog . finest ( " Registering transformer % s " , transformer ) ; 
 + classLoader . registerTransformer ( transformer ) ; 
 + } 
 + FMLRelaunchLog . fine ( " Injection complete " ) ; 
 + 
 + FMLRelaunchLog . fine ( " Running coremod plugin for % s { % s } " , name , coreModInstance . getClass ( ) . getName ( ) ) ; 
 + Map < String , Object > data = new HashMap < String , Object > ( ) ; 
 + data . put ( " mcLocation " , mcDir ) ; 
 + data . put ( " coremodList " , loadPlugins ) ; 
 + data . put ( " runtimeDeobfuscationEnabled " , ! deobfuscatedEnvironment ) ; 
 + FMLRelaunchLog . fine ( " Running coremod plugin % s " , name ) ; 
 + data . put ( " coremodLocation " , location ) ; 
 + coreModInstance . injectData ( data ) ; 
 + String setupClass = coreModInstance . getSetupClass ( ) ; 
 + if ( setupClass ! = null ) 
 + { 
 + try 
 + { 
 + IFMLCallHook call = ( IFMLCallHook ) Class . forName ( setupClass , true , classLoader ) . newInstance ( ) ; 
 + Map < String , Object > callData = new HashMap < String , Object > ( ) ; 
 + callData . put ( " mcLocation " , mcDir ) ; 
 + callData . put ( " classLoader " , classLoader ) ; 
 + callData . put ( " coremodLocation " , location ) ; 
 + callData . put ( " deobfuscationFileName " , FMLInjectionData . debfuscationDataName ( ) ) ; 
 + call . injectData ( callData ) ; 
 + call . call ( ) ; 
 + } 
 + catch ( Exception e ) 
 + { 
 + throw new RuntimeException ( e ) ; 
 + } 
 + } 
 + FMLRelaunchLog . fine ( " Coremod plugin class % s run successfully " , coreModInstance . getClass ( ) . getSimpleName ( ) ) ; 
 + 
 + String modContainer = coreModInstance . getModContainerClass ( ) ; 
 + if ( modContainer ! = null ) 
 + { 
 + FMLInjectionData . containers . add ( modContainer ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public String getLaunchTarget ( ) 
 + { 
 + return " " ; 
 + } 
 + 
 + @ Override 
 + public String [ ] getLaunchArguments ( ) 
 + { 
 + return new String [ 0 ] ; 
 + } 
 + 
 } 
 
 public static void handleLaunch ( File mcDir , LaunchClassLoader classLoader , FMLTweaker tweaker ) 
 @ @ - 104 , 6 + 174 , 7 @ @ public class CoreModManager 
 FMLRelaunchLog . fine ( " Enabling runtime deobfuscation " ) ; 
 } 
 
 + tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLInjectionAndSortingTweaker " ) ; 
 try 
 { 
 classLoader . registerTransformer ( " cpw . mods . fml . common . asm . transformers . PatchingTransformer " ) ; 
 @ @ - 126 , 8 + 197 , 9 @ @ public class CoreModManager 
 } 
 
 FMLRelaunchLog . fine ( " All fundamental core mods are successfully located " ) ; 
 - / / Now that we have the root plugins loaded - lets see what else might be around 
 - String commandLineCoremods = System . getProperty ( " fml . coreMods . load " , " " ) ; 
 + / / Now that we have the root plugins loaded - lets see what else might 
 + / / be around 
 + String commandLineCoremods = System . getProperty ( " fml . coreMods . load " , " " ) ; 
 for ( String coreModClassName : commandLineCoremods . split ( " , " ) ) 
 { 
 if ( coreModClassName . isEmpty ( ) ) 
 @ @ - 145 , 8 + 217 , 7 @ @ public class CoreModManager 
 { 
 FMLRelaunchLog . fine ( " Discovering coremods " ) ; 
 File coreMods = setupCoreModDir ( mcDir ) ; 
 - FilenameFilter ff = new FilenameFilter ( ) 
 - { 
 + FilenameFilter ff = new FilenameFilter ( ) { 
 @ Override 
 public boolean accept ( File dir , String name ) 
 { 
 @ @ - 154 , 11 + 225 , 11 @ @ public class CoreModManager 
 } 
 } ; 
 File [ ] coreModList = coreMods . listFiles ( ff ) ; 
 - File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; 
 + File versionedModDir = new File ( coreMods , FMLInjectionData . mccversion ) ; 
 if ( versionedModDir . isDirectory ( ) ) 
 { 
 File [ ] versionedCoreMods = versionedModDir . listFiles ( ff ) ; 
 - coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; 
 + coreModList = ObjectArrays . concat ( coreModList , versionedCoreMods , File . class ) ; 
 } 
 
 Arrays . sort ( coreModList ) ; 
 @ @ - 185 , 7 + 256 , 7 @ @ public class CoreModManager 
 } 
 finally 
 { 
 - if ( jar ! = null ) 
 + if ( jar ! = null ) 
 { 
 try 
 { 
 @ @ - 226 , 7 + 297 , 8 @ @ public class CoreModManager 
 } 
 else 
 { 
 - FMLRelaunchLog . finest ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , coreMod . getName ( ) ) ; 
 + FMLRelaunchLog . finest ( " Found FMLCorePluginContainsFMLMod marker in % s , it will be examined later for regular @ Mod instances " , 
 + coreMod . getName ( ) ) ; 
 reparsedCoremods . add ( coreMod . getName ( ) ) ; 
 } 
 } 
 @ @ - 240 , 6 + 312 , 7 @ @ public class CoreModManager 
 } 
 
 private static Method ADDURL ; 
 + 
 private static void handleCascadingTweak ( File coreMod , JarFile jar , String cascadedTweaker , LaunchClassLoader classLoader , Integer sortingOrder ) 
 { 
 try 
 @ @ - 252 , 7 + 325 , 8 @ @ public class CoreModManager 
 } 
 ADDURL . invoke ( classLoader . getClass ( ) . getClassLoader ( ) , coreMod . toURI ( ) . toURL ( ) ) ; 
 classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; 
 - CoreModManager . tweaker . injectCascadingTweak ( cascadedTweaker , sortingOrder ) ; 
 + CoreModManager . tweaker . injectCascadingTweak ( cascadedTweaker ) ; 
 + tweakSorting . put ( cascadedTweaker , sortingOrder ) ; 
 } 
 catch ( Exception e ) 
 { 
 @ @ - 260 , 20 + 334 , 26 @ @ public class CoreModManager 
 } 
 } 
 
 + private static void injectTweakWrapper ( FMLPluginWrapper wrapper ) 
 + { 
 + loadPlugins . add ( wrapper ) ; 
 + } 
 + 
 / * * 
 - * @ param mcDir the minecraft home directory 
 + * @ param mcDir 
 + * the minecraft home directory 
 * @ return the coremod directory 
 * / 
 private static File setupCoreModDir ( File mcDir ) 
 { 
 - File coreModDir = new File ( mcDir , " mods " ) ; 
 + File coreModDir = new File ( mcDir , " mods " ) ; 
 try 
 { 
 coreModDir = coreModDir . getCanonicalFile ( ) ; 
 } 
 catch ( IOException e ) 
 { 
 - throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; 
 + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; 
 } 
 if ( ! coreModDir . exists ( ) ) 
 { 
 @ @ - 298 , 14 + 378 , 14 @ @ public class CoreModManager 
 
 private static FMLPluginWrapper loadCoreMod ( LaunchClassLoader classLoader , String coreModClass , File location ) 
 { 
 - String coreModName = coreModClass . substring ( coreModClass . lastIndexOf ( ' . ' ) + 1 ) ; 
 + String coreModName = coreModClass . substring ( coreModClass . lastIndexOf ( ' . ' ) + 1 ) ; 
 try 
 { 
 FMLRelaunchLog . fine ( " Instantiating coremod class % s " , coreModName ) ; 
 classLoader . addTransformerExclusion ( coreModClass ) ; 
 Class < ? > coreModClazz = Class . forName ( coreModClass , true , classLoader ) ; 
 Name coreModNameAnn = coreModClazz . getAnnotation ( IFMLLoadingPlugin . Name . class ) ; 
 - if ( coreModNameAnn ! = null & & ! Strings . isNullOrEmpty ( coreModNameAnn . value ( ) ) ) 
 + if ( coreModNameAnn ! = null & & ! Strings . isNullOrEmpty ( coreModNameAnn . value ( ) ) ) 
 { 
 coreModName = coreModNameAnn . value ( ) ; 
 FMLRelaunchLog . finest ( " coremod named % s is loading " , coreModName ) ; 
 @ @ - 313 , 19 + 393 , 22 @ @ public class CoreModManager 
 MCVersion requiredMCVersion = coreModClazz . getAnnotation ( IFMLLoadingPlugin . MCVersion . class ) ; 
 if ( ! Arrays . asList ( rootPlugins ) . contains ( coreModClass ) & & ( requiredMCVersion = = null | | Strings . isNullOrEmpty ( requiredMCVersion . value ( ) ) ) ) 
 { 
 - FMLRelaunchLog . log ( Level . WARNING , " The coremod % s does not have a MCVersion annotation , it may cause issues with this version of Minecraft " , coreModClass ) ; 
 + FMLRelaunchLog . log ( Level . WARNING , " The coremod % s does not have a MCVersion annotation , it may cause issues with this version of Minecraft " , 
 + coreModClass ) ; 
 } 
 - else if ( requiredMCVersion ! = null & & ! FMLInjectionData . mccversion . equals ( requiredMCVersion . value ( ) ) ) 
 + else if ( requiredMCVersion ! = null & & ! FMLInjectionData . mccversion . equals ( requiredMCVersion . value ( ) ) ) 
 { 
 - FMLRelaunchLog . log ( Level . SEVERE , " The coremod % s is requesting minecraft version % s and minecraft is % s . It will be ignored . " , coreModClass , requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; 
 + FMLRelaunchLog . log ( Level . SEVERE , " The coremod % s is requesting minecraft version % s and minecraft is % s . It will be ignored . " , coreModClass , 
 + requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; 
 return null ; 
 } 
 - else if ( requiredMCVersion ! = null ) 
 + else if ( requiredMCVersion ! = null ) 
 { 
 - FMLRelaunchLog . log ( Level . FINE , " The coremod % s requested minecraft version % s and minecraft is % s . It will be loaded . " , coreModClass , requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; 
 + FMLRelaunchLog . log ( Level . FINE , " The coremod % s requested minecraft version % s and minecraft is % s . It will be loaded . " , coreModClass , 
 + requiredMCVersion . value ( ) , FMLInjectionData . mccversion ) ; 
 } 
 TransformerExclusions trExclusions = coreModClazz . getAnnotation ( IFMLLoadingPlugin . TransformerExclusions . class ) ; 
 - if ( trExclusions ! = null ) 
 + if ( trExclusions ! = null ) 
 { 
 for ( String st : trExclusions . value ( ) ) 
 { 
 @ @ - 338 , 11 + 421 , 13 @ @ public class CoreModManager 
 { 
 dependencies = deplist . value ( ) ; 
 } 
 - IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClazz . newInstance ( ) ; 
 - FMLPluginWrapper wrap = new FMLPluginWrapper ( coreModName , plugin , location , dependencies ) ; 
 + SortingIndex index = coreModClazz . getAnnotation ( IFMLLoadingPlugin . SortingIndex . class ) ; 
 + int sortIndex = index ! = null ? index . value ( ) : 0 ; 
 
 + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClazz . newInstance ( ) ; 
 + FMLPluginWrapper wrap = new FMLPluginWrapper ( coreModName , plugin , location , sortIndex , dependencies ) ; 
 loadPlugins . add ( wrap ) ; 
 - FMLRelaunchLog . fine ( " Loaded coremod % s " , coreModName ) ; 
 + FMLRelaunchLog . fine ( " Enqueued coremod % s " , coreModName ) ; 
 return wrap ; 
 } 
 catch ( ClassNotFoundException cnfe ) 
 @ @ - 400 , 61 + 485 , 73 @ @ public class CoreModManager 
 throw Throwables . propagate ( e ) ; 
 } 
 } 
 + 
 public static void injectTransformers ( LaunchClassLoader classLoader ) 
 { 
 
 - for ( FMLPluginWrapper wrap : loadPlugins ) 
 + Launch . blackboard . put ( " fml . deobfuscatedEnvironment " , deobfuscatedEnvironment ) ; 
 + tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " ) ; 
 + tweakSorting . put ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " , Integer . valueOf ( 1000 ) ) ; 
 + } 
 + 
 + public static void injectCoreModTweaks ( FMLInjectionAndSortingTweaker fmlInjectionAndSortingTweaker ) 
 + { 
 + List < ITweaker > tweakers = ( List < ITweaker > ) Launch . blackboard . get ( " Tweaks " ) ; 
 + / / Add the sorting tweaker first - it ' ll appear twice in the list 
 + tweakers . add ( 0 , fmlInjectionAndSortingTweaker ) ; 
 + for ( FMLPluginWrapper wrapper : loadPlugins ) 
 { 
 - IFMLLoadingPlugin plug = wrap . coreModInstance ; 
 - if ( plug . getASMTransformerClass ( ) ! = null ) 
 + tweakers . add ( wrapper ) ; 
 + } 
 + } 
 + 
 + private static Map < String , Integer > tweakSorting = Maps . newHashMap ( ) ; 
 + 
 + public static void sortTweakList ( ) 
 + { 
 + List < ITweaker > tweakers = ( List < ITweaker > ) Launch . blackboard . get ( " Tweaks " ) ; 
 + Collections . sort ( tweakers , new Comparator < ITweaker > ( ) { 
 + @ Override 
 + public int compare ( ITweaker o1 , ITweaker o2 ) 
 { 
 - for ( String xformClass : plug . getASMTransformerClass ( ) ) 
 + Integer first = null ; 
 + Integer second = null ; 
 + if ( o1 instanceof FMLInjectionAndSortingTweaker ) 
 { 
 - FMLRelaunchLog . finest ( " Registering transformer % s " , xformClass ) ; 
 - classLoader . registerTransformer ( xformClass ) ; 
 + first = Integer . MIN _ VALUE ; 
 } 
 - } 
 - } 
 - FMLRelaunchLog . fine ( " Running coremod plugins " ) ; 
 - Map < String , Object > data = new HashMap < String , Object > ( ) ; 
 - data . put ( " mcLocation " , mcDir ) ; 
 - data . put ( " coremodList " , loadPlugins ) ; 
 - data . put ( " runtimeDeobfuscationEnabled " , ! deobfuscatedEnvironment ) ; 
 - for ( FMLPluginWrapper pluginWrapper : loadPlugins ) 
 - { 
 - IFMLLoadingPlugin plugin = pluginWrapper . coreModInstance ; 
 - FMLRelaunchLog . fine ( " Running coremod plugin % s " , pluginWrapper . name ) ; 
 - data . put ( " coremodLocation " , pluginWrapper . location ) ; 
 - plugin . injectData ( data ) ; 
 - String setupClass = plugin . getSetupClass ( ) ; 
 - if ( setupClass ! = null ) 
 - { 
 - try 
 + if ( o2 instanceof FMLInjectionAndSortingTweaker ) 
 { 
 - IFMLCallHook call = ( IFMLCallHook ) Class . forName ( setupClass , true , classLoader ) . newInstance ( ) ; 
 - Map < String , Object > callData = new HashMap < String , Object > ( ) ; 
 - callData . put ( " mcLocation " , mcDir ) ; 
 - callData . put ( " classLoader " , classLoader ) ; 
 - callData . put ( " coremodLocation " , pluginWrapper . location ) ; 
 - callData . put ( " deobfuscationFileName " , FMLInjectionData . debfuscationDataName ( ) ) ; 
 - call . injectData ( callData ) ; 
 - call . call ( ) ; 
 + second = Integer . MIN _ VALUE ; 
 } 
 - catch ( Exception e ) 
 + 
 + if ( o1 instanceof FMLPluginWrapper ) 
 { 
 - throw new RuntimeException ( e ) ; 
 + first = ( ( FMLPluginWrapper ) o1 ) . sortIndex ; 
 + } 
 + else if ( first = = null ) 
 + { 
 + first = tweakSorting . get ( o1 . getClass ( ) . getName ( ) ) ; 
 + } 
 + if ( o2 instanceof FMLPluginWrapper ) 
 + { 
 + second = ( ( FMLPluginWrapper ) o2 ) . sortIndex ; 
 + } 
 + else if ( second = = null ) 
 + { 
 + second = tweakSorting . get ( o2 . getClass ( ) . getName ( ) ) ; 
 + } 
 + if ( first = = null ) 
 + { 
 + first = 0 ; 
 + } 
 + if ( second = = null ) 
 + { 
 + second = 0 ; 
 } 
 - } 
 - FMLRelaunchLog . fine ( " Coremod plugin % s run successfully " , plugin . getClass ( ) . getSimpleName ( ) ) ; 
 
 - String modContainer = plugin . getModContainerClass ( ) ; 
 - if ( modContainer ! = null ) 
 - { 
 - FMLInjectionData . containers . add ( modContainer ) ; 
 + return Ints . saturatedCast ( ( long ) first - ( long ) second ) ; 
 } 
 - } 
 - 
 - Launch . blackboard . put ( " fml . deobfuscatedEnvironment " , deobfuscatedEnvironment ) ; 
 - tweaker . injectCascadingTweak ( " cpw . mods . fml . common . launcher . FMLDeobfTweaker " , Integer . valueOf ( 1000 ) ) ; 
 + } ) ; 
 } 
 } 
 diff - - git a / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java b / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java 
 index cc36db6 . . 568a5f3 100644 
 - - - a / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java 
 + + + b / fml / common / cpw / mods / fml / relauncher / IFMLLoadingPlugin . java 
 @ @ - 122 , 4 + 122 , 16 @ @ public interface IFMLLoadingPlugin 
 public String [ ] value ( ) default { } ; 
 } 
 
 + / * * 
 + * A simple sorting index , interleaved with other tweakers from other sources , as well as FML 
 + * @ author cpw 
 + * 
 + * / 
 + @ Retention ( RetentionPolicy . RUNTIME ) 
 + @ Target ( ElementType . TYPE ) 
 + public @ interface SortingIndex 
 + { 
 + public int value ( ) default 0 ; 
 + } 
 + 
 }
