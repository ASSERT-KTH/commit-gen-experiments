BLEU SCORE: 0.019626728448746977

TEST MSG: Add a simple ContainedDep mechanic - mods can contain other mods or libs , and can specify them using a manifest tag : " ContainedDeps " .
GENERATED MSG: Fix up coremods with relaunch , add in a sample " coremod "

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> index 1da4ed3 . . 528c4ed 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java <nl> @ @ - 14 , 6 + 14 , 7 @ @ package net . minecraftforge . fml . relauncher ; <nl> <nl> import java . io . File ; <nl> import java . io . FileFilter ; <nl> + import java . io . FileOutputStream ; <nl> import java . io . FilenameFilter ; <nl> import java . io . IOException ; <nl> import java . lang . reflect . Method ; <nl> @ @ - 29 , 8 + 30 , 10 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Set ; <nl> import java . util . jar . Attributes ; <nl> + import java . util . jar . JarEntry ; <nl> import java . util . jar . JarFile ; <nl> <nl> + import com . google . common . io . ByteStreams ; <nl> import net . minecraft . launchwrapper . ITweaker ; <nl> import net . minecraft . launchwrapper . Launch ; <nl> import net . minecraft . launchwrapper . LaunchClassLoader ; <nl> @ @ - 59 , 6 + 62 , 7 @ @ public class CoreModManager { <nl> private static final Attributes . Name COREMODCONTAINSFMLMOD = new Attributes . Name ( " FMLCorePluginContainsFMLMod " ) ; <nl> private static final Attributes . Name MODTYPE = new Attributes . Name ( " ModType " ) ; <nl> private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; <nl> + private static final Attributes . Name MODCONTAINSDEPS = new Attributes . Name ( " ContainedDeps " ) ; <nl> private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> private static List < String > ignoredModFiles = Lists . newArrayList ( ) ; <nl> private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; <nl> @ @ - 69 , 6 + 73 , 7 @ @ public class CoreModManager { <nl> private static List < String > candidateModFiles = Lists . newArrayList ( ) ; <nl> private static List < String > accessTransformers = Lists . newArrayList ( ) ; <nl> private static Set < String > rootNames = Sets . newHashSet ( ) ; <nl> + private static final List < String > skipContainedDeps = Arrays . asList ( System . getProperty ( " fml . skipContainedDeps " , " " ) . split ( " , " ) ) ; <nl> <nl> static <nl> { <nl> @ @ - 322 , 6 + 327 , 7 @ @ public class CoreModManager { <nl> FMLRelaunchLog . fine ( " Examining for coremod candidacy % s " , coreMod . getName ( ) ) ; <nl> JarFile jar = null ; <nl> Attributes mfAttributes ; <nl> + String fmlCorePlugin ; <nl> try <nl> { <nl> jar = new JarFile ( coreMod ) ; <nl> @ @ - 332 , 6 + 338 , 39 @ @ public class CoreModManager { <nl> } <nl> ModAccessTransformer . addJar ( jar ) ; <nl> mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; <nl> + String cascadedTweaker = mfAttributes . getValue ( " TweakClass " ) ; <nl> + if ( cascadedTweaker ! = null ) <nl> + { <nl> + FMLRelaunchLog . info ( " Loading tweaker % s from % s " , cascadedTweaker , coreMod . getName ( ) ) ; <nl> + Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; <nl> + sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; <nl> + handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; <nl> + <nl> + if ( ! modTypes . contains ( " FML " ) ) <nl> + { <nl> + FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; <nl> + if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) <nl> + { <nl> + FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; <nl> + ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + ModListHelper . additionalMods . putAll ( extractContainedDepJars ( jar , versionedModDir ) ) ; <nl> + fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> + if ( fmlCorePlugin = = null ) <nl> + { <nl> + / / Not a coremod <nl> + FMLRelaunchLog . fine ( " Not found coremod data in % s " , coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> } <nl> catch ( IOException ioe ) <nl> { <nl> @ @ - 352 , 38 + 391 , 6 @ @ public class CoreModManager { <nl> } <nl> } <nl> } <nl> - String cascadedTweaker = mfAttributes . getValue ( " TweakClass " ) ; <nl> - if ( cascadedTweaker ! = null ) <nl> - { <nl> - FMLRelaunchLog . info ( " Loading tweaker % s from % s " , cascadedTweaker , coreMod . getName ( ) ) ; <nl> - Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; <nl> - sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; <nl> - handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; <nl> - ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> - continue ; <nl> - } <nl> - List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; <nl> - <nl> - if ( ! modTypes . contains ( " FML " ) ) <nl> - { <nl> - FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; <nl> - ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> - continue ; <nl> - } <nl> - String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; <nl> - if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) <nl> - { <nl> - FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; <nl> - ignoredModFiles . add ( coreMod . getName ( ) ) ; <nl> - continue ; <nl> - } <nl> - String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> - if ( fmlCorePlugin = = null ) <nl> - { <nl> - / / Not a coremod <nl> - FMLRelaunchLog . fine ( " Not found coremod data in % s " , coreMod . getName ( ) ) ; <nl> - continue ; <nl> - } <nl> / / Support things that are mod jars , but not FML mod jars <nl> try <nl> { <nl> @ @ - 409 , 6 + 416 , 47 @ @ public class CoreModManager { <nl> } <nl> } <nl> <nl> + private static Map < String , File > extractContainedDepJars ( JarFile jar , File versionedModsDir ) throws IOException <nl> + { <nl> + Map < String , File > result = Maps . newHashMap ( ) ; <nl> + if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return result ; <nl> + <nl> + String deps = jar . getManifest ( ) . getMainAttributes ( ) . getValue ( MODCONTAINSDEPS ) ; <nl> + String [ ] depList = deps . split ( " " ) ; <nl> + for ( String dep : depList ) <nl> + { <nl> + if ( skipContainedDeps . contains ( dep ) ) <nl> + { <nl> + FMLRelaunchLog . log ( Level . ERROR , " Skipping dep at request : % s " , dep ) ; <nl> + continue ; <nl> + } <nl> + final JarEntry jarEntry = jar . getJarEntry ( dep ) ; <nl> + if ( jarEntry = = null ) <nl> + { <nl> + FMLRelaunchLog . log ( Level . ERROR , " Found invalid ContainsDeps declaration % s in % s " , dep , jar . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + File target = new File ( versionedModsDir , dep ) ; <nl> + if ( target . exists ( ) ) <nl> + { <nl> + FMLRelaunchLog . log ( Level . DEBUG , " Found existing ContainsDep extracted to % s , skipping extraction " , target . getCanonicalPath ( ) ) ; <nl> + result . put ( dep , target ) ; <nl> + continue ; <nl> + } <nl> + FMLRelaunchLog . log ( Level . DEBUG , " Extracted ContainedDep % s from % s to % s " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; <nl> + try <nl> + { <nl> + ByteStreams . copy ( jar . getInputStream ( jarEntry ) , new FileOutputStream ( target ) ) ; <nl> + } catch ( IOException e ) <nl> + { <nl> + FMLRelaunchLog . log ( Level . ERROR , e , " An error occurred extracting dependency " ) ; <nl> + continue ; <nl> + } <nl> + result . put ( dep , target ) ; <nl> + } <nl> + return result ; <nl> + } <nl> + <nl> private static Method ADDURL ; <nl> <nl> private static void handleCascadingTweak ( File coreMod , JarFile jar , String cascadedTweaker , LaunchClassLoader classLoader , Integer sortingOrder )
NEAREST DIFF (one line): diff - - git a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> index 3ed09f9 . . 9ee3c58 100644 <nl> - - - a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> + + + b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . io . File ; <nl> import java . io . FileInputStream ; <nl> import java . io . FileNotFoundException ; <nl> import java . io . FileOutputStream ; <nl> + import java . io . FilenameFilter ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . math . BigInteger ; <nl> @ @ - 20 , 7 + 21 , 11 @ @ import java . nio . channels . FileChannel . MapMode ; <nl> import java . security . MessageDigest ; <nl> import java . security . NoSuchAlgorithmException ; <nl> import java . util . ArrayList ; <nl> + import java . util . Arrays ; <nl> import java . util . List ; <nl> + import java . util . jar . Attributes ; <nl> + import java . util . jar . JarEntry ; <nl> + import java . util . jar . JarFile ; <nl> import java . util . logging . Level ; <nl> import java . util . logging . Logger ; <nl> <nl> @ @ - 31 , 14 + 36 , 14 @ @ import cpw . mods . fml . common . discovery . ModCandidate ; <nl> <nl> public class RelaunchLibraryManager <nl> { <nl> - private static String [ ] plugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; <nl> private static final String HEXES = " 0123456789abcdef " ; <nl> private static List < String > loadedLibraries = new ArrayList < String > ( ) ; <nl> public static void handleLaunch ( File mcDir , RelaunchClassLoader actualClassLoader ) <nl> { <nl> List < IFMLLoadingPlugin > loadPlugins = new ArrayList < IFMLLoadingPlugin > ( ) ; <nl> List < ILibrarySet > libraries = new ArrayList < ILibrarySet > ( ) ; <nl> - for ( String s : plugins ) <nl> + for ( String s : rootPlugins ) <nl> { <nl> try <nl> { <nl> @ @ - 60 , 6 + 65 , 9 @ @ public class RelaunchLibraryManager <nl> throw new RuntimeException ( " A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation . " ) ; <nl> } <nl> <nl> + / / Now that we have the root plugins loaded - lets see what else might be around <nl> + discoverCoreMods ( mcDir , actualClassLoader , loadPlugins , libraries ) ; <nl> + <nl> List < Throwable > caughtErrors = new ArrayList < Throwable > ( ) ; <nl> try <nl> { <nl> @ @ - 172 , 9 + 180 , 12 @ @ public class RelaunchLibraryManager <nl> <nl> for ( IFMLLoadingPlugin plug : loadPlugins ) <nl> { <nl> - for ( String xformClass : plug . getASMTransformerClass ( ) ) <nl> + if ( plug . getASMTransformerClass ( ) ! = null ) <nl> { <nl> - actualClassLoader . registerTransformer ( xformClass ) ; <nl> + for ( String xformClass : plug . getASMTransformerClass ( ) ) <nl> + { <nl> + actualClassLoader . registerTransformer ( xformClass ) ; <nl> + } <nl> } <nl> } <nl> try <nl> @ @ - 188 , 6 + 199 , 102 @ @ public class RelaunchLibraryManager <nl> } <nl> } <nl> <nl> + private static void discoverCoreMods ( File mcDir , RelaunchClassLoader classLoader , List < IFMLLoadingPlugin > loadPlugins , List < ILibrarySet > libraries ) <nl> + { <nl> + File coreMods = setupCoreModDir ( mcDir ) ; <nl> + FilenameFilter ff = new FilenameFilter ( ) <nl> + { <nl> + @ Override <nl> + public boolean accept ( File dir , String name ) <nl> + { <nl> + return name . endsWith ( " . jar " ) ; <nl> + } <nl> + } ; <nl> + File [ ] coreModList = coreMods . listFiles ( ff ) ; <nl> + Arrays . sort ( coreModList ) ; <nl> + <nl> + for ( File coreMod : coreModList ) <nl> + { <nl> + FMLLog . fine ( " Found a candidate coremod % s " , coreMod . getName ( ) ) ; <nl> + JarFile jar ; <nl> + Attributes mfAttributes ; <nl> + try <nl> + { <nl> + jar = new JarFile ( coreMod ) ; <nl> + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , ioe , " Unable to read the coremod jar file % s - ignoring " , coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> + String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; <nl> + if ( fmlCorePlugin = = null ) <nl> + { <nl> + FMLLog . severe ( " The coremod % s does not contain a valid jar manifest - it will be ignored " , coreMod . getName ( ) ) ; <nl> + continue ; <nl> + } <nl> + <nl> + / / String className = fmlCorePlugin . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; <nl> + / / JarEntry ent = jar . getJarEntry ( className ) ; <nl> + / / if ( ent = = null ) <nl> + / / { <nl> + / / FMLLog . severe ( " The coremod % s specified % s as it ' s loading class but it does not include it - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + / / continue ; <nl> + / / } <nl> + / / try <nl> + / / { <nl> + / / Class < ? > coreModClass = Class . forName ( fmlCorePlugin , false , classLoader ) ; <nl> + / / FMLLog . severe ( " The coremods % s specified a class % s that is already present in the classpath - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + / / continue ; <nl> + / / } <nl> + / / catch ( ClassNotFoundException cnfe ) <nl> + / / { <nl> + / / / / didn ' t find it , good <nl> + / / } <nl> + try <nl> + { <nl> + classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; <nl> + } <nl> + catch ( MalformedURLException e ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , e , " Unable to convert file into a URL . weird " ) ; <nl> + continue ; <nl> + } <nl> + try <nl> + { <nl> + Class < ? > coreModClass = Class . forName ( fmlCorePlugin , true , classLoader ) ; <nl> + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClass . newInstance ( ) ; <nl> + loadPlugins . add ( plugin ) ; <nl> + if ( plugin . getLibraryRequestClass ( ) ! = null ) <nl> + { <nl> + for ( String libName : plugin . getLibraryRequestClass ( ) ) <nl> + { <nl> + libraries . add ( ( ILibrarySet ) Class . forName ( libName , true , classLoader ) . newInstance ( ) ) ; <nl> + } <nl> + } <nl> + FMLLog . fine ( " Loaded coremod % s " , coreMod . getName ( ) ) ; <nl> + } <nl> + catch ( ClassNotFoundException cnfe ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , cnfe , " Coremod % s : Unable to class load the plugin % s " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( ClassCastException cce ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , cce , " Coremod % s : The plugin % s is not an implementor of IFMLLoadingPlugin " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( InstantiationException ie ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , ie , " Coremod % s : The plugin class % s was not instantiable " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + catch ( IllegalAccessException iae ) <nl> + { <nl> + FMLLog . log ( Level . SEVERE , iae , " Coremod % s : The plugin class % s was not accessible " , coreMod . getName ( ) , fmlCorePlugin ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> / * * <nl> * @ param mcDir <nl> * @ return <nl> @ @ - 214 , 6 + 321 , 32 @ @ public class RelaunchLibraryManager <nl> return libDir ; <nl> } <nl> <nl> + / * * <nl> + * @ param mcDir <nl> + * @ return <nl> + * / <nl> + private static File setupCoreModDir ( File mcDir ) <nl> + { <nl> + File coreModDir = new File ( mcDir , " coremods " ) ; <nl> + try <nl> + { <nl> + coreModDir = coreModDir . getCanonicalFile ( ) ; <nl> + } <nl> + catch ( IOException e ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; <nl> + } <nl> + if ( ! coreModDir . exists ( ) ) <nl> + { <nl> + coreModDir . mkdir ( ) ; <nl> + } <nl> + else if ( coreModDir . exists ( ) & & ! coreModDir . isDirectory ( ) ) <nl> + { <nl> + throw new RuntimeException ( String . format ( " Found a coremod file in % s that ' s not a directory " , mcDir . getName ( ) ) ) ; <nl> + } <nl> + return coreModDir ; <nl> + } <nl> + <nl> private static String generateChecksum ( File file ) <nl> { <nl> try <nl> diff - - git a / fml / eclipse / coremodtest / . classpath b / fml / eclipse / coremodtest / . classpath <nl> new file mode 100644 <nl> index 0000000 . . 294bff6 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . classpath <nl> @ @ - 0 , 0 + 1 , 7 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < classpath > <nl> + 	 < classpathentry kind = " src " path = " src " / > <nl> + 	 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER / org . eclipse . jdt . internal . debug . ui . launcher . StandardVMType / JavaSE - 1 . 6 " / > <nl> + 	 < classpathentry combineaccessrules = " false " kind = " src " path = " / FML - Client " / > <nl> + 	 < classpathentry kind = " output " path = " bin " / > <nl> + < / classpath > <nl> diff - - git a / fml / eclipse / coremodtest / . project b / fml / eclipse / coremodtest / . project <nl> new file mode 100644 <nl> index 0000000 . . bda0433 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . project <nl> @ @ - 0 , 0 + 1 , 17 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > <nl> + < projectDescription > <nl> + 	 < name > coremodtest < / name > <nl> + 	 < comment > < / comment > <nl> + 	 < projects > <nl> + 	 < / projects > <nl> + 	 < buildSpec > <nl> + 	 	 < buildCommand > <nl> + 	 	 	 < name > org . eclipse . jdt . core . javabuilder < / name > <nl> + 	 	 	 < arguments > <nl> + 	 	 	 < / arguments > <nl> + 	 	 < / buildCommand > <nl> + 	 < / buildSpec > <nl> + 	 < natures > <nl> + 	 	 < nature > org . eclipse . jdt . core . javanature < / nature > <nl> + 	 < / natures > <nl> + < / projectDescription > <nl> diff - - git a / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs <nl> new file mode 100644 <nl> index 0000000 . . 8000cd6 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs <nl> @ @ - 0 , 0 + 1 , 11 @ @ <nl> + eclipse . preferences . version = 1 <nl> + org . eclipse . jdt . core . compiler . codegen . inlineJsrBytecode = enabled <nl> + org . eclipse . jdt . core . compiler . codegen . targetPlatform = 1 . 6 <nl> + org . eclipse . jdt . core . compiler . codegen . unusedLocal = preserve <nl> + org . eclipse . jdt . core . compiler . compliance = 1 . 6 <nl> + org . eclipse . jdt . core . compiler . debug . lineNumber = generate <nl> + org . eclipse . jdt . core . compiler . debug . localVariable = generate <nl> + org . eclipse . jdt . core . compiler . debug . sourceFile = generate <nl> + org . eclipse . jdt . core . compiler . problem . assertIdentifier = error <nl> + org . eclipse . jdt . core . compiler . problem . enumIdentifier = error <nl> + org . eclipse . jdt . core . compiler . source = 1 . 6 <nl> diff - - git a / fml / eclipse / coremodtest / manifest . mf b / fml / eclipse / coremodtest / manifest . mf <nl> new file mode 100644 <nl> index 0000000 . . eda1ba3 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / manifest . mf <nl> @ @ - 0 , 0 + 1 , 3 @ @ <nl> + Manifest - Version : 1 . 0 <nl> + FMLCorePlugin : cpw . mods . testcoremod . FMLLoadPlugin <nl> + <nl> diff - - git a / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java <nl> new file mode 100644 <nl> index 0000000 . . 44094f0 <nl> - - - / dev / null <nl> + + + b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java <nl> @ @ - 0 , 0 + 1 , 19 @ @ <nl> + package cpw . mods . testcoremod ; <nl> + <nl> + import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; <nl> + <nl> + public class FMLLoadPlugin implements IFMLLoadingPlugin <nl> + { <nl> + @ Override <nl> + public String [ ] getLibraryRequestClass ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + public String [ ] getASMTransformerClass ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 index 1da4ed3 . . 528c4ed 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / CoreModManager . java 
 @ @ - 14 , 6 + 14 , 7 @ @ package net . minecraftforge . fml . relauncher ; 
 
 import java . io . File ; 
 import java . io . FileFilter ; 
 + import java . io . FileOutputStream ; 
 import java . io . FilenameFilter ; 
 import java . io . IOException ; 
 import java . lang . reflect . Method ; 
 @ @ - 29 , 8 + 30 , 10 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Set ; 
 import java . util . jar . Attributes ; 
 + import java . util . jar . JarEntry ; 
 import java . util . jar . JarFile ; 
 
 + import com . google . common . io . ByteStreams ; 
 import net . minecraft . launchwrapper . ITweaker ; 
 import net . minecraft . launchwrapper . Launch ; 
 import net . minecraft . launchwrapper . LaunchClassLoader ; 
 @ @ - 59 , 6 + 62 , 7 @ @ public class CoreModManager { 
 private static final Attributes . Name COREMODCONTAINSFMLMOD = new Attributes . Name ( " FMLCorePluginContainsFMLMod " ) ; 
 private static final Attributes . Name MODTYPE = new Attributes . Name ( " ModType " ) ; 
 private static final Attributes . Name MODSIDE = new Attributes . Name ( " ModSide " ) ; 
 + private static final Attributes . Name MODCONTAINSDEPS = new Attributes . Name ( " ContainedDeps " ) ; 
 private static String [ ] rootPlugins = { " net . minecraftforge . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 private static List < String > ignoredModFiles = Lists . newArrayList ( ) ; 
 private static Map < String , List < String > > transformers = Maps . newHashMap ( ) ; 
 @ @ - 69 , 6 + 73 , 7 @ @ public class CoreModManager { 
 private static List < String > candidateModFiles = Lists . newArrayList ( ) ; 
 private static List < String > accessTransformers = Lists . newArrayList ( ) ; 
 private static Set < String > rootNames = Sets . newHashSet ( ) ; 
 + private static final List < String > skipContainedDeps = Arrays . asList ( System . getProperty ( " fml . skipContainedDeps " , " " ) . split ( " , " ) ) ; 
 
 static 
 { 
 @ @ - 322 , 6 + 327 , 7 @ @ public class CoreModManager { 
 FMLRelaunchLog . fine ( " Examining for coremod candidacy % s " , coreMod . getName ( ) ) ; 
 JarFile jar = null ; 
 Attributes mfAttributes ; 
 + String fmlCorePlugin ; 
 try 
 { 
 jar = new JarFile ( coreMod ) ; 
 @ @ - 332 , 6 + 338 , 39 @ @ public class CoreModManager { 
 } 
 ModAccessTransformer . addJar ( jar ) ; 
 mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; 
 + String cascadedTweaker = mfAttributes . getValue ( " TweakClass " ) ; 
 + if ( cascadedTweaker ! = null ) 
 + { 
 + FMLRelaunchLog . info ( " Loading tweaker % s from % s " , cascadedTweaker , coreMod . getName ( ) ) ; 
 + Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; 
 + sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; 
 + handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; 
 + 
 + if ( ! modTypes . contains ( " FML " ) ) 
 + { 
 + FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; 
 + if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) 
 + { 
 + FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; 
 + ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + ModListHelper . additionalMods . putAll ( extractContainedDepJars ( jar , versionedModDir ) ) ; 
 + fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 + if ( fmlCorePlugin = = null ) 
 + { 
 + / / Not a coremod 
 + FMLRelaunchLog . fine ( " Not found coremod data in % s " , coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 } 
 catch ( IOException ioe ) 
 { 
 @ @ - 352 , 38 + 391 , 6 @ @ public class CoreModManager { 
 } 
 } 
 } 
 - String cascadedTweaker = mfAttributes . getValue ( " TweakClass " ) ; 
 - if ( cascadedTweaker ! = null ) 
 - { 
 - FMLRelaunchLog . info ( " Loading tweaker % s from % s " , cascadedTweaker , coreMod . getName ( ) ) ; 
 - Integer sortOrder = Ints . tryParse ( Strings . nullToEmpty ( mfAttributes . getValue ( " TweakOrder " ) ) ) ; 
 - sortOrder = ( sortOrder = = null ? Integer . valueOf ( 0 ) : sortOrder ) ; 
 - handleCascadingTweak ( coreMod , jar , cascadedTweaker , classLoader , sortOrder ) ; 
 - ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 - continue ; 
 - } 
 - List < String > modTypes = mfAttributes . containsKey ( MODTYPE ) ? Arrays . asList ( mfAttributes . getValue ( MODTYPE ) . split ( " , " ) ) : ImmutableList . of ( " FML " ) ; 
 - 
 - if ( ! modTypes . contains ( " FML " ) ) 
 - { 
 - FMLRelaunchLog . fine ( " Adding % s to the list of things to skip . It is not an FML mod , it has types % s " , coreMod . getName ( ) , modTypes ) ; 
 - ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 - continue ; 
 - } 
 - String modSide = mfAttributes . containsKey ( MODSIDE ) ? mfAttributes . getValue ( MODSIDE ) : " BOTH " ; 
 - if ( ! ( " BOTH " . equals ( modSide ) | | FMLLaunchHandler . side . name ( ) . equals ( modSide ) ) ) 
 - { 
 - FMLRelaunchLog . fine ( " Mod % s has ModSide meta - inf value % s , and we ' re % s . It will be ignored " , coreMod . getName ( ) , modSide , FMLLaunchHandler . side . name ( ) ) ; 
 - ignoredModFiles . add ( coreMod . getName ( ) ) ; 
 - continue ; 
 - } 
 - String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 - if ( fmlCorePlugin = = null ) 
 - { 
 - / / Not a coremod 
 - FMLRelaunchLog . fine ( " Not found coremod data in % s " , coreMod . getName ( ) ) ; 
 - continue ; 
 - } 
 / / Support things that are mod jars , but not FML mod jars 
 try 
 { 
 @ @ - 409 , 6 + 416 , 47 @ @ public class CoreModManager { 
 } 
 } 
 
 + private static Map < String , File > extractContainedDepJars ( JarFile jar , File versionedModsDir ) throws IOException 
 + { 
 + Map < String , File > result = Maps . newHashMap ( ) ; 
 + if ( ! jar . getManifest ( ) . getMainAttributes ( ) . containsKey ( MODCONTAINSDEPS ) ) return result ; 
 + 
 + String deps = jar . getManifest ( ) . getMainAttributes ( ) . getValue ( MODCONTAINSDEPS ) ; 
 + String [ ] depList = deps . split ( " " ) ; 
 + for ( String dep : depList ) 
 + { 
 + if ( skipContainedDeps . contains ( dep ) ) 
 + { 
 + FMLRelaunchLog . log ( Level . ERROR , " Skipping dep at request : % s " , dep ) ; 
 + continue ; 
 + } 
 + final JarEntry jarEntry = jar . getJarEntry ( dep ) ; 
 + if ( jarEntry = = null ) 
 + { 
 + FMLRelaunchLog . log ( Level . ERROR , " Found invalid ContainsDeps declaration % s in % s " , dep , jar . getName ( ) ) ; 
 + continue ; 
 + } 
 + File target = new File ( versionedModsDir , dep ) ; 
 + if ( target . exists ( ) ) 
 + { 
 + FMLRelaunchLog . log ( Level . DEBUG , " Found existing ContainsDep extracted to % s , skipping extraction " , target . getCanonicalPath ( ) ) ; 
 + result . put ( dep , target ) ; 
 + continue ; 
 + } 
 + FMLRelaunchLog . log ( Level . DEBUG , " Extracted ContainedDep % s from % s to % s " , dep , jar . getName ( ) , target . getCanonicalPath ( ) ) ; 
 + try 
 + { 
 + ByteStreams . copy ( jar . getInputStream ( jarEntry ) , new FileOutputStream ( target ) ) ; 
 + } catch ( IOException e ) 
 + { 
 + FMLRelaunchLog . log ( Level . ERROR , e , " An error occurred extracting dependency " ) ; 
 + continue ; 
 + } 
 + result . put ( dep , target ) ; 
 + } 
 + return result ; 
 + } 
 + 
 private static Method ADDURL ; 
 
 private static void handleCascadingTweak ( File coreMod , JarFile jar , String cascadedTweaker , LaunchClassLoader classLoader , Integer sortingOrder )

NEAREST DIFF:
diff - - git a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 index 3ed09f9 . . 9ee3c58 100644 
 - - - a / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 + + + b / fml / common / cpw / mods / fml / relauncher / RelaunchLibraryManager . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . io . File ; 
 import java . io . FileInputStream ; 
 import java . io . FileNotFoundException ; 
 import java . io . FileOutputStream ; 
 + import java . io . FilenameFilter ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . math . BigInteger ; 
 @ @ - 20 , 7 + 21 , 11 @ @ import java . nio . channels . FileChannel . MapMode ; 
 import java . security . MessageDigest ; 
 import java . security . NoSuchAlgorithmException ; 
 import java . util . ArrayList ; 
 + import java . util . Arrays ; 
 import java . util . List ; 
 + import java . util . jar . Attributes ; 
 + import java . util . jar . JarEntry ; 
 + import java . util . jar . JarFile ; 
 import java . util . logging . Level ; 
 import java . util . logging . Logger ; 
 
 @ @ - 31 , 14 + 36 , 14 @ @ import cpw . mods . fml . common . discovery . ModCandidate ; 
 
 public class RelaunchLibraryManager 
 { 
 - private static String [ ] plugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 + private static String [ ] rootPlugins = { " cpw . mods . fml . relauncher . FMLCorePlugin " , " net . minecraftforge . classloading . FMLForgePlugin " } ; 
 private static final String HEXES = " 0123456789abcdef " ; 
 private static List < String > loadedLibraries = new ArrayList < String > ( ) ; 
 public static void handleLaunch ( File mcDir , RelaunchClassLoader actualClassLoader ) 
 { 
 List < IFMLLoadingPlugin > loadPlugins = new ArrayList < IFMLLoadingPlugin > ( ) ; 
 List < ILibrarySet > libraries = new ArrayList < ILibrarySet > ( ) ; 
 - for ( String s : plugins ) 
 + for ( String s : rootPlugins ) 
 { 
 try 
 { 
 @ @ - 60 , 6 + 65 , 9 @ @ public class RelaunchLibraryManager 
 throw new RuntimeException ( " A fatal error has occured - no valid fml load plugin was found - this is a completely corrupt FML installation . " ) ; 
 } 
 
 + / / Now that we have the root plugins loaded - lets see what else might be around 
 + discoverCoreMods ( mcDir , actualClassLoader , loadPlugins , libraries ) ; 
 + 
 List < Throwable > caughtErrors = new ArrayList < Throwable > ( ) ; 
 try 
 { 
 @ @ - 172 , 9 + 180 , 12 @ @ public class RelaunchLibraryManager 
 
 for ( IFMLLoadingPlugin plug : loadPlugins ) 
 { 
 - for ( String xformClass : plug . getASMTransformerClass ( ) ) 
 + if ( plug . getASMTransformerClass ( ) ! = null ) 
 { 
 - actualClassLoader . registerTransformer ( xformClass ) ; 
 + for ( String xformClass : plug . getASMTransformerClass ( ) ) 
 + { 
 + actualClassLoader . registerTransformer ( xformClass ) ; 
 + } 
 } 
 } 
 try 
 @ @ - 188 , 6 + 199 , 102 @ @ public class RelaunchLibraryManager 
 } 
 } 
 
 + private static void discoverCoreMods ( File mcDir , RelaunchClassLoader classLoader , List < IFMLLoadingPlugin > loadPlugins , List < ILibrarySet > libraries ) 
 + { 
 + File coreMods = setupCoreModDir ( mcDir ) ; 
 + FilenameFilter ff = new FilenameFilter ( ) 
 + { 
 + @ Override 
 + public boolean accept ( File dir , String name ) 
 + { 
 + return name . endsWith ( " . jar " ) ; 
 + } 
 + } ; 
 + File [ ] coreModList = coreMods . listFiles ( ff ) ; 
 + Arrays . sort ( coreModList ) ; 
 + 
 + for ( File coreMod : coreModList ) 
 + { 
 + FMLLog . fine ( " Found a candidate coremod % s " , coreMod . getName ( ) ) ; 
 + JarFile jar ; 
 + Attributes mfAttributes ; 
 + try 
 + { 
 + jar = new JarFile ( coreMod ) ; 
 + mfAttributes = jar . getManifest ( ) . getMainAttributes ( ) ; 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + FMLLog . log ( Level . SEVERE , ioe , " Unable to read the coremod jar file % s - ignoring " , coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + 
 + String fmlCorePlugin = mfAttributes . getValue ( " FMLCorePlugin " ) ; 
 + if ( fmlCorePlugin = = null ) 
 + { 
 + FMLLog . severe ( " The coremod % s does not contain a valid jar manifest - it will be ignored " , coreMod . getName ( ) ) ; 
 + continue ; 
 + } 
 + 
 + / / String className = fmlCorePlugin . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; 
 + / / JarEntry ent = jar . getJarEntry ( className ) ; 
 + / / if ( ent = = null ) 
 + / / { 
 + / / FMLLog . severe ( " The coremod % s specified % s as it ' s loading class but it does not include it - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + / / continue ; 
 + / / } 
 + / / try 
 + / / { 
 + / / Class < ? > coreModClass = Class . forName ( fmlCorePlugin , false , classLoader ) ; 
 + / / FMLLog . severe ( " The coremods % s specified a class % s that is already present in the classpath - it will be ignored " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + / / continue ; 
 + / / } 
 + / / catch ( ClassNotFoundException cnfe ) 
 + / / { 
 + / / / / didn ' t find it , good 
 + / / } 
 + try 
 + { 
 + classLoader . addURL ( coreMod . toURI ( ) . toURL ( ) ) ; 
 + } 
 + catch ( MalformedURLException e ) 
 + { 
 + FMLLog . log ( Level . SEVERE , e , " Unable to convert file into a URL . weird " ) ; 
 + continue ; 
 + } 
 + try 
 + { 
 + Class < ? > coreModClass = Class . forName ( fmlCorePlugin , true , classLoader ) ; 
 + IFMLLoadingPlugin plugin = ( IFMLLoadingPlugin ) coreModClass . newInstance ( ) ; 
 + loadPlugins . add ( plugin ) ; 
 + if ( plugin . getLibraryRequestClass ( ) ! = null ) 
 + { 
 + for ( String libName : plugin . getLibraryRequestClass ( ) ) 
 + { 
 + libraries . add ( ( ILibrarySet ) Class . forName ( libName , true , classLoader ) . newInstance ( ) ) ; 
 + } 
 + } 
 + FMLLog . fine ( " Loaded coremod % s " , coreMod . getName ( ) ) ; 
 + } 
 + catch ( ClassNotFoundException cnfe ) 
 + { 
 + FMLLog . log ( Level . SEVERE , cnfe , " Coremod % s : Unable to class load the plugin % s " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( ClassCastException cce ) 
 + { 
 + FMLLog . log ( Level . SEVERE , cce , " Coremod % s : The plugin % s is not an implementor of IFMLLoadingPlugin " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( InstantiationException ie ) 
 + { 
 + FMLLog . log ( Level . SEVERE , ie , " Coremod % s : The plugin class % s was not instantiable " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + catch ( IllegalAccessException iae ) 
 + { 
 + FMLLog . log ( Level . SEVERE , iae , " Coremod % s : The plugin class % s was not accessible " , coreMod . getName ( ) , fmlCorePlugin ) ; 
 + } 
 + } 
 + } 
 + 
 / * * 
 * @ param mcDir 
 * @ return 
 @ @ - 214 , 6 + 321 , 32 @ @ public class RelaunchLibraryManager 
 return libDir ; 
 } 
 
 + / * * 
 + * @ param mcDir 
 + * @ return 
 + * / 
 + private static File setupCoreModDir ( File mcDir ) 
 + { 
 + File coreModDir = new File ( mcDir , " coremods " ) ; 
 + try 
 + { 
 + coreModDir = coreModDir . getCanonicalFile ( ) ; 
 + } 
 + catch ( IOException e ) 
 + { 
 + throw new RuntimeException ( String . format ( " Unable to canonicalize the coremod dir at % s " , mcDir . getName ( ) ) , e ) ; 
 + } 
 + if ( ! coreModDir . exists ( ) ) 
 + { 
 + coreModDir . mkdir ( ) ; 
 + } 
 + else if ( coreModDir . exists ( ) & & ! coreModDir . isDirectory ( ) ) 
 + { 
 + throw new RuntimeException ( String . format ( " Found a coremod file in % s that ' s not a directory " , mcDir . getName ( ) ) ) ; 
 + } 
 + return coreModDir ; 
 + } 
 + 
 private static String generateChecksum ( File file ) 
 { 
 try 
 diff - - git a / fml / eclipse / coremodtest / . classpath b / fml / eclipse / coremodtest / . classpath 
 new file mode 100644 
 index 0000000 . . 294bff6 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . classpath 
 @ @ - 0 , 0 + 1 , 7 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < classpath > 
 + 	 < classpathentry kind = " src " path = " src " / > 
 + 	 < classpathentry kind = " con " path = " org . eclipse . jdt . launching . JRE _ CONTAINER / org . eclipse . jdt . internal . debug . ui . launcher . StandardVMType / JavaSE - 1 . 6 " / > 
 + 	 < classpathentry combineaccessrules = " false " kind = " src " path = " / FML - Client " / > 
 + 	 < classpathentry kind = " output " path = " bin " / > 
 + < / classpath > 
 diff - - git a / fml / eclipse / coremodtest / . project b / fml / eclipse / coremodtest / . project 
 new file mode 100644 
 index 0000000 . . bda0433 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . project 
 @ @ - 0 , 0 + 1 , 17 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " ? > 
 + < projectDescription > 
 + 	 < name > coremodtest < / name > 
 + 	 < comment > < / comment > 
 + 	 < projects > 
 + 	 < / projects > 
 + 	 < buildSpec > 
 + 	 	 < buildCommand > 
 + 	 	 	 < name > org . eclipse . jdt . core . javabuilder < / name > 
 + 	 	 	 < arguments > 
 + 	 	 	 < / arguments > 
 + 	 	 < / buildCommand > 
 + 	 < / buildSpec > 
 + 	 < natures > 
 + 	 	 < nature > org . eclipse . jdt . core . javanature < / nature > 
 + 	 < / natures > 
 + < / projectDescription > 
 diff - - git a / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs 
 new file mode 100644 
 index 0000000 . . 8000cd6 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / . settings / org . eclipse . jdt . core . prefs 
 @ @ - 0 , 0 + 1 , 11 @ @ 
 + eclipse . preferences . version = 1 
 + org . eclipse . jdt . core . compiler . codegen . inlineJsrBytecode = enabled 
 + org . eclipse . jdt . core . compiler . codegen . targetPlatform = 1 . 6 
 + org . eclipse . jdt . core . compiler . codegen . unusedLocal = preserve 
 + org . eclipse . jdt . core . compiler . compliance = 1 . 6 
 + org . eclipse . jdt . core . compiler . debug . lineNumber = generate 
 + org . eclipse . jdt . core . compiler . debug . localVariable = generate 
 + org . eclipse . jdt . core . compiler . debug . sourceFile = generate 
 + org . eclipse . jdt . core . compiler . problem . assertIdentifier = error 
 + org . eclipse . jdt . core . compiler . problem . enumIdentifier = error 
 + org . eclipse . jdt . core . compiler . source = 1 . 6 
 diff - - git a / fml / eclipse / coremodtest / manifest . mf b / fml / eclipse / coremodtest / manifest . mf 
 new file mode 100644 
 index 0000000 . . eda1ba3 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / manifest . mf 
 @ @ - 0 , 0 + 1 , 3 @ @ 
 + Manifest - Version : 1 . 0 
 + FMLCorePlugin : cpw . mods . testcoremod . FMLLoadPlugin 
 + 
 diff - - git a / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java 
 new file mode 100644 
 index 0000000 . . 44094f0 
 - - - / dev / null 
 + + + b / fml / eclipse / coremodtest / src / cpw / mods / testcoremod / FMLLoadPlugin . java 
 @ @ - 0 , 0 + 1 , 19 @ @ 
 + package cpw . mods . testcoremod ; 
 + 
 + import cpw . mods . fml . relauncher . IFMLLoadingPlugin ; 
 + 
 + public class FMLLoadPlugin implements IFMLLoadingPlugin 
 + { 
 + @ Override 
 + public String [ ] getLibraryRequestClass ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + public String [ ] getASMTransformerClass ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + }
