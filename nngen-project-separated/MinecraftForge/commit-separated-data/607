BLEU SCORE: 0.012079826799606154

TEST MSG: Expand getHarvestLevel to include player and blockstate
GENERATED MSG: Tidier implementation of previous commit . Should fix for subclasses of individual tools too

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> index a8abb75 . . 5496a45 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / Item . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / Item . java . patch <nl> @ @ - 522 , 17 + 522 , 28 @ @ <nl> + } <nl> + <nl> + / * * <nl> - + * Queries the harvest level of this item stack for the specifred tool class , <nl> + + * Deprecated , Use the position aware variant instead <nl> + + * / <nl> + + @ Deprecated <nl> + + public int getHarvestLevel ( ItemStack stack , String toolClass ) <nl> + + { <nl> + + Integer ret = toolClasses . get ( toolClass ) ; <nl> + + return ret = = null ? - 1 : ret ; <nl> + + } <nl> + + <nl> + + / * * <nl> + + * Queries the harvest level of this item stack for the specified tool class , <nl> + * Returns - 1 if this tool is not of the specified type <nl> + * <nl> + * @ param stack This item stack instance <nl> + * @ param toolClass Tool Class <nl> + + * @ param player The player trying to harvest the given blockstate <nl> + + * @ param blockState The block to harvest <nl> + * @ return Harvest level , or - 1 if not the specified tool type . <nl> + * / <nl> - + public int getHarvestLevel ( ItemStack stack , String toolClass ) <nl> + + public int getHarvestLevel ( ItemStack stack , String toolClass , @ Nullable EntityPlayer player , @ Nullable IBlockState blockState ) <nl> + { <nl> - + Integer ret = toolClasses . get ( toolClass ) ; <nl> - + return ret = = null ? - 1 : ret ; <nl> + + return getHarvestLevel ( stack , toolClass ) ; <nl> + } <nl> + <nl> + / * * <nl> @ @ - 622 , 7 + 633 , 7 @ @ <nl> public static void func _ 150900 _ l ( ) <nl> { <nl> func _ 179214 _ a ( Blocks . field _ 150348 _ b , ( new ItemMultiTexture ( Blocks . field _ 150348 _ b , Blocks . field _ 150348 _ b , new Function < ItemStack , String > ( ) <nl> - @ @ - 962 , 6 + 1526 , 10 @ @ <nl> + @ @ - 962 , 6 + 1537 , 10 @ @ <nl> private final float field _ 78011 _ i ; <nl> private final int field _ 78008 _ j ; <nl> <nl> @ @ - 633 , 7 + 644 , 7 @ @ <nl> private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) <nl> { <nl> this . field _ 78001 _ f = p _ i1874 _ 3 _ ; <nl> - @ @ - 996 , 9 + 1564 , 36 @ @ <nl> + @ @ - 996 , 9 + 1575 , 36 @ @ <nl> return this . field _ 78008 _ j ; <nl> } <nl> <nl> diff - - git a / patches / minecraft / net / minecraft / item / ItemTool . java . patch b / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> index efb12b0 . . 2c46440 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> @ @ - 50 , 9 + 50 , 9 @ @ <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + private String toolClass ; <nl> + @ Override <nl> - + public int getHarvestLevel ( ItemStack stack , String toolClass ) <nl> + + public int getHarvestLevel ( ItemStack stack , String toolClass , @ javax . annotation . Nullable net . minecraft . entity . player . EntityPlayer player , @ javax . annotation . Nullable IBlockState blockState ) <nl> + { <nl> - + int level = super . getHarvestLevel ( stack , toolClass ) ; <nl> + + int level = super . getHarvestLevel ( stack , toolClass , player , blockState ) ; <nl> + if ( level = = - 1 & & toolClass ! = null & & toolClass . equals ( this . toolClass ) ) <nl> + { <nl> + return this . field _ 77862 _ b . func _ 77996 _ d ( ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index 5dce692 . . fe1acd8 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 169 , 7 + 169 , 7 @ @ public class ForgeHooks <nl> return player . canHarvestBlock ( state ) ; <nl> } <nl> <nl> - int toolLevel = stack . getItem ( ) . getHarvestLevel ( stack , tool ) ; <nl> + int toolLevel = stack . getItem ( ) . getHarvestLevel ( stack , tool , player , state ) ; <nl> if ( toolLevel < 0 ) <nl> { <nl> return player . canHarvestBlock ( state ) ; <nl> @ @ - 184 , 7 + 184 , 7 @ @ public class ForgeHooks <nl> state = state . getBlock ( ) . getActualState ( state , world , pos ) ; <nl> String tool = state . getBlock ( ) . getHarvestTool ( state ) ; <nl> if ( stack = = null | | tool = = null ) return false ; <nl> - return stack . getItem ( ) . getHarvestLevel ( stack , tool ) > = state . getBlock ( ) . getHarvestLevel ( state ) ; <nl> + return stack . getItem ( ) . getHarvestLevel ( stack , tool , null , null ) > = state . getBlock ( ) . getHarvestLevel ( state ) ; <nl> } <nl> <nl> public static float blockStrength ( IBlockState state , EntityPlayer player , World world , BlockPos pos ) <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java <nl> index 904f559 . . f9af0d1 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java <nl> @ @ - 1 , 8 + 1 , 11 @ @ <nl> package net . minecraftforge . debug ; <nl> <nl> + import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> import net . minecraft . creativetab . CreativeTabs ; <nl> import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . inventory . EntityEquipmentSlot ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> @ @ - 17 , 6 + 20 , 8 @ @ import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> import java . util . Random ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> @ Mod ( modid = ItemLayerModelDebug . MODID , name = " ForgeDebugItemLayerModel " , version = ItemLayerModelDebug . VERSION ) <nl> public class ItemLayerModelDebug <nl> { <nl> @ @ - 86 , 5 + 91 , 19 @ @ public class ItemLayerModelDebug <nl> newStack . setTagCompound ( null ) ; <nl> return ! ItemStack . areItemStacksEqual ( oldStack , newStack ) ; <nl> } <nl> + <nl> + @ Override <nl> + public int getHarvestLevel ( ItemStack stack , String toolClass , @ Nullable EntityPlayer player , @ Nullable IBlockState blockState ) { <nl> + / / This tool is a super pickaxe if the player is wearing a helment <nl> + if ( " pickaxe " . equals ( toolClass ) & & player ! = null & & player . getItemStackFromSlot ( EntityEquipmentSlot . HEAD ) ! = null ) { <nl> + return 5 ; <nl> + } <nl> + return super . getHarvestLevel ( stack , toolClass , player , blockState ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public float getStrVsBlock ( ItemStack stack , IBlockState state ) { <nl> + return 10f ; <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / item / ItemTool . java . patch b / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> index 486b82f . . 1e17dfc 100644 <nl> - - - a / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> + + + b / patches / minecraft / net / minecraft / item / ItemTool . java . patch <nl> @ @ - 1 , 6 + 1 , 13 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / item / ItemTool . java <nl> + + + . . / src - work / minecraft / net / minecraft / item / ItemTool . java <nl> - @ @ - 10 , 6 + 10 , 7 @ @ <nl> + @ @ - 1 , 5 + 1 , 6 @ @ <nl> + package net . minecraft . item ; <nl> + <nl> + + import com . google . common . collect . ImmutableSet ; <nl> + import com . google . common . collect . Multimap ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> + import cpw . mods . fml . relauncher . SideOnly ; <nl> + @ @ - 10 , 6 + 11 , 7 @ @ <nl> import net . minecraft . entity . SharedMonsterAttributes ; <nl> import net . minecraft . entity . ai . attributes . AttributeModifier ; <nl> import net . minecraft . world . World ; <nl> @ @ - 8 , 32 + 15 , 53 @ @ <nl> <nl> public class ItemTool extends Item <nl> { <nl> - @ @ - 91 , 4 + 92 , 34 @ @ <nl> + @ @ - 30 , 6 + 32 , 18 @ @ <nl> + this . efficiencyOnProperMaterial = p _ i45333 _ 2 _ . getEfficiencyOnProperMaterial ( ) ; <nl> + this . damageVsEntity = p _ i45333 _ 1 _ + p _ i45333 _ 2 _ . getDamageVsEntity ( ) ; <nl> + this . setCreativeTab ( CreativeTabs . tabTools ) ; <nl> + + if ( this instanceof ItemPickaxe ) <nl> + + { <nl> + + toolClass = " pickaxe " ; <nl> + + } <nl> + + else if ( this instanceof ItemAxe ) <nl> + + { <nl> + + toolClass = " axe " ; <nl> + + } <nl> + + else if ( this instanceof ItemSpade ) <nl> + + { <nl> + + toolClass = " shovel " ; <nl> + + } <nl> + } <nl> + <nl> + public float func _ 150893 _ a ( ItemStack p _ 150893 _ 1 _ , Block p _ 150893 _ 2 _ ) <nl> + @ @ - 91 , 4 + 105 , 36 @ @ <nl> multimap . put ( SharedMonsterAttributes . attackDamage . getAttributeUnlocalizedName ( ) , new AttributeModifier ( field _ 111210 _ e , " Tool modifier " , ( double ) this . damageVsEntity , 0 ) ) ; <nl> return multimap ; <nl> } <nl> + <nl> + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / <nl> + + private String toolClass ; <nl> + @ Override <nl> + public int getHarvestLevel ( ItemStack stack , String toolClass ) <nl> + { <nl> - + if ( " pickaxe " . equals ( toolClass ) & & this instanceof ItemPickaxe ) <nl> + + if ( toolClass ! = null & & toolClass . equals ( this . toolClass ) ) <nl> + { <nl> + return this . toolMaterial . getHarvestLevel ( ) ; <nl> + } <nl> - + else if ( " axe " . equals ( toolClass ) & & this instanceof ItemAxe ) <nl> + + else <nl> + { <nl> - + return this . toolMaterial . getHarvestLevel ( ) ; <nl> - + } <nl> - + else if ( " shovel " . equals ( toolClass ) & & this instanceof ItemSpade ) <nl> - + { <nl> - + return this . toolMaterial . getHarvestLevel ( ) ; <nl> + + return super . getHarvestLevel ( stack , toolClass ) ; <nl> + } <nl> - + return super . getHarvestLevel ( stack , toolClass ) ; <nl> + } <nl> + <nl> + @ Override <nl> - + public float getDigSpeed ( ItemStack stack , Block block , int meta ) <nl> + + public Set < String > getToolClasses ( ItemStack stack ) <nl> + + { <nl> + + return toolClass ! = null ? ImmutableSet . of ( toolClass ) : super . getToolClasses ( stack ) ; <nl> + + } <nl> + + <nl> + + @ Override <nl> + + public float getDigSpeed ( ItemStack stack , Block block , int meta ) <nl> + { <nl> + if ( ForgeHooks . isToolEffective ( stack , block , meta ) ) <nl> + { <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> index e675847 . . 50862be 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java <nl> @ @ - 152 , 20 + 152 , 17 @ @ public class ForgeHooks <nl> toolInit = true ; <nl> <nl> Set < Block > blocks = ReflectionHelper . getPrivateValue ( ItemPickaxe . class , null , 0 ) ; <nl> - setHarvestForItem ( Arrays . asList ( Items . wooden _ pickaxe , Items . stone _ pickaxe , Items . iron _ pickaxe , Items . diamond _ pickaxe ) , " pickaxe " ) ; <nl> for ( Block block : blocks ) <nl> { <nl> block . setHarvestLevel ( " pickaxe " , 0 ) ; <nl> } <nl> <nl> - setHarvestForItem ( Arrays . asList ( Items . wooden _ shovel , Items . stone _ shovel , Items . iron _ shovel , Items . diamond _ shovel ) , " shovel " ) ; <nl> blocks = ReflectionHelper . getPrivateValue ( ItemSpade . class , null , 0 ) ; <nl> for ( Block block : blocks ) <nl> { <nl> block . setHarvestLevel ( " shovel " , 0 ) ; <nl> } <nl> <nl> - setHarvestForItem ( Arrays . asList ( Items . wooden _ axe , Items . stone _ axe , Items . iron _ axe , Items . diamond _ axe ) , " axe " ) ; <nl> blocks = ReflectionHelper . getPrivateValue ( ItemAxe . class , null , 0 ) ; <nl> for ( Block block : blocks ) <nl> { <nl> @ @ - 183 , 15 + 180 , 6 @ @ public class ForgeHooks <nl> Blocks . lapis _ block . setHarvestLevel ( " pickaxe " , 1 ) ; <nl> } <nl> <nl> - private static void setHarvestForItem ( List < Item > itemList , String toolClass ) <nl> - { <nl> - for ( int i = 0 ; i < itemList . size ( ) ; i + + ) <nl> - { <nl> - Item item = itemList . get ( i ) ; <nl> - item . setHarvestLevel ( " pickaxe " , i ) ; <nl> - } <nl> - } <nl> - <nl> public static int getTotalArmorValue ( EntityPlayer player ) <nl> { <nl> int ret = 0 ;

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / Item . java . patch b / patches / minecraft / net / minecraft / item / Item . java . patch 
 index a8abb75 . . 5496a45 100644 
 - - - a / patches / minecraft / net / minecraft / item / Item . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / Item . java . patch 
 @ @ - 522 , 17 + 522 , 28 @ @ 
 + } 
 + 
 + / * * 
 - + * Queries the harvest level of this item stack for the specifred tool class , 
 + + * Deprecated , Use the position aware variant instead 
 + + * / 
 + + @ Deprecated 
 + + public int getHarvestLevel ( ItemStack stack , String toolClass ) 
 + + { 
 + + Integer ret = toolClasses . get ( toolClass ) ; 
 + + return ret = = null ? - 1 : ret ; 
 + + } 
 + + 
 + + / * * 
 + + * Queries the harvest level of this item stack for the specified tool class , 
 + * Returns - 1 if this tool is not of the specified type 
 + * 
 + * @ param stack This item stack instance 
 + * @ param toolClass Tool Class 
 + + * @ param player The player trying to harvest the given blockstate 
 + + * @ param blockState The block to harvest 
 + * @ return Harvest level , or - 1 if not the specified tool type . 
 + * / 
 - + public int getHarvestLevel ( ItemStack stack , String toolClass ) 
 + + public int getHarvestLevel ( ItemStack stack , String toolClass , @ Nullable EntityPlayer player , @ Nullable IBlockState blockState ) 
 + { 
 - + Integer ret = toolClasses . get ( toolClass ) ; 
 - + return ret = = null ? - 1 : ret ; 
 + + return getHarvestLevel ( stack , toolClass ) ; 
 + } 
 + 
 + / * * 
 @ @ - 622 , 7 + 633 , 7 @ @ 
 public static void func _ 150900 _ l ( ) 
 { 
 func _ 179214 _ a ( Blocks . field _ 150348 _ b , ( new ItemMultiTexture ( Blocks . field _ 150348 _ b , Blocks . field _ 150348 _ b , new Function < ItemStack , String > ( ) 
 - @ @ - 962 , 6 + 1526 , 10 @ @ 
 + @ @ - 962 , 6 + 1537 , 10 @ @ 
 private final float field _ 78011 _ i ; 
 private final int field _ 78008 _ j ; 
 
 @ @ - 633 , 7 + 644 , 7 @ @ 
 private ToolMaterial ( int p _ i1874 _ 3 _ , int p _ i1874 _ 4 _ , float p _ i1874 _ 5 _ , float p _ i1874 _ 6 _ , int p _ i1874 _ 7 _ ) 
 { 
 this . field _ 78001 _ f = p _ i1874 _ 3 _ ; 
 - @ @ - 996 , 9 + 1564 , 36 @ @ 
 + @ @ - 996 , 9 + 1575 , 36 @ @ 
 return this . field _ 78008 _ j ; 
 } 
 
 diff - - git a / patches / minecraft / net / minecraft / item / ItemTool . java . patch b / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 index efb12b0 . . 2c46440 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 @ @ - 50 , 9 + 50 , 9 @ @ 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + private String toolClass ; 
 + @ Override 
 - + public int getHarvestLevel ( ItemStack stack , String toolClass ) 
 + + public int getHarvestLevel ( ItemStack stack , String toolClass , @ javax . annotation . Nullable net . minecraft . entity . player . EntityPlayer player , @ javax . annotation . Nullable IBlockState blockState ) 
 + { 
 - + int level = super . getHarvestLevel ( stack , toolClass ) ; 
 + + int level = super . getHarvestLevel ( stack , toolClass , player , blockState ) ; 
 + if ( level = = - 1 & & toolClass ! = null & & toolClass . equals ( this . toolClass ) ) 
 + { 
 + return this . field _ 77862 _ b . func _ 77996 _ d ( ) ; 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index 5dce692 . . fe1acd8 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 169 , 7 + 169 , 7 @ @ public class ForgeHooks 
 return player . canHarvestBlock ( state ) ; 
 } 
 
 - int toolLevel = stack . getItem ( ) . getHarvestLevel ( stack , tool ) ; 
 + int toolLevel = stack . getItem ( ) . getHarvestLevel ( stack , tool , player , state ) ; 
 if ( toolLevel < 0 ) 
 { 
 return player . canHarvestBlock ( state ) ; 
 @ @ - 184 , 7 + 184 , 7 @ @ public class ForgeHooks 
 state = state . getBlock ( ) . getActualState ( state , world , pos ) ; 
 String tool = state . getBlock ( ) . getHarvestTool ( state ) ; 
 if ( stack = = null | | tool = = null ) return false ; 
 - return stack . getItem ( ) . getHarvestLevel ( stack , tool ) > = state . getBlock ( ) . getHarvestLevel ( state ) ; 
 + return stack . getItem ( ) . getHarvestLevel ( stack , tool , null , null ) > = state . getBlock ( ) . getHarvestLevel ( state ) ; 
 } 
 
 public static float blockStrength ( IBlockState state , EntityPlayer player , World world , BlockPos pos ) 
 diff - - git a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java 
 index 904f559 . . f9af0d1 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ItemLayerModelDebug . java 
 @ @ - 1 , 8 + 1 , 11 @ @ 
 package net . minecraftforge . debug ; 
 
 + import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 import net . minecraft . creativetab . CreativeTabs ; 
 import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . inventory . EntityEquipmentSlot ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 @ @ - 17 , 6 + 20 , 8 @ @ import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 import java . util . Random ; 
 
 + import javax . annotation . Nullable ; 
 + 
 @ Mod ( modid = ItemLayerModelDebug . MODID , name = " ForgeDebugItemLayerModel " , version = ItemLayerModelDebug . VERSION ) 
 public class ItemLayerModelDebug 
 { 
 @ @ - 86 , 5 + 91 , 19 @ @ public class ItemLayerModelDebug 
 newStack . setTagCompound ( null ) ; 
 return ! ItemStack . areItemStacksEqual ( oldStack , newStack ) ; 
 } 
 + 
 + @ Override 
 + public int getHarvestLevel ( ItemStack stack , String toolClass , @ Nullable EntityPlayer player , @ Nullable IBlockState blockState ) { 
 + / / This tool is a super pickaxe if the player is wearing a helment 
 + if ( " pickaxe " . equals ( toolClass ) & & player ! = null & & player . getItemStackFromSlot ( EntityEquipmentSlot . HEAD ) ! = null ) { 
 + return 5 ; 
 + } 
 + return super . getHarvestLevel ( stack , toolClass , player , blockState ) ; 
 + } 
 + 
 + @ Override 
 + public float getStrVsBlock ( ItemStack stack , IBlockState state ) { 
 + return 10f ; 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / item / ItemTool . java . patch b / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 index 486b82f . . 1e17dfc 100644 
 - - - a / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 + + + b / patches / minecraft / net / minecraft / item / ItemTool . java . patch 
 @ @ - 1 , 6 + 1 , 13 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / item / ItemTool . java 
 + + + . . / src - work / minecraft / net / minecraft / item / ItemTool . java 
 - @ @ - 10 , 6 + 10 , 7 @ @ 
 + @ @ - 1 , 5 + 1 , 6 @ @ 
 + package net . minecraft . item ; 
 + 
 + + import com . google . common . collect . ImmutableSet ; 
 + import com . google . common . collect . Multimap ; 
 + import cpw . mods . fml . relauncher . Side ; 
 + import cpw . mods . fml . relauncher . SideOnly ; 
 + @ @ - 10 , 6 + 11 , 7 @ @ 
 import net . minecraft . entity . SharedMonsterAttributes ; 
 import net . minecraft . entity . ai . attributes . AttributeModifier ; 
 import net . minecraft . world . World ; 
 @ @ - 8 , 32 + 15 , 53 @ @ 
 
 public class ItemTool extends Item 
 { 
 - @ @ - 91 , 4 + 92 , 34 @ @ 
 + @ @ - 30 , 6 + 32 , 18 @ @ 
 + this . efficiencyOnProperMaterial = p _ i45333 _ 2 _ . getEfficiencyOnProperMaterial ( ) ; 
 + this . damageVsEntity = p _ i45333 _ 1 _ + p _ i45333 _ 2 _ . getDamageVsEntity ( ) ; 
 + this . setCreativeTab ( CreativeTabs . tabTools ) ; 
 + + if ( this instanceof ItemPickaxe ) 
 + + { 
 + + toolClass = " pickaxe " ; 
 + + } 
 + + else if ( this instanceof ItemAxe ) 
 + + { 
 + + toolClass = " axe " ; 
 + + } 
 + + else if ( this instanceof ItemSpade ) 
 + + { 
 + + toolClass = " shovel " ; 
 + + } 
 + } 
 + 
 + public float func _ 150893 _ a ( ItemStack p _ 150893 _ 1 _ , Block p _ 150893 _ 2 _ ) 
 + @ @ - 91 , 4 + 105 , 36 @ @ 
 multimap . put ( SharedMonsterAttributes . attackDamage . getAttributeUnlocalizedName ( ) , new AttributeModifier ( field _ 111210 _ e , " Tool modifier " , ( double ) this . damageVsEntity , 0 ) ) ; 
 return multimap ; 
 } 
 + 
 + / * = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = FORGE START = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = * / 
 + + private String toolClass ; 
 + @ Override 
 + public int getHarvestLevel ( ItemStack stack , String toolClass ) 
 + { 
 - + if ( " pickaxe " . equals ( toolClass ) & & this instanceof ItemPickaxe ) 
 + + if ( toolClass ! = null & & toolClass . equals ( this . toolClass ) ) 
 + { 
 + return this . toolMaterial . getHarvestLevel ( ) ; 
 + } 
 - + else if ( " axe " . equals ( toolClass ) & & this instanceof ItemAxe ) 
 + + else 
 + { 
 - + return this . toolMaterial . getHarvestLevel ( ) ; 
 - + } 
 - + else if ( " shovel " . equals ( toolClass ) & & this instanceof ItemSpade ) 
 - + { 
 - + return this . toolMaterial . getHarvestLevel ( ) ; 
 + + return super . getHarvestLevel ( stack , toolClass ) ; 
 + } 
 - + return super . getHarvestLevel ( stack , toolClass ) ; 
 + } 
 + 
 + @ Override 
 - + public float getDigSpeed ( ItemStack stack , Block block , int meta ) 
 + + public Set < String > getToolClasses ( ItemStack stack ) 
 + + { 
 + + return toolClass ! = null ? ImmutableSet . of ( toolClass ) : super . getToolClasses ( stack ) ; 
 + + } 
 + + 
 + + @ Override 
 + + public float getDigSpeed ( ItemStack stack , Block block , int meta ) 
 + { 
 + if ( ForgeHooks . isToolEffective ( stack , block , meta ) ) 
 + { 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeHooks . java b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 index e675847 . . 50862be 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeHooks . java 
 @ @ - 152 , 20 + 152 , 17 @ @ public class ForgeHooks 
 toolInit = true ; 
 
 Set < Block > blocks = ReflectionHelper . getPrivateValue ( ItemPickaxe . class , null , 0 ) ; 
 - setHarvestForItem ( Arrays . asList ( Items . wooden _ pickaxe , Items . stone _ pickaxe , Items . iron _ pickaxe , Items . diamond _ pickaxe ) , " pickaxe " ) ; 
 for ( Block block : blocks ) 
 { 
 block . setHarvestLevel ( " pickaxe " , 0 ) ; 
 } 
 
 - setHarvestForItem ( Arrays . asList ( Items . wooden _ shovel , Items . stone _ shovel , Items . iron _ shovel , Items . diamond _ shovel ) , " shovel " ) ; 
 blocks = ReflectionHelper . getPrivateValue ( ItemSpade . class , null , 0 ) ; 
 for ( Block block : blocks ) 
 { 
 block . setHarvestLevel ( " shovel " , 0 ) ; 
 } 
 
 - setHarvestForItem ( Arrays . asList ( Items . wooden _ axe , Items . stone _ axe , Items . iron _ axe , Items . diamond _ axe ) , " axe " ) ; 
 blocks = ReflectionHelper . getPrivateValue ( ItemAxe . class , null , 0 ) ; 
 for ( Block block : blocks ) 
 { 
 @ @ - 183 , 15 + 180 , 6 @ @ public class ForgeHooks 
 Blocks . lapis _ block . setHarvestLevel ( " pickaxe " , 1 ) ; 
 } 
 
 - private static void setHarvestForItem ( List < Item > itemList , String toolClass ) 
 - { 
 - for ( int i = 0 ; i < itemList . size ( ) ; i + + ) 
 - { 
 - Item item = itemList . get ( i ) ; 
 - item . setHarvestLevel ( " pickaxe " , i ) ; 
 - } 
 - } 
 - 
 public static int getTotalArmorValue ( EntityPlayer player ) 
 { 
 int ret = 0 ;
