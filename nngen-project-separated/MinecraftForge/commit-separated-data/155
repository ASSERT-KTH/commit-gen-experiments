BLEU SCORE: 0.01222796968620182

TEST MSG: Fix classloading issues in userdev ( and possibly also for things like tests within forgedev )
GENERATED MSG: Some tweaks to get the launcher working .

TEST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index fd685e1 . . 7098dc4 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 460 , 6 + 460 , 7 @ @ project ( ' : forge ' ) { <nl> def libs = [ : ] <nl> def json = [ <nl> _ comment _ : launcherJson . comment , <nl> + spec : 0 , <nl> profile : project . name , <nl> version : launcherJson . id , <nl> json : ' / version . json ' , <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java b / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java <nl> index 2eedaa8 . . 62400ff 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java <nl> @ @ - 33 , 7 + 33 , 6 @ @ import static net . minecraftforge . fml . Logging . LOADING ; <nl> <nl> public class ModLoadingClassLoader extends SecureClassLoader <nl> { <nl> - <nl> private static final Logger LOGGER = LogManager . getLogger ( ) ; <nl> <nl> static { <nl> @ @ - 51 , 6 + 50 , 18 @ @ public class ModLoadingClassLoader extends SecureClassLoader <nl> } <nl> <nl> @ Override <nl> + protected Class < ? > loadClass ( String name , boolean resolve ) throws ClassNotFoundException <nl> + { <nl> + final String className = name . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; <nl> + final Path classResource = FMLLoader . getLoadingModList ( ) . findResource ( className ) ; <nl> + if ( classResource ! = null ) <nl> + { <nl> + return findClass ( name ) ; <nl> + } <nl> + return super . loadClass ( name , resolve ) ; <nl> + } <nl> + <nl> + @ Override <nl> protected Class < ? > findClass ( String name ) throws ClassNotFoundException <nl> { <nl> LOGGER . debug ( LOADING , " Loading class { } " , name ) ; <nl> @ @ - 65 , 7 + 76 , 7 @ @ public class ModLoadingClassLoader extends SecureClassLoader <nl> { <nl> throw new ClassNotFoundException ( " Failed to load class file " + classResource + " for " + className , e ) ; <nl> } <nl> - } else { <nl> + } else if ( getParent ( ) ! = null ) { <nl> getParent ( ) . loadClass ( name ) ; <nl> } <nl> throw new ClassNotFoundException ( " Failed to find class file " + className ) ; <nl> diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> index 7f16338 . . 755199c 100644 <nl> - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package net . minecraftforge . userdev ; <nl> <nl> import com . google . common . collect . Sets ; <nl> + import com . google . common . collect . Streams ; <nl> import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModFile ; <nl> import org . apache . logging . log4j . LogManager ; <nl> @ @ - 27 , 10 + 28 , 16 @ @ import org . apache . logging . log4j . Logger ; <nl> <nl> import java . io . File ; <nl> import java . io . IOException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> import java . net . URL ; <nl> - import java . nio . file . Files ; <nl> - import java . nio . file . Path ; <nl> + import java . nio . channels . SeekableByteChannel ; <nl> + import java . nio . file . * ; <nl> + import java . nio . file . attribute . BasicFileAttributes ; <nl> + import java . nio . file . attribute . FileAttribute ; <nl> + import java . nio . file . attribute . FileAttributeView ; <nl> + import java . nio . file . attribute . UserPrincipalLookupService ; <nl> + import java . nio . file . spi . FileSystemProvider ; <nl> import java . util . * ; <nl> import java . util . function . Consumer ; <nl> import java . util . jar . Manifest ; <nl> @ @ - 88 , 7 + 95 , 16 @ @ public class ClasspathLocator implements IModLocator <nl> if ( path . length < 1 ) { <nl> throw new IllegalArgumentException ( " Missing path " ) ; <nl> } <nl> - return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; <nl> + <nl> + Path filePath = modFile . getFilePath ( ) ; <nl> + Path classesRoot = getClassesPath ( filePath ) ; <nl> + String [ ] tail = Arrays . copyOfRange ( path , 1 , path . length ) ; <nl> + Path classPath = classesRoot . resolve ( classesRoot . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; <nl> + if ( Files . exists ( classPath ) ) <nl> + { <nl> + return classPath ; <nl> + } <nl> + return filePath . resolve ( filePath . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 96 , 29 + 112 , 34 @ @ public class ClasspathLocator implements IModLocator <nl> LOGGER . debug ( SCAN , " Scanning classpath " ) ; <nl> <nl> Path filePath = modFile . getFilePath ( ) ; <nl> + Path scanPath = getClassesPath ( filePath ) ; <nl> + <nl> + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> + files . forEach ( pathConsumer ) ; <nl> + } catch ( IOException e ) { <nl> + e . printStackTrace ( ) ; <nl> + } <nl> + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; <nl> + } <nl> <nl> - Path scanPath = filePath ; <nl> + private Path getClassesPath ( Path filePath ) <nl> + { <nl> + Path classesPath = filePath ; <nl> <nl> / / Hack 1 : When running from within intellij , we get <nl> / / " out / production / resources " + " out / production / classes " <nl> if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) <nl> { <nl> - scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; <nl> + classesPath = filePath . getParent ( ) . resolve ( " classes " ) ; <nl> } <nl> / / Hack 2 : When running from gradle , we get <nl> / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " <nl> else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) <nl> { <nl> / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . <nl> - scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> - } <nl> - <nl> - try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { <nl> - files . forEach ( pathConsumer ) ; <nl> - } catch ( IOException e ) { <nl> - e . printStackTrace ( ) ; <nl> + classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; <nl> } <nl> - LOGGER . debug ( SCAN , " Classpath scan complete " ) ; <nl> + return classesPath ; <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / build . gradle b / build . gradle <nl> index e5fbd8c . . cacd8c9 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype <nl> + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype <nl> api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> api ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> api ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { <nl> api ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> + / * <nl> configurations { <nl> ecj <nl> } <nl> @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { <nl> dependencies { <nl> ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' <nl> } <nl> + * / <nl> <nl> / * Forge compiles , no longer need eclipse compiler <nl> compileJava { <nl> @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { <nl> <nl> include ' net / minecraftforge / ' <nl> exclude ' net / minecraftforge / server / terminalconsole / ' <nl> + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build <nl> exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' <nl> exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> index 0167b79 . . 458d4ab 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import javax . annotation . Nonnull ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> index 72827d3 . . b24858d 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java <nl> @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; <nl> import net . minecraftforge . fml . language . IModInfo ; <nl> import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; <nl> <nl> + import java . io . IOException ; <nl> + import java . net . URI ; <nl> import java . net . URISyntaxException ; <nl> + import java . nio . file . FileSystems ; <nl> import java . nio . file . Paths ; <nl> import java . util . Arrays ; <nl> + import java . util . HashMap ; <nl> import java . util . List ; <nl> + import java . util . Objects ; <nl> <nl> public class DefaultModInfos <nl> { <nl> @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos <nl> FileConfig forgemod ; <nl> try <nl> { <nl> - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; <nl> + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; <nl> + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { <nl> + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? <nl> + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; <nl> + } <nl> + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; <nl> forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; <nl> minecraftmod . load ( ) ; <nl> forgemod . load ( ) ; <nl> } <nl> - catch ( URISyntaxException | NullPointerException e ) <nl> + catch ( IOException | URISyntaxException | NullPointerException e ) <nl> { <nl> throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> index 6b029cc . . 503a0d0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java <nl> @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; <nl> import cpw . mods . modlauncher . api . ITransformingClassLoader ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> <nl> + import java . net . URISyntaxException ; <nl> import java . nio . file . Path ; <nl> + import java . nio . file . Paths ; <nl> + import java . util . Arrays ; <nl> + import java . util . List ; <nl> import java . util . concurrent . Callable ; <nl> <nl> public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService <nl> { <nl> + private static final Path forgePath ; <nl> + private static final Path mcPath ; <nl> + private static final List < String > SKIPPACKAGES = Arrays . asList ( <nl> + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , <nl> + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , <nl> + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , <nl> + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , <nl> + " net . minecraftforge . fml . common . versioning . " <nl> + ) ; <nl> + static { <nl> + try { <nl> + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; <nl> + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; <nl> + } catch ( URISyntaxException e ) { <nl> + throw new RuntimeException ( " Unable to locate myself ! " ) ; <nl> + } <nl> + } <nl> @ Override <nl> public String name ( ) <nl> { <nl> @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I <nl> @ Override <nl> public Path [ ] identifyTransformationTargets ( ) <nl> { <nl> - return new Path [ 0 ] ; <nl> + return new Path [ ] { mcPath , forgePath } ; <nl> } <nl> <nl> @ Override <nl> public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) <nl> { <nl> return ( ) - > { <nl> + super . beforeStart ( launchClassLoader , forgePath ) ; <nl> + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; <nl> + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; <nl> return null ; <nl> } ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> index 5ad1927 . . 2a337bc 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java <nl> @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; <nl> import org . apache . logging . log4j . Logger ; <nl> <nl> import java . util . Collection ; <nl> + import java . util . Collections ; <nl> import java . util . Iterator ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { <nl> <nl> FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; <nl> BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; <nl> - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; <nl> + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; <nl> for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) <nl> { <nl> ModFile mod = iterator . next ( ) ;

TEST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index fd685e1 . . 7098dc4 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 460 , 6 + 460 , 7 @ @ project ( ' : forge ' ) { 
 def libs = [ : ] 
 def json = [ 
 _ comment _ : launcherJson . comment , 
 + spec : 0 , 
 profile : project . name , 
 version : launcherJson . id , 
 json : ' / version . json ' , 
 diff - - git a / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java b / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java 
 index 2eedaa8 . . 62400ff 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java 
 + + + b / src / main / java / net / minecraftforge / fml / ModLoadingClassLoader . java 
 @ @ - 33 , 7 + 33 , 6 @ @ import static net . minecraftforge . fml . Logging . LOADING ; 
 
 public class ModLoadingClassLoader extends SecureClassLoader 
 { 
 - 
 private static final Logger LOGGER = LogManager . getLogger ( ) ; 
 
 static { 
 @ @ - 51 , 6 + 50 , 18 @ @ public class ModLoadingClassLoader extends SecureClassLoader 
 } 
 
 @ Override 
 + protected Class < ? > loadClass ( String name , boolean resolve ) throws ClassNotFoundException 
 + { 
 + final String className = name . replace ( ' . ' , ' / ' ) . concat ( " . class " ) ; 
 + final Path classResource = FMLLoader . getLoadingModList ( ) . findResource ( className ) ; 
 + if ( classResource ! = null ) 
 + { 
 + return findClass ( name ) ; 
 + } 
 + return super . loadClass ( name , resolve ) ; 
 + } 
 + 
 + @ Override 
 protected Class < ? > findClass ( String name ) throws ClassNotFoundException 
 { 
 LOGGER . debug ( LOADING , " Loading class { } " , name ) ; 
 @ @ - 65 , 7 + 76 , 7 @ @ public class ModLoadingClassLoader extends SecureClassLoader 
 { 
 throw new ClassNotFoundException ( " Failed to load class file " + classResource + " for " + className , e ) ; 
 } 
 - } else { 
 + } else if ( getParent ( ) ! = null ) { 
 getParent ( ) . loadClass ( name ) ; 
 } 
 throw new ClassNotFoundException ( " Failed to find class file " + className ) ; 
 diff - - git a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 index 7f16338 . . 755199c 100644 
 - - - a / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 + + + b / src / userdev / java / net / minecraftforge / userdev / ClasspathLocator . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package net . minecraftforge . userdev ; 
 
 import com . google . common . collect . Sets ; 
 + import com . google . common . collect . Streams ; 
 import net . minecraftforge . fml . loading . moddiscovery . IModLocator ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModFile ; 
 import org . apache . logging . log4j . LogManager ; 
 @ @ - 27 , 10 + 28 , 16 @ @ import org . apache . logging . log4j . Logger ; 
 
 import java . io . File ; 
 import java . io . IOException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 import java . net . URL ; 
 - import java . nio . file . Files ; 
 - import java . nio . file . Path ; 
 + import java . nio . channels . SeekableByteChannel ; 
 + import java . nio . file . * ; 
 + import java . nio . file . attribute . BasicFileAttributes ; 
 + import java . nio . file . attribute . FileAttribute ; 
 + import java . nio . file . attribute . FileAttributeView ; 
 + import java . nio . file . attribute . UserPrincipalLookupService ; 
 + import java . nio . file . spi . FileSystemProvider ; 
 import java . util . * ; 
 import java . util . function . Consumer ; 
 import java . util . jar . Manifest ; 
 @ @ - 88 , 7 + 95 , 16 @ @ public class ClasspathLocator implements IModLocator 
 if ( path . length < 1 ) { 
 throw new IllegalArgumentException ( " Missing path " ) ; 
 } 
 - return modFile . getFilePath ( ) . resolve ( modFile . getFilePath ( ) . getFileSystem ( ) . getPath ( path [ 0 ] , Arrays . copyOfRange ( path , 1 , path . length ) ) ) ; 
 + 
 + Path filePath = modFile . getFilePath ( ) ; 
 + Path classesRoot = getClassesPath ( filePath ) ; 
 + String [ ] tail = Arrays . copyOfRange ( path , 1 , path . length ) ; 
 + Path classPath = classesRoot . resolve ( classesRoot . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; 
 + if ( Files . exists ( classPath ) ) 
 + { 
 + return classPath ; 
 + } 
 + return filePath . resolve ( filePath . getFileSystem ( ) . getPath ( path [ 0 ] , tail ) ) ; 
 } 
 
 @ Override 
 @ @ - 96 , 29 + 112 , 34 @ @ public class ClasspathLocator implements IModLocator 
 LOGGER . debug ( SCAN , " Scanning classpath " ) ; 
 
 Path filePath = modFile . getFilePath ( ) ; 
 + Path scanPath = getClassesPath ( filePath ) ; 
 + 
 + try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 + files . forEach ( pathConsumer ) ; 
 + } catch ( IOException e ) { 
 + e . printStackTrace ( ) ; 
 + } 
 + LOGGER . debug ( SCAN , " Classpath scan complete " ) ; 
 + } 
 
 - Path scanPath = filePath ; 
 + private Path getClassesPath ( Path filePath ) 
 + { 
 + Path classesPath = filePath ; 
 
 / / Hack 1 : When running from within intellij , we get 
 / / " out / production / resources " + " out / production / classes " 
 if ( filePath . getNameCount ( ) > = 1 & & filePath . getName ( filePath . getNameCount ( ) - 1 ) . toString ( ) . equals ( " resources " ) ) 
 { 
 - scanPath = filePath . getParent ( ) . resolve ( " classes " ) ; 
 + classesPath = filePath . getParent ( ) . resolve ( " classes " ) ; 
 } 
 / / Hack 2 : When running from gradle , we get 
 / / " build / resources / < sourceset > " + " build / classes / < language > / < sourceset > " 
 else if ( filePath . getNameCount ( ) > = 2 & & filePath . getName ( filePath . getNameCount ( ) - 2 ) . toString ( ) . equals ( " resources " ) ) 
 { 
 / / We ' ll scan all the subdirectories for languages and sourcesets , hopefully that works . . . 
 - scanPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 - } 
 - 
 - try ( Stream < Path > files = Files . find ( scanPath , Integer . MAX _ VALUE , ( p , a ) - > p . getNameCount ( ) > 0 & & p . getFileName ( ) . toString ( ) . endsWith ( " . class " ) ) ) { 
 - files . forEach ( pathConsumer ) ; 
 - } catch ( IOException e ) { 
 - e . printStackTrace ( ) ; 
 + classesPath = filePath . getParent ( ) . getParent ( ) . resolve ( " classes " ) ; 
 } 
 - LOGGER . debug ( SCAN , " Classpath scan complete " ) ; 
 + return classesPath ; 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / build . gradle b / build . gradle 
 index e5fbd8c . . cacd8c9 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 105 , 7 + 105 , 7 @ @ project ( ' : forge ' ) { 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 3 ' / / Pinned until cpw fixes getCommonSupertype 
 + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype 
 api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 api ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 api ' net . minecraftforge : forgespi : 0 . 1 + ' 
 @ @ - 117 , 6 + 117 , 7 @ @ project ( ' : forge ' ) { 
 api ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 + / * 
 configurations { 
 ecj 
 } 
 @ @ - 124 , 6 + 125 , 7 @ @ project ( ' : forge ' ) { 
 dependencies { 
 ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' 
 } 
 + * / 
 
 / * Forge compiles , no longer need eclipse compiler 
 compileJava { 
 @ @ - 177 , 6 + 179 , 7 @ @ project ( ' : forge ' ) { 
 
 include ' net / minecraftforge / ' 
 exclude ' net / minecraftforge / server / terminalconsole / ' 
 + exclude ' net / minecraftforge / api / ' / / exclude API here because it ' s validated in the SPI build 
 exclude ' net / minecraftforge / fml / common / versioning / ComparableVersion . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / InvalidVersionSpecificationException . java ' 
 exclude ' net / minecraftforge / fml / common / versioning / Restriction . java ' 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 index 0167b79 . . 458d4ab 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeKeybinding . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import javax . annotation . Nonnull ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 index 72827d3 . . b24858d 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / DefaultModInfos . java 
 @ @ - 23 , 10 + 23 , 15 @ @ import com . electronwill . nightconfig . core . file . FileConfig ; 
 import net . minecraftforge . fml . language . IModInfo ; 
 import net . minecraftforge . fml . loading . moddiscovery . ModInfo ; 
 
 + import java . io . IOException ; 
 + import java . net . URI ; 
 import java . net . URISyntaxException ; 
 + import java . nio . file . FileSystems ; 
 import java . nio . file . Paths ; 
 import java . util . Arrays ; 
 + import java . util . HashMap ; 
 import java . util . List ; 
 + import java . util . Objects ; 
 
 public class DefaultModInfos 
 { 
 @ @ - 35 , 12 + 40 , 17 @ @ public class DefaultModInfos 
 FileConfig forgemod ; 
 try 
 { 
 - minecraftmod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ) ) ; 
 + final URI jarFileURI = DefaultModInfos . class . getClassLoader ( ) . getResource ( " minecraftmod . toml " ) . toURI ( ) ; 
 + if ( Objects . equals ( jarFileURI . getScheme ( ) , " jar " ) ) { 
 + / / Initialize the filesystem for the forge jar , because otherwise this barfs ? 
 + FileSystems . newFileSystem ( jarFileURI , new HashMap < > ( ) ) ; 
 + } 
 + minecraftmod = FileConfig . of ( Paths . get ( jarFileURI ) ) ; 
 forgemod = FileConfig . of ( Paths . get ( DefaultModInfos . class . getClassLoader ( ) . getResource ( " forgemod . toml " ) . toURI ( ) ) ) ; 
 minecraftmod . load ( ) ; 
 forgemod . load ( ) ; 
 } 
 - catch ( URISyntaxException | NullPointerException e ) 
 + catch ( IOException | URISyntaxException | NullPointerException e ) 
 { 
 throw new RuntimeException ( " Missing toml configs for minecraft and forge ! " , e ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 index 6b029cc . . 503a0d0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / FMLClientLaunchProvider . java 
 @ @ - 23 , 11 + 23 , 32 @ @ import cpw . mods . modlauncher . api . ILaunchHandlerService ; 
 import cpw . mods . modlauncher . api . ITransformingClassLoader ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 
 + import java . net . URISyntaxException ; 
 import java . nio . file . Path ; 
 + import java . nio . file . Paths ; 
 + import java . util . Arrays ; 
 + import java . util . List ; 
 import java . util . concurrent . Callable ; 
 
 public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements ILaunchHandlerService 
 { 
 + private static final Path forgePath ; 
 + private static final Path mcPath ; 
 + private static final List < String > SKIPPACKAGES = Arrays . asList ( 
 + " joptsimple . " , " org . lwjgl . " , " com . mojang . " , " com . google . " , 
 + " org . apache . commons . " , " io . netty . " , " net . minecraftforge . fml . loading . " , " net . minecraftforge . fml . language . " , 
 + " net . minecraftforge . eventbus . " , " it . unimi . dsi . fastutil . " , " net . minecraftforge . api . " , 
 + " paulscode . sound . " , " com . ibm . icu . " , " sun . " , " gnu . trove . " , " com . electronwill . nightconfig . " , 
 + " net . minecraftforge . fml . common . versioning . " 
 + ) ; 
 + static { 
 + try { 
 + forgePath = Paths . get ( FMLClientLaunchProvider . class . getProtectionDomain ( ) . getCodeSource ( ) . getLocation ( ) . toURI ( ) ) ; 
 + mcPath = forgePath . resolveSibling ( " minecraft . jar " ) ; 
 + } catch ( URISyntaxException e ) { 
 + throw new RuntimeException ( " Unable to locate myself ! " ) ; 
 + } 
 + } 
 @ Override 
 public String name ( ) 
 { 
 @ @ - 37 , 13 + 58 , 16 @ @ public class FMLClientLaunchProvider extends FMLCommonLaunchHandler implements I 
 @ Override 
 public Path [ ] identifyTransformationTargets ( ) 
 { 
 - return new Path [ 0 ] ; 
 + return new Path [ ] { mcPath , forgePath } ; 
 } 
 
 @ Override 
 public Callable < Void > launchService ( String [ ] arguments , ITransformingClassLoader launchClassLoader ) 
 { 
 return ( ) - > { 
 + super . beforeStart ( launchClassLoader , forgePath ) ; 
 + launchClassLoader . addTargetPackageFilter ( cn - > SKIPPACKAGES . stream ( ) . noneMatch ( cn : : startsWith ) ) ; 
 + Class . forName ( " net . minecraft . client . main . Main " , true , launchClassLoader . getInstance ( ) ) . getMethod ( " main " , String [ ] . class ) . invoke ( null , ( Object ) arguments ) ; 
 return null ; 
 } ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 index 5ad1927 . . 2a337bc 100644 
 - - - a / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 + + + b / src / main / java / net / minecraftforge / fml / loading / moddiscovery / ModDiscoverer . java 
 @ @ - 27 , 6 + 27 , 7 @ @ import org . apache . logging . log4j . LogManager ; 
 import org . apache . logging . log4j . Logger ; 
 
 import java . util . Collection ; 
 + import java . util . Collections ; 
 import java . util . Iterator ; 
 import java . util . List ; 
 import java . util . Map ; 
 @ @ - 62 , 7 + 63 , 7 @ @ public class ModDiscoverer { 
 
 FMLLoader . getLanguageLoadingProvider ( ) . addAdditionalLanguages ( modFiles . get ( ModFile . Type . LANGPROVIDER ) ) ; 
 BackgroundScanHandler backgroundScanHandler = new BackgroundScanHandler ( ) ; 
 - final List < ModFile > mods = modFiles . get ( ModFile . Type . MOD ) ; 
 + final List < ModFile > mods = modFiles . getOrDefault ( ModFile . Type . MOD , Collections . emptyList ( ) ) ; 
 for ( Iterator < ModFile > iterator = mods . iterator ( ) ; iterator . hasNext ( ) ; ) 
 { 
 ModFile mod = iterator . next ( ) ;
