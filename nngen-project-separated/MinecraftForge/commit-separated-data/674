BLEU SCORE: 0.005031649373920587

TEST MSG: Add methods to Fluid to allow custom vaporization overrides
GENERATED MSG: Make FluidStack hold a delegate for the fluid . This can then float based on what is " live " at present .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> index 28a110c . . 01b36a5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java <nl> @ @ - 1 , 14 + 1 , 19 @ @ <nl> package net . minecraftforge . fluids ; <nl> <nl> + import javax . annotation . Nullable ; <nl> import java . util . Locale ; <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . block . material . Material ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> import net . minecraft . init . SoundEvents ; <nl> + import net . minecraft . util . EnumParticleTypes ; <nl> + import net . minecraft . util . SoundCategory ; <nl> import net . minecraft . util . SoundEvent ; <nl> import net . minecraft . util . math . BlockPos ; <nl> import net . minecraft . util . text . translation . I18n ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraft . world . World ; <nl> + import net . minecraft . world . WorldProvider ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraft . item . EnumRarity ; <nl> <nl> @ @ - 193 , 6 + 198 , 42 @ @ public class Fluid <nl> return block ! = null ; <nl> } <nl> <nl> + 	 / * * <nl> + * Determines if this fluid should vaporize in dimensions where water vaporizes when placed . <nl> + * To preserve the intentions of vanilla , fluids that can turn lava into obsidian should vaporize . <nl> + * This prevents players from making the nether safe with a single bucket . <nl> + * Based on { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } <nl> + * <nl> + * @ param fluidStack The fluidStack is trying to be placed . <nl> + * @ return true if this fluid should vaporize in dimensions where water vaporizes when placed . <nl> + * / <nl> + public boolean doesVaporize ( FluidStack fluidStack ) <nl> + { <nl> + if ( block = = null ) <nl> + return false ; <nl> + return block . getDefaultState ( ) . getMaterial ( ) = = Material . WATER ; <nl> + } <nl> + <nl> + 	 / * * <nl> + * Called instead of placing the fluid block if { @ link WorldProvider # doesWaterVaporize ( ) } and { @ link # doesVaporize ( FluidStack ) } are true . <nl> + * Override this to make your explosive liquid blow up instead of the default smoke , etc . <nl> + * Based on { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } <nl> + * <nl> + * @ param player Player who tried to place the fluid . May be null for blocks like dispensers . <nl> + * @ param worldIn World to vaporize the fluid in . <nl> + * @ param pos The position in the world the fluid block was going to be placed . <nl> + * @ param fluidStack The fluidStack that was going to be placed . <nl> + * / <nl> + public void vaporize ( @ Nullable EntityPlayer player , World worldIn , BlockPos pos , FluidStack fluidStack ) <nl> + { <nl> + worldIn . playSound ( player , pos , SoundEvents . BLOCK _ FIRE _ EXTINGUISH , SoundCategory . BLOCKS , 0 . 5F , 2 . 6F + ( worldIn . rand . nextFloat ( ) - worldIn . rand . nextFloat ( ) ) * 0 . 8F ) ; <nl> + <nl> + for ( int l = 0 ; l < 8 ; + + l ) <nl> + { <nl> + worldIn . spawnParticle ( EnumParticleTypes . SMOKE _ LARGE , ( double ) pos . getX ( ) + Math . random ( ) , ( double ) pos . getY ( ) + Math . random ( ) , ( double ) pos . getZ ( ) + Math . random ( ) , 0 . 0D , 0 . 0D , 0 . 0D ) ; <nl> + } <nl> + } <nl> + <nl> / * * <nl> * Returns the localized name of this fluid . <nl> * / <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> index 7aded70 . . f03e828 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java <nl> @ @ - 414 , 15 + 414 , 21 @ @ public class FluidUtil <nl> * <nl> * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } <nl> * <nl> - * @ param player Player who places the fluid . May be null for blocks like dispensers . <nl> - * @ param worldIn World to place the fluid in <nl> - * @ param fluid The fluid to place . <nl> - * @ param pos The position in the world to place the fluid block <nl> + * @ param player Player who places the fluid . May be null for blocks like dispensers . <nl> + * @ param worldIn World to place the fluid in <nl> + * @ param fluidStack The fluidStack to place . <nl> + * @ param pos The position in the world to place the fluid block <nl> * @ return true if successful <nl> * / <nl> - public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluid , BlockPos pos ) <nl> + public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluidStack , BlockPos pos ) <nl> { <nl> - if ( worldIn = = null | | fluid = = null | | fluid . getFluid ( ) = = null | | pos = = null ) <nl> + if ( worldIn = = null | | fluidStack = = null | | pos = = null ) <nl> + { <nl> + return false ; <nl> + } <nl> + <nl> + Fluid fluid = fluidStack . getFluid ( ) ; <nl> + if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) <nl> { <nl> return false ; <nl> } <nl> @ @ - 437 , 16 + 443 , 9 @ @ public class FluidUtil <nl> return false ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . <nl> } <nl> <nl> - IBlockState fluidBlockState = fluid . getFluid ( ) . getBlock ( ) . getDefaultState ( ) ; <nl> - <nl> - if ( worldIn . provider . doesWaterVaporize ( ) & & fluidBlockState . getMaterial ( ) = = Material . WATER ) <nl> + if ( worldIn . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( fluidStack ) ) <nl> { <nl> - worldIn . playSound ( player , pos , SoundEvents . BLOCK _ FIRE _ EXTINGUISH , SoundCategory . BLOCKS , 0 . 5F , 2 . 6F + ( worldIn . rand . nextFloat ( ) - worldIn . rand . nextFloat ( ) ) * 0 . 8F ) ; <nl> - <nl> - for ( int l = 0 ; l < 8 ; + + l ) <nl> - { <nl> - worldIn . spawnParticle ( EnumParticleTypes . SMOKE _ LARGE , ( double ) pos . getX ( ) + Math . random ( ) , ( double ) pos . getY ( ) + Math . random ( ) , ( double ) pos . getZ ( ) + Math . random ( ) , 0 . 0D , 0 . 0D , 0 . 0D ) ; <nl> - } <nl> + fluid . vaporize ( player , worldIn , pos , fluidStack ) ; <nl> } <nl> else <nl> { <nl> @ @ - 455 , 9 + 454 , 10 @ @ public class FluidUtil <nl> worldIn . destroyBlock ( pos , true ) ; <nl> } <nl> <nl> - SoundEvent soundevent = fluid . getFluid ( ) . getEmptySound ( worldIn , pos ) ; <nl> + SoundEvent soundevent = fluid . getEmptySound ( fluidStack ) ; <nl> worldIn . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; <nl> <nl> + IBlockState fluidBlockState = fluid . getBlock ( ) . getDefaultState ( ) ; <nl> worldIn . setBlockState ( pos , fluidBlockState , 11 ) ; <nl> } <nl> return true ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> index 355fd1e . . 10317c1 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java <nl> @ @ - 50 , 7 + 50 , 7 @ @ public abstract class FluidContainerRegistry <nl> code = 31 * code + container . getItem ( ) . hashCode ( ) ; <nl> code = 31 * code + container . getItemDamage ( ) ; <nl> if ( stack ! = null ) <nl> - code = 31 * code + stack . fluid . hashCode ( ) ; <nl> + code = 31 * code + stack . getFluid ( ) . hashCode ( ) ; <nl> return code ; <nl> } <nl> @ Override <nl> @ @ - 63 , 7 + 63 , 7 @ @ public abstract class FluidContainerRegistry <nl> if ( stack = = null & & ck . stack ! = null ) return false ; <nl> if ( stack ! = null & & ck . stack = = null ) return false ; <nl> if ( stack = = null & & ck . stack = = null ) return true ; <nl> - if ( stack . fluid ! = ck . stack . fluid ) return false ; <nl> + if ( stack . getFluid ( ) ! = ck . stack . getFluid ( ) ) return false ; <nl> return true ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> index bf15975 . . dce949f 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java <nl> @ @ - 18 , 6 + 18 , 7 @ @ import com . google . common . base . Strings ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Sets ; <nl> <nl> import cpw . mods . fml . common . FMLLog ; <nl> @ @ - 25 , 6 + 26 , 7 @ @ import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> import cpw . mods . fml . common . eventhandler . Event ; <nl> import cpw . mods . fml . common . network . ByteBufUtils ; <nl> + import cpw . mods . fml . common . registry . RegistryDelegate ; <nl> <nl> / * * <nl> * Handles Fluid registrations . Fluids MUST be registered in order to function . <nl> @ @ - 114 , 6 + 116 , 10 @ @ public abstract class FluidRegistry <nl> fluidIDs . put ( fluid , id ) ; <nl> } <nl> fluidBlocks = null ; <nl> + for ( FluidDelegate fd : delegates . values ( ) ) <nl> + { <nl> + fd . rebind ( ) ; <nl> + } <nl> } <nl> <nl> / * * <nl> @ @ - 127 , 7 + 133 , 7 @ @ public abstract class FluidRegistry <nl> public static boolean registerFluid ( Fluid fluid ) <nl> { <nl> masterFluidReference . put ( uniqueName ( fluid ) , fluid ) ; <nl> - <nl> + delegates . put ( fluid , new FluidDelegate ( fluid , fluid . getName ( ) ) ) ; <nl> if ( fluids . containsKey ( fluid . getName ( ) ) ) <nl> { <nl> return false ; <nl> @ @ - 207 , 7 + 213 , 7 @ @ public abstract class FluidRegistry <nl> <nl> public static String getFluidName ( FluidStack stack ) <nl> { <nl> - return getFluidName ( stack . fluid ) ; <nl> + return getFluidName ( stack . getFluid ( ) ) ; <nl> } <nl> <nl> public static FluidStack getFluidStack ( String fluidName , int amount ) <nl> @ @ - 343 , 4 + 349 , 46 @ @ public abstract class FluidRegistry <nl> throw new IllegalStateException ( " The fluid map contains fluids unknown to the master fluid registry " ) ; <nl> } <nl> } <nl> - } <nl> + <nl> + private static Map < Fluid , FluidDelegate > delegates = Maps . newHashMap ( ) ; <nl> + static RegistryDelegate < Fluid > makeDelegate ( Fluid fl ) <nl> + { <nl> + return delegates . get ( fl ) ; <nl> + } <nl> + <nl> + <nl> + private static class FluidDelegate implements RegistryDelegate < Fluid > <nl> + { <nl> + private String name ; <nl> + private Fluid fluid ; <nl> + <nl> + FluidDelegate ( Fluid fluid , String name ) <nl> + { <nl> + this . fluid = fluid ; <nl> + this . name = name ; <nl> + } <nl> + <nl> + @ Override <nl> + public Fluid get ( ) <nl> + { <nl> + return fluid ; <nl> + } <nl> + <nl> + @ Override <nl> + public String name ( ) <nl> + { <nl> + return name ; <nl> + } <nl> + <nl> + @ Override <nl> + public Class < Fluid > type ( ) <nl> + { <nl> + return Fluid . class ; <nl> + } <nl> + <nl> + void rebind ( ) <nl> + { <nl> + fluid = fluids . get ( name ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> index c18e18e . . e303700 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java <nl> @ @ - 2 , 6 + 2 , 7 @ @ <nl> package net . minecraftforge . fluids ; <nl> <nl> import cpw . mods . fml . common . FMLLog ; <nl> + import cpw . mods . fml . common . registry . RegistryDelegate ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTTagCompound ; <nl> <nl> @ @ - 17 , 9 + 18 , 15 @ @ import net . minecraft . nbt . NBTTagCompound ; <nl> * / <nl> public class FluidStack <nl> { <nl> - 	 public final Fluid fluid ; <nl> + / * * <nl> + * This field will be removed in 1 . 8 . It may be incorrect after a world is loaded . Code should always <nl> + * use { @ link # getFluid ( ) } instead . That will always reflect the correct value . <nl> + * / <nl> + @ Deprecated <nl> + public final Fluid fluid ; <nl> public int amount ; <nl> public NBTTagCompound tag ; <nl> + private RegistryDelegate < Fluid > fluidDelegate ; <nl> <nl> public FluidStack ( Fluid fluid , int amount ) <nl> { <nl> @ @ - 33 , 8 + 40 , 9 @ @ public class FluidStack <nl> FMLLog . bigWarning ( " Failed attempt to create a FluidStack for an unregistered Fluid % s ( type % s ) " , fluid . getName ( ) , fluid . getClass ( ) . getName ( ) ) ; <nl> throw new IllegalArgumentException ( " Cannot create a fluidstack from an unregistered fluid " ) ; <nl> } <nl> - 	 this . fluid = fluid ; <nl> + 	 this . fluidDelegate = FluidRegistry . makeDelegate ( fluid ) ; <nl> this . amount = amount ; <nl> + this . fluid = fluid ; <nl> } <nl> <nl> public FluidStack ( Fluid fluid , int amount , NBTTagCompound nbt ) <nl> @ @ - 49 , 7 + 57 , 7 @ @ public class FluidStack <nl> <nl> public FluidStack ( FluidStack stack , int amount ) <nl> { <nl> - this ( stack . fluid , amount , stack . tag ) ; <nl> + this ( stack . getFluid ( ) , amount , stack . tag ) ; <nl> } <nl> <nl> / / To be removed in 1 . 8 <nl> @ @ - 93 , 7 + 101 , 7 @ @ public class FluidStack <nl> <nl> public NBTTagCompound writeToNBT ( NBTTagCompound nbt ) <nl> { <nl> - nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluid ) ) ; <nl> + nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( getFluid ( ) ) ) ; <nl> nbt . setInteger ( " Amount " , amount ) ; <nl> <nl> if ( tag ! = null ) <nl> @ @ - 105 , 12 + 113 , 12 @ @ public class FluidStack <nl> <nl> public final Fluid getFluid ( ) <nl> { <nl> - return fluid ; <nl> + return fluidDelegate . get ( ) ; <nl> } <nl> <nl> public final int getFluidID ( ) <nl> { <nl> - 	 return FluidRegistry . getFluidID ( fluid ) ; <nl> + 	 return FluidRegistry . getFluidID ( getFluid ( ) ) ; <nl> } <nl> <nl> public String getLocalizedName ( ) <nl> @ @ - 128 , 7 + 136 , 7 @ @ public class FluidStack <nl> * / <nl> public FluidStack copy ( ) <nl> { <nl> - return new FluidStack ( fluid , amount , tag ) ; <nl> + return new FluidStack ( getFluid ( ) , amount , tag ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 140 , 7 + 148 , 7 @ @ public class FluidStack <nl> * / <nl> public boolean isFluidEqual ( FluidStack other ) <nl> { <nl> - return other ! = null & & fluid = = other . fluid & & isFluidStackTagEqual ( other ) ; <nl> + return other ! = null & & getFluid ( ) = = other . getFluid ( ) & & isFluidStackTagEqual ( other ) ; <nl> } <nl> <nl> private boolean isFluidStackTagEqual ( FluidStack other ) <nl> @ @ - 206 , 7 + 214 , 7 @ @ public class FluidStack <nl> public final int hashCode ( ) <nl> { <nl> 	 int code = 1 ; <nl> - 	 code = 31 * code + fluid . hashCode ( ) ; <nl> + 	 code = 31 * code + getFluid ( ) . hashCode ( ) ; <nl> 	 code = 31 * code + amount ; <nl> 	 if ( tag ! = null ) <nl> 	 	 code = 31 * code + tag . hashCode ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / Fluid . java b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 index 28a110c . . 01b36a5 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / Fluid . java 
 + + + b / src / main / java / net / minecraftforge / fluids / Fluid . java 
 @ @ - 1 , 14 + 1 , 19 @ @ 
 package net . minecraftforge . fluids ; 
 
 + import javax . annotation . Nullable ; 
 import java . util . Locale ; 
 import net . minecraft . block . Block ; 
 import net . minecraft . block . material . Material ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 import net . minecraft . init . SoundEvents ; 
 + import net . minecraft . util . EnumParticleTypes ; 
 + import net . minecraft . util . SoundCategory ; 
 import net . minecraft . util . SoundEvent ; 
 import net . minecraft . util . math . BlockPos ; 
 import net . minecraft . util . text . translation . I18n ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraft . world . World ; 
 + import net . minecraft . world . WorldProvider ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraft . item . EnumRarity ; 
 
 @ @ - 193 , 6 + 198 , 42 @ @ public class Fluid 
 return block ! = null ; 
 } 
 
 + 	 / * * 
 + * Determines if this fluid should vaporize in dimensions where water vaporizes when placed . 
 + * To preserve the intentions of vanilla , fluids that can turn lava into obsidian should vaporize . 
 + * This prevents players from making the nether safe with a single bucket . 
 + * Based on { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } 
 + * 
 + * @ param fluidStack The fluidStack is trying to be placed . 
 + * @ return true if this fluid should vaporize in dimensions where water vaporizes when placed . 
 + * / 
 + public boolean doesVaporize ( FluidStack fluidStack ) 
 + { 
 + if ( block = = null ) 
 + return false ; 
 + return block . getDefaultState ( ) . getMaterial ( ) = = Material . WATER ; 
 + } 
 + 
 + 	 / * * 
 + * Called instead of placing the fluid block if { @ link WorldProvider # doesWaterVaporize ( ) } and { @ link # doesVaporize ( FluidStack ) } are true . 
 + * Override this to make your explosive liquid blow up instead of the default smoke , etc . 
 + * Based on { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } 
 + * 
 + * @ param player Player who tried to place the fluid . May be null for blocks like dispensers . 
 + * @ param worldIn World to vaporize the fluid in . 
 + * @ param pos The position in the world the fluid block was going to be placed . 
 + * @ param fluidStack The fluidStack that was going to be placed . 
 + * / 
 + public void vaporize ( @ Nullable EntityPlayer player , World worldIn , BlockPos pos , FluidStack fluidStack ) 
 + { 
 + worldIn . playSound ( player , pos , SoundEvents . BLOCK _ FIRE _ EXTINGUISH , SoundCategory . BLOCKS , 0 . 5F , 2 . 6F + ( worldIn . rand . nextFloat ( ) - worldIn . rand . nextFloat ( ) ) * 0 . 8F ) ; 
 + 
 + for ( int l = 0 ; l < 8 ; + + l ) 
 + { 
 + worldIn . spawnParticle ( EnumParticleTypes . SMOKE _ LARGE , ( double ) pos . getX ( ) + Math . random ( ) , ( double ) pos . getY ( ) + Math . random ( ) , ( double ) pos . getZ ( ) + Math . random ( ) , 0 . 0D , 0 . 0D , 0 . 0D ) ; 
 + } 
 + } 
 + 
 / * * 
 * Returns the localized name of this fluid . 
 * / 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidUtil . java b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 index 7aded70 . . f03e828 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidUtil . java 
 @ @ - 414 , 15 + 414 , 21 @ @ public class FluidUtil 
 * 
 * Modeled after { @ link net . minecraft . item . ItemBucket # tryPlaceContainedLiquid ( EntityPlayer , World , BlockPos ) } 
 * 
 - * @ param player Player who places the fluid . May be null for blocks like dispensers . 
 - * @ param worldIn World to place the fluid in 
 - * @ param fluid The fluid to place . 
 - * @ param pos The position in the world to place the fluid block 
 + * @ param player Player who places the fluid . May be null for blocks like dispensers . 
 + * @ param worldIn World to place the fluid in 
 + * @ param fluidStack The fluidStack to place . 
 + * @ param pos The position in the world to place the fluid block 
 * @ return true if successful 
 * / 
 - public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluid , BlockPos pos ) 
 + public static boolean tryPlaceFluid ( @ Nullable EntityPlayer player , World worldIn , FluidStack fluidStack , BlockPos pos ) 
 { 
 - if ( worldIn = = null | | fluid = = null | | fluid . getFluid ( ) = = null | | pos = = null ) 
 + if ( worldIn = = null | | fluidStack = = null | | pos = = null ) 
 + { 
 + return false ; 
 + } 
 + 
 + Fluid fluid = fluidStack . getFluid ( ) ; 
 + if ( fluid = = null | | ! fluid . canBePlacedInWorld ( ) ) 
 { 
 return false ; 
 } 
 @ @ - 437 , 16 + 443 , 9 @ @ public class FluidUtil 
 return false ; / / Non - air , solid , unreplacable block . We can ' t put fluid here . 
 } 
 
 - IBlockState fluidBlockState = fluid . getFluid ( ) . getBlock ( ) . getDefaultState ( ) ; 
 - 
 - if ( worldIn . provider . doesWaterVaporize ( ) & & fluidBlockState . getMaterial ( ) = = Material . WATER ) 
 + if ( worldIn . provider . doesWaterVaporize ( ) & & fluid . doesVaporize ( fluidStack ) ) 
 { 
 - worldIn . playSound ( player , pos , SoundEvents . BLOCK _ FIRE _ EXTINGUISH , SoundCategory . BLOCKS , 0 . 5F , 2 . 6F + ( worldIn . rand . nextFloat ( ) - worldIn . rand . nextFloat ( ) ) * 0 . 8F ) ; 
 - 
 - for ( int l = 0 ; l < 8 ; + + l ) 
 - { 
 - worldIn . spawnParticle ( EnumParticleTypes . SMOKE _ LARGE , ( double ) pos . getX ( ) + Math . random ( ) , ( double ) pos . getY ( ) + Math . random ( ) , ( double ) pos . getZ ( ) + Math . random ( ) , 0 . 0D , 0 . 0D , 0 . 0D ) ; 
 - } 
 + fluid . vaporize ( player , worldIn , pos , fluidStack ) ; 
 } 
 else 
 { 
 @ @ - 455 , 9 + 454 , 10 @ @ public class FluidUtil 
 worldIn . destroyBlock ( pos , true ) ; 
 } 
 
 - SoundEvent soundevent = fluid . getFluid ( ) . getEmptySound ( worldIn , pos ) ; 
 + SoundEvent soundevent = fluid . getEmptySound ( fluidStack ) ; 
 worldIn . playSound ( player , pos , soundevent , SoundCategory . BLOCKS , 1 . 0F , 1 . 0F ) ; 
 
 + IBlockState fluidBlockState = fluid . getBlock ( ) . getDefaultState ( ) ; 
 worldIn . setBlockState ( pos , fluidBlockState , 11 ) ; 
 } 
 return true ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 index 355fd1e . . 10317c1 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidContainerRegistry . java 
 @ @ - 50 , 7 + 50 , 7 @ @ public abstract class FluidContainerRegistry 
 code = 31 * code + container . getItem ( ) . hashCode ( ) ; 
 code = 31 * code + container . getItemDamage ( ) ; 
 if ( stack ! = null ) 
 - code = 31 * code + stack . fluid . hashCode ( ) ; 
 + code = 31 * code + stack . getFluid ( ) . hashCode ( ) ; 
 return code ; 
 } 
 @ Override 
 @ @ - 63 , 7 + 63 , 7 @ @ public abstract class FluidContainerRegistry 
 if ( stack = = null & & ck . stack ! = null ) return false ; 
 if ( stack ! = null & & ck . stack = = null ) return false ; 
 if ( stack = = null & & ck . stack = = null ) return true ; 
 - if ( stack . fluid ! = ck . stack . fluid ) return false ; 
 + if ( stack . getFluid ( ) ! = ck . stack . getFluid ( ) ) return false ; 
 return true ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 index bf15975 . . dce949f 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidRegistry . java 
 @ @ - 18 , 6 + 18 , 7 @ @ import com . google . common . base . Strings ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 import com . google . common . collect . Sets ; 
 
 import cpw . mods . fml . common . FMLLog ; 
 @ @ - 25 , 6 + 26 , 7 @ @ import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 import cpw . mods . fml . common . eventhandler . Event ; 
 import cpw . mods . fml . common . network . ByteBufUtils ; 
 + import cpw . mods . fml . common . registry . RegistryDelegate ; 
 
 / * * 
 * Handles Fluid registrations . Fluids MUST be registered in order to function . 
 @ @ - 114 , 6 + 116 , 10 @ @ public abstract class FluidRegistry 
 fluidIDs . put ( fluid , id ) ; 
 } 
 fluidBlocks = null ; 
 + for ( FluidDelegate fd : delegates . values ( ) ) 
 + { 
 + fd . rebind ( ) ; 
 + } 
 } 
 
 / * * 
 @ @ - 127 , 7 + 133 , 7 @ @ public abstract class FluidRegistry 
 public static boolean registerFluid ( Fluid fluid ) 
 { 
 masterFluidReference . put ( uniqueName ( fluid ) , fluid ) ; 
 - 
 + delegates . put ( fluid , new FluidDelegate ( fluid , fluid . getName ( ) ) ) ; 
 if ( fluids . containsKey ( fluid . getName ( ) ) ) 
 { 
 return false ; 
 @ @ - 207 , 7 + 213 , 7 @ @ public abstract class FluidRegistry 
 
 public static String getFluidName ( FluidStack stack ) 
 { 
 - return getFluidName ( stack . fluid ) ; 
 + return getFluidName ( stack . getFluid ( ) ) ; 
 } 
 
 public static FluidStack getFluidStack ( String fluidName , int amount ) 
 @ @ - 343 , 4 + 349 , 46 @ @ public abstract class FluidRegistry 
 throw new IllegalStateException ( " The fluid map contains fluids unknown to the master fluid registry " ) ; 
 } 
 } 
 - } 
 + 
 + private static Map < Fluid , FluidDelegate > delegates = Maps . newHashMap ( ) ; 
 + static RegistryDelegate < Fluid > makeDelegate ( Fluid fl ) 
 + { 
 + return delegates . get ( fl ) ; 
 + } 
 + 
 + 
 + private static class FluidDelegate implements RegistryDelegate < Fluid > 
 + { 
 + private String name ; 
 + private Fluid fluid ; 
 + 
 + FluidDelegate ( Fluid fluid , String name ) 
 + { 
 + this . fluid = fluid ; 
 + this . name = name ; 
 + } 
 + 
 + @ Override 
 + public Fluid get ( ) 
 + { 
 + return fluid ; 
 + } 
 + 
 + @ Override 
 + public String name ( ) 
 + { 
 + return name ; 
 + } 
 + 
 + @ Override 
 + public Class < Fluid > type ( ) 
 + { 
 + return Fluid . class ; 
 + } 
 + 
 + void rebind ( ) 
 + { 
 + fluid = fluids . get ( name ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / fluids / FluidStack . java b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 index c18e18e . . e303700 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 + + + b / src / main / java / net / minecraftforge / fluids / FluidStack . java 
 @ @ - 2 , 6 + 2 , 7 @ @ 
 package net . minecraftforge . fluids ; 
 
 import cpw . mods . fml . common . FMLLog ; 
 + import cpw . mods . fml . common . registry . RegistryDelegate ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTTagCompound ; 
 
 @ @ - 17 , 9 + 18 , 15 @ @ import net . minecraft . nbt . NBTTagCompound ; 
 * / 
 public class FluidStack 
 { 
 - 	 public final Fluid fluid ; 
 + / * * 
 + * This field will be removed in 1 . 8 . It may be incorrect after a world is loaded . Code should always 
 + * use { @ link # getFluid ( ) } instead . That will always reflect the correct value . 
 + * / 
 + @ Deprecated 
 + public final Fluid fluid ; 
 public int amount ; 
 public NBTTagCompound tag ; 
 + private RegistryDelegate < Fluid > fluidDelegate ; 
 
 public FluidStack ( Fluid fluid , int amount ) 
 { 
 @ @ - 33 , 8 + 40 , 9 @ @ public class FluidStack 
 FMLLog . bigWarning ( " Failed attempt to create a FluidStack for an unregistered Fluid % s ( type % s ) " , fluid . getName ( ) , fluid . getClass ( ) . getName ( ) ) ; 
 throw new IllegalArgumentException ( " Cannot create a fluidstack from an unregistered fluid " ) ; 
 } 
 - 	 this . fluid = fluid ; 
 + 	 this . fluidDelegate = FluidRegistry . makeDelegate ( fluid ) ; 
 this . amount = amount ; 
 + this . fluid = fluid ; 
 } 
 
 public FluidStack ( Fluid fluid , int amount , NBTTagCompound nbt ) 
 @ @ - 49 , 7 + 57 , 7 @ @ public class FluidStack 
 
 public FluidStack ( FluidStack stack , int amount ) 
 { 
 - this ( stack . fluid , amount , stack . tag ) ; 
 + this ( stack . getFluid ( ) , amount , stack . tag ) ; 
 } 
 
 / / To be removed in 1 . 8 
 @ @ - 93 , 7 + 101 , 7 @ @ public class FluidStack 
 
 public NBTTagCompound writeToNBT ( NBTTagCompound nbt ) 
 { 
 - nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( fluid ) ) ; 
 + nbt . setString ( " FluidName " , FluidRegistry . getFluidName ( getFluid ( ) ) ) ; 
 nbt . setInteger ( " Amount " , amount ) ; 
 
 if ( tag ! = null ) 
 @ @ - 105 , 12 + 113 , 12 @ @ public class FluidStack 
 
 public final Fluid getFluid ( ) 
 { 
 - return fluid ; 
 + return fluidDelegate . get ( ) ; 
 } 
 
 public final int getFluidID ( ) 
 { 
 - 	 return FluidRegistry . getFluidID ( fluid ) ; 
 + 	 return FluidRegistry . getFluidID ( getFluid ( ) ) ; 
 } 
 
 public String getLocalizedName ( ) 
 @ @ - 128 , 7 + 136 , 7 @ @ public class FluidStack 
 * / 
 public FluidStack copy ( ) 
 { 
 - return new FluidStack ( fluid , amount , tag ) ; 
 + return new FluidStack ( getFluid ( ) , amount , tag ) ; 
 } 
 
 / * * 
 @ @ - 140 , 7 + 148 , 7 @ @ public class FluidStack 
 * / 
 public boolean isFluidEqual ( FluidStack other ) 
 { 
 - return other ! = null & & fluid = = other . fluid & & isFluidStackTagEqual ( other ) ; 
 + return other ! = null & & getFluid ( ) = = other . getFluid ( ) & & isFluidStackTagEqual ( other ) ; 
 } 
 
 private boolean isFluidStackTagEqual ( FluidStack other ) 
 @ @ - 206 , 7 + 214 , 7 @ @ public class FluidStack 
 public final int hashCode ( ) 
 { 
 	 int code = 1 ; 
 - 	 code = 31 * code + fluid . hashCode ( ) ; 
 + 	 code = 31 * code + getFluid ( ) . hashCode ( ) ; 
 	 code = 31 * code + amount ; 
 	 if ( tag ! = null ) 
 	 	 code = 31 * code + tag . hashCode ( ) ;
