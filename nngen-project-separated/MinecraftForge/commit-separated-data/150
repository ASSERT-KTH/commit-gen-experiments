BLEU SCORE: 6.366216508828268E-6

TEST MSG: Better documentation for IForgeWorldType , TERFast , TERAnimation
GENERATED MSG: ModelBakeEvent now has ModelLoader as an argument instead of ModelBakery ; Added various static hooks to ModelLoader to allow registering model - related information before it ' s needed ( prevents file - not - found errors on first baking pass ) ; ModelLoader waits until ModelBakeEvent is done before showing any missing model exceptions ; It ' s now possible to define models completely in - code ( as illustrated by ModelBakeEventDebug ) .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> deleted file mode 100644 <nl> index 2781168 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java <nl> + + + / dev / null <nl> @ @ - 1 , 92 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2018 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . client . model . animation ; <nl> - <nl> - import net . minecraft . block . state . IBlockState ; <nl> - import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . BlockRendererDispatcher ; <nl> - import net . minecraft . client . renderer . BufferBuilder ; <nl> - import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> - import net . minecraft . tileentity . TileEntity ; <nl> - import net . minecraft . util . math . BlockPos ; <nl> - import net . minecraft . world . IWorldReader ; <nl> - import net . minecraftforge . client . MinecraftForgeClient ; <nl> - import net . minecraftforge . common . animation . Event ; <nl> - import net . minecraftforge . common . animation . IEventHandler ; <nl> - import net . minecraftforge . common . capabilities . OptionalCapabilityInstance ; <nl> - import net . minecraftforge . common . model . IModelState ; <nl> - import net . minecraftforge . common . model . animation . CapabilityAnimation ; <nl> - import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> - import net . minecraftforge . common . property . IExtendedBlockState ; <nl> - import net . minecraftforge . common . property . Properties ; <nl> - <nl> - import java . util . Random ; <nl> - <nl> - import org . apache . commons . lang3 . tuple . Pair ; <nl> - <nl> - / * * <nl> - * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . <nl> - * / <nl> - public class AnimationTESR < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > <nl> - { <nl> - protected static BlockRendererDispatcher blockRenderer ; <nl> - <nl> - @ Override <nl> - public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , BufferBuilder renderer ) <nl> - { <nl> - OptionalCapabilityInstance < IAnimationStateMachine > cap = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY ) ; <nl> - if ( ! cap . isPresent ( ) ) <nl> - { <nl> - return ; <nl> - } <nl> - if ( blockRenderer = = null ) blockRenderer = Minecraft . getInstance ( ) . getBlockRendererDispatcher ( ) ; <nl> - BlockPos pos = te . getPos ( ) ; <nl> - IWorldReader world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; <nl> - IBlockState state = world . getBlockState ( pos ) ; <nl> - if ( state . getBlock ( ) . getStateContainer ( ) . getProperties ( ) . contains ( Properties . StaticProperty ) ) <nl> - { <nl> - state = state . with ( Properties . StaticProperty , false ) ; <nl> - } <nl> - if ( state instanceof IExtendedBlockState ) <nl> - { <nl> - IExtendedBlockState exState = ( IExtendedBlockState ) state ; <nl> - if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) <nl> - { <nl> - float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; <nl> - cap <nl> - . map ( asm - > asm . apply ( time ) ) <nl> - . ifPresent ( pair - > { <nl> - handleEvents ( te , time , pair . getRight ( ) ) ; <nl> - <nl> - / / TODO : caching ? <nl> - IBakedModel model = blockRenderer . getBlockModelShapes ( ) . getModel ( exState . getClean ( ) ) ; <nl> - IExtendedBlockState animState = ( IExtendedBlockState ) exState . withProperty ( Properties . AnimationProperty , pair . getLeft ( ) ) ; <nl> - <nl> - renderer . setTranslation ( x - pos . getX ( ) , y - pos . getY ( ) , z - pos . getZ ( ) ) ; <nl> - <nl> - blockRenderer . getBlockModelRenderer ( ) . renderModel ( world , model , animState , pos , renderer , false , new Random ( ) , 42 ) ; <nl> - } ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - @ Override <nl> - public void handleEvents ( T te , float time , Iterable < Event > pastEvents ) { } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java <nl> new file mode 100644 <nl> index 0000000 . . 21b6942 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java <nl> @ @ - 0 , 0 + 1 , 90 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . client . model . animation ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . BlockRendererDispatcher ; <nl> + import net . minecraft . client . renderer . BufferBuilder ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . world . IWorldReader ; <nl> + import net . minecraftforge . client . MinecraftForgeClient ; <nl> + import net . minecraftforge . common . animation . Event ; <nl> + import net . minecraftforge . common . animation . IEventHandler ; <nl> + import net . minecraftforge . common . capabilities . OptionalCapabilityInstance ; <nl> + import net . minecraftforge . common . model . animation . CapabilityAnimation ; <nl> + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; <nl> + import net . minecraftforge . common . property . IExtendedBlockState ; <nl> + import net . minecraftforge . common . property . Properties ; <nl> + <nl> + import java . util . Random ; <nl> + <nl> + / * * <nl> + * Generic { @ link TileEntityRenderer } that works with the Forge model system and animations . <nl> + * / <nl> + public class TileEntityRendererAnimation < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > <nl> + { <nl> + protected static BlockRendererDispatcher blockRenderer ; <nl> + <nl> + @ Override <nl> + public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , BufferBuilder renderer ) <nl> + { <nl> + OptionalCapabilityInstance < IAnimationStateMachine > cap = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY ) ; <nl> + if ( ! cap . isPresent ( ) ) <nl> + { <nl> + return ; <nl> + } <nl> + if ( blockRenderer = = null ) blockRenderer = Minecraft . getInstance ( ) . getBlockRendererDispatcher ( ) ; <nl> + BlockPos pos = te . getPos ( ) ; <nl> + IWorldReader world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; <nl> + IBlockState state = world . getBlockState ( pos ) ; <nl> + if ( state . getBlock ( ) . getStateContainer ( ) . getProperties ( ) . contains ( Properties . StaticProperty ) ) <nl> + { <nl> + state = state . with ( Properties . StaticProperty , false ) ; <nl> + } <nl> + if ( state instanceof IExtendedBlockState ) <nl> + { <nl> + IExtendedBlockState exState = ( IExtendedBlockState ) state ; <nl> + if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) <nl> + { <nl> + float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; <nl> + cap <nl> + . map ( asm - > asm . apply ( time ) ) <nl> + . ifPresent ( pair - > { <nl> + handleEvents ( te , time , pair . getRight ( ) ) ; <nl> + <nl> + / / TODO : caching ? <nl> + IBakedModel model = blockRenderer . getBlockModelShapes ( ) . getModel ( exState . getClean ( ) ) ; <nl> + IExtendedBlockState animState = ( IExtendedBlockState ) exState . withProperty ( Properties . AnimationProperty , pair . getLeft ( ) ) ; <nl> + <nl> + renderer . setTranslation ( x - pos . getX ( ) , y - pos . getY ( ) , z - pos . getZ ( ) ) ; <nl> + <nl> + blockRenderer . getBlockModelRenderer ( ) . renderModel ( world , model , animState , pos , renderer , false , new Random ( ) , 42 ) ; <nl> + } ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public void handleEvents ( T te , float time , Iterable < Event > pastEvents ) { } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java <nl> index 1d4d78b . . a318e2a 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java <nl> @ @ - 29 , 8 + 29 , 29 @ @ import net . minecraft . client . renderer . BufferBuilder ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; <nl> import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> + import net . minecraft . client . renderer . vertex . VertexFormat ; <nl> import net . minecraft . tileentity . TileEntity ; <nl> <nl> + / * * <nl> + * A special case { @ link TileEntityRenderer } which can be batched with other <nl> + * renderers that are also instances of this class . <nl> + * < p > <nl> + * Advantages : <nl> + * < ul > <nl> + * < li > All batched renderers are drawn with a single draw call < / li > <nl> + * < li > Renderers have their vertices depth sorted for better translucency <nl> + * support < / li > <nl> + * < / ul > <nl> + * < p > <nl> + * Disadvantages : <nl> + * < ul > <nl> + * < li > OpenGL operations are not permitted < / li > <nl> + * < li > All renderers must use the same { @ link VertexFormat } <nl> + * ( { @ link DefaultVertexFormats # BLOCK } ) < / li > <nl> + * < / ul > <nl> + * <nl> + * @ param < T > The type of { @ link TileEntity } being rendered . <nl> + * / <nl> public abstract class TileEntityRendererFast < T extends TileEntity > extends TileEntityRenderer < T > <nl> { <nl> @ Override <nl> @ @ - 63 , 6 + 84 , 11 @ @ public abstract class TileEntityRendererFast < T extends TileEntity > extends TileE <nl> RenderHelper . enableStandardItemLighting ( ) ; <nl> } <nl> <nl> + / * * <nl> + * Draw this renderer to the passed { @ link BufferBuilder } . < strong > DO <nl> + * NOT < / strong > draw to any buffers other than the one passed , or use any OpenGL <nl> + * operations as they will not be applied when this renderer is batched . <nl> + * / <nl> @ Override <nl> public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> index 32f8667 . . 0fbdb5e 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> @ @ - 19 , 6 + 19 , 7 @ @ import net . minecraft . world . gen . layer . GenLayerZoom ; <nl> import net . minecraft . world . gen . layer . LayerUtil ; <nl> import net . minecraftforge . api . distmarker . Dist ; <nl> import net . minecraftforge . api . distmarker . OnlyIn ; <nl> + import net . minecraftforge . fml . client . config . IArrayEntry ; <nl> <nl> public interface IForgeWorldType <nl> { <nl> @ @ - 81 , 17 + 82 , 19 @ @ public interface IForgeWorldType <nl> } <nl> <nl> / * * <nl> - * Creates the GenLayerBiome used for generating the world with the specified <nl> - * ChunkProviderSettings JSON String * IF AND ONLY IF * this WorldType = = <nl> - * WorldType . CUSTOMIZED . <nl> + * Allows modifying the { @ link IAreaFactory } used for this type ' s biome <nl> + * generation . <nl> * <nl> - * <nl> - * @ param worldSeed The world seed <nl> - * @ param parentLayer The parent layer to feed into any layer you return <nl> - * @ param chunkSettings The ChunkGeneratorSettings constructed from the custom <nl> - * JSON <nl> - * @ return A GenLayer that will return ints representing the Biomes to be <nl> - * generated , see GenLayerBiome <nl> + * @ param < T > The type of { @ link IArea } . <nl> + * @ param < C > The type of { @ link IContextExtended } . <nl> + * <nl> + * @ param parentLayer The parent layer to feed into any layer you return <nl> + * @ param chunkSettings The { @ link OverworldGenSettings } used to create the <nl> + * { @ link GenLayerBiome } . <nl> + * @ param contextFactory A { @ link LongFunction } factory to create contexts of <nl> + * the supplied size . <nl> + * @ return An { @ link IAreaFactory } that representing the Biomes to be generated . <nl> + * @ see { @ link GenLayerBiome } <nl> * / <nl> default < T extends IArea , C extends IContextExtended < T > > IAreaFactory < T > getBiomeLayer ( IAreaFactory < T > parentLayer , <nl> OverworldGenSettings chunkSettings , LongFunction < C > contextFactory )
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> new file mode 100644 <nl> index 0000000 . . ae731a3 <nl> - - - / dev / null <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch <nl> @ @ - 0 , 0 + 1 , 10 @ @ <nl> + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java <nl> + @ @ - 321 , 6 + 321 , 7 @ @ <nl> + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; <nl> + } <nl> + } ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; <nl> + } <nl> + <nl> + @ SideOnly ( Side . CLIENT ) <nl> diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> index 48162e1 . . 498fc5d 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch <nl> @ @ - 81 , 7 + 81 , 14 @ @ <nl> GlStateManager . func _ 179141 _ d ( ) ; <nl> GlStateManager . func _ 179098 _ w ( ) ; <nl> GlStateManager . func _ 179145 _ e ( ) ; <nl> - @ @ - 1078 , 6 + 1072 , 19 @ @ <nl> + @ @ - 1072 , 12 + 1066 , 26 @ @ <nl> + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; <nl> + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; <nl> + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; <nl> + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; <nl> + } <nl> + <nl> + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) <nl> { <nl> this . field _ 175059 _ m . func _ 178085 _ b ( ) ; <nl> } <nl> diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> index 0c6385f . . 8364265 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch <nl> @ @ - 9 , 7 + 9 , 15 @ @ <nl> } <nl> } <nl> catch ( Exception exception1 ) <nl> - @ @ - 499 , 6 + 499 , 11 @ @ <nl> + @ @ - 172 , 6 + 172 , 7 @ @ <nl> + } <nl> + } <nl> + } <nl> + + catch ( FileNotFoundException e ) { } <nl> + catch ( IOException ioexception ) <nl> + { <nl> + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; <nl> + @ @ - 499 , 6 + 500 , 11 @ @ <nl> <nl> private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) <nl> { <nl> @ @ - 21 , 7 + 29 , 7 @ @ <nl> TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; <nl> SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; <nl> Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; <nl> - @ @ - 516 , 11 + 521 , 11 @ @ <nl> + @ @ - 516 , 11 + 522 , 11 @ @ <nl> <nl> if ( blockpartface . field _ 178244 _ b = = null ) <nl> { <nl> @ @ - 35 , 7 + 43 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 530 , 9 + 535 , 14 @ @ <nl> + @ @ - 530 , 9 + 536 , 14 @ @ <nl> <nl> private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> index f93959c . . 2407f52 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java <nl> @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; <nl> import net . minecraftforge . client . event . TextureStitchEvent ; <nl> import net . minecraftforge . client . event . sound . PlaySoundEvent ; <nl> import net . minecraftforge . client . model . IPerspectiveAwareModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . ForgeModContainer ; <nl> import net . minecraftforge . common . ForgeVersion ; <nl> import net . minecraftforge . common . ForgeVersion . Status ; <nl> @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient <nl> <nl> public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> { <nl> - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; <nl> + ModelLoader loader = ( ModelLoader ) modelBakery ; <nl> + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; <nl> + loader . onPostBakeEvent ( modelRegistry ) ; <nl> } <nl> <nl> public static Matrix4f getMatrix ( ItemTransformVec3f transform ) <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> index 502454f . . 3c124d8 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java <nl> @ @ - 1 , 9 + 1 , 9 @ @ <nl> package net . minecraftforge . client . event ; <nl> <nl> - import net . minecraftforge . fml . common . eventhandler . Event ; <nl> - import net . minecraft . client . resources . model . ModelBakery ; <nl> import net . minecraft . client . resources . model . ModelManager ; <nl> import net . minecraft . util . IRegistry ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> <nl> / * * <nl> * Fired when the ModelManager is notified of the resource manager reloading . <nl> @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event <nl> { <nl> public final ModelManager modelManager ; <nl> public final IRegistry modelRegistry ; <nl> - public final ModelBakery modelBakery ; <nl> + public final ModelLoader modelLoader ; <nl> <nl> - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) <nl> + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) <nl> { <nl> this . modelManager = modelManager ; <nl> this . modelRegistry = modelRegistry ; <nl> - this . modelBakery = modelBakery ; <nl> + this . modelLoader = modelLoader ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index 8942995 . . 91ea08d 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . Set ; <nl> <nl> + import net . minecraft . block . Block ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . renderer . BlockModelShapes ; <nl> + import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> + import net . minecraft . client . renderer . ItemModelMesher ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> import net . minecraft . client . renderer . block . model . ItemModelGenerator ; <nl> import net . minecraft . client . renderer . block . model . ModelBlock ; <nl> @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; <nl> import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; <nl> + import net . minecraft . client . renderer . block . statemap . IStateMapper ; <nl> import net . minecraft . client . renderer . texture . IIconCreator ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . renderer . texture . TextureMap ; <nl> @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; <nl> import net . minecraft . util . ResourceLocation ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . registry . GameData ; <nl> + import net . minecraftforge . fml . common . registry . RegistryDelegate ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> import com . google . common . collect . Lists ; <nl> + import com . google . common . collect . Maps ; <nl> + import com . google . common . collect . Sets ; <nl> <nl> public class ModelLoader extends ModelBakery <nl> { <nl> @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery <nl> private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; <nl> private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; <nl> + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; <nl> + <nl> + private boolean isLoading = false ; <nl> + public boolean isLoading ( ) <nl> + { <nl> + return isLoading ; <nl> + } <nl> <nl> public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) <nl> { <nl> @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery <nl> @ Override <nl> public IRegistry setupModelRegistry ( ) <nl> { <nl> + isLoading = true ; <nl> loadBlocks ( ) ; <nl> loadItems ( ) ; <nl> stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; <nl> @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery <nl> { <nl> variants = definition . getVariants ( location . getVariant ( ) ) ; <nl> } <nl> - catch ( MissingVariantException e ) { } <nl> - if ( variants = = null ) <nl> + catch ( MissingVariantException e ) <nl> { <nl> - / / adding default variant for simple blocks <nl> - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; <nl> - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; <nl> + missingVariants . add ( location ) ; <nl> } <nl> - if ( ! variants . getVariants ( ) . isEmpty ( ) ) <nl> + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) <nl> { <nl> try <nl> { <nl> stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; <nl> - <nl> } <nl> catch ( Throwable e ) <nl> { <nl> @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery <nl> ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; <nl> resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; <nl> IModel model = getModel ( file ) ; <nl> - if ( model ! = null ) stateModels . put ( memory , model ) ; <nl> + if ( model = = null | | model = = getMissingModel ( ) ) <nl> + { <nl> + missingVariants . add ( memory ) ; <nl> + } <nl> + else stateModels . put ( memory , model ) ; <nl> } <nl> } <nl> } <nl> @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery <nl> } <nl> catch ( IOException e ) <nl> { <nl> - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> + if ( loader . isLoading ) <nl> + { <nl> + / / holding error until onPostBakeEvent <nl> + } <nl> + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; <nl> return loader . getMissingModel ( ) ; <nl> } <nl> } <nl> } <nl> + <nl> + public void onPostBakeEvent ( IRegistry modelRegistry ) <nl> + { <nl> + for ( ModelResourceLocation missing : missingVariants ) <nl> + { <nl> + if ( modelRegistry . getObject ( missing ) = = null ) <nl> + { <nl> + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; <nl> + } <nl> + } <nl> + isLoading = false ; <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) <nl> + { <nl> + customStateMappers . put ( block . delegate , mapper ) ; <nl> + } <nl> + <nl> + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) <nl> + { <nl> + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) <nl> + { <nl> + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + } <nl> + <nl> + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; <nl> + <nl> + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) <nl> + { <nl> + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; <nl> + } <nl> + <nl> + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) <nl> + { <nl> + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; <nl> + } <nl> + <nl> + public static void onRegisterItems ( ItemModelMesher mesher ) <nl> + { <nl> + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; <nl> + } <nl> + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) <nl> + { <nl> + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> index c8de9a4 . . 96f9aa5 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java <nl> @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; <nl> import net . minecraft . block . state . BlockState ; <nl> import net . minecraft . block . state . IBlockState ; <nl> import net . minecraft . client . Minecraft ; <nl> - import net . minecraft . client . renderer . ItemMeshDefinition ; <nl> import net . minecraft . client . renderer . block . model . BakedQuad ; <nl> import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; <nl> - import net . minecraft . client . renderer . entity . RenderItem ; <nl> + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; <nl> import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> import net . minecraft . client . resources . model . IBakedModel ; <nl> import net . minecraft . client . resources . model . ModelResourceLocation ; <nl> @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; <nl> import net . minecraftforge . client . event . ModelBakeEvent ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> import net . minecraftforge . common . property . IExtendedBlockState ; <nl> @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . Mod . EventHandler ; <nl> import net . minecraftforge . fml . common . SidedProxy ; <nl> - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> import net . minecraftforge . fml . common . registry . GameRegistry ; <nl> <nl> @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug <nl> public static CommonProxy proxy ; <nl> <nl> @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } <nl> - <nl> - @ EventHandler <nl> - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> <nl> public static class CommonProxy <nl> { <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; <nl> } <nl> - <nl> - public void postInit ( FMLPostInitializationEvent event ) { } <nl> } <nl> <nl> public static class ClientProxy extends CommonProxy <nl> { <nl> - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; <nl> + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; <nl> + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; <nl> <nl> @ Override <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> - super . init ( event ) ; <nl> - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> - } <nl> - <nl> - @ Override <nl> - public void postInit ( FMLPostInitializationEvent event ) { <nl> - super . postInit ( event ) ; <nl> + super . preInit ( event ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; <nl> - if ( renderItem ! = null ) <nl> - { <nl> - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { <nl> - public ModelResourceLocation getModelLocation ( ItemStack stack ) <nl> - { <nl> - return modelLocation ; <nl> - } <nl> - } ) ; <nl> - } <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; <nl> + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { <nl> + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) <nl> + { <nl> + return blockLocation ; <nl> + } <nl> + } ) ; <nl> + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; <nl> } <nl> } <nl> <nl> @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug <nl> { <nl> TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; <nl> TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; <nl> - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; <nl> + IBakedModel customModel = new CustomModel ( base , overlay ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; <nl> + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 8a8ecd6 . . b0d0878 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . ModelLoader ; <nl> import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> import net . minecraftforge . client . model . b3d . B3DLoader ; <nl> import net . minecraftforge . common . property . ExtendedBlockState ; <nl> @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; <nl> / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; <nl> - } <nl> - <nl> - @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> - { <nl> + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index c2352ff . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 4 + 0 , 0 @ @ <nl> - { <nl> - " variants " : { <nl> - } <nl> - } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> deleted file mode 100644 <nl> index 43a272a . . 0000000 <nl> - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json <nl> + + + / dev / null <nl> @ @ - 1 , 3 + 0 , 0 @ @ <nl> - { <nl> - " parent " : " builtin / entity " <nl> - }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java b / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 deleted file mode 100644 
 index 2781168 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / AnimationTESR . java 
 + + + / dev / null 
 @ @ - 1 , 92 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2018 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . client . model . animation ; 
 - 
 - import net . minecraft . block . state . IBlockState ; 
 - import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . BlockRendererDispatcher ; 
 - import net . minecraft . client . renderer . BufferBuilder ; 
 - import net . minecraft . client . renderer . block . model . IBakedModel ; 
 - import net . minecraft . tileentity . TileEntity ; 
 - import net . minecraft . util . math . BlockPos ; 
 - import net . minecraft . world . IWorldReader ; 
 - import net . minecraftforge . client . MinecraftForgeClient ; 
 - import net . minecraftforge . common . animation . Event ; 
 - import net . minecraftforge . common . animation . IEventHandler ; 
 - import net . minecraftforge . common . capabilities . OptionalCapabilityInstance ; 
 - import net . minecraftforge . common . model . IModelState ; 
 - import net . minecraftforge . common . model . animation . CapabilityAnimation ; 
 - import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 - import net . minecraftforge . common . property . IExtendedBlockState ; 
 - import net . minecraftforge . common . property . Properties ; 
 - 
 - import java . util . Random ; 
 - 
 - import org . apache . commons . lang3 . tuple . Pair ; 
 - 
 - / * * 
 - * Generic TileEntitySpecialRenderer that works with the Forge model system and animations . 
 - * / 
 - public class AnimationTESR < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > 
 - { 
 - protected static BlockRendererDispatcher blockRenderer ; 
 - 
 - @ Override 
 - public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , BufferBuilder renderer ) 
 - { 
 - OptionalCapabilityInstance < IAnimationStateMachine > cap = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY ) ; 
 - if ( ! cap . isPresent ( ) ) 
 - { 
 - return ; 
 - } 
 - if ( blockRenderer = = null ) blockRenderer = Minecraft . getInstance ( ) . getBlockRendererDispatcher ( ) ; 
 - BlockPos pos = te . getPos ( ) ; 
 - IWorldReader world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; 
 - IBlockState state = world . getBlockState ( pos ) ; 
 - if ( state . getBlock ( ) . getStateContainer ( ) . getProperties ( ) . contains ( Properties . StaticProperty ) ) 
 - { 
 - state = state . with ( Properties . StaticProperty , false ) ; 
 - } 
 - if ( state instanceof IExtendedBlockState ) 
 - { 
 - IExtendedBlockState exState = ( IExtendedBlockState ) state ; 
 - if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) 
 - { 
 - float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; 
 - cap 
 - . map ( asm - > asm . apply ( time ) ) 
 - . ifPresent ( pair - > { 
 - handleEvents ( te , time , pair . getRight ( ) ) ; 
 - 
 - / / TODO : caching ? 
 - IBakedModel model = blockRenderer . getBlockModelShapes ( ) . getModel ( exState . getClean ( ) ) ; 
 - IExtendedBlockState animState = ( IExtendedBlockState ) exState . withProperty ( Properties . AnimationProperty , pair . getLeft ( ) ) ; 
 - 
 - renderer . setTranslation ( x - pos . getX ( ) , y - pos . getY ( ) , z - pos . getZ ( ) ) ; 
 - 
 - blockRenderer . getBlockModelRenderer ( ) . renderModel ( world , model , animState , pos , renderer , false , new Random ( ) , 42 ) ; 
 - } ) ; 
 - } 
 - } 
 - } 
 - 
 - @ Override 
 - public void handleEvents ( T te , float time , Iterable < Event > pastEvents ) { } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java 
 new file mode 100644 
 index 0000000 . . 21b6942 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererAnimation . java 
 @ @ - 0 , 0 + 1 , 90 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . client . model . animation ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . BlockRendererDispatcher ; 
 + import net . minecraft . client . renderer . BufferBuilder ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . world . IWorldReader ; 
 + import net . minecraftforge . client . MinecraftForgeClient ; 
 + import net . minecraftforge . common . animation . Event ; 
 + import net . minecraftforge . common . animation . IEventHandler ; 
 + import net . minecraftforge . common . capabilities . OptionalCapabilityInstance ; 
 + import net . minecraftforge . common . model . animation . CapabilityAnimation ; 
 + import net . minecraftforge . common . model . animation . IAnimationStateMachine ; 
 + import net . minecraftforge . common . property . IExtendedBlockState ; 
 + import net . minecraftforge . common . property . Properties ; 
 + 
 + import java . util . Random ; 
 + 
 + / * * 
 + * Generic { @ link TileEntityRenderer } that works with the Forge model system and animations . 
 + * / 
 + public class TileEntityRendererAnimation < T extends TileEntity > extends TileEntityRendererFast < T > implements IEventHandler < T > 
 + { 
 + protected static BlockRendererDispatcher blockRenderer ; 
 + 
 + @ Override 
 + public void renderTileEntityFast ( T te , double x , double y , double z , float partialTick , int breakStage , BufferBuilder renderer ) 
 + { 
 + OptionalCapabilityInstance < IAnimationStateMachine > cap = te . getCapability ( CapabilityAnimation . ANIMATION _ CAPABILITY ) ; 
 + if ( ! cap . isPresent ( ) ) 
 + { 
 + return ; 
 + } 
 + if ( blockRenderer = = null ) blockRenderer = Minecraft . getInstance ( ) . getBlockRendererDispatcher ( ) ; 
 + BlockPos pos = te . getPos ( ) ; 
 + IWorldReader world = MinecraftForgeClient . getRegionRenderCache ( te . getWorld ( ) , pos ) ; 
 + IBlockState state = world . getBlockState ( pos ) ; 
 + if ( state . getBlock ( ) . getStateContainer ( ) . getProperties ( ) . contains ( Properties . StaticProperty ) ) 
 + { 
 + state = state . with ( Properties . StaticProperty , false ) ; 
 + } 
 + if ( state instanceof IExtendedBlockState ) 
 + { 
 + IExtendedBlockState exState = ( IExtendedBlockState ) state ; 
 + if ( exState . getUnlistedNames ( ) . contains ( Properties . AnimationProperty ) ) 
 + { 
 + float time = Animation . getWorldTime ( getWorld ( ) , partialTick ) ; 
 + cap 
 + . map ( asm - > asm . apply ( time ) ) 
 + . ifPresent ( pair - > { 
 + handleEvents ( te , time , pair . getRight ( ) ) ; 
 + 
 + / / TODO : caching ? 
 + IBakedModel model = blockRenderer . getBlockModelShapes ( ) . getModel ( exState . getClean ( ) ) ; 
 + IExtendedBlockState animState = ( IExtendedBlockState ) exState . withProperty ( Properties . AnimationProperty , pair . getLeft ( ) ) ; 
 + 
 + renderer . setTranslation ( x - pos . getX ( ) , y - pos . getY ( ) , z - pos . getZ ( ) ) ; 
 + 
 + blockRenderer . getBlockModelRenderer ( ) . renderModel ( world , model , animState , pos , renderer , false , new Random ( ) , 42 ) ; 
 + } ) ; 
 + } 
 + } 
 + } 
 + 
 + @ Override 
 + public void handleEvents ( T te , float time , Iterable < Event > pastEvents ) { } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java 
 index 1d4d78b . . a318e2a 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java 
 + + + b / src / main / java / net / minecraftforge / client / model / animation / TileEntityRendererFast . java 
 @ @ - 29 , 8 + 29 , 29 @ @ import net . minecraft . client . renderer . BufferBuilder ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 import net . minecraft . client . renderer . tileentity . TileEntityRenderer ; 
 import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 + import net . minecraft . client . renderer . vertex . VertexFormat ; 
 import net . minecraft . tileentity . TileEntity ; 
 
 + / * * 
 + * A special case { @ link TileEntityRenderer } which can be batched with other 
 + * renderers that are also instances of this class . 
 + * < p > 
 + * Advantages : 
 + * < ul > 
 + * < li > All batched renderers are drawn with a single draw call < / li > 
 + * < li > Renderers have their vertices depth sorted for better translucency 
 + * support < / li > 
 + * < / ul > 
 + * < p > 
 + * Disadvantages : 
 + * < ul > 
 + * < li > OpenGL operations are not permitted < / li > 
 + * < li > All renderers must use the same { @ link VertexFormat } 
 + * ( { @ link DefaultVertexFormats # BLOCK } ) < / li > 
 + * < / ul > 
 + * 
 + * @ param < T > The type of { @ link TileEntity } being rendered . 
 + * / 
 public abstract class TileEntityRendererFast < T extends TileEntity > extends TileEntityRenderer < T > 
 { 
 @ Override 
 @ @ - 63 , 6 + 84 , 11 @ @ public abstract class TileEntityRendererFast < T extends TileEntity > extends TileE 
 RenderHelper . enableStandardItemLighting ( ) ; 
 } 
 
 + / * * 
 + * Draw this renderer to the passed { @ link BufferBuilder } . < strong > DO 
 + * NOT < / strong > draw to any buffers other than the one passed , or use any OpenGL 
 + * operations as they will not be applied when this renderer is batched . 
 + * / 
 @ Override 
 public abstract void renderTileEntityFast ( T te , double x , double y , double z , float partialTicks , int destroyStage , BufferBuilder buffer ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 index 32f8667 . . 0fbdb5e 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 @ @ - 19 , 6 + 19 , 7 @ @ import net . minecraft . world . gen . layer . GenLayerZoom ; 
 import net . minecraft . world . gen . layer . LayerUtil ; 
 import net . minecraftforge . api . distmarker . Dist ; 
 import net . minecraftforge . api . distmarker . OnlyIn ; 
 + import net . minecraftforge . fml . client . config . IArrayEntry ; 
 
 public interface IForgeWorldType 
 { 
 @ @ - 81 , 17 + 82 , 19 @ @ public interface IForgeWorldType 
 } 
 
 / * * 
 - * Creates the GenLayerBiome used for generating the world with the specified 
 - * ChunkProviderSettings JSON String * IF AND ONLY IF * this WorldType = = 
 - * WorldType . CUSTOMIZED . 
 + * Allows modifying the { @ link IAreaFactory } used for this type ' s biome 
 + * generation . 
 * 
 - * 
 - * @ param worldSeed The world seed 
 - * @ param parentLayer The parent layer to feed into any layer you return 
 - * @ param chunkSettings The ChunkGeneratorSettings constructed from the custom 
 - * JSON 
 - * @ return A GenLayer that will return ints representing the Biomes to be 
 - * generated , see GenLayerBiome 
 + * @ param < T > The type of { @ link IArea } . 
 + * @ param < C > The type of { @ link IContextExtended } . 
 + * 
 + * @ param parentLayer The parent layer to feed into any layer you return 
 + * @ param chunkSettings The { @ link OverworldGenSettings } used to create the 
 + * { @ link GenLayerBiome } . 
 + * @ param contextFactory A { @ link LongFunction } factory to create contexts of 
 + * the supplied size . 
 + * @ return An { @ link IAreaFactory } that representing the Biomes to be generated . 
 + * @ see { @ link GenLayerBiome } 
 * / 
 default < T extends IArea , C extends IContextExtended < T > > IAreaFactory < T > getBiomeLayer ( IAreaFactory < T > parentLayer , 
 OverworldGenSettings chunkSettings , LongFunction < C > contextFactory )

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 new file mode 100644 
 index 0000000 . . ae731a3 
 - - - / dev / null 
 + + + b / patches / minecraft / net / minecraft / client / renderer / BlockModelShapes . java . patch 
 @ @ - 0 , 0 + 1 , 10 @ @ 
 + - - - . . / src - base / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + + + + . . / src - work / minecraft / net / minecraft / client / renderer / BlockModelShapes . java 
 + @ @ - 321 , 6 + 321 , 7 @ @ 
 + return new ModelResourceLocation ( s + " _ double _ slab " , s1 ) ; 
 + } 
 + } ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterAllBlocks ( this ) ; 
 + } 
 + 
 + @ SideOnly ( Side . CLIENT ) 
 diff - - git a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 index 48162e1 . . 498fc5d 100644 
 - - - a / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / renderer / entity / RenderItem . java . patch 
 @ @ - 81 , 7 + 81 , 14 @ @ 
 GlStateManager . func _ 179141 _ d ( ) ; 
 GlStateManager . func _ 179098 _ w ( ) ; 
 GlStateManager . func _ 179145 _ e ( ) ; 
 - @ @ - 1078 , 6 + 1072 , 19 @ @ 
 + @ @ - 1072 , 12 + 1066 , 26 @ @ 
 + this . func _ 175029 _ a ( Blocks . field _ 150420 _ aW , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " brown _ mushroom _ block " ) ; 
 + this . func _ 175029 _ a ( Blocks . field _ 150419 _ aX , BlockHugeMushroom . EnumType . ALL _ INSIDE . func _ 176896 _ a ( ) , " red _ mushroom _ block " ) ; 
 + this . func _ 175031 _ a ( Blocks . field _ 150380 _ bt , " dragon _ egg " ) ; 
 + + net . minecraftforge . client . model . ModelLoader . onRegisterItems ( this . field _ 175059 _ m ) ; 
 + } 
 + 
 + public void func _ 110549 _ a ( IResourceManager p _ 110549 _ 1 _ ) 
 { 
 this . field _ 175059 _ m . func _ 178085 _ b ( ) ; 
 } 
 diff - - git a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 index 0c6385f . . 8364265 100644 
 - - - a / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / resources / model / ModelBakery . java . patch 
 @ @ - 9 , 7 + 9 , 15 @ @ 
 } 
 } 
 catch ( Exception exception1 ) 
 - @ @ - 499 , 6 + 499 , 11 @ @ 
 + @ @ - 172 , 6 + 172 , 7 @ @ 
 + } 
 + } 
 + } 
 + + catch ( FileNotFoundException e ) { } 
 + catch ( IOException ioexception ) 
 + { 
 + throw new RuntimeException ( " Encountered an exception when loading model definition of model " + resourcelocation1 . toString ( ) , ioexception ) ; 
 + @ @ - 499 , 6 + 500 , 11 @ @ 
 
 private IBakedModel func _ 177578 _ a ( ModelBlock p _ 177578 _ 1 _ , ModelRotation p _ 177578 _ 2 _ , boolean p _ 177578 _ 3 _ ) 
 { 
 @ @ - 21 , 7 + 29 , 7 @ @ 
 TextureAtlasSprite textureatlassprite = ( TextureAtlasSprite ) this . field _ 177599 _ g . get ( new ResourceLocation ( p _ 177578 _ 1 _ . func _ 178308 _ c ( " particle " ) ) ) ; 
 SimpleBakedModel . Builder builder = ( new SimpleBakedModel . Builder ( p _ 177578 _ 1 _ ) ) . func _ 177646 _ a ( textureatlassprite ) ; 
 Iterator iterator = p _ 177578 _ 1 _ . func _ 178298 _ a ( ) . iterator ( ) ; 
 - @ @ - 516 , 11 + 521 , 11 @ @ 
 + @ @ - 516 , 11 + 522 , 11 @ @ 
 
 if ( blockpartface . field _ 178244 _ b = = null ) 
 { 
 @ @ - 35 , 7 + 43 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 530 , 9 + 535 , 14 @ @ 
 + @ @ - 530 , 9 + 536 , 14 @ @ 
 
 private BakedQuad func _ 177589 _ a ( BlockPart p _ 177589 _ 1 _ , BlockPartFace p _ 177589 _ 2 _ , TextureAtlasSprite p _ 177589 _ 3 _ , EnumFacing p _ 177589 _ 4 _ , ModelRotation p _ 177589 _ 5 _ , boolean p _ 177589 _ 6 _ ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 index f93959c . . 2407f52 100644 
 - - - a / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 + + + b / src / main / java / net / minecraftforge / client / ForgeHooksClient . java 
 @ @ - 59 , 6 + 59 , 7 @ @ import net . minecraftforge . client . event . RenderWorldLastEvent ; 
 import net . minecraftforge . client . event . TextureStitchEvent ; 
 import net . minecraftforge . client . event . sound . PlaySoundEvent ; 
 import net . minecraftforge . client . model . IPerspectiveAwareModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . ForgeModContainer ; 
 import net . minecraftforge . common . ForgeVersion ; 
 import net . minecraftforge . common . ForgeVersion . Status ; 
 @ @ - 487 , 7 + 488 , 9 @ @ public class ForgeHooksClient 
 
 public static void onModelBake ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 { 
 - MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , modelBakery ) ) ; 
 + ModelLoader loader = ( ModelLoader ) modelBakery ; 
 + MinecraftForge . EVENT _ BUS . post ( new ModelBakeEvent ( modelManager , modelRegistry , loader ) ) ; 
 + loader . onPostBakeEvent ( modelRegistry ) ; 
 } 
 
 public static Matrix4f getMatrix ( ItemTransformVec3f transform ) 
 diff - - git a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 index 502454f . . 3c124d8 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / ModelBakeEvent . java 
 @ @ - 1 , 9 + 1 , 9 @ @ 
 package net . minecraftforge . client . event ; 
 
 - import net . minecraftforge . fml . common . eventhandler . Event ; 
 - import net . minecraft . client . resources . model . ModelBakery ; 
 import net . minecraft . client . resources . model . ModelManager ; 
 import net . minecraft . util . IRegistry ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 
 / * * 
 * Fired when the ModelManager is notified of the resource manager reloading . 
 @ @ - 13 , 12 + 13 , 12 @ @ public class ModelBakeEvent extends Event 
 { 
 public final ModelManager modelManager ; 
 public final IRegistry modelRegistry ; 
 - public final ModelBakery modelBakery ; 
 + public final ModelLoader modelLoader ; 
 
 - public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelBakery modelBakery ) 
 + public ModelBakeEvent ( ModelManager modelManager , IRegistry modelRegistry , ModelLoader modelLoader ) 
 { 
 this . modelManager = modelManager ; 
 this . modelRegistry = modelRegistry ; 
 - this . modelBakery = modelBakery ; 
 + this . modelLoader = modelLoader ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index 8942995 . . 91ea08d 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 11 , 8 + 11 , 11 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . Set ; 
 
 + import net . minecraft . block . Block ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . renderer . BlockModelShapes ; 
 + import net . minecraft . client . renderer . ItemMeshDefinition ; 
 + import net . minecraft . client . renderer . ItemModelMesher ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 import net . minecraft . client . renderer . block . model . ItemModelGenerator ; 
 import net . minecraft . client . renderer . block . model . ModelBlock ; 
 @ @ - 20 , 6 + 23 , 7 @ @ import net . minecraft . client . renderer . block . model . ModelBlockDefinition ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . MissingVariantException ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variant ; 
 import net . minecraft . client . renderer . block . model . ModelBlockDefinition . Variants ; 
 + import net . minecraft . client . renderer . block . statemap . IStateMapper ; 
 import net . minecraft . client . renderer . texture . IIconCreator ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . renderer . texture . TextureMap ; 
 @ @ - 35 , 7 + 39 , 9 @ @ import net . minecraft . util . IRegistry ; 
 import net . minecraft . util . ResourceLocation ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . registry . GameData ; 
 + import net . minecraftforge . fml . common . registry . RegistryDelegate ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 @ @ - 44 , 6 + 50 , 8 @ @ import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 import com . google . common . collect . Lists ; 
 + import com . google . common . collect . Maps ; 
 + import com . google . common . collect . Sets ; 
 
 public class ModelLoader extends ModelBakery 
 { 
 @ @ - 51 , 6 + 59 , 13 @ @ public class ModelLoader extends ModelBakery 
 private final Set < ResourceLocation > resolveTextures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > textures = new HashSet < ResourceLocation > ( ) ; 
 private final Set < ResourceLocation > loadingModels = new HashSet < ResourceLocation > ( ) ; 
 + private final Set < ModelResourceLocation > missingVariants = Sets . newHashSet ( ) ; 
 + 
 + private boolean isLoading = false ; 
 + public boolean isLoading ( ) 
 + { 
 + return isLoading ; 
 + } 
 
 public ModelLoader ( IResourceManager manager , TextureMap map , BlockModelShapes shapes ) 
 { 
 @ @ - 62 , 6 + 77 , 7 @ @ public class ModelLoader extends ModelBakery 
 @ Override 
 public IRegistry setupModelRegistry ( ) 
 { 
 + isLoading = true ; 
 loadBlocks ( ) ; 
 loadItems ( ) ; 
 stateModels . put ( MODEL _ MISSING , getModel ( new ResourceLocation ( MODEL _ MISSING . getResourceDomain ( ) , MODEL _ MISSING . getResourcePath ( ) ) ) ) ; 
 @ @ - 103 , 19 + 119 , 15 @ @ public class ModelLoader extends ModelBakery 
 { 
 variants = definition . getVariants ( location . getVariant ( ) ) ; 
 } 
 - catch ( MissingVariantException e ) { } 
 - if ( variants = = null ) 
 + catch ( MissingVariantException e ) 
 { 
 - / / adding default variant for simple blocks 
 - ResourceLocation loc = new ResourceLocation ( location . getResourceDomain ( ) , " block / " + location . getResourcePath ( ) ) ; 
 - variants = new Variants ( " normal " , Lists . newArrayList ( new Variant ( loc , ModelRotation . X0 _ Y0 , false , 1 ) ) ) ; 
 + missingVariants . add ( location ) ; 
 } 
 - if ( ! variants . getVariants ( ) . isEmpty ( ) ) 
 + if ( variants ! = null & & ! variants . getVariants ( ) . isEmpty ( ) ) 
 { 
 try 
 { 
 stateModels . put ( location , new WeightedRandomModel ( variants ) ) ; 
 - 
 } 
 catch ( Throwable e ) 
 { 
 @ @ - 135 , 7 + 147 , 11 @ @ public class ModelLoader extends ModelBakery 
 ModelResourceLocation memory = new ModelResourceLocation ( s , " inventory " ) ; 
 resolveTextures . add ( ModelLoaderRegistry . getActualLocation ( file ) ) ; 
 IModel model = getModel ( file ) ; 
 - if ( model ! = null ) stateModels . put ( memory , model ) ; 
 + if ( model = = null | | model = = getMissingModel ( ) ) 
 + { 
 + missingVariants . add ( memory ) ; 
 + } 
 + else stateModels . put ( memory , model ) ; 
 } 
 } 
 } 
 @ @ - 415 , 9 + 431 , 65 @ @ public class ModelLoader extends ModelBakery 
 } 
 catch ( IOException e ) 
 { 
 - FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 + if ( loader . isLoading ) 
 + { 
 + / / holding error until onPostBakeEvent 
 + } 
 + else FMLLog . log ( Level . ERROR , e , " Exception loading model % s with vanilla loader , skipping " , modelLocation ) ; 
 return loader . getMissingModel ( ) ; 
 } 
 } 
 } 
 + 
 + public void onPostBakeEvent ( IRegistry modelRegistry ) 
 + { 
 + for ( ModelResourceLocation missing : missingVariants ) 
 + { 
 + if ( modelRegistry . getObject ( missing ) = = null ) 
 + { 
 + FMLLog . severe ( " Model definition for location % s not found " , missing ) ; 
 + } 
 + } 
 + isLoading = false ; 
 + } 
 + 
 + private static final Map < RegistryDelegate < Block > , IStateMapper > customStateMappers = Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomStateMapper ( Block block , IStateMapper mapper ) 
 + { 
 + customStateMappers . put ( block . delegate , mapper ) ; 
 + } 
 + 
 + public static void onRegisterAllBlocks ( BlockModelShapes shapes ) 
 + { 
 + for ( Entry < RegistryDelegate < Block > , IStateMapper > e : customStateMappers . entrySet ( ) ) 
 + { 
 + shapes . registerBlockWithStateMapper ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + } 
 + 
 + private static final Map < RegistryDelegate < Item > , ItemMeshDefinition > customMeshDefinitions = com . google . common . collect . Maps . newHashMap ( ) ; 
 + private static final Map < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > customModels = com . google . common . collect . Maps . newHashMap ( ) ; 
 + 
 + public static void setCustomModelResourceLocation ( Item item , int metadata , ModelResourceLocation model ) 
 + { 
 + customModels . put ( item . delegate , Pair . of ( metadata , model ) ) ; 
 + } 
 + 
 + public static void setCustomMeshDefinition ( Item item , ItemMeshDefinition meshDefinition ) 
 + { 
 + customMeshDefinitions . put ( item . delegate , meshDefinition ) ; 
 + } 
 + 
 + public static void onRegisterItems ( ItemModelMesher mesher ) 
 + { 
 + for ( Map . Entry < RegistryDelegate < Item > , ItemMeshDefinition > e : customMeshDefinitions . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) ) ; 
 + } 
 + for ( Entry < RegistryDelegate < Item > , Pair < Integer , ModelResourceLocation > > e : customModels . entrySet ( ) ) 
 + { 
 + mesher . register ( e . getKey ( ) . get ( ) , e . getValue ( ) . getLeft ( ) , e . getValue ( ) . getRight ( ) ) ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 index c8de9a4 . . 96f9aa5 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelBakeEventDebug . java 
 @ @ - 11 , 10 + 11 , 9 @ @ import net . minecraft . block . properties . PropertyInteger ; 
 import net . minecraft . block . state . BlockState ; 
 import net . minecraft . block . state . IBlockState ; 
 import net . minecraft . client . Minecraft ; 
 - import net . minecraft . client . renderer . ItemMeshDefinition ; 
 import net . minecraft . client . renderer . block . model . BakedQuad ; 
 import net . minecraft . client . renderer . block . model . ItemCameraTransforms ; 
 - import net . minecraft . client . renderer . entity . RenderItem ; 
 + import net . minecraft . client . renderer . block . statemap . StateMapperBase ; 
 import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 import net . minecraft . client . resources . model . IBakedModel ; 
 import net . minecraft . client . resources . model . ModelResourceLocation ; 
 @ @ - 31 , 6 + 30 , 7 @ @ import net . minecraft . world . World ; 
 import net . minecraftforge . client . event . ModelBakeEvent ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 import net . minecraftforge . common . property . IExtendedBlockState ; 
 @ @ - 39 , 8 + 39 , 7 @ @ import net . minecraftforge . common . property . Properties ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . Mod . EventHandler ; 
 import net . minecraftforge . fml . common . SidedProxy ; 
 - import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 - import net . minecraftforge . fml . common . event . FMLPostInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLPreInitializationEvent ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 import net . minecraftforge . fml . common . registry . GameRegistry ; 
 
 @ @ - 69 , 47 + 68 , 35 @ @ public class ModelBakeEventDebug 
 public static CommonProxy proxy ; 
 
 @ EventHandler 
 - public void init ( FMLInitializationEvent event ) { proxy . init ( event ) ; } 
 - 
 - @ EventHandler 
 - public void postInit ( FMLPostInitializationEvent event ) { proxy . postInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 
 public static class CommonProxy 
 { 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 GameRegistry . registerTileEntity ( CustomTileEntity . class , MODID . toLowerCase ( ) + " : custom _ tile _ entity " ) ; 
 } 
 - 
 - public void postInit ( FMLPostInitializationEvent event ) { } 
 } 
 
 public static class ClientProxy extends CommonProxy 
 { 
 - private static ModelResourceLocation modelLocation = new ModelResourceLocation ( blockName , null ) ; 
 + private static ModelResourceLocation blockLocation = new ModelResourceLocation ( blockName , " normal " ) ; 
 + private static ModelResourceLocation itemLocation = new ModelResourceLocation ( blockName , " inventory " ) ; 
 
 @ Override 
 - public void init ( FMLInitializationEvent event ) 
 + public void preInit ( FMLPreInitializationEvent event ) 
 { 
 - super . init ( event ) ; 
 - MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 - } 
 - 
 - @ Override 
 - public void postInit ( FMLPostInitializationEvent event ) { 
 - super . postInit ( event ) ; 
 + super . preInit ( event ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - RenderItem renderItem = Minecraft . getMinecraft ( ) . getRenderItem ( ) ; 
 - if ( renderItem ! = null ) 
 - { 
 - renderItem . getItemModelMesher ( ) . register ( item , new ItemMeshDefinition ( ) { 
 - public ModelResourceLocation getModelLocation ( ItemStack stack ) 
 - { 
 - return modelLocation ; 
 - } 
 - } ) ; 
 - } 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , itemLocation ) ; 
 + ModelLoader . setCustomStateMapper ( CustomModelBlock . instance , new StateMapperBase ( ) { 
 + protected ModelResourceLocation getModelResourceLocation ( IBlockState p _ 178132 _ 1 _ ) 
 + { 
 + return blockLocation ; 
 + } 
 + } ) ; 
 + MinecraftForge . EVENT _ BUS . register ( BakeEventHandler . instance ) ; 
 } 
 } 
 
 @ @ - 124 , 7 + 111 , 9 @ @ public class ModelBakeEventDebug 
 { 
 TextureAtlasSprite base = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / slime " ) ; 
 TextureAtlasSprite overlay = Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( " minecraft : blocks / redstone _ block " ) ; 
 - event . modelRegistry . putObject ( ClientProxy . modelLocation , new CustomModel ( base , overlay ) ) ; 
 + IBakedModel customModel = new CustomModel ( base , overlay ) ; 
 + event . modelRegistry . putObject ( ClientProxy . blockLocation , customModel ) ; 
 + event . modelRegistry . putObject ( ClientProxy . itemLocation , customModel ) ; 
 } 
 } 
 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 8a8ecd6 . . b0d0878 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 31 , 6 + 31 , 7 @ @ import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . ModelLoader ; 
 import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 import net . minecraftforge . client . model . b3d . B3DLoader ; 
 import net . minecraftforge . common . property . ExtendedBlockState ; 
 @ @ - 58 , 15 + 59 , 11 @ @ public class ModelLoaderRegistryDebug 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 GameRegistry . registerBlock ( CustomModelBlock . instance , CustomModelBlock . name ) ; 
 / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , MODID . toLowerCase ( ) + " : untitled2 . b3d " ) ; 
 - } 
 - 
 - @ EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 - { 
 + String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 + ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - / / Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 - Minecraft . getMinecraft ( ) . getRenderItem ( ) . getItemModelMesher ( ) . register ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : untitled2 . b3d " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 + / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 deleted file mode 100644 
 index c2352ff . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / blockstates / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 4 + 0 , 0 @ @ 
 - { 
 - " variants " : { 
 - } 
 - } 
 diff - - git a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json b / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 deleted file mode 100644 
 index 43a272a . . 0000000 
 - - - a / src / test / resources / assets / forgedebugmodelbakeevent / models / item / custom _ model _ block . json 
 + + + / dev / null 
 @ @ - 1 , 3 + 0 , 0 @ @ 
 - { 
 - " parent " : " builtin / entity " 
 - }
