BLEU SCORE: 0.0416725164513856

TEST MSG: Fix BiomeDictionary not collecting correctly .
GENERATED MSG: Replace listSubtypes with listSupertypes to match the intended behavior .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> index 08ad93e . . d94a727 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> @ @ - 20 , 6 + 20 , 7 @ @ <nl> package net . minecraftforge . common ; <nl> <nl> import java . util . * ; <nl> + import java . util . stream . Collectors ; <nl> <nl> import javax . annotation . Nonnull ; <nl> <nl> @ @ - 36 , 6 + 37 , 8 @ @ import com . google . common . collect . ImmutableList ; <nl> <nl> public class BiomeDictionary <nl> { <nl> + private static final boolean DEBUG = false ; <nl> + <nl> public static final class Type <nl> { <nl> <nl> @ @ - 173 , 6 + 176 , 7 @ @ public class BiomeDictionary <nl> Preconditions . checkArgument ( ForgeRegistries . BIOMES . containsValue ( biome ) , " Cannot add types to unregistered biome % s " , biome ) ; <nl> <nl> Collection < Type > supertypes = listSupertypes ( types ) ; <nl> + Collections . addAll ( supertypes , types ) ; <nl> <nl> for ( Type type : supertypes ) <nl> { <nl> @ @ - 389 , 7 + 393 , 7 @ @ public class BiomeDictionary <nl> <nl> for ( Type sType : Type . byName . values ( ) ) <nl> { <nl> - if ( type . subTypes . contains ( type ) & & supertypes . add ( sType ) ) <nl> + if ( sType . subTypes . contains ( type ) & & supertypes . add ( sType ) ) <nl> next . add ( sType ) ; <nl> } <nl> } <nl> @ @ - 461 , 5 + 465 , 17 @ @ public class BiomeDictionary <nl> addTypes ( Biomes . MUTATED _ MESA , HOT , DRY , SPARSE , SAVANNA , MOUNTAIN , RARE ) ; <nl> addTypes ( Biomes . MUTATED _ MESA _ ROCK , HOT , DRY , SPARSE , HILLS , RARE ) ; <nl> addTypes ( Biomes . MUTATED _ MESA _ CLEAR _ ROCK , HOT , DRY , SPARSE , SAVANNA , MOUNTAIN , RARE ) ; <nl> + <nl> + <nl> + if ( DEBUG ) <nl> + { <nl> + FMLLog . log . debug ( " BiomeDictionary : " ) ; <nl> + for ( Type type : Type . byName . values ( ) ) <nl> + { <nl> + StringBuilder buf = new StringBuilder ( ) ; <nl> + buf . append ( " " ) . append ( type . name ) . append ( " : " ) . append ( type . biomes . stream ( ) . map ( Biome : : getBiomeName ) . collect ( Collectors . joining ( " , " ) ) ) ; <nl> + FMLLog . log . debug ( buf . toString ( ) ) ; <nl> + } <nl> + } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> index 18e3545 . . deb1014 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java <nl> @ @ - 172 , 14 + 172 , 14 @ @ public class BiomeDictionary <nl> { <nl> Preconditions . checkArgument ( ForgeRegistries . BIOMES . containsValue ( biome ) , " Cannot add types to unregistered biome % s " , biome ) ; <nl> <nl> - List < Type > subTypes = listSubTypes ( types ) ; <nl> + Collection < Type > supertypes = listSupertypes ( types ) ; <nl> <nl> - for ( Type type : subTypes ) <nl> + for ( Type type : supertypes ) <nl> { <nl> type . biomes . add ( biome ) ; <nl> } <nl> <nl> - getBiomeInfo ( biome ) . types . addAll ( subTypes ) ; <nl> + getBiomeInfo ( biome ) . types . addAll ( supertypes ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 212 , 7 + 212 , 7 @ @ public class BiomeDictionary <nl> { <nl> for ( Type type : getTypes ( biomeA ) ) <nl> { <nl> - if ( containsType ( getTypes ( biomeB ) , type ) ) <nl> + if ( getTypes ( biomeB ) . contains ( type ) ) <nl> { <nl> return true ; <nl> } <nl> @ @ - 375 , 35 + 375 , 24 @ @ public class BiomeDictionary <nl> } <nl> } <nl> <nl> - private static boolean containsType ( Set < Type > types , Type type ) <nl> + private static Collection < Type > listSupertypes ( Type . . . types ) <nl> { <nl> - if ( type . hasSubTypes ( ) ) <nl> - { <nl> - return ! Collections . disjoint ( types , type . subTypes ) ; <nl> - } <nl> - else <nl> - { <nl> - return types . contains ( type ) ; <nl> - } <nl> - } <nl> + Set < Type > supertypes = new HashSet < Type > ( ) ; <nl> + Deque < Type > next = new ArrayDeque < Type > ( ) ; <nl> + Collections . addAll ( next , types ) ; <nl> <nl> - private static List < Type > listSubTypes ( Type . . . types ) <nl> - { <nl> - List < Type > subTags = new ArrayList < Type > ( ) ; <nl> - <nl> - for ( Type type : types ) <nl> + while ( ! next . isEmpty ( ) ) <nl> { <nl> - if ( type . hasSubTypes ( ) ) <nl> - { <nl> - subTags . addAll ( type . subTypes ) ; <nl> - } <nl> - else <nl> + Type type = next . remove ( ) ; <nl> + <nl> + for ( Type sType : Type . byName . values ( ) ) <nl> { <nl> - subTags . add ( type ) ; <nl> + if ( type . subTypes . contains ( type ) & & supertypes . add ( sType ) ) <nl> + next . add ( sType ) ; <nl> } <nl> } <nl> <nl> - return subTags ; <nl> + return supertypes ; <nl> } <nl> <nl> private static void registerVanillaBiomes ( )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 index 08ad93e . . d94a727 100644 
 - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 @ @ - 20 , 6 + 20 , 7 @ @ 
 package net . minecraftforge . common ; 
 
 import java . util . * ; 
 + import java . util . stream . Collectors ; 
 
 import javax . annotation . Nonnull ; 
 
 @ @ - 36 , 6 + 37 , 8 @ @ import com . google . common . collect . ImmutableList ; 
 
 public class BiomeDictionary 
 { 
 + private static final boolean DEBUG = false ; 
 + 
 public static final class Type 
 { 
 
 @ @ - 173 , 6 + 176 , 7 @ @ public class BiomeDictionary 
 Preconditions . checkArgument ( ForgeRegistries . BIOMES . containsValue ( biome ) , " Cannot add types to unregistered biome % s " , biome ) ; 
 
 Collection < Type > supertypes = listSupertypes ( types ) ; 
 + Collections . addAll ( supertypes , types ) ; 
 
 for ( Type type : supertypes ) 
 { 
 @ @ - 389 , 7 + 393 , 7 @ @ public class BiomeDictionary 
 
 for ( Type sType : Type . byName . values ( ) ) 
 { 
 - if ( type . subTypes . contains ( type ) & & supertypes . add ( sType ) ) 
 + if ( sType . subTypes . contains ( type ) & & supertypes . add ( sType ) ) 
 next . add ( sType ) ; 
 } 
 } 
 @ @ - 461 , 5 + 465 , 17 @ @ public class BiomeDictionary 
 addTypes ( Biomes . MUTATED _ MESA , HOT , DRY , SPARSE , SAVANNA , MOUNTAIN , RARE ) ; 
 addTypes ( Biomes . MUTATED _ MESA _ ROCK , HOT , DRY , SPARSE , HILLS , RARE ) ; 
 addTypes ( Biomes . MUTATED _ MESA _ CLEAR _ ROCK , HOT , DRY , SPARSE , SAVANNA , MOUNTAIN , RARE ) ; 
 + 
 + 
 + if ( DEBUG ) 
 + { 
 + FMLLog . log . debug ( " BiomeDictionary : " ) ; 
 + for ( Type type : Type . byName . values ( ) ) 
 + { 
 + StringBuilder buf = new StringBuilder ( ) ; 
 + buf . append ( " " ) . append ( type . name ) . append ( " : " ) . append ( type . biomes . stream ( ) . map ( Biome : : getBiomeName ) . collect ( Collectors . joining ( " , " ) ) ) ; 
 + FMLLog . log . debug ( buf . toString ( ) ) ; 
 + } 
 + } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / BiomeDictionary . java b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 index 18e3545 . . deb1014 100644 
 - - - a / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 + + + b / src / main / java / net / minecraftforge / common / BiomeDictionary . java 
 @ @ - 172 , 14 + 172 , 14 @ @ public class BiomeDictionary 
 { 
 Preconditions . checkArgument ( ForgeRegistries . BIOMES . containsValue ( biome ) , " Cannot add types to unregistered biome % s " , biome ) ; 
 
 - List < Type > subTypes = listSubTypes ( types ) ; 
 + Collection < Type > supertypes = listSupertypes ( types ) ; 
 
 - for ( Type type : subTypes ) 
 + for ( Type type : supertypes ) 
 { 
 type . biomes . add ( biome ) ; 
 } 
 
 - getBiomeInfo ( biome ) . types . addAll ( subTypes ) ; 
 + getBiomeInfo ( biome ) . types . addAll ( supertypes ) ; 
 } 
 
 / * * 
 @ @ - 212 , 7 + 212 , 7 @ @ public class BiomeDictionary 
 { 
 for ( Type type : getTypes ( biomeA ) ) 
 { 
 - if ( containsType ( getTypes ( biomeB ) , type ) ) 
 + if ( getTypes ( biomeB ) . contains ( type ) ) 
 { 
 return true ; 
 } 
 @ @ - 375 , 35 + 375 , 24 @ @ public class BiomeDictionary 
 } 
 } 
 
 - private static boolean containsType ( Set < Type > types , Type type ) 
 + private static Collection < Type > listSupertypes ( Type . . . types ) 
 { 
 - if ( type . hasSubTypes ( ) ) 
 - { 
 - return ! Collections . disjoint ( types , type . subTypes ) ; 
 - } 
 - else 
 - { 
 - return types . contains ( type ) ; 
 - } 
 - } 
 + Set < Type > supertypes = new HashSet < Type > ( ) ; 
 + Deque < Type > next = new ArrayDeque < Type > ( ) ; 
 + Collections . addAll ( next , types ) ; 
 
 - private static List < Type > listSubTypes ( Type . . . types ) 
 - { 
 - List < Type > subTags = new ArrayList < Type > ( ) ; 
 - 
 - for ( Type type : types ) 
 + while ( ! next . isEmpty ( ) ) 
 { 
 - if ( type . hasSubTypes ( ) ) 
 - { 
 - subTags . addAll ( type . subTypes ) ; 
 - } 
 - else 
 + Type type = next . remove ( ) ; 
 + 
 + for ( Type sType : Type . byName . values ( ) ) 
 { 
 - subTags . add ( type ) ; 
 + if ( type . subTypes . contains ( type ) & & supertypes . add ( sType ) ) 
 + next . add ( sType ) ; 
 } 
 } 
 
 - return subTags ; 
 + return supertypes ; 
 } 
 
 private static void registerVanillaBiomes ( )
