BLEU SCORE: 0.04799810699119213

TEST MSG: Tidy up some more todos
GENERATED MSG: Fix up persistent substitution . Should close # 2259

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java b / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java <nl> index 8901a27 . . 6184e73 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java <nl> @ @ - 109 , 7 + 109 , 9 @ @ public interface IModGuiFactory { <nl> * <nl> * @ author cpw <nl> * <nl> + * TODO remove in 1 . 11 - this was never fully implemented and will be removed <nl> * / <nl> + @ Deprecated <nl> public interface RuntimeOptionGuiHandler { <nl> / * * <nl> * Called to add widgets to the screen , such as buttons . <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> index 796b397 . . 8339db7 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java <nl> @ @ - 69 , 6 + 69 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import org . apache . logging . log4j . Level ; <nl> <nl> + / / TODO build test suites to validate the behaviour of this stuff and make it less annoyingly magical <nl> public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet < ? > > implements ChannelOutboundHandler { <nl> private static boolean DEBUG _ HANDSHAKE = Boolean . parseBoolean ( System . getProperty ( " fml . debugNetworkHandshake " , " false " ) ) ; <nl> private static enum ConnectionState { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 1f5670a . . e38e6e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 364 , 7 + 364 , 7 @ @ public class PersistentRegistryManager <nl> newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; <nl> } <nl> <nl> - / / TODO : Remove when we don ' t care about loading 1 . 7 . 10 ( ? ) worlds ? <nl> + / / TODO : Remove in 1 . 11 when we don ' t care about loading 1 . 8 worlds and below <nl> private static ResourceLocation getFixedName ( ResourceLocation registryName ) <nl> { <nl> / / Translate old names <nl> diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java b / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java <nl> index de8fbfd . . f2016ba 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java <nl> + + + b / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java <nl> @ @ - 57 , 7 + 57 , 8 @ @ public interface IFMLLoadingPlugin <nl> * main thread , to perform any additional setup this coremod may require . It will be <nl> * run < strong > prior < / strong > to Minecraft starting , so it CANNOT operate on minecraft <nl> * itself . The game will deliberately crash if this code is detected to trigger a <nl> - * minecraft class loading ( TODO : implement crash ; ) ) <nl> + * minecraft class loading <nl> + * TODO : implement crash ; ) <nl> * / <nl> String getSetupClass ( ) ; <nl>
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> index 073f07a . . 0789301 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java <nl> @ @ - 160 , 6 + 160 , 8 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> this . minId = otherRegistry . minId ; <nl> this . aliases . clear ( ) ; <nl> this . aliases . putAll ( otherRegistry . aliases ) ; <nl> + this . persistentSubstitutions . clear ( ) ; <nl> + this . persistentSubstitutions . putAll ( otherRegistry . getPersistentSubstitutions ( ) ) ; <nl> this . activeSubstitutions . clear ( ) ; <nl> <nl> underlyingIntegerMap = new ObjectIntIdentityMap < I > ( ) ; <nl> @ @ - 599 , 7 + 601 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul <nl> getPersistentSubstitutions ( ) . put ( nameToReplace , replacement ) ; <nl> } <nl> <nl> - private BiMap < ResourceLocation , I > getPersistentSubstitutions ( ) <nl> + BiMap < ResourceLocation , I > getPersistentSubstitutions ( ) <nl> { <nl> return persistentSubstitutions ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> index 8833d69 . . e094bd6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java <nl> @ @ - 185 , 7 + 185 , 7 @ @ public class GameData <nl> <nl> void registerSubstitutionAlias ( String name , GameRegistry . Type type , Object toReplace ) throws ExistingSubstitutionException <nl> { <nl> - ResourceLocation nameToSubstitute = new ResourceLocation ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , name ) ; <nl> + ResourceLocation nameToSubstitute = new ResourceLocation ( name ) ; <nl> if ( type = = GameRegistry . Type . BLOCK ) <nl> { <nl> iBlockRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Block ) toReplace ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 955c6b4 . . 2940832 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 269 , 6 + 269 , 8 @ @ public class PersistentRegistryManager <nl> StartupQuery . abort ( ) ; <nl> } <nl> FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , currentRegistry ) ; <nl> + / / Copy the persistent substitution set from the currently active one into the new registry <nl> + newRegistry . getPersistentSubstitutions ( ) . putAll ( currentRegistry . getPersistentSubstitutions ( ) ) ; <nl> GameDataSnapshot . Entry snapshotEntry = snapEntry . getValue ( ) ; <nl> Set < ResourceLocation > substitutions = snapshotEntry . substitutions ; <nl> if ( injectFrozenData )

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java b / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java 
 index 8901a27 . . 6184e73 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / IModGuiFactory . java 
 @ @ - 109 , 7 + 109 , 9 @ @ public interface IModGuiFactory { 
 * 
 * @ author cpw 
 * 
 + * TODO remove in 1 . 11 - this was never fully implemented and will be removed 
 * / 
 + @ Deprecated 
 public interface RuntimeOptionGuiHandler { 
 / * * 
 * Called to add widgets to the screen , such as buttons . 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 index 796b397 . . 8339db7 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / handshake / NetworkDispatcher . java 
 @ @ - 69 , 6 + 69 , 7 @ @ import net . minecraftforge . fml . relauncher . Side ; 
 
 import org . apache . logging . log4j . Level ; 
 
 + / / TODO build test suites to validate the behaviour of this stuff and make it less annoyingly magical 
 public class NetworkDispatcher extends SimpleChannelInboundHandler < Packet < ? > > implements ChannelOutboundHandler { 
 private static boolean DEBUG _ HANDSHAKE = Boolean . parseBoolean ( System . getProperty ( " fml . debugNetworkHandshake " , " false " ) ) ; 
 private static enum ConnectionState { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 1f5670a . . e38e6e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 364 , 7 + 364 , 7 @ @ public class PersistentRegistryManager 
 newRegistry . loadIds ( frozenRegistry . getEntriesNotIn ( newRegistry ) , Maps . < ResourceLocation , Integer > newLinkedHashMap ( ) , remaps . get ( registryName ) , frozenRegistry , registryName ) ; 
 } 
 
 - / / TODO : Remove when we don ' t care about loading 1 . 7 . 10 ( ? ) worlds ? 
 + / / TODO : Remove in 1 . 11 when we don ' t care about loading 1 . 8 worlds and below 
 private static ResourceLocation getFixedName ( ResourceLocation registryName ) 
 { 
 / / Translate old names 
 diff - - git a / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java b / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java 
 index de8fbfd . . f2016ba 100644 
 - - - a / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java 
 + + + b / src / main / java / net / minecraftforge / fml / relauncher / IFMLLoadingPlugin . java 
 @ @ - 57 , 7 + 57 , 8 @ @ public interface IFMLLoadingPlugin 
 * main thread , to perform any additional setup this coremod may require . It will be 
 * run < strong > prior < / strong > to Minecraft starting , so it CANNOT operate on minecraft 
 * itself . The game will deliberately crash if this code is detected to trigger a 
 - * minecraft class loading ( TODO : implement crash ; ) ) 
 + * minecraft class loading 
 + * TODO : implement crash ; ) 
 * / 
 String getSetupClass ( ) ; 


NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 index 073f07a . . 0789301 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / FMLControlledNamespacedRegistry . java 
 @ @ - 160 , 6 + 160 , 8 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 this . minId = otherRegistry . minId ; 
 this . aliases . clear ( ) ; 
 this . aliases . putAll ( otherRegistry . aliases ) ; 
 + this . persistentSubstitutions . clear ( ) ; 
 + this . persistentSubstitutions . putAll ( otherRegistry . getPersistentSubstitutions ( ) ) ; 
 this . activeSubstitutions . clear ( ) ; 
 
 underlyingIntegerMap = new ObjectIntIdentityMap < I > ( ) ; 
 @ @ - 599 , 7 + 601 , 7 @ @ public class FMLControlledNamespacedRegistry < I > extends RegistryNamespacedDefaul 
 getPersistentSubstitutions ( ) . put ( nameToReplace , replacement ) ; 
 } 
 
 - private BiMap < ResourceLocation , I > getPersistentSubstitutions ( ) 
 + BiMap < ResourceLocation , I > getPersistentSubstitutions ( ) 
 { 
 return persistentSubstitutions ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 index 8833d69 . . e094bd6 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameData . java 
 @ @ - 185 , 7 + 185 , 7 @ @ public class GameData 
 
 void registerSubstitutionAlias ( String name , GameRegistry . Type type , Object toReplace ) throws ExistingSubstitutionException 
 { 
 - ResourceLocation nameToSubstitute = new ResourceLocation ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , name ) ; 
 + ResourceLocation nameToSubstitute = new ResourceLocation ( name ) ; 
 if ( type = = GameRegistry . Type . BLOCK ) 
 { 
 iBlockRegistry . addSubstitutionAlias ( Loader . instance ( ) . activeModContainer ( ) . getModId ( ) , nameToSubstitute , ( Block ) toReplace ) ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 955c6b4 . . 2940832 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 269 , 6 + 269 , 8 @ @ public class PersistentRegistryManager 
 StartupQuery . abort ( ) ; 
 } 
 FMLControlledNamespacedRegistry < T > newRegistry = PersistentRegistry . STAGING . getOrShallowCopyRegistry ( registryName , regType , currentRegistry ) ; 
 + / / Copy the persistent substitution set from the currently active one into the new registry 
 + newRegistry . getPersistentSubstitutions ( ) . putAll ( currentRegistry . getPersistentSubstitutions ( ) ) ; 
 GameDataSnapshot . Entry snapshotEntry = snapEntry . getValue ( ) ; 
 Set < ResourceLocation > substitutions = snapshotEntry . substitutions ; 
 if ( injectFrozenData )
