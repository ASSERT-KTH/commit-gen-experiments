BLEU SCORE: 0.014063699685797683

TEST MSG: Bypass forge chunk cache if it ' s configuratively disabled
GENERATED MSG: Fix a potential problem with " Entity already added " when using the dormant

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> index cd460a7 . . baadfe9 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 470 , 7 + 470 , 10 @ @ public class ForgeChunkManager <nl> return ; <nl> } <nl> <nl> - dormantChunkCache . put ( world , CacheBuilder . newBuilder ( ) . maximumSize ( dormantChunkCacheSize ) . < Long , Chunk > build ( ) ) ; <nl> + if ( dormantChunkCacheSize ! = 0 ) <nl> + { / / only put into cache if we ' re using dormant chunk caching <nl> + dormantChunkCache . put ( world , CacheBuilder . newBuilder ( ) . maximumSize ( dormantChunkCacheSize ) . < Long , Chunk > build ( ) ) ; <nl> + } <nl> WorldServer worldServer = ( WorldServer ) world ; <nl> File chunkDir = worldServer . getChunkSaveLocation ( ) ; <nl> File chunkLoaderData = new File ( chunkDir , " forcedchunks . dat " ) ; <nl> @ @ - 615 , 7 + 618 , 10 @ @ public class ForgeChunkManager <nl> } <nl> <nl> forcedChunks . remove ( world ) ; <nl> - dormantChunkCache . remove ( world ) ; <nl> + if ( dormantChunkCacheSize ! = 0 ) / / only if in use <nl> + { <nl> + dormantChunkCache . remove ( world ) ; <nl> + } <nl> / / integrated server is shutting down <nl> if ( ! FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . isServerRunning ( ) ) <nl> { <nl> @ @ - 961 , 6 + 967 , 7 @ @ public class ForgeChunkManager <nl> <nl> public static void putDormantChunk ( long coords , Chunk chunk ) <nl> { <nl> + if ( dormantChunkCacheSize = = 0 ) return ; / / Skip if we ' re not dormant caching chunks <nl> Cache < Long , Chunk > cache = dormantChunkCache . get ( chunk . getWorld ( ) ) ; <nl> if ( cache ! = null ) <nl> { <nl> @ @ - 971 , 6 + 978 , 7 @ @ public class ForgeChunkManager <nl> @ Nullable <nl> public static Chunk fetchDormantChunk ( long coords , World world ) <nl> { <nl> + if ( dormantChunkCacheSize = = 0 ) return null ; / / Don ' t bother with maps at all if its never gonna get a response <nl> Cache < Long , Chunk > cache = dormantChunkCache . get ( world ) ; <nl> if ( cache = = null ) <nl> {
NEAREST DIFF (one line): diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> index 5145c2c . . 57274c8 100644 <nl> - - - a / common / net / minecraftforge / common / ForgeChunkManager . java <nl> + + + b / common / net / minecraftforge / common / ForgeChunkManager . java <nl> @ @ - 880 , 7 + 880 , 18 @ @ public class ForgeChunkManager <nl> public static Chunk fetchDormantChunk ( long coords , World world ) <nl> { <nl> Cache < Long , Chunk > cache = dormantChunkCache . get ( world ) ; <nl> - return cache = = null ? null : cache . getIfPresent ( coords ) ; <nl> + Chunk chunk = cache . getIfPresent ( coords ) ; <nl> + if ( chunk ! = null ) <nl> + { <nl> + for ( List < Entity > eList : chunk . entityLists ) <nl> + { <nl> + for ( Entity e : eList ) <nl> + { <nl> + e . resetEntityId ( ) ; <nl> + } <nl> + } <nl> + } <nl> + return chunk ; <nl> } <nl> <nl> static void captureConfig ( File configDir ) <nl> diff - - git a / patches / minecraft / net / minecraft / entity / Entity . java . patch b / patches / minecraft / net / minecraft / entity / Entity . java . patch <nl> index 2e663e0 . . a3fe812 100644 <nl> - - - a / patches / minecraft / net / minecraft / entity / Entity . java . patch <nl> + + + b / patches / minecraft / net / minecraft / entity / Entity . java . patch <nl> @ @ - 138 , 7 + 138 , 7 @ @ <nl> } <nl> <nl> public int func _ 82143 _ as ( ) <nl> - @ @ - 2399 , 4 + 2441 , 84 @ @ <nl> + @ @ - 2399 , 4 + 2441 , 92 @ @ <nl> { <nl> return this . isBurning ( ) ; <nl> } <nl> @ @ - 222 , 4 + 222 , 12 @ @ <nl> + persistentID = UUID . randomUUID ( ) ; <nl> + } <nl> + } <nl> + + <nl> + + / * * <nl> + + * Reset the entity ID to a new value . Not to be used from Mod code <nl> + + * / <nl> + + public final void resetEntityId ( ) <nl> + + { <nl> + + this . entityId = nextEntityID + + ; <nl> + + } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 index cd460a7 . . baadfe9 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 470 , 7 + 470 , 10 @ @ public class ForgeChunkManager 
 return ; 
 } 
 
 - dormantChunkCache . put ( world , CacheBuilder . newBuilder ( ) . maximumSize ( dormantChunkCacheSize ) . < Long , Chunk > build ( ) ) ; 
 + if ( dormantChunkCacheSize ! = 0 ) 
 + { / / only put into cache if we ' re using dormant chunk caching 
 + dormantChunkCache . put ( world , CacheBuilder . newBuilder ( ) . maximumSize ( dormantChunkCacheSize ) . < Long , Chunk > build ( ) ) ; 
 + } 
 WorldServer worldServer = ( WorldServer ) world ; 
 File chunkDir = worldServer . getChunkSaveLocation ( ) ; 
 File chunkLoaderData = new File ( chunkDir , " forcedchunks . dat " ) ; 
 @ @ - 615 , 7 + 618 , 10 @ @ public class ForgeChunkManager 
 } 
 
 forcedChunks . remove ( world ) ; 
 - dormantChunkCache . remove ( world ) ; 
 + if ( dormantChunkCacheSize ! = 0 ) / / only if in use 
 + { 
 + dormantChunkCache . remove ( world ) ; 
 + } 
 / / integrated server is shutting down 
 if ( ! FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) . isServerRunning ( ) ) 
 { 
 @ @ - 961 , 6 + 967 , 7 @ @ public class ForgeChunkManager 
 
 public static void putDormantChunk ( long coords , Chunk chunk ) 
 { 
 + if ( dormantChunkCacheSize = = 0 ) return ; / / Skip if we ' re not dormant caching chunks 
 Cache < Long , Chunk > cache = dormantChunkCache . get ( chunk . getWorld ( ) ) ; 
 if ( cache ! = null ) 
 { 
 @ @ - 971 , 6 + 978 , 7 @ @ public class ForgeChunkManager 
 @ Nullable 
 public static Chunk fetchDormantChunk ( long coords , World world ) 
 { 
 + if ( dormantChunkCacheSize = = 0 ) return null ; / / Don ' t bother with maps at all if its never gonna get a response 
 Cache < Long , Chunk > cache = dormantChunkCache . get ( world ) ; 
 if ( cache = = null ) 
 {

NEAREST DIFF:
diff - - git a / common / net / minecraftforge / common / ForgeChunkManager . java b / common / net / minecraftforge / common / ForgeChunkManager . java 
 index 5145c2c . . 57274c8 100644 
 - - - a / common / net / minecraftforge / common / ForgeChunkManager . java 
 + + + b / common / net / minecraftforge / common / ForgeChunkManager . java 
 @ @ - 880 , 7 + 880 , 18 @ @ public class ForgeChunkManager 
 public static Chunk fetchDormantChunk ( long coords , World world ) 
 { 
 Cache < Long , Chunk > cache = dormantChunkCache . get ( world ) ; 
 - return cache = = null ? null : cache . getIfPresent ( coords ) ; 
 + Chunk chunk = cache . getIfPresent ( coords ) ; 
 + if ( chunk ! = null ) 
 + { 
 + for ( List < Entity > eList : chunk . entityLists ) 
 + { 
 + for ( Entity e : eList ) 
 + { 
 + e . resetEntityId ( ) ; 
 + } 
 + } 
 + } 
 + return chunk ; 
 } 
 
 static void captureConfig ( File configDir ) 
 diff - - git a / patches / minecraft / net / minecraft / entity / Entity . java . patch b / patches / minecraft / net / minecraft / entity / Entity . java . patch 
 index 2e663e0 . . a3fe812 100644 
 - - - a / patches / minecraft / net / minecraft / entity / Entity . java . patch 
 + + + b / patches / minecraft / net / minecraft / entity / Entity . java . patch 
 @ @ - 138 , 7 + 138 , 7 @ @ 
 } 
 
 public int func _ 82143 _ as ( ) 
 - @ @ - 2399 , 4 + 2441 , 84 @ @ 
 + @ @ - 2399 , 4 + 2441 , 92 @ @ 
 { 
 return this . isBurning ( ) ; 
 } 
 @ @ - 222 , 4 + 222 , 12 @ @ 
 + persistentID = UUID . randomUUID ( ) ; 
 + } 
 + } 
 + + 
 + + / * * 
 + + * Reset the entity ID to a new value . Not to be used from Mod code 
 + + * / 
 + + public final void resetEntityId ( ) 
 + + { 
 + + this . entityId = nextEntityID + + ; 
 + + } 
 }
