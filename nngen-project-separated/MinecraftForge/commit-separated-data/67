BLEU SCORE: 0.02276859592073037

TEST MSG: Delete old OreDictionary file , fix type in NUGGETS _ IRON field name , and ping discord from jenkins .
GENERATED MSG: Ore Dictionary Improvements , replaces vanilla recipes with OreDict recipes for some vanilla items . Thanks Covert .

TEST DIFF (one line): diff - - git a / Jenkinsfile b / Jenkinsfile <nl> index 3143b76 . . 8a66944 100644 <nl> - - - a / Jenkinsfile <nl> + + + b / Jenkinsfile <nl> @ @ - 12 , 12 + 12 , 22 @ @ pipeline { <nl> } <nl> environment { <nl> GRADLE _ ARGS = ' - - no - daemon - - console = plain ' / / No daemon for now as FG3 kinda derps . / / ' - Dorg . gradle . daemon . idletimeout = 5000 ' <nl> + DISCORD _ WEBHOOK = ' https : / / discordapp . com / api / webhooks / 455030234916323328 / 6egcSG3jeQZ _ rzUbbbX9BnjBt2 - W6KkeG77Iu9Jf _ oWJwpmJ0hanLwoKIvP14UCTcLsA ' <nl> + DISCORD _ PREFIX = " Job : Forge Branch : $ { BRANCH _ NAME } Build : # $ { BUILD _ NUMBER } " <nl> + JENKINS _ HEAD = ' https : / / wiki . jenkins - ci . org / download / attachments / 2916393 / headshot . png ' <nl> } <nl> <nl> stages { <nl> stage ( ' fetch ' ) { <nl> steps { <nl> checkout scm <nl> + discordSend ( <nl> + title : " $ { DISCORD _ PREFIX } Started " , <nl> + successful : true , <nl> + result : ' ABORTED ' , / / White border <nl> + thumbnail : JENKINS _ HEAD , <nl> + webhookURL : DISCORD _ WEBHOOK <nl> + ) <nl> } <nl> } <nl> stage ( ' setup ' ) { <nl> @ @ - 50 , 10 + 60 , 10 @ @ pipeline { <nl> cache ( maxCacheSize : 250 / * MB * / , caches : [ <nl> [ $ class : ' ArbitraryFileCache ' , excludes : ' ' , includes : ' output . txt ' , path : ' $ { WORKSPACE } / projects / forge / build / extractRangeMap / ' ] / / Cache the rangemap to help speed up builds <nl> ] ) { <nl> - sh ' . / gradlew $ { GRADLE _ ARGS } : forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' <nl> + / / sh ' . / gradlew $ { GRADLE _ ARGS } : forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' <nl> } <nl> / / We ' re not testing anymore so don ' t use the test group <nl> - sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . forge / $ { MYVERSION } ' <nl> + / / sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . forge / $ { MYVERSION } ' <nl> } <nl> } <nl> stage ( ' test _ publish _ pr ' ) { / / Publish to local repo to test full process , but don ' t include credentials so it can ' t sign / publish to maven <nl> @ @ - 74 , 9 + 84 , 20 @ @ pipeline { <nl> } <nl> post { <nl> always { <nl> - archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true <nl> - / / junit ' build / test - results / * / * . xml ' <nl> - / / jacoco sourcePattern : ' * * / src / * / java ' <nl> + script { <nl> + archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true , onlyIfSuccessful : true , allowEmptyArchive : true <nl> + / / junit ' build / test - results / * / * . xml ' <nl> + / / jacoco sourcePattern : ' * * / src / * / java ' <nl> + <nl> + discordSend ( <nl> + title : " $ { DISCORD _ PREFIX } Finished $ { currentBuild . currentResult } " , <nl> + description : ' ` ` ` \ n ' + getChanges ( currentBuild ) + ' \ n ` ` ` ' , <nl> + successful : currentBuild . resultIsBetterOrEqualTo ( " SUCCESS " ) , <nl> + result : currentBuild . currentResult , <nl> + thumbnail : JENKINS _ HEAD , <nl> + webhookURL : DISCORD _ WEBHOOK <nl> + ) <nl> + } <nl> } <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / Tags . java b / src / main / java / net / minecraftforge / common / Tags . java <nl> index d78981c . . 995e25a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / Tags . java <nl> + + + b / src / main / java / net / minecraftforge / common / Tags . java <nl> @ @ - 114 , 7 + 114 , 7 @ @ public class Tags <nl> public static final Tag < Item > MUSIC _ DISCS = tag ( " music _ discs " ) ; <nl> public static final Tag < Item > NUGGETS = tag ( " nuggets " ) ; <nl> public static final Tag < Item > NUGGETS _ GOLD = tag ( " nuggets / gold " ) ; <nl> - public static final Tag < Item > NUGGETS _ IRRON = tag ( " nuggets / iron " ) ; <nl> + public static final Tag < Item > NUGGETS _ IRON = tag ( " nuggets / iron " ) ; <nl> public static final Tag < Item > ORES = tag ( " ores " ) ; <nl> public static final Tag < Item > ORES _ COAL = tag ( " ores / coal " ) ; <nl> public static final Tag < Item > ORES _ DIAMOND = tag ( " ores / diamond " ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> deleted file mode 100644 <nl> index fcd857a . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java <nl> + + + / dev / null <nl> @ @ - 1 , 299 + 0 , 0 @ @ <nl> - / * <nl> - * Minecraft Forge <nl> - * Copyright ( c ) 2016 - 2019 . <nl> - * <nl> - * This library is free software ; you can redistribute it and / or <nl> - * modify it under the terms of the GNU Lesser General Public <nl> - * License as published by the Free Software Foundation version 2 . 1 <nl> - * of the License . <nl> - * <nl> - * This library is distributed in the hope that it will be useful , <nl> - * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> - * Lesser General Public License for more details . <nl> - * <nl> - * You should have received a copy of the GNU Lesser General Public <nl> - * License along with this library ; if not , write to the Free Software <nl> - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> - * / <nl> - <nl> - package net . minecraftforge . oredict ; <nl> - <nl> - public class OreDictionary <nl> - { <nl> - / * <nl> - <nl> - private static void initVanillaEntries ( ) <nl> - { <nl> - if ( ! hasInit ) <nl> - { <nl> - / / tree - and wood - related things <nl> - registerOre ( " treeLeaves " , new ItemStack ( Blocks . LEAVES , 1 , WILDCARD _ VALUE ) ) ; <nl> - registerOre ( " treeLeaves " , new ItemStack ( Blocks . LEAVES2 , 1 , WILDCARD _ VALUE ) ) ; <nl> - registerOre ( " vine " , Blocks . VINE ) ; <nl> - <nl> - / / crops <nl> - registerOre ( " cropWheat " , Items . WHEAT ) ; <nl> - registerOre ( " cropPotato " , Items . POTATO ) ; <nl> - registerOre ( " cropCarrot " , Items . CARROT ) ; <nl> - registerOre ( " cropNetherWart " , Items . NETHER _ WART ) ; <nl> - registerOre ( " sugarcane " , Items . REEDS ) ; <nl> - registerOre ( " blockCactus " , Blocks . CACTUS ) ; <nl> - <nl> - / / misc materials <nl> - registerOre ( " paper " , new ItemStack ( Items . PAPER ) ) ; <nl> - <nl> - / / mob drops <nl> - registerOre ( " slimeball " , Items . SLIME _ BALL ) ; <nl> - registerOre ( " enderpearl " , Items . ENDER _ PEARL ) ; <nl> - registerOre ( " bone " , Items . BONE ) ; <nl> - registerOre ( " gunpowder " , Items . GUNPOWDER ) ; <nl> - registerOre ( " string " , Items . STRING ) ; <nl> - registerOre ( " netherStar " , Items . NETHER _ STAR ) ; <nl> - registerOre ( " leather " , Items . LEATHER ) ; <nl> - registerOre ( " feather " , Items . FEATHER ) ; <nl> - registerOre ( " egg " , Items . EGG ) ; <nl> - <nl> - / / blocks <nl> - registerOre ( " dirt " , Blocks . DIRT ) ; <nl> - registerOre ( " grass " , Blocks . GRASS ) ; <nl> - registerOre ( " gravel " , Blocks . GRAVEL ) ; <nl> - registerOre ( " sandstone " , new ItemStack ( Blocks . SANDSTONE , 1 , WILDCARD _ VALUE ) ) ; <nl> - registerOre ( " sandstone " , new ItemStack ( Blocks . RED _ SANDSTONE , 1 , WILDCARD _ VALUE ) ) ; <nl> - registerOre ( " netherrack " , Blocks . NETHERRACK ) ; <nl> - registerOre ( " obsidian " , Blocks . OBSIDIAN ) ; <nl> - registerOre ( " glowstone " , Blocks . GLOWSTONE ) ; <nl> - registerOre ( " endstone " , Blocks . END _ STONE ) ; <nl> - registerOre ( " torch " , Blocks . TORCH ) ; <nl> - registerOre ( " workbench " , Blocks . CRAFTING _ TABLE ) ; <nl> - registerOre ( " blockSlime " , Blocks . SLIME _ BLOCK ) ; <nl> - registerOre ( " blockPrismarine " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . ROUGH . getMetadata ( ) ) ) ; <nl> - registerOre ( " blockPrismarineBrick " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . BRICKS . getMetadata ( ) ) ) ; <nl> - registerOre ( " blockPrismarineDark " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . DARK . getMetadata ( ) ) ) ; <nl> - registerOre ( " blockGlassColorless " , Blocks . GLASS ) ; <nl> - registerOre ( " blockGlass " , Blocks . GLASS ) ; <nl> - registerOre ( " blockGlass " , new ItemStack ( Blocks . STAINED _ GLASS , 1 , WILDCARD _ VALUE ) ) ; <nl> - / / blockGlass { Color } is added below with dyes <nl> - registerOre ( " paneGlassColorless " , Blocks . GLASS _ PANE ) ; <nl> - registerOre ( " paneGlass " , Blocks . GLASS _ PANE ) ; <nl> - registerOre ( " paneGlass " , new ItemStack ( Blocks . STAINED _ GLASS _ PANE , 1 , WILDCARD _ VALUE ) ) ; <nl> - / / paneGlass { Color } is added below with dyes <nl> - } <nl> - <nl> - / / Build our list of items to replace with ore tags <nl> - Map < ItemStack , String > replacements = new HashMap < ItemStack , String > ( ) ; <nl> - <nl> - / / wood - related things <nl> - replacements . put ( new ItemStack ( Items . STICK ) , " stickWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 0 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 1 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 2 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 3 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 4 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 5 ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , WILDCARD _ VALUE ) , " plankWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . WOODEN _ SLAB , 1 , WILDCARD _ VALUE ) , " slabWood " ) ; <nl> - <nl> - / / ingots / nuggets <nl> - replacements . put ( new ItemStack ( Items . GOLD _ INGOT ) , " ingotGold " ) ; <nl> - replacements . put ( new ItemStack ( Items . IRON _ INGOT ) , " ingotIron " ) ; <nl> - <nl> - / / gems and dusts <nl> - replacements . put ( new ItemStack ( Items . DIAMOND ) , " gemDiamond " ) ; <nl> - replacements . put ( new ItemStack ( Items . EMERALD ) , " gemEmerald " ) ; <nl> - replacements . put ( new ItemStack ( Items . PRISMARINE _ SHARD ) , " gemPrismarine " ) ; <nl> - replacements . put ( new ItemStack ( Items . PRISMARINE _ CRYSTALS ) , " dustPrismarine " ) ; <nl> - replacements . put ( new ItemStack ( Items . REDSTONE ) , " dustRedstone " ) ; <nl> - replacements . put ( new ItemStack ( Items . GLOWSTONE _ DUST ) , " dustGlowstone " ) ; <nl> - <nl> - / / crops <nl> - replacements . put ( new ItemStack ( Items . REEDS ) , " sugarcane " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . CACTUS ) , " blockCactus " ) ; <nl> - <nl> - / / misc materials <nl> - replacements . put ( new ItemStack ( Items . PAPER ) , " paper " ) ; <nl> - <nl> - / / mob drops <nl> - replacements . put ( new ItemStack ( Items . SLIME _ BALL ) , " slimeball " ) ; <nl> - replacements . put ( new ItemStack ( Items . STRING ) , " string " ) ; <nl> - replacements . put ( new ItemStack ( Items . LEATHER ) , " leather " ) ; <nl> - replacements . put ( new ItemStack ( Items . ENDER _ PEARL ) , " enderpearl " ) ; <nl> - replacements . put ( new ItemStack ( Items . GUNPOWDER ) , " gunpowder " ) ; <nl> - replacements . put ( new ItemStack ( Items . NETHER _ STAR ) , " netherStar " ) ; <nl> - replacements . put ( new ItemStack ( Items . FEATHER ) , " feather " ) ; <nl> - replacements . put ( new ItemStack ( Items . BONE ) , " bone " ) ; <nl> - replacements . put ( new ItemStack ( Items . EGG ) , " egg " ) ; <nl> - <nl> - / / blocks <nl> - replacements . put ( new ItemStack ( Blocks . STONE ) , " stone " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . COBBLESTONE ) , " cobblestone " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . COBBLESTONE , 1 , WILDCARD _ VALUE ) , " cobblestone " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . GLOWSTONE ) , " glowstone " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . GLASS ) , " blockGlassColorless " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . PRISMARINE ) , " prismarine " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 1 ) , " stoneGranite " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 2 ) , " stoneGranitePolished " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 3 ) , " stoneDiorite " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 4 ) , " stoneDioritePolished " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 5 ) , " stoneAndesite " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 6 ) , " stoneAndesitePolished " ) ; <nl> - <nl> - / / chests <nl> - replacements . put ( new ItemStack ( Blocks . CHEST ) , " chestWood " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . ENDER _ CHEST ) , " chestEnder " ) ; <nl> - replacements . put ( new ItemStack ( Blocks . TRAPPED _ CHEST ) , " chestTrapped " ) ; <nl> - <nl> - / / Register dyes <nl> - String [ ] dyes = <nl> - { <nl> - " Black " , <nl> - " Red " , <nl> - " Green " , <nl> - " Brown " , <nl> - " Blue " , <nl> - " Purple " , <nl> - " Cyan " , <nl> - " LightGray " , <nl> - " Gray " , <nl> - " Pink " , <nl> - " Lime " , <nl> - " Yellow " , <nl> - " LightBlue " , <nl> - " Magenta " , <nl> - " Orange " , <nl> - " White " <nl> - } ; <nl> - <nl> - for ( int i = 0 ; i < 16 ; i + + ) <nl> - { <nl> - ItemStack block = new ItemStack ( Blocks . STAINED _ GLASS , 1 , 15 - i ) ; <nl> - ItemStack pane = new ItemStack ( Blocks . STAINED _ GLASS _ PANE , 1 , 15 - i ) ; <nl> - if ( ! hasInit ) <nl> - { <nl> - registerOre ( " blockGlass " + dyes [ i ] , block ) ; <nl> - registerOre ( " paneGlass " + dyes [ i ] , pane ) ; <nl> - } <nl> - replacements . put ( dye , " dye " + dyes [ i ] ) ; <nl> - replacements . put ( block , " blockGlass " + dyes [ i ] ) ; <nl> - replacements . put ( pane , " paneGlass " + dyes [ i ] ) ; <nl> - } <nl> - hasInit = true ; <nl> - <nl> - ItemStack [ ] replaceStacks = replacements . keySet ( ) . toArray ( new ItemStack [ replacements . keySet ( ) . size ( ) ] ) ; <nl> - <nl> - / / Ignore recipes for the following items <nl> - ItemStack [ ] exclusions = new ItemStack [ ] <nl> - { <nl> - new ItemStack ( Blocks . LAPIS _ BLOCK ) , <nl> - new ItemStack ( Items . COOKIE ) , <nl> - new ItemStack ( Blocks . STONEBRICK ) , <nl> - new ItemStack ( Blocks . STONE _ SLAB , 1 , WILDCARD _ VALUE ) , <nl> - new ItemStack ( Blocks . STONE _ STAIRS ) , <nl> - new ItemStack ( Blocks . COBBLESTONE _ WALL ) , <nl> - new ItemStack ( Blocks . OAK _ FENCE ) , <nl> - new ItemStack ( Blocks . OAK _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . OAK _ STAIRS ) , <nl> - new ItemStack ( Blocks . SPRUCE _ FENCE ) , <nl> - new ItemStack ( Blocks . SPRUCE _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . SPRUCE _ STAIRS ) , <nl> - new ItemStack ( Blocks . BIRCH _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . BIRCH _ FENCE ) , <nl> - new ItemStack ( Blocks . BIRCH _ STAIRS ) , <nl> - new ItemStack ( Blocks . JUNGLE _ FENCE ) , <nl> - new ItemStack ( Blocks . JUNGLE _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . JUNGLE _ STAIRS ) , <nl> - new ItemStack ( Blocks . ACACIA _ FENCE ) , <nl> - new ItemStack ( Blocks . ACACIA _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . ACACIA _ STAIRS ) , <nl> - new ItemStack ( Blocks . DARK _ OAK _ FENCE ) , <nl> - new ItemStack ( Blocks . DARK _ OAK _ FENCE _ GATE ) , <nl> - new ItemStack ( Blocks . DARK _ OAK _ STAIRS ) , <nl> - new ItemStack ( Blocks . WOODEN _ SLAB , 1 , WILDCARD _ VALUE ) , <nl> - new ItemStack ( Blocks . GLASS _ PANE ) , <nl> - new ItemStack ( Blocks . BONE _ BLOCK ) , / / Bone Block , to prevent conversion of dyes into bone meal . <nl> - new ItemStack ( Items . BOAT ) , <nl> - new ItemStack ( Items . SPRUCE _ BOAT ) , <nl> - new ItemStack ( Items . BIRCH _ BOAT ) , <nl> - new ItemStack ( Items . JUNGLE _ BOAT ) , <nl> - new ItemStack ( Items . ACACIA _ BOAT ) , <nl> - new ItemStack ( Items . DARK _ OAK _ BOAT ) , <nl> - new ItemStack ( Items . OAK _ DOOR ) , <nl> - new ItemStack ( Items . SPRUCE _ DOOR ) , <nl> - new ItemStack ( Items . BIRCH _ DOOR ) , <nl> - new ItemStack ( Items . JUNGLE _ DOOR ) , <nl> - new ItemStack ( Items . ACACIA _ DOOR ) , <nl> - new ItemStack ( Items . DARK _ OAK _ DOOR ) , <nl> - ItemStack . EMPTY / / So the above can have a comma and we don ' t have to keep editing extra lines . <nl> - } ; <nl> - <nl> - LOGGER . info ( " Starts to replace vanilla recipe ingredients with ore ingredients . " ) ; <nl> - int replaced = 0 ; <nl> - / / Search vanilla recipes for recipes to replace <nl> - for ( IRecipe obj : CraftingManager . REGISTRY ) <nl> - { <nl> - if ( obj . getClass ( ) = = ShapedRecipes . class | | obj . getClass ( ) = = ShapelessRecipes . class ) <nl> - { <nl> - ItemStack output = obj . getRecipeOutput ( ) ; <nl> - if ( ! output . isEmpty ( ) & & containsMatch ( false , new ItemStack [ ] { output } , exclusions ) ) <nl> - { <nl> - continue ; <nl> - } <nl> - <nl> - Set < Ingredient > replacedIngs = new HashSet < > ( ) ; <nl> - NonNullList < Ingredient > lst = obj . getIngredients ( ) ; <nl> - for ( int x = 0 ; x < lst . size ( ) ; x + + ) <nl> - { <nl> - Ingredient ing = lst . get ( x ) ; <nl> - ItemStack [ ] ingredients = ing . getMatchingStacks ( ) ; <nl> - String oreName = null ; <nl> - boolean skip = false ; <nl> - <nl> - for ( ItemStack stack : ingredients ) <nl> - { <nl> - boolean matches = false ; <nl> - for ( Entry < ItemStack , String > ent : replacements . entrySet ( ) ) <nl> - { <nl> - if ( itemMatches ( ent . getKey ( ) , stack , true ) ) <nl> - { <nl> - matches = true ; <nl> - if ( oreName ! = null & & ! oreName . equals ( ent . getValue ( ) ) ) <nl> - { <nl> - LOGGER . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? <nl> - skip = true ; <nl> - break ; <nl> - } <nl> - else if ( oreName = = null ) <nl> - { <nl> - oreName = ent . getValue ( ) ; <nl> - break ; <nl> - } <nl> - } <nl> - } <nl> - if ( ! matches & & oreName ! = null ) <nl> - { <nl> - / / TODO : Properly fix this , Broken recipe example : Beds <nl> - / / FMLLog . info ( " Invalid recipe found with ingredient that partially matches ore entries . . . " ) ; / / TODO : Write a dumper ? <nl> - skip = true ; <nl> - } <nl> - if ( skip ) <nl> - break ; <nl> - } <nl> - if ( ! skip & & oreName ! = null ) <nl> - { <nl> - / / Replace ! <nl> - lst . set ( x , new OreIngredient ( oreName ) ) ; <nl> - replaced + + ; <nl> - if ( DEBUG & & replacedIngs . add ( ing ) ) <nl> - { <nl> - String recipeName = obj . getRegistryName ( ) . getResourcePath ( ) ; <nl> - LOGGER . debug ( " Replaced { } of the recipe \ ' { } \ ' with \ " { } \ " . " , ing . getMatchingStacks ( ) , recipeName , oreName ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> - <nl> - LOGGER . info ( " Replaced { } ore ingredients " , replaced ) ; <nl> - } <nl> - * / <nl> - }
NEAREST DIFF (one line): diff - - git a / common / forge _ at . cfg b / common / forge _ at . cfg <nl> index fda689a . . e17967d 100644 <nl> - - - a / common / forge _ at . cfg <nl> + + + b / common / forge _ at . cfg <nl> @ @ - 94 , 3 + 94 , 9 @ @ public atw . a ( Ljava / lang / String ; ILyr ; [ Lace ; ) V # MD : GuiFlatPresets / func _ 82297 _ a <nl> public yr . * ( ) # MD : BiomeGenBase / * # Everything protected - > public <nl> # MapGenVillage <nl> public - f aev . e # FD : MapGenVillage / field _ 75055 _ e # villageSpawnBiomes <nl> + # ShapedRecipes <nl> + public + f wk . d # FD : ShapedRecipes / field _ 77574 _ d # recipeItems <nl> + public + f wk . b # FD : ShapedRecipes / field _ 77576 _ b # recipeWidth <nl> + public + f wk . c # FD : ShapedRecipes / field _ 77577 _ c # recipeHeight <nl> + # ShapelessRecipes <nl> + public wl . b # FD : ShapelessRecipes / field _ 77579 _ b # recipeItems <nl> \ No newline at end of file <nl> diff - - git a / common / net / minecraftforge / oredict / OreDictionary . java b / common / net / minecraftforge / oredict / OreDictionary . java <nl> index 803ea32 . . b04e17e 100644 <nl> - - - a / common / net / minecraftforge / oredict / OreDictionary . java <nl> + + + b / common / net / minecraftforge / oredict / OreDictionary . java <nl> @ @ - 7 , 9 + 7 , 7 @ @ import java . util . List ; <nl> import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> <nl> - import net . minecraft . src . Block ; <nl> - import net . minecraft . src . Item ; <nl> - import net . minecraft . src . ItemStack ; <nl> + import net . minecraft . src . * ; <nl> import net . minecraftforge . common . MinecraftForge ; <nl> import net . minecraftforge . event . Event ; <nl> <nl> @ @ - 23 , 43 + 21 , 102 @ @ public class OreDictionary <nl> initVanillaEntries ( ) ; <nl> } <nl> <nl> - public static void initVanillaEntries ( ) { <nl> - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 0 ) ) ; <nl> - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 1 ) ) ; <nl> - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 2 ) ) ; <nl> - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 3 ) ) ; <nl> - <nl> - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 0 ) ) ; <nl> - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 1 ) ) ; <nl> - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 2 ) ) ; <nl> - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 3 ) ) ; <nl> - <nl> - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 0 ) ) ; <nl> - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 1 ) ) ; <nl> - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 2 ) ) ; <nl> - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 3 ) ) ; <nl> - <nl> - registerOre ( " woodStair " , Block . stairCompactPlanks ) ; <nl> - registerOre ( " woodStair " , Block . stairsWoodBirch ) ; <nl> - registerOre ( " woodStair " , Block . stairsWoodJungle ) ; <nl> - registerOre ( " woodStair " , Block . stairsWoodSpruce ) ; <nl> - <nl> - registerOre ( " dyeBlack " , new ItemStack ( Item . dyePowder , 1 , 0 ) ) ; <nl> - registerOre ( " dyeRed " , new ItemStack ( Item . dyePowder , 1 , 1 ) ) ; <nl> - registerOre ( " dyeGreen " , new ItemStack ( Item . dyePowder , 1 , 2 ) ) ; <nl> - registerOre ( " dyeBrown " , new ItemStack ( Item . dyePowder , 1 , 3 ) ) ; <nl> - registerOre ( " dyeBlue " , new ItemStack ( Item . dyePowder , 1 , 4 ) ) ; <nl> - registerOre ( " dyePurple " , new ItemStack ( Item . dyePowder , 1 , 5 ) ) ; <nl> - registerOre ( " dyeCyan " , new ItemStack ( Item . dyePowder , 1 , 6 ) ) ; <nl> - registerOre ( " dyeLightGrey " , new ItemStack ( Item . dyePowder , 1 , 7 ) ) ; <nl> - registerOre ( " dyeGrey " , new ItemStack ( Item . dyePowder , 1 , 8 ) ) ; <nl> - registerOre ( " dyePink " , new ItemStack ( Item . dyePowder , 1 , 9 ) ) ; <nl> - registerOre ( " dyeLime " , new ItemStack ( Item . dyePowder , 1 , 10 ) ) ; <nl> - registerOre ( " dyeYellow " , new ItemStack ( Item . dyePowder , 1 , 11 ) ) ; <nl> - registerOre ( " dyeLightBlue " , new ItemStack ( Item . dyePowder , 1 , 12 ) ) ; <nl> - registerOre ( " dyeMagenta " , new ItemStack ( Item . dyePowder , 1 , 13 ) ) ; <nl> - registerOre ( " dyeOrange " , new ItemStack ( Item . dyePowder , 1 , 14 ) ) ; <nl> - registerOre ( " dyeWhite " , new ItemStack ( Item . dyePowder , 1 , 15 ) ) ; <nl> + public static void initVanillaEntries ( ) <nl> + { <nl> + registerOre ( " logWood " , new ItemStack ( Block . wood , 1 , - 1 ) ) ; <nl> + registerOre ( " plankWood " , new ItemStack ( Block . planks , 1 , - 1 ) ) ; <nl> + registerOre ( " slabWood " , new ItemStack ( Block . woodSingleSlab , 1 , - 1 ) ) ; <nl> + registerOre ( " stairWood " , Block . stairCompactPlanks ) ; <nl> + registerOre ( " stairWood " , Block . stairsWoodBirch ) ; <nl> + registerOre ( " stairWood " , Block . stairsWoodJungle ) ; <nl> + registerOre ( " stairWood " , Block . stairsWoodSpruce ) ; <nl> + registerOre ( " stickWood " , Item . stick ) ; <nl> + <nl> + / / Build our list of items to replace with ore tags <nl> + Map < ItemStack , String > replacements = new HashMap < ItemStack , String > ( ) ; <nl> + replacements . put ( new ItemStack ( Block . planks , 1 , - 1 ) , " plankWood " ) ; <nl> + replacements . put ( new ItemStack ( Item . stick ) , " stickWood " ) ; <nl> + <nl> + / / Register dyes <nl> + String [ ] dyes = <nl> + { <nl> + " dyeBlack " , <nl> + " dyeRed " , <nl> + " dyeGreen " , <nl> + " dyeBrown " , <nl> + " dyeBlue " , <nl> + " dyePurple " , <nl> + " dyeCyan " , <nl> + " dyeLightGray " , <nl> + " dyeGray " , <nl> + " dyePink " , <nl> + " dyeLime " , <nl> + " dyeYellow " , <nl> + " dyeLightBlue " , <nl> + " dyeMagenta " , <nl> + " dyeOrange " , <nl> + " dyeWhite " <nl> + } ; <nl> + <nl> + for ( int i = 0 ; i < 16 ; i + + ) <nl> + { <nl> + ItemStack dye = new ItemStack ( Item . dyePowder , 1 , i ) ; <nl> + registerOre ( dyes [ i ] , dye ) ; <nl> + replacements . put ( dye , dyes [ i ] ) ; <nl> + } <nl> + <nl> + ItemStack [ ] replaceStacks = replacements . keySet ( ) . toArray ( new ItemStack [ 0 ] ) ; <nl> + <nl> + / / Ignore recipes for the following items <nl> + ItemStack [ ] exclusions = new ItemStack [ ] <nl> + { <nl> + new ItemStack ( Block . blockLapis ) , <nl> + new ItemStack ( Item . cookie ) , <nl> + } ; <nl> + <nl> + List recipes = CraftingManager . getInstance ( ) . getRecipeList ( ) ; <nl> + List < IRecipe > recipesToRemove = new ArrayList < IRecipe > ( ) ; <nl> + List < IRecipe > recipesToAdd = new ArrayList < IRecipe > ( ) ; <nl> + <nl> + / / Search vanilla recipes for recipes to replace <nl> + for ( Object obj : recipes ) <nl> + { <nl> + if ( obj instanceof ShapedRecipes ) <nl> + { <nl> + ShapedRecipes recipe = ( ShapedRecipes ) obj ; <nl> + ItemStack output = recipe . getRecipeOutput ( ) ; <nl> + if ( output ! = null & & containsMatch ( false , exclusions , output ) ) <nl> + { <nl> + continue ; <nl> + } <nl> + <nl> + if ( containsMatch ( true , recipe . recipeItems , replaceStacks ) ) <nl> + { <nl> + recipesToRemove . add ( recipe ) ; <nl> + recipesToAdd . add ( new ShapedOreRecipe ( recipe , replacements ) ) ; <nl> + } <nl> + } <nl> + else if ( obj instanceof ShapelessRecipes ) <nl> + { <nl> + ShapelessRecipes recipe = ( ShapelessRecipes ) obj ; <nl> + ItemStack output = recipe . getRecipeOutput ( ) ; <nl> + if ( output ! = null & & containsMatch ( false , exclusions , output ) ) <nl> + { <nl> + continue ; <nl> + } <nl> + <nl> + if ( containsMatch ( true , ( ItemStack [ ] ) recipe . recipeItems . toArray ( new ItemStack [ 0 ] ) , replaceStacks ) ) <nl> + { <nl> + recipesToRemove . add ( ( IRecipe ) obj ) ; <nl> + IRecipe newRecipe = new ShapelessOreRecipe ( recipe , replacements ) ; <nl> + recipesToAdd . add ( newRecipe ) ; <nl> + } <nl> + } <nl> + } <nl> + <nl> + recipes . removeAll ( recipesToRemove ) ; <nl> + recipes . addAll ( recipesToAdd ) ; <nl> + System . out . println ( recipesToRemove . size ( ) + " " + recipesToAdd . size ( ) ) ; <nl> } <nl> <nl> / * * <nl> @ @ - 138 , 7 + 195 , 31 @ @ public class OreDictionary <nl> } <nl> return val ; <nl> } <nl> - <nl> + <nl> + private static boolean containsMatch ( boolean strict , ItemStack [ ] inputs , ItemStack . . . targets ) <nl> + { <nl> + for ( ItemStack input : inputs ) <nl> + { <nl> + for ( ItemStack target : targets ) <nl> + { <nl> + if ( itemMatches ( target , input , strict ) ) <nl> + { <nl> + return true ; <nl> + } <nl> + } <nl> + } <nl> + return false ; <nl> + } <nl> + <nl> + public static boolean itemMatches ( ItemStack target , ItemStack input , boolean strict ) <nl> + { <nl> + if ( input = = null & & target ! = null | | input ! = null & & target = = null ) <nl> + { <nl> + return false ; <nl> + } <nl> + return ( target . itemID = = input . itemID & & ( ( target . getItemDamage ( ) = = - 1 & & ! strict ) | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; <nl> + } <nl> + <nl> / / Convenience functions that make for cleaner code mod side . They all drill down to registerOre ( String , int , ItemStack ) <nl> public static void registerOre ( String name , Item ore ) { registerOre ( name , new ItemStack ( ore ) ) ; } <nl> public static void registerOre ( String name , Block ore ) { registerOre ( name , new ItemStack ( ore ) ) ; } <nl> diff - - git a / common / net / minecraftforge / oredict / ShapedOreRecipe . java b / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> index a89c95d . . 3a85fcb 100644 <nl> - - - a / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> + + + b / common / net / minecraftforge / oredict / ShapedOreRecipe . java <nl> @ @ - 2 , 6 + 2 , 8 @ @ package net . minecraftforge . oredict ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> <nl> import net . minecraft . src . Block ; <nl> import net . minecraft . src . IRecipe ; <nl> @ @ - 123 , 6 + 125 , 33 @ @ public class ShapedOreRecipe implements IRecipe <nl> } <nl> } <nl> <nl> + ShapedOreRecipe ( ShapedRecipes recipe , Map < ItemStack , String > replacements ) <nl> + { <nl> + output = recipe . getRecipeOutput ( ) ; <nl> + width = recipe . recipeWidth ; <nl> + height = recipe . recipeHeight ; <nl> + <nl> + input = new Object [ recipe . recipeItems . length ] ; <nl> + <nl> + for ( int i = 0 ; i < input . length ; i + + ) <nl> + { <nl> + ItemStack ingred = recipe . recipeItems [ i ] ; <nl> + <nl> + if ( ingred = = null ) continue ; <nl> + <nl> + input [ i ] = recipe . recipeItems [ i ] ; <nl> + <nl> + for ( Entry < ItemStack , String > replace : replacements . entrySet ( ) ) <nl> + { <nl> + if ( OreDictionary . itemMatches ( replace . getKey ( ) , ingred , true ) ) <nl> + { <nl> + input [ i ] = OreDictionary . getOres ( replace . getValue ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public ItemStack getCraftingResult ( InventoryCrafting var1 ) { return output . copy ( ) ; } <nl> <nl> @ @ - 208 , 7 + 237 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> <nl> return true ; <nl> } <nl> - <nl> + <nl> private boolean checkItemEquals ( ItemStack target , ItemStack input ) <nl> { <nl> if ( input = = null & & target ! = null | | input ! = null & & target = = null ) <nl> @ @ - 217 , 7 + 246 , 7 @ @ public class ShapedOreRecipe implements IRecipe <nl> } <nl> return ( target . itemID = = input . itemID & & ( target . getItemDamage ( ) = = - 1 | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; <nl> } <nl> - <nl> + <nl> public ShapedOreRecipe setMirrored ( boolean mirror ) <nl> { <nl> mirrored = mirror ; <nl> diff - - git a / common / net / minecraftforge / oredict / ShapelessOreRecipe . java b / common / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> index 626d01f . . e35e172 100644 <nl> - - - a / common / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> + + + b / common / net / minecraftforge / oredict / ShapelessOreRecipe . java <nl> @ @ - 2 , 6 + 2 , 9 @ @ package net . minecraftforge . oredict ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + import java . util . Map . Entry ; <nl> + import java . util . List ; <nl> <nl> import net . minecraft . src . Block ; <nl> import net . minecraft . src . CraftingManager ; <nl> @ @ - 54 , 6 + 57 , 25 @ @ public class ShapelessOreRecipe implements IRecipe <nl> } <nl> } <nl> <nl> + ShapelessOreRecipe ( ShapelessRecipes recipe , Map < ItemStack , String > replacements ) <nl> + { <nl> + output = recipe . getRecipeOutput ( ) ; <nl> + <nl> + for ( ItemStack ingred : ( ( List < ItemStack > ) recipe . recipeItems ) ) <nl> + { <nl> + Object finalObj = ingred ; <nl> + for ( Entry < ItemStack , String > replace : replacements . entrySet ( ) ) <nl> + { <nl> + if ( OreDictionary . itemMatches ( replace . getKey ( ) , ingred , false ) ) <nl> + { <nl> + finalObj = OreDictionary . getOres ( replace . getValue ( ) ) ; <nl> + break ; <nl> + } <nl> + } <nl> + input . add ( finalObj ) ; <nl> + } <nl> + } <nl> + <nl> @ Override <nl> public int getRecipeSize ( ) { return input . size ( ) ; } <nl>

TEST DIFF:
diff - - git a / Jenkinsfile b / Jenkinsfile 
 index 3143b76 . . 8a66944 100644 
 - - - a / Jenkinsfile 
 + + + b / Jenkinsfile 
 @ @ - 12 , 12 + 12 , 22 @ @ pipeline { 
 } 
 environment { 
 GRADLE _ ARGS = ' - - no - daemon - - console = plain ' / / No daemon for now as FG3 kinda derps . / / ' - Dorg . gradle . daemon . idletimeout = 5000 ' 
 + DISCORD _ WEBHOOK = ' https : / / discordapp . com / api / webhooks / 455030234916323328 / 6egcSG3jeQZ _ rzUbbbX9BnjBt2 - W6KkeG77Iu9Jf _ oWJwpmJ0hanLwoKIvP14UCTcLsA ' 
 + DISCORD _ PREFIX = " Job : Forge Branch : $ { BRANCH _ NAME } Build : # $ { BUILD _ NUMBER } " 
 + JENKINS _ HEAD = ' https : / / wiki . jenkins - ci . org / download / attachments / 2916393 / headshot . png ' 
 } 
 
 stages { 
 stage ( ' fetch ' ) { 
 steps { 
 checkout scm 
 + discordSend ( 
 + title : " $ { DISCORD _ PREFIX } Started " , 
 + successful : true , 
 + result : ' ABORTED ' , / / White border 
 + thumbnail : JENKINS _ HEAD , 
 + webhookURL : DISCORD _ WEBHOOK 
 + ) 
 } 
 } 
 stage ( ' setup ' ) { 
 @ @ - 50 , 10 + 60 , 10 @ @ pipeline { 
 cache ( maxCacheSize : 250 / * MB * / , caches : [ 
 [ $ class : ' ArbitraryFileCache ' , excludes : ' ' , includes : ' output . txt ' , path : ' $ { WORKSPACE } / projects / forge / build / extractRangeMap / ' ] / / Cache the rangemap to help speed up builds 
 ] ) { 
 - sh ' . / gradlew $ { GRADLE _ ARGS } : forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' 
 + / / sh ' . / gradlew $ { GRADLE _ ARGS } : forge : publish - PforgeMavenUser = $ { FORGE _ MAVEN _ USR } - PforgeMavenPassword = $ { FORGE _ MAVEN _ PSW } - PkeystoreKeyPass = $ { KEYSTORE _ KEYPASS } - PkeystoreStorePass = $ { KEYSTORE _ STOREPASS } - Pkeystore = $ { KEYSTORE } - PcrowdinKey = $ { CROWDIN } ' 
 } 
 / / We ' re not testing anymore so don ' t use the test group 
 - sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . forge / $ { MYVERSION } ' 
 + / / sh ' curl - - user $ { FORGE _ MAVEN } http : / / files . minecraftforge . net / maven / manage / promote / latest / net . minecraftforge . forge / $ { MYVERSION } ' 
 } 
 } 
 stage ( ' test _ publish _ pr ' ) { / / Publish to local repo to test full process , but don ' t include credentials so it can ' t sign / publish to maven 
 @ @ - 74 , 9 + 84 , 20 @ @ pipeline { 
 } 
 post { 
 always { 
 - archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true 
 - / / junit ' build / test - results / * / * . xml ' 
 - / / jacoco sourcePattern : ' * * / src / * / java ' 
 + script { 
 + archiveArtifacts artifacts : ' projects / forge / build / libs / * * / * . * ' , fingerprint : true , onlyIfSuccessful : true , allowEmptyArchive : true 
 + / / junit ' build / test - results / * / * . xml ' 
 + / / jacoco sourcePattern : ' * * / src / * / java ' 
 + 
 + discordSend ( 
 + title : " $ { DISCORD _ PREFIX } Finished $ { currentBuild . currentResult } " , 
 + description : ' ` ` ` \ n ' + getChanges ( currentBuild ) + ' \ n ` ` ` ' , 
 + successful : currentBuild . resultIsBetterOrEqualTo ( " SUCCESS " ) , 
 + result : currentBuild . currentResult , 
 + thumbnail : JENKINS _ HEAD , 
 + webhookURL : DISCORD _ WEBHOOK 
 + ) 
 + } 
 } 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / Tags . java b / src / main / java / net / minecraftforge / common / Tags . java 
 index d78981c . . 995e25a 100644 
 - - - a / src / main / java / net / minecraftforge / common / Tags . java 
 + + + b / src / main / java / net / minecraftforge / common / Tags . java 
 @ @ - 114 , 7 + 114 , 7 @ @ public class Tags 
 public static final Tag < Item > MUSIC _ DISCS = tag ( " music _ discs " ) ; 
 public static final Tag < Item > NUGGETS = tag ( " nuggets " ) ; 
 public static final Tag < Item > NUGGETS _ GOLD = tag ( " nuggets / gold " ) ; 
 - public static final Tag < Item > NUGGETS _ IRRON = tag ( " nuggets / iron " ) ; 
 + public static final Tag < Item > NUGGETS _ IRON = tag ( " nuggets / iron " ) ; 
 public static final Tag < Item > ORES = tag ( " ores " ) ; 
 public static final Tag < Item > ORES _ COAL = tag ( " ores / coal " ) ; 
 public static final Tag < Item > ORES _ DIAMOND = tag ( " ores / diamond " ) ; 
 diff - - git a / src / main / java / net / minecraftforge / oredict / OreDictionary . java b / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 deleted file mode 100644 
 index fcd857a . . 0000000 
 - - - a / src / main / java / net / minecraftforge / oredict / OreDictionary . java 
 + + + / dev / null 
 @ @ - 1 , 299 + 0 , 0 @ @ 
 - / * 
 - * Minecraft Forge 
 - * Copyright ( c ) 2016 - 2019 . 
 - * 
 - * This library is free software ; you can redistribute it and / or 
 - * modify it under the terms of the GNU Lesser General Public 
 - * License as published by the Free Software Foundation version 2 . 1 
 - * of the License . 
 - * 
 - * This library is distributed in the hope that it will be useful , 
 - * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 - * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 - * Lesser General Public License for more details . 
 - * 
 - * You should have received a copy of the GNU Lesser General Public 
 - * License along with this library ; if not , write to the Free Software 
 - * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 - * / 
 - 
 - package net . minecraftforge . oredict ; 
 - 
 - public class OreDictionary 
 - { 
 - / * 
 - 
 - private static void initVanillaEntries ( ) 
 - { 
 - if ( ! hasInit ) 
 - { 
 - / / tree - and wood - related things 
 - registerOre ( " treeLeaves " , new ItemStack ( Blocks . LEAVES , 1 , WILDCARD _ VALUE ) ) ; 
 - registerOre ( " treeLeaves " , new ItemStack ( Blocks . LEAVES2 , 1 , WILDCARD _ VALUE ) ) ; 
 - registerOre ( " vine " , Blocks . VINE ) ; 
 - 
 - / / crops 
 - registerOre ( " cropWheat " , Items . WHEAT ) ; 
 - registerOre ( " cropPotato " , Items . POTATO ) ; 
 - registerOre ( " cropCarrot " , Items . CARROT ) ; 
 - registerOre ( " cropNetherWart " , Items . NETHER _ WART ) ; 
 - registerOre ( " sugarcane " , Items . REEDS ) ; 
 - registerOre ( " blockCactus " , Blocks . CACTUS ) ; 
 - 
 - / / misc materials 
 - registerOre ( " paper " , new ItemStack ( Items . PAPER ) ) ; 
 - 
 - / / mob drops 
 - registerOre ( " slimeball " , Items . SLIME _ BALL ) ; 
 - registerOre ( " enderpearl " , Items . ENDER _ PEARL ) ; 
 - registerOre ( " bone " , Items . BONE ) ; 
 - registerOre ( " gunpowder " , Items . GUNPOWDER ) ; 
 - registerOre ( " string " , Items . STRING ) ; 
 - registerOre ( " netherStar " , Items . NETHER _ STAR ) ; 
 - registerOre ( " leather " , Items . LEATHER ) ; 
 - registerOre ( " feather " , Items . FEATHER ) ; 
 - registerOre ( " egg " , Items . EGG ) ; 
 - 
 - / / blocks 
 - registerOre ( " dirt " , Blocks . DIRT ) ; 
 - registerOre ( " grass " , Blocks . GRASS ) ; 
 - registerOre ( " gravel " , Blocks . GRAVEL ) ; 
 - registerOre ( " sandstone " , new ItemStack ( Blocks . SANDSTONE , 1 , WILDCARD _ VALUE ) ) ; 
 - registerOre ( " sandstone " , new ItemStack ( Blocks . RED _ SANDSTONE , 1 , WILDCARD _ VALUE ) ) ; 
 - registerOre ( " netherrack " , Blocks . NETHERRACK ) ; 
 - registerOre ( " obsidian " , Blocks . OBSIDIAN ) ; 
 - registerOre ( " glowstone " , Blocks . GLOWSTONE ) ; 
 - registerOre ( " endstone " , Blocks . END _ STONE ) ; 
 - registerOre ( " torch " , Blocks . TORCH ) ; 
 - registerOre ( " workbench " , Blocks . CRAFTING _ TABLE ) ; 
 - registerOre ( " blockSlime " , Blocks . SLIME _ BLOCK ) ; 
 - registerOre ( " blockPrismarine " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . ROUGH . getMetadata ( ) ) ) ; 
 - registerOre ( " blockPrismarineBrick " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . BRICKS . getMetadata ( ) ) ) ; 
 - registerOre ( " blockPrismarineDark " , new ItemStack ( Blocks . PRISMARINE , 1 , BlockPrismarine . EnumType . DARK . getMetadata ( ) ) ) ; 
 - registerOre ( " blockGlassColorless " , Blocks . GLASS ) ; 
 - registerOre ( " blockGlass " , Blocks . GLASS ) ; 
 - registerOre ( " blockGlass " , new ItemStack ( Blocks . STAINED _ GLASS , 1 , WILDCARD _ VALUE ) ) ; 
 - / / blockGlass { Color } is added below with dyes 
 - registerOre ( " paneGlassColorless " , Blocks . GLASS _ PANE ) ; 
 - registerOre ( " paneGlass " , Blocks . GLASS _ PANE ) ; 
 - registerOre ( " paneGlass " , new ItemStack ( Blocks . STAINED _ GLASS _ PANE , 1 , WILDCARD _ VALUE ) ) ; 
 - / / paneGlass { Color } is added below with dyes 
 - } 
 - 
 - / / Build our list of items to replace with ore tags 
 - Map < ItemStack , String > replacements = new HashMap < ItemStack , String > ( ) ; 
 - 
 - / / wood - related things 
 - replacements . put ( new ItemStack ( Items . STICK ) , " stickWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 0 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 1 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 2 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 3 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 4 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , 5 ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PLANKS , 1 , WILDCARD _ VALUE ) , " plankWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . WOODEN _ SLAB , 1 , WILDCARD _ VALUE ) , " slabWood " ) ; 
 - 
 - / / ingots / nuggets 
 - replacements . put ( new ItemStack ( Items . GOLD _ INGOT ) , " ingotGold " ) ; 
 - replacements . put ( new ItemStack ( Items . IRON _ INGOT ) , " ingotIron " ) ; 
 - 
 - / / gems and dusts 
 - replacements . put ( new ItemStack ( Items . DIAMOND ) , " gemDiamond " ) ; 
 - replacements . put ( new ItemStack ( Items . EMERALD ) , " gemEmerald " ) ; 
 - replacements . put ( new ItemStack ( Items . PRISMARINE _ SHARD ) , " gemPrismarine " ) ; 
 - replacements . put ( new ItemStack ( Items . PRISMARINE _ CRYSTALS ) , " dustPrismarine " ) ; 
 - replacements . put ( new ItemStack ( Items . REDSTONE ) , " dustRedstone " ) ; 
 - replacements . put ( new ItemStack ( Items . GLOWSTONE _ DUST ) , " dustGlowstone " ) ; 
 - 
 - / / crops 
 - replacements . put ( new ItemStack ( Items . REEDS ) , " sugarcane " ) ; 
 - replacements . put ( new ItemStack ( Blocks . CACTUS ) , " blockCactus " ) ; 
 - 
 - / / misc materials 
 - replacements . put ( new ItemStack ( Items . PAPER ) , " paper " ) ; 
 - 
 - / / mob drops 
 - replacements . put ( new ItemStack ( Items . SLIME _ BALL ) , " slimeball " ) ; 
 - replacements . put ( new ItemStack ( Items . STRING ) , " string " ) ; 
 - replacements . put ( new ItemStack ( Items . LEATHER ) , " leather " ) ; 
 - replacements . put ( new ItemStack ( Items . ENDER _ PEARL ) , " enderpearl " ) ; 
 - replacements . put ( new ItemStack ( Items . GUNPOWDER ) , " gunpowder " ) ; 
 - replacements . put ( new ItemStack ( Items . NETHER _ STAR ) , " netherStar " ) ; 
 - replacements . put ( new ItemStack ( Items . FEATHER ) , " feather " ) ; 
 - replacements . put ( new ItemStack ( Items . BONE ) , " bone " ) ; 
 - replacements . put ( new ItemStack ( Items . EGG ) , " egg " ) ; 
 - 
 - / / blocks 
 - replacements . put ( new ItemStack ( Blocks . STONE ) , " stone " ) ; 
 - replacements . put ( new ItemStack ( Blocks . COBBLESTONE ) , " cobblestone " ) ; 
 - replacements . put ( new ItemStack ( Blocks . COBBLESTONE , 1 , WILDCARD _ VALUE ) , " cobblestone " ) ; 
 - replacements . put ( new ItemStack ( Blocks . GLOWSTONE ) , " glowstone " ) ; 
 - replacements . put ( new ItemStack ( Blocks . GLASS ) , " blockGlassColorless " ) ; 
 - replacements . put ( new ItemStack ( Blocks . PRISMARINE ) , " prismarine " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 1 ) , " stoneGranite " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 2 ) , " stoneGranitePolished " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 3 ) , " stoneDiorite " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 4 ) , " stoneDioritePolished " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 5 ) , " stoneAndesite " ) ; 
 - replacements . put ( new ItemStack ( Blocks . STONE , 1 , 6 ) , " stoneAndesitePolished " ) ; 
 - 
 - / / chests 
 - replacements . put ( new ItemStack ( Blocks . CHEST ) , " chestWood " ) ; 
 - replacements . put ( new ItemStack ( Blocks . ENDER _ CHEST ) , " chestEnder " ) ; 
 - replacements . put ( new ItemStack ( Blocks . TRAPPED _ CHEST ) , " chestTrapped " ) ; 
 - 
 - / / Register dyes 
 - String [ ] dyes = 
 - { 
 - " Black " , 
 - " Red " , 
 - " Green " , 
 - " Brown " , 
 - " Blue " , 
 - " Purple " , 
 - " Cyan " , 
 - " LightGray " , 
 - " Gray " , 
 - " Pink " , 
 - " Lime " , 
 - " Yellow " , 
 - " LightBlue " , 
 - " Magenta " , 
 - " Orange " , 
 - " White " 
 - } ; 
 - 
 - for ( int i = 0 ; i < 16 ; i + + ) 
 - { 
 - ItemStack block = new ItemStack ( Blocks . STAINED _ GLASS , 1 , 15 - i ) ; 
 - ItemStack pane = new ItemStack ( Blocks . STAINED _ GLASS _ PANE , 1 , 15 - i ) ; 
 - if ( ! hasInit ) 
 - { 
 - registerOre ( " blockGlass " + dyes [ i ] , block ) ; 
 - registerOre ( " paneGlass " + dyes [ i ] , pane ) ; 
 - } 
 - replacements . put ( dye , " dye " + dyes [ i ] ) ; 
 - replacements . put ( block , " blockGlass " + dyes [ i ] ) ; 
 - replacements . put ( pane , " paneGlass " + dyes [ i ] ) ; 
 - } 
 - hasInit = true ; 
 - 
 - ItemStack [ ] replaceStacks = replacements . keySet ( ) . toArray ( new ItemStack [ replacements . keySet ( ) . size ( ) ] ) ; 
 - 
 - / / Ignore recipes for the following items 
 - ItemStack [ ] exclusions = new ItemStack [ ] 
 - { 
 - new ItemStack ( Blocks . LAPIS _ BLOCK ) , 
 - new ItemStack ( Items . COOKIE ) , 
 - new ItemStack ( Blocks . STONEBRICK ) , 
 - new ItemStack ( Blocks . STONE _ SLAB , 1 , WILDCARD _ VALUE ) , 
 - new ItemStack ( Blocks . STONE _ STAIRS ) , 
 - new ItemStack ( Blocks . COBBLESTONE _ WALL ) , 
 - new ItemStack ( Blocks . OAK _ FENCE ) , 
 - new ItemStack ( Blocks . OAK _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . OAK _ STAIRS ) , 
 - new ItemStack ( Blocks . SPRUCE _ FENCE ) , 
 - new ItemStack ( Blocks . SPRUCE _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . SPRUCE _ STAIRS ) , 
 - new ItemStack ( Blocks . BIRCH _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . BIRCH _ FENCE ) , 
 - new ItemStack ( Blocks . BIRCH _ STAIRS ) , 
 - new ItemStack ( Blocks . JUNGLE _ FENCE ) , 
 - new ItemStack ( Blocks . JUNGLE _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . JUNGLE _ STAIRS ) , 
 - new ItemStack ( Blocks . ACACIA _ FENCE ) , 
 - new ItemStack ( Blocks . ACACIA _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . ACACIA _ STAIRS ) , 
 - new ItemStack ( Blocks . DARK _ OAK _ FENCE ) , 
 - new ItemStack ( Blocks . DARK _ OAK _ FENCE _ GATE ) , 
 - new ItemStack ( Blocks . DARK _ OAK _ STAIRS ) , 
 - new ItemStack ( Blocks . WOODEN _ SLAB , 1 , WILDCARD _ VALUE ) , 
 - new ItemStack ( Blocks . GLASS _ PANE ) , 
 - new ItemStack ( Blocks . BONE _ BLOCK ) , / / Bone Block , to prevent conversion of dyes into bone meal . 
 - new ItemStack ( Items . BOAT ) , 
 - new ItemStack ( Items . SPRUCE _ BOAT ) , 
 - new ItemStack ( Items . BIRCH _ BOAT ) , 
 - new ItemStack ( Items . JUNGLE _ BOAT ) , 
 - new ItemStack ( Items . ACACIA _ BOAT ) , 
 - new ItemStack ( Items . DARK _ OAK _ BOAT ) , 
 - new ItemStack ( Items . OAK _ DOOR ) , 
 - new ItemStack ( Items . SPRUCE _ DOOR ) , 
 - new ItemStack ( Items . BIRCH _ DOOR ) , 
 - new ItemStack ( Items . JUNGLE _ DOOR ) , 
 - new ItemStack ( Items . ACACIA _ DOOR ) , 
 - new ItemStack ( Items . DARK _ OAK _ DOOR ) , 
 - ItemStack . EMPTY / / So the above can have a comma and we don ' t have to keep editing extra lines . 
 - } ; 
 - 
 - LOGGER . info ( " Starts to replace vanilla recipe ingredients with ore ingredients . " ) ; 
 - int replaced = 0 ; 
 - / / Search vanilla recipes for recipes to replace 
 - for ( IRecipe obj : CraftingManager . REGISTRY ) 
 - { 
 - if ( obj . getClass ( ) = = ShapedRecipes . class | | obj . getClass ( ) = = ShapelessRecipes . class ) 
 - { 
 - ItemStack output = obj . getRecipeOutput ( ) ; 
 - if ( ! output . isEmpty ( ) & & containsMatch ( false , new ItemStack [ ] { output } , exclusions ) ) 
 - { 
 - continue ; 
 - } 
 - 
 - Set < Ingredient > replacedIngs = new HashSet < > ( ) ; 
 - NonNullList < Ingredient > lst = obj . getIngredients ( ) ; 
 - for ( int x = 0 ; x < lst . size ( ) ; x + + ) 
 - { 
 - Ingredient ing = lst . get ( x ) ; 
 - ItemStack [ ] ingredients = ing . getMatchingStacks ( ) ; 
 - String oreName = null ; 
 - boolean skip = false ; 
 - 
 - for ( ItemStack stack : ingredients ) 
 - { 
 - boolean matches = false ; 
 - for ( Entry < ItemStack , String > ent : replacements . entrySet ( ) ) 
 - { 
 - if ( itemMatches ( ent . getKey ( ) , stack , true ) ) 
 - { 
 - matches = true ; 
 - if ( oreName ! = null & & ! oreName . equals ( ent . getValue ( ) ) ) 
 - { 
 - LOGGER . info ( " Invalid recipe found with multiple oredict ingredients in the same ingredient . . . " ) ; / / TODO : Write a dumper ? 
 - skip = true ; 
 - break ; 
 - } 
 - else if ( oreName = = null ) 
 - { 
 - oreName = ent . getValue ( ) ; 
 - break ; 
 - } 
 - } 
 - } 
 - if ( ! matches & & oreName ! = null ) 
 - { 
 - / / TODO : Properly fix this , Broken recipe example : Beds 
 - / / FMLLog . info ( " Invalid recipe found with ingredient that partially matches ore entries . . . " ) ; / / TODO : Write a dumper ? 
 - skip = true ; 
 - } 
 - if ( skip ) 
 - break ; 
 - } 
 - if ( ! skip & & oreName ! = null ) 
 - { 
 - / / Replace ! 
 - lst . set ( x , new OreIngredient ( oreName ) ) ; 
 - replaced + + ; 
 - if ( DEBUG & & replacedIngs . add ( ing ) ) 
 - { 
 - String recipeName = obj . getRegistryName ( ) . getResourcePath ( ) ; 
 - LOGGER . debug ( " Replaced { } of the recipe \ ' { } \ ' with \ " { } \ " . " , ing . getMatchingStacks ( ) , recipeName , oreName ) ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 - 
 - LOGGER . info ( " Replaced { } ore ingredients " , replaced ) ; 
 - } 
 - * / 
 - }

NEAREST DIFF:
diff - - git a / common / forge _ at . cfg b / common / forge _ at . cfg 
 index fda689a . . e17967d 100644 
 - - - a / common / forge _ at . cfg 
 + + + b / common / forge _ at . cfg 
 @ @ - 94 , 3 + 94 , 9 @ @ public atw . a ( Ljava / lang / String ; ILyr ; [ Lace ; ) V # MD : GuiFlatPresets / func _ 82297 _ a 
 public yr . * ( ) # MD : BiomeGenBase / * # Everything protected - > public 
 # MapGenVillage 
 public - f aev . e # FD : MapGenVillage / field _ 75055 _ e # villageSpawnBiomes 
 + # ShapedRecipes 
 + public + f wk . d # FD : ShapedRecipes / field _ 77574 _ d # recipeItems 
 + public + f wk . b # FD : ShapedRecipes / field _ 77576 _ b # recipeWidth 
 + public + f wk . c # FD : ShapedRecipes / field _ 77577 _ c # recipeHeight 
 + # ShapelessRecipes 
 + public wl . b # FD : ShapelessRecipes / field _ 77579 _ b # recipeItems 
 \ No newline at end of file 
 diff - - git a / common / net / minecraftforge / oredict / OreDictionary . java b / common / net / minecraftforge / oredict / OreDictionary . java 
 index 803ea32 . . b04e17e 100644 
 - - - a / common / net / minecraftforge / oredict / OreDictionary . java 
 + + + b / common / net / minecraftforge / oredict / OreDictionary . java 
 @ @ - 7 , 9 + 7 , 7 @ @ import java . util . List ; 
 import java . util . Map ; 
 import java . util . Map . Entry ; 
 
 - import net . minecraft . src . Block ; 
 - import net . minecraft . src . Item ; 
 - import net . minecraft . src . ItemStack ; 
 + import net . minecraft . src . * ; 
 import net . minecraftforge . common . MinecraftForge ; 
 import net . minecraftforge . event . Event ; 
 
 @ @ - 23 , 43 + 21 , 102 @ @ public class OreDictionary 
 initVanillaEntries ( ) ; 
 } 
 
 - public static void initVanillaEntries ( ) { 
 - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 0 ) ) ; 
 - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 1 ) ) ; 
 - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 2 ) ) ; 
 - registerOre ( " woodLog " , new ItemStack ( Block . wood , 1 , 3 ) ) ; 
 - 
 - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 0 ) ) ; 
 - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 1 ) ) ; 
 - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 2 ) ) ; 
 - registerOre ( " woodPlank " , new ItemStack ( Block . planks , 1 , 3 ) ) ; 
 - 
 - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 0 ) ) ; 
 - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 1 ) ) ; 
 - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 2 ) ) ; 
 - registerOre ( " woodSlab " , new ItemStack ( Block . woodSingleSlab , 1 , 3 ) ) ; 
 - 
 - registerOre ( " woodStair " , Block . stairCompactPlanks ) ; 
 - registerOre ( " woodStair " , Block . stairsWoodBirch ) ; 
 - registerOre ( " woodStair " , Block . stairsWoodJungle ) ; 
 - registerOre ( " woodStair " , Block . stairsWoodSpruce ) ; 
 - 
 - registerOre ( " dyeBlack " , new ItemStack ( Item . dyePowder , 1 , 0 ) ) ; 
 - registerOre ( " dyeRed " , new ItemStack ( Item . dyePowder , 1 , 1 ) ) ; 
 - registerOre ( " dyeGreen " , new ItemStack ( Item . dyePowder , 1 , 2 ) ) ; 
 - registerOre ( " dyeBrown " , new ItemStack ( Item . dyePowder , 1 , 3 ) ) ; 
 - registerOre ( " dyeBlue " , new ItemStack ( Item . dyePowder , 1 , 4 ) ) ; 
 - registerOre ( " dyePurple " , new ItemStack ( Item . dyePowder , 1 , 5 ) ) ; 
 - registerOre ( " dyeCyan " , new ItemStack ( Item . dyePowder , 1 , 6 ) ) ; 
 - registerOre ( " dyeLightGrey " , new ItemStack ( Item . dyePowder , 1 , 7 ) ) ; 
 - registerOre ( " dyeGrey " , new ItemStack ( Item . dyePowder , 1 , 8 ) ) ; 
 - registerOre ( " dyePink " , new ItemStack ( Item . dyePowder , 1 , 9 ) ) ; 
 - registerOre ( " dyeLime " , new ItemStack ( Item . dyePowder , 1 , 10 ) ) ; 
 - registerOre ( " dyeYellow " , new ItemStack ( Item . dyePowder , 1 , 11 ) ) ; 
 - registerOre ( " dyeLightBlue " , new ItemStack ( Item . dyePowder , 1 , 12 ) ) ; 
 - registerOre ( " dyeMagenta " , new ItemStack ( Item . dyePowder , 1 , 13 ) ) ; 
 - registerOre ( " dyeOrange " , new ItemStack ( Item . dyePowder , 1 , 14 ) ) ; 
 - registerOre ( " dyeWhite " , new ItemStack ( Item . dyePowder , 1 , 15 ) ) ; 
 + public static void initVanillaEntries ( ) 
 + { 
 + registerOre ( " logWood " , new ItemStack ( Block . wood , 1 , - 1 ) ) ; 
 + registerOre ( " plankWood " , new ItemStack ( Block . planks , 1 , - 1 ) ) ; 
 + registerOre ( " slabWood " , new ItemStack ( Block . woodSingleSlab , 1 , - 1 ) ) ; 
 + registerOre ( " stairWood " , Block . stairCompactPlanks ) ; 
 + registerOre ( " stairWood " , Block . stairsWoodBirch ) ; 
 + registerOre ( " stairWood " , Block . stairsWoodJungle ) ; 
 + registerOre ( " stairWood " , Block . stairsWoodSpruce ) ; 
 + registerOre ( " stickWood " , Item . stick ) ; 
 + 
 + / / Build our list of items to replace with ore tags 
 + Map < ItemStack , String > replacements = new HashMap < ItemStack , String > ( ) ; 
 + replacements . put ( new ItemStack ( Block . planks , 1 , - 1 ) , " plankWood " ) ; 
 + replacements . put ( new ItemStack ( Item . stick ) , " stickWood " ) ; 
 + 
 + / / Register dyes 
 + String [ ] dyes = 
 + { 
 + " dyeBlack " , 
 + " dyeRed " , 
 + " dyeGreen " , 
 + " dyeBrown " , 
 + " dyeBlue " , 
 + " dyePurple " , 
 + " dyeCyan " , 
 + " dyeLightGray " , 
 + " dyeGray " , 
 + " dyePink " , 
 + " dyeLime " , 
 + " dyeYellow " , 
 + " dyeLightBlue " , 
 + " dyeMagenta " , 
 + " dyeOrange " , 
 + " dyeWhite " 
 + } ; 
 + 
 + for ( int i = 0 ; i < 16 ; i + + ) 
 + { 
 + ItemStack dye = new ItemStack ( Item . dyePowder , 1 , i ) ; 
 + registerOre ( dyes [ i ] , dye ) ; 
 + replacements . put ( dye , dyes [ i ] ) ; 
 + } 
 + 
 + ItemStack [ ] replaceStacks = replacements . keySet ( ) . toArray ( new ItemStack [ 0 ] ) ; 
 + 
 + / / Ignore recipes for the following items 
 + ItemStack [ ] exclusions = new ItemStack [ ] 
 + { 
 + new ItemStack ( Block . blockLapis ) , 
 + new ItemStack ( Item . cookie ) , 
 + } ; 
 + 
 + List recipes = CraftingManager . getInstance ( ) . getRecipeList ( ) ; 
 + List < IRecipe > recipesToRemove = new ArrayList < IRecipe > ( ) ; 
 + List < IRecipe > recipesToAdd = new ArrayList < IRecipe > ( ) ; 
 + 
 + / / Search vanilla recipes for recipes to replace 
 + for ( Object obj : recipes ) 
 + { 
 + if ( obj instanceof ShapedRecipes ) 
 + { 
 + ShapedRecipes recipe = ( ShapedRecipes ) obj ; 
 + ItemStack output = recipe . getRecipeOutput ( ) ; 
 + if ( output ! = null & & containsMatch ( false , exclusions , output ) ) 
 + { 
 + continue ; 
 + } 
 + 
 + if ( containsMatch ( true , recipe . recipeItems , replaceStacks ) ) 
 + { 
 + recipesToRemove . add ( recipe ) ; 
 + recipesToAdd . add ( new ShapedOreRecipe ( recipe , replacements ) ) ; 
 + } 
 + } 
 + else if ( obj instanceof ShapelessRecipes ) 
 + { 
 + ShapelessRecipes recipe = ( ShapelessRecipes ) obj ; 
 + ItemStack output = recipe . getRecipeOutput ( ) ; 
 + if ( output ! = null & & containsMatch ( false , exclusions , output ) ) 
 + { 
 + continue ; 
 + } 
 + 
 + if ( containsMatch ( true , ( ItemStack [ ] ) recipe . recipeItems . toArray ( new ItemStack [ 0 ] ) , replaceStacks ) ) 
 + { 
 + recipesToRemove . add ( ( IRecipe ) obj ) ; 
 + IRecipe newRecipe = new ShapelessOreRecipe ( recipe , replacements ) ; 
 + recipesToAdd . add ( newRecipe ) ; 
 + } 
 + } 
 + } 
 + 
 + recipes . removeAll ( recipesToRemove ) ; 
 + recipes . addAll ( recipesToAdd ) ; 
 + System . out . println ( recipesToRemove . size ( ) + " " + recipesToAdd . size ( ) ) ; 
 } 
 
 / * * 
 @ @ - 138 , 7 + 195 , 31 @ @ public class OreDictionary 
 } 
 return val ; 
 } 
 - 
 + 
 + private static boolean containsMatch ( boolean strict , ItemStack [ ] inputs , ItemStack . . . targets ) 
 + { 
 + for ( ItemStack input : inputs ) 
 + { 
 + for ( ItemStack target : targets ) 
 + { 
 + if ( itemMatches ( target , input , strict ) ) 
 + { 
 + return true ; 
 + } 
 + } 
 + } 
 + return false ; 
 + } 
 + 
 + public static boolean itemMatches ( ItemStack target , ItemStack input , boolean strict ) 
 + { 
 + if ( input = = null & & target ! = null | | input ! = null & & target = = null ) 
 + { 
 + return false ; 
 + } 
 + return ( target . itemID = = input . itemID & & ( ( target . getItemDamage ( ) = = - 1 & & ! strict ) | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; 
 + } 
 + 
 / / Convenience functions that make for cleaner code mod side . They all drill down to registerOre ( String , int , ItemStack ) 
 public static void registerOre ( String name , Item ore ) { registerOre ( name , new ItemStack ( ore ) ) ; } 
 public static void registerOre ( String name , Block ore ) { registerOre ( name , new ItemStack ( ore ) ) ; } 
 diff - - git a / common / net / minecraftforge / oredict / ShapedOreRecipe . java b / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 index a89c95d . . 3a85fcb 100644 
 - - - a / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 + + + b / common / net / minecraftforge / oredict / ShapedOreRecipe . java 
 @ @ - 2 , 6 + 2 , 8 @ @ package net . minecraftforge . oredict ; 
 
 import java . util . ArrayList ; 
 import java . util . HashMap ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 
 import net . minecraft . src . Block ; 
 import net . minecraft . src . IRecipe ; 
 @ @ - 123 , 6 + 125 , 33 @ @ public class ShapedOreRecipe implements IRecipe 
 } 
 } 
 
 + ShapedOreRecipe ( ShapedRecipes recipe , Map < ItemStack , String > replacements ) 
 + { 
 + output = recipe . getRecipeOutput ( ) ; 
 + width = recipe . recipeWidth ; 
 + height = recipe . recipeHeight ; 
 + 
 + input = new Object [ recipe . recipeItems . length ] ; 
 + 
 + for ( int i = 0 ; i < input . length ; i + + ) 
 + { 
 + ItemStack ingred = recipe . recipeItems [ i ] ; 
 + 
 + if ( ingred = = null ) continue ; 
 + 
 + input [ i ] = recipe . recipeItems [ i ] ; 
 + 
 + for ( Entry < ItemStack , String > replace : replacements . entrySet ( ) ) 
 + { 
 + if ( OreDictionary . itemMatches ( replace . getKey ( ) , ingred , true ) ) 
 + { 
 + input [ i ] = OreDictionary . getOres ( replace . getValue ( ) ) ; 
 + break ; 
 + } 
 + } 
 + } 
 + } 
 + 
 @ Override 
 public ItemStack getCraftingResult ( InventoryCrafting var1 ) { return output . copy ( ) ; } 
 
 @ @ - 208 , 7 + 237 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 
 return true ; 
 } 
 - 
 + 
 private boolean checkItemEquals ( ItemStack target , ItemStack input ) 
 { 
 if ( input = = null & & target ! = null | | input ! = null & & target = = null ) 
 @ @ - 217 , 7 + 246 , 7 @ @ public class ShapedOreRecipe implements IRecipe 
 } 
 return ( target . itemID = = input . itemID & & ( target . getItemDamage ( ) = = - 1 | | target . getItemDamage ( ) = = input . getItemDamage ( ) ) ) ; 
 } 
 - 
 + 
 public ShapedOreRecipe setMirrored ( boolean mirror ) 
 { 
 mirrored = mirror ; 
 diff - - git a / common / net / minecraftforge / oredict / ShapelessOreRecipe . java b / common / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 index 626d01f . . e35e172 100644 
 - - - a / common / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 + + + b / common / net / minecraftforge / oredict / ShapelessOreRecipe . java 
 @ @ - 2 , 6 + 2 , 9 @ @ package net . minecraftforge . oredict ; 
 
 import java . util . ArrayList ; 
 import java . util . Iterator ; 
 + import java . util . Map ; 
 + import java . util . Map . Entry ; 
 + import java . util . List ; 
 
 import net . minecraft . src . Block ; 
 import net . minecraft . src . CraftingManager ; 
 @ @ - 54 , 6 + 57 , 25 @ @ public class ShapelessOreRecipe implements IRecipe 
 } 
 } 
 
 + ShapelessOreRecipe ( ShapelessRecipes recipe , Map < ItemStack , String > replacements ) 
 + { 
 + output = recipe . getRecipeOutput ( ) ; 
 + 
 + for ( ItemStack ingred : ( ( List < ItemStack > ) recipe . recipeItems ) ) 
 + { 
 + Object finalObj = ingred ; 
 + for ( Entry < ItemStack , String > replace : replacements . entrySet ( ) ) 
 + { 
 + if ( OreDictionary . itemMatches ( replace . getKey ( ) , ingred , false ) ) 
 + { 
 + finalObj = OreDictionary . getOres ( replace . getValue ( ) ) ; 
 + break ; 
 + } 
 + } 
 + input . add ( finalObj ) ; 
 + } 
 + } 
 + 
 @ Override 
 public int getRecipeSize ( ) { return input . size ( ) ; } 

