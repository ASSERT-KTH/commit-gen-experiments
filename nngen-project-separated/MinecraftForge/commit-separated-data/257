BLEU SCORE: 0.02519759344243479

TEST MSG: Check for empty dimensions outside of chunk unloading loop , culling worlds without needing chunk unloads to trigger it .
GENERATED MSG: Add a configurable delay when unloading dimensions , fixes # 3455

TEST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> index e20daa4 . . 2cc997e 100644 <nl> - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch <nl> @ @ - 72 , 7 + 72 , 7 @ @ <nl> Iterator < Long > iterator = this . field _ 73248 _ b . iterator ( ) ; <nl> <nl> for ( int i = 0 ; i < 100 & & iterator . hasNext ( ) ; iterator . remove ( ) ) <nl> - @ @ - 234 , 10 + 267 , 15 @ @ <nl> + @ @ - 234 , 6 + 267 , 7 @ @ <nl> if ( chunk ! = null & & chunk . field _ 189550 _ d ) <nl> { <nl> chunk . func _ 76623 _ d ( ) ; <nl> @ @ - 80 , 11 + 80 , 12 @ @ <nl> this . func _ 73242 _ b ( chunk ) ; <nl> this . func _ 73243 _ a ( chunk ) ; <nl> this . field _ 73244 _ f . remove ( olong ) ; <nl> - + + i ; <nl> - + if ( field _ 73244 _ f . size ( ) = = 0 & & net . minecraftforge . common . ForgeChunkManager . getPersistentChunksFor ( this . field _ 73251 _ h ) . size ( ) = = 0 & & ! this . field _ 73251 _ h . field _ 73011 _ w . func _ 186058 _ p ( ) . shouldLoadSpawn ( ) ) { <nl> - + net . minecraftforge . common . DimensionManager . unloadWorld ( this . field _ 73251 _ h . field _ 73011 _ w . getDimension ( ) ) ; <nl> - + break ; <nl> - + } <nl> - } <nl> + @ @ - 242 , 6 + 276 , 8 @ @ <nl> } <nl> } <nl> + <nl> + + if ( this . field _ 73244 _ f . isEmpty ( ) ) net . minecraftforge . common . DimensionManager . unloadWorld ( this . field _ 73251 _ h . field _ 73011 _ w . getDimension ( ) ) ; <nl> + + <nl> + this . field _ 73247 _ e . func _ 75817 _ a ( ) ; <nl> + } <nl> + <nl> diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> index a6727e8 . . b1646f7 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> @ @ - 32 , 7 + 32 , 9 @ @ import java . util . concurrent . ConcurrentMap ; <nl> <nl> import it . unimi . dsi . fastutil . ints . IntArrayList ; <nl> import it . unimi . dsi . fastutil . ints . IntListIterator ; <nl> - import org . apache . logging . log4j . Level ; <nl> + import it . unimi . dsi . fastutil . ints . IntOpenHashSet ; <nl> + import it . unimi . dsi . fastutil . ints . IntSet ; <nl> + import it . unimi . dsi . fastutil . ints . IntSets ; <nl> <nl> import com . google . common . collect . HashMultiset ; <nl> import com . google . common . collect . Lists ; <nl> @ @ - 50 , 7 + 52 , 6 @ @ import net . minecraft . world . WorldServer ; <nl> import net . minecraft . world . WorldServerMulti ; <nl> import net . minecraft . world . storage . ISaveHandler ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> - import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import javax . annotation . Nullable ; <nl> @ @ - 68 , 13 + 69 , 15 @ @ public class DimensionManager <nl> } <nl> } <nl> <nl> - private static Hashtable < Integer , WorldServer > worlds = new Hashtable < Integer , WorldServer > ( ) ; <nl> private static boolean hasInit = false ; <nl> - private static Hashtable < Integer , Dimension > dimensions = new Hashtable < Integer , Dimension > ( ) ; <nl> - private static IntArrayList unloadQueue = new IntArrayList ( ) ; <nl> - private static BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; <nl> - private static ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . < World , World > makeMap ( ) ; <nl> - private static Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; <nl> + <nl> + private static final Hashtable < Integer , WorldServer > worlds = new Hashtable < > ( ) ; <nl> + private static final Hashtable < Integer , Dimension > dimensions = new Hashtable < > ( ) ; <nl> + private static final IntSet keepLoaded = IntSets . synchronize ( new IntOpenHashSet ( ) ) ; <nl> + private static final IntArrayList unloadQueue = new IntArrayList ( ) ; <nl> + private static final BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; <nl> + private static final ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . makeMap ( ) ; <nl> + private static final Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; <nl> <nl> / * * <nl> * Returns a list of dimensions associated with this DimensionType . <nl> @ @ - 299 , 13 + 302 , 35 @ @ public class DimensionManager <nl> } <nl> <nl> / * * <nl> - * Queues a dimension to unload . <nl> - * If the dimension is already queued , it will reset the delay to unload <nl> + * Sets if a dimension should stay loaded . <nl> + * @ param dim the dimension ID <nl> + * @ param keep whether or not the dimension should be kept loaded <nl> + * @ return true iff the dimension ' s status changed <nl> + * / <nl> + public static boolean keepDimensionLoaded ( int dim , boolean keep ) <nl> + { <nl> + return keep ? keepLoaded . add ( dim ) : keepLoaded . remove ( dim ) ; <nl> + } <nl> + <nl> + private static boolean canUnloadWorld ( WorldServer world ) <nl> + { <nl> + return ForgeChunkManager . getPersistentChunksFor ( world ) . isEmpty ( ) <nl> + & & world . playerEntities . isEmpty ( ) <nl> + & & ! world . provider . getDimensionType ( ) . shouldLoadSpawn ( ) <nl> + & & ! keepLoaded . contains ( world . provider . getDimension ( ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Queues a dimension to unload , if it can be unloaded . <nl> + * If the dimension is already queued , it will reset the delay to unload . <nl> * @ param id The id of the dimension <nl> * / <nl> public static void unloadWorld ( int id ) <nl> { <nl> - if ( ! unloadQueue . contains ( id ) ) <nl> + WorldServer world = worlds . get ( id ) ; <nl> + if ( world = = null | | ! canUnloadWorld ( world ) ) return ; <nl> + <nl> + if ( ! unloadQueue . contains ( id ) ) <nl> { <nl> FMLLog . log . debug ( " Queueing dimension { } to unload " , id ) ; <nl> unloadQueue . add ( id ) ; <nl> @ @ - 337 , 7 + 362 , 8 @ @ public class DimensionManager <nl> WorldServer w = worlds . get ( id ) ; <nl> queueIterator . remove ( ) ; <nl> dimension . ticksWaited = 0 ; <nl> - if ( w = = null | | ! ForgeChunkManager . getPersistentChunksFor ( w ) . isEmpty ( ) | | ! w . playerEntities . isEmpty ( ) | | dimension . type . shouldLoadSpawn ( ) ) / / Don ' t unload the world if the status changed <nl> + / / Don ' t unload the world if the status changed <nl> + if ( w = = null | | ! canUnloadWorld ( w ) ) <nl> { <nl> FMLLog . log . debug ( " Aborting unload for dimension { } as status changed " , id ) ; <nl> continue ; <nl> diff - - git a / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java b / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java <nl> index e33cb8e . . 148bb1e 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java <nl> + + + b / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java <nl> @ @ - 41 , 7 + 41 , 7 @ @ public class ChunkGenWorker implements IWorker <nl> private final int notificationFrequency ; <nl> private int lastNotification = 0 ; <nl> private int genned = 0 ; <nl> - private Boolean loadSpawn ; <nl> + private Boolean keepingLoaded ; <nl> <nl> public ChunkGenWorker ( ICommandSender listener , BlockPos start , int total , int dim , int interval ) <nl> { <nl> @ @ - 116 , 10 + 116 , 9 @ @ public class ChunkGenWorker implements IWorker <nl> } <nl> } <nl> / / While we work we don ' t want to cause world load spam so pause unloading the world . <nl> - if ( loadSpawn = = null ) <nl> + if ( keepingLoaded = = null ) <nl> { <nl> - loadSpawn = world . provider . getDimensionType ( ) . shouldLoadSpawn ( ) ; <nl> - world . provider . getDimensionType ( ) . setLoadSpawn ( true ) ; <nl> + keepingLoaded = DimensionManager . keepDimensionLoaded ( dim , true ) ; <nl> } <nl> <nl> if ( + + lastNotification > = notificationFrequency ) <nl> @ @ - 159 , 7 + 158 , 10 @ @ public class ChunkGenWorker implements IWorker <nl> if ( queue . size ( ) = = 0 ) <nl> { <nl> listener . sendMessage ( TextComponentHelper . createComponentTranslation ( listener , " commands . forge . gen . complete " , genned , total , dim ) ) ; <nl> - DimensionManager . getProviderType ( dim ) . setLoadSpawn ( loadSpawn ) ; <nl> + if ( keepingLoaded ! = null & & keepingLoaded ) <nl> + { <nl> + DimensionManager . keepDimensionLoaded ( dim , false ) ; <nl> + } <nl> } <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> index 11c4f48 . . 9012c4b 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java <nl> @ @ - 30 , 6 + 30 , 8 @ @ import java . util . Map ; <nl> import java . util . Map . Entry ; <nl> import java . util . concurrent . ConcurrentMap ; <nl> <nl> + import it . unimi . dsi . fastutil . ints . IntArrayList ; <nl> + import it . unimi . dsi . fastutil . ints . IntListIterator ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . collect . HashMultiset ; <nl> @ @ - 47 , 7 + 49 , 6 @ @ import net . minecraft . world . WorldProvider ; <nl> import net . minecraft . world . WorldServer ; <nl> import net . minecraft . world . WorldServerMulti ; <nl> import net . minecraft . world . storage . ISaveHandler ; <nl> - import net . minecraft . world . storage . SaveHandler ; <nl> import net . minecraftforge . event . world . WorldEvent ; <nl> import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> @ @ - 56 , 10 + 57 , 21 @ @ import javax . annotation . Nullable ; <nl> <nl> public class DimensionManager <nl> { <nl> + private static class Dimension <nl> + { <nl> + private final DimensionType type ; <nl> + private int ticksWaited ; <nl> + private Dimension ( DimensionType type ) <nl> + { <nl> + this . type = type ; <nl> + this . ticksWaited = 0 ; <nl> + } <nl> + } <nl> + <nl> private static Hashtable < Integer , WorldServer > worlds = new Hashtable < Integer , WorldServer > ( ) ; <nl> private static boolean hasInit = false ; <nl> - private static Hashtable < Integer , DimensionType > dimensions = new Hashtable < Integer , DimensionType > ( ) ; <nl> - private static ArrayList < Integer > unloadQueue = new ArrayList < Integer > ( ) ; <nl> + private static Hashtable < Integer , Dimension > dimensions = new Hashtable < Integer , Dimension > ( ) ; <nl> + private static IntArrayList unloadQueue = new IntArrayList ( ) ; <nl> private static BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; <nl> private static ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . < World , World > makeMap ( ) ; <nl> private static Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; <nl> @ @ - 71 , 9 + 83 , 9 @ @ public class DimensionManager <nl> { <nl> int [ ] ret = new int [ dimensions . size ( ) ] ; <nl> int x = 0 ; <nl> - for ( Map . Entry < Integer , DimensionType > ent : dimensions . entrySet ( ) ) <nl> + for ( Map . Entry < Integer , Dimension > ent : dimensions . entrySet ( ) ) <nl> { <nl> - if ( ent . getValue ( ) = = type ) <nl> + if ( ent . getValue ( ) . type = = type ) <nl> { <nl> ret [ x + + ] = ent . getKey ( ) ; <nl> } <nl> @ @ - 103 , 7 + 115 , 7 @ @ public class DimensionManager <nl> { <nl> throw new IllegalArgumentException ( String . format ( " Failed to register dimension for id % d , One is already registered " , id ) ) ; <nl> } <nl> - dimensions . put ( id , type ) ; <nl> + dimensions . put ( id , new Dimension ( type ) ) ; <nl> if ( id > = 0 ) <nl> { <nl> dimensionMap . set ( id ) ; <nl> @ @ - 133 , 7 + 145 , 7 @ @ public class DimensionManager <nl> { <nl> throw new IllegalArgumentException ( String . format ( " Could not get provider type for dimension % d , does not exist " , dim ) ) ; <nl> } <nl> - return dimensions . get ( dim ) ; <nl> + return dimensions . get ( dim ) . type ; <nl> } <nl> <nl> public static WorldProvider getProvider ( int dim ) <nl> @ @ - 286 , 39 + 298 , 65 @ @ public class DimensionManager <nl> } <nl> } <nl> <nl> - public static void unloadWorld ( int id ) { <nl> - unloadQueue . add ( id ) ; <nl> + / * * <nl> + * Queues a dimension to unload . <nl> + * If the dimension is already queued , it will reset the delay to unload <nl> + * @ param id The id of the dimension <nl> + * / <nl> + public static void unloadWorld ( int id ) <nl> + { <nl> + if ( ! unloadQueue . contains ( id ) ) <nl> + { <nl> + FMLLog . fine ( " Queueing dimension % s to unload " , id ) ; <nl> + unloadQueue . add ( id ) ; <nl> + } <nl> + else <nl> + { <nl> + dimensions . get ( id ) . ticksWaited = 0 ; <nl> + } <nl> + } <nl> + <nl> + public static boolean isWorldQueuedToUnload ( int id ) <nl> + { <nl> + return unloadQueue . contains ( id ) ; <nl> } <nl> <nl> / * <nl> * To be called by the server at the appropriate time , do not call from mod code . <nl> * / <nl> public static void unloadWorlds ( Hashtable < Integer , long [ ] > worldTickTimes ) { <nl> - for ( int id : unloadQueue ) { <nl> + IntListIterator queueIterator = unloadQueue . iterator ( ) ; <nl> + while ( queueIterator . hasNext ( ) ) { <nl> + int id = queueIterator . next ( ) ; <nl> + Dimension dimension = dimensions . get ( id ) ; <nl> + if ( dimension . ticksWaited < ForgeModContainer . dimensionUnloadQueueDelay ) <nl> + { <nl> + dimension . ticksWaited + + ; <nl> + continue ; <nl> + } <nl> WorldServer w = worlds . get ( id ) ; <nl> - try { <nl> - if ( w ! = null ) <nl> - { <nl> - w . saveAllChunks ( true , null ) ; <nl> - } <nl> - else <nl> - { <nl> - FMLLog . warning ( " Unexpected world unload - world % d is already unloaded " , id ) ; <nl> - } <nl> - } catch ( MinecraftException e ) { <nl> + queueIterator . remove ( ) ; <nl> + dimension . ticksWaited = 0 ; <nl> + if ( w = = null | | ! ForgeChunkManager . getPersistentChunksFor ( w ) . isEmpty ( ) | | ! w . playerEntities . isEmpty ( ) | | dimension . type . shouldLoadSpawn ( ) ) / / Don ' t unload the world if the status changed <nl> + { <nl> + FMLLog . fine ( " Aborting unload for dimension % s as status changed " , id ) ; <nl> + continue ; <nl> + } <nl> + try <nl> + { <nl> + w . saveAllChunks ( true , null ) ; <nl> + } <nl> + catch ( MinecraftException e ) <nl> + { <nl> e . printStackTrace ( ) ; <nl> } <nl> finally <nl> { <nl> - if ( w ! = null ) <nl> - { <nl> - MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Unload ( w ) ) ; <nl> - w . flush ( ) ; <nl> - setWorld ( id , null , w . getMinecraftServer ( ) ) ; <nl> - } <nl> + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Unload ( w ) ) ; <nl> + w . flush ( ) ; <nl> + setWorld ( id , null , w . getMinecraftServer ( ) ) ; <nl> } <nl> } <nl> - unloadQueue . clear ( ) ; <nl> } <nl> <nl> / * * <nl> diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> index 516a3b4 . . ddfc75a 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java <nl> @ @ - 116 , 6 + 116 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> public static long java8Reminder = 0 ; <nl> public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag <nl> public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread <nl> + public static int dimensionUnloadQueueDelay = 0 ; <nl> public static boolean logCascadingWorldGeneration = true ; / / see Chunk # logCascadingWorldGeneration ( ) <nl> <nl> private static Configuration config ; <nl> @ @ - 281 , 6 + 282 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC <nl> prop . setLanguageKey ( " forge . configgui . logCascadingWorldGeneration " ) ; <nl> propOrder . add ( prop . getName ( ) ) ; <nl> <nl> + prop = config . get ( Configuration . CATEGORY _ GENERAL , " dimensionUnloadQueueDelay " , 0 , <nl> + " The time in ticks the server will wait when a dimension was queued to unload . " + <nl> + " This can be useful when rapidly loading and unloading dimensions , like e . g . throwing items through a nether portal a few time per second . " ) ; <nl> + dimensionUnloadQueueDelay = prop . getInt ( 0 ) ; <nl> + prop . setLanguageKey ( " forge . configgui . dimensionUnloadQueueDelay " ) ; <nl> + propOrder . add ( prop . getName ( ) ) ; <nl> + <nl> config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; <nl> <nl> propOrder = new ArrayList < String > ( ) ; <nl> diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang <nl> index 31b0722 . . 16c4ed4 100644 <nl> - - - a / src / main / resources / assets / forge / lang / en _ US . lang <nl> + + + b / src / main / resources / assets / forge / lang / en _ US . lang <nl> @ @ - 29 , 6 + 29 , 8 @ @ forge . configgui . clumpingThreshold . tooltip = Controls the number threshold at which <nl> forge . configgui . clumpingThreshold = Packet Clumping Threshold <nl> forge . configgui . disableVersionCheck . tooltip = Set to true to disable Forge ' s version check mechanics . Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . <nl> forge . configgui . disableVersionCheck = Disable Forge Version Check <nl> + forge . configgui . dimensionUnloadQueueDelay = Delay when unloading dimension <nl> + forge . configgui . dimensionUnloadQueueDelay . tooltip = The time in ticks the server will wait until unloading a dimension . This can be useful when rapidly loading and unloading dimensions , like e . g . throwing items through a nether portal a few time per second . <nl> forge . configgui . enableGlobalConfig = Enable Global Config <nl> forge . configgui . forceDuplicateFluidBlockCrash . tooltip = Set this to true to force a crash if more than one block attempts to link back to the same Fluid . <nl> forge . configgui . forceDuplicateFluidBlockCrash = Force Dupe Fluid Block Crash

TEST DIFF:
diff - - git a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 index e20daa4 . . 2cc997e 100644 
 - - - a / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 + + + b / patches / minecraft / net / minecraft / world / gen / ChunkProviderServer . java . patch 
 @ @ - 72 , 7 + 72 , 7 @ @ 
 Iterator < Long > iterator = this . field _ 73248 _ b . iterator ( ) ; 
 
 for ( int i = 0 ; i < 100 & & iterator . hasNext ( ) ; iterator . remove ( ) ) 
 - @ @ - 234 , 10 + 267 , 15 @ @ 
 + @ @ - 234 , 6 + 267 , 7 @ @ 
 if ( chunk ! = null & & chunk . field _ 189550 _ d ) 
 { 
 chunk . func _ 76623 _ d ( ) ; 
 @ @ - 80 , 11 + 80 , 12 @ @ 
 this . func _ 73242 _ b ( chunk ) ; 
 this . func _ 73243 _ a ( chunk ) ; 
 this . field _ 73244 _ f . remove ( olong ) ; 
 - + + i ; 
 - + if ( field _ 73244 _ f . size ( ) = = 0 & & net . minecraftforge . common . ForgeChunkManager . getPersistentChunksFor ( this . field _ 73251 _ h ) . size ( ) = = 0 & & ! this . field _ 73251 _ h . field _ 73011 _ w . func _ 186058 _ p ( ) . shouldLoadSpawn ( ) ) { 
 - + net . minecraftforge . common . DimensionManager . unloadWorld ( this . field _ 73251 _ h . field _ 73011 _ w . getDimension ( ) ) ; 
 - + break ; 
 - + } 
 - } 
 + @ @ - 242 , 6 + 276 , 8 @ @ 
 } 
 } 
 + 
 + + if ( this . field _ 73244 _ f . isEmpty ( ) ) net . minecraftforge . common . DimensionManager . unloadWorld ( this . field _ 73251 _ h . field _ 73011 _ w . getDimension ( ) ) ; 
 + + 
 + this . field _ 73247 _ e . func _ 75817 _ a ( ) ; 
 + } 
 + 
 diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 index a6727e8 . . b1646f7 100644 
 - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java 
 + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 @ @ - 32 , 7 + 32 , 9 @ @ import java . util . concurrent . ConcurrentMap ; 
 
 import it . unimi . dsi . fastutil . ints . IntArrayList ; 
 import it . unimi . dsi . fastutil . ints . IntListIterator ; 
 - import org . apache . logging . log4j . Level ; 
 + import it . unimi . dsi . fastutil . ints . IntOpenHashSet ; 
 + import it . unimi . dsi . fastutil . ints . IntSet ; 
 + import it . unimi . dsi . fastutil . ints . IntSets ; 
 
 import com . google . common . collect . HashMultiset ; 
 import com . google . common . collect . Lists ; 
 @ @ - 50 , 7 + 52 , 6 @ @ import net . minecraft . world . WorldServer ; 
 import net . minecraft . world . WorldServerMulti ; 
 import net . minecraft . world . storage . ISaveHandler ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 - import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 
 import javax . annotation . Nullable ; 
 @ @ - 68 , 13 + 69 , 15 @ @ public class DimensionManager 
 } 
 } 
 
 - private static Hashtable < Integer , WorldServer > worlds = new Hashtable < Integer , WorldServer > ( ) ; 
 private static boolean hasInit = false ; 
 - private static Hashtable < Integer , Dimension > dimensions = new Hashtable < Integer , Dimension > ( ) ; 
 - private static IntArrayList unloadQueue = new IntArrayList ( ) ; 
 - private static BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; 
 - private static ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . < World , World > makeMap ( ) ; 
 - private static Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; 
 + 
 + private static final Hashtable < Integer , WorldServer > worlds = new Hashtable < > ( ) ; 
 + private static final Hashtable < Integer , Dimension > dimensions = new Hashtable < > ( ) ; 
 + private static final IntSet keepLoaded = IntSets . synchronize ( new IntOpenHashSet ( ) ) ; 
 + private static final IntArrayList unloadQueue = new IntArrayList ( ) ; 
 + private static final BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; 
 + private static final ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . makeMap ( ) ; 
 + private static final Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; 
 
 / * * 
 * Returns a list of dimensions associated with this DimensionType . 
 @ @ - 299 , 13 + 302 , 35 @ @ public class DimensionManager 
 } 
 
 / * * 
 - * Queues a dimension to unload . 
 - * If the dimension is already queued , it will reset the delay to unload 
 + * Sets if a dimension should stay loaded . 
 + * @ param dim the dimension ID 
 + * @ param keep whether or not the dimension should be kept loaded 
 + * @ return true iff the dimension ' s status changed 
 + * / 
 + public static boolean keepDimensionLoaded ( int dim , boolean keep ) 
 + { 
 + return keep ? keepLoaded . add ( dim ) : keepLoaded . remove ( dim ) ; 
 + } 
 + 
 + private static boolean canUnloadWorld ( WorldServer world ) 
 + { 
 + return ForgeChunkManager . getPersistentChunksFor ( world ) . isEmpty ( ) 
 + & & world . playerEntities . isEmpty ( ) 
 + & & ! world . provider . getDimensionType ( ) . shouldLoadSpawn ( ) 
 + & & ! keepLoaded . contains ( world . provider . getDimension ( ) ) ; 
 + } 
 + 
 + / * * 
 + * Queues a dimension to unload , if it can be unloaded . 
 + * If the dimension is already queued , it will reset the delay to unload . 
 * @ param id The id of the dimension 
 * / 
 public static void unloadWorld ( int id ) 
 { 
 - if ( ! unloadQueue . contains ( id ) ) 
 + WorldServer world = worlds . get ( id ) ; 
 + if ( world = = null | | ! canUnloadWorld ( world ) ) return ; 
 + 
 + if ( ! unloadQueue . contains ( id ) ) 
 { 
 FMLLog . log . debug ( " Queueing dimension { } to unload " , id ) ; 
 unloadQueue . add ( id ) ; 
 @ @ - 337 , 7 + 362 , 8 @ @ public class DimensionManager 
 WorldServer w = worlds . get ( id ) ; 
 queueIterator . remove ( ) ; 
 dimension . ticksWaited = 0 ; 
 - if ( w = = null | | ! ForgeChunkManager . getPersistentChunksFor ( w ) . isEmpty ( ) | | ! w . playerEntities . isEmpty ( ) | | dimension . type . shouldLoadSpawn ( ) ) / / Don ' t unload the world if the status changed 
 + / / Don ' t unload the world if the status changed 
 + if ( w = = null | | ! canUnloadWorld ( w ) ) 
 { 
 FMLLog . log . debug ( " Aborting unload for dimension { } as status changed " , id ) ; 
 continue ; 
 diff - - git a / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java b / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java 
 index e33cb8e . . 148bb1e 100644 
 - - - a / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java 
 + + + b / src / main / java / net / minecraftforge / server / command / ChunkGenWorker . java 
 @ @ - 41 , 7 + 41 , 7 @ @ public class ChunkGenWorker implements IWorker 
 private final int notificationFrequency ; 
 private int lastNotification = 0 ; 
 private int genned = 0 ; 
 - private Boolean loadSpawn ; 
 + private Boolean keepingLoaded ; 
 
 public ChunkGenWorker ( ICommandSender listener , BlockPos start , int total , int dim , int interval ) 
 { 
 @ @ - 116 , 10 + 116 , 9 @ @ public class ChunkGenWorker implements IWorker 
 } 
 } 
 / / While we work we don ' t want to cause world load spam so pause unloading the world . 
 - if ( loadSpawn = = null ) 
 + if ( keepingLoaded = = null ) 
 { 
 - loadSpawn = world . provider . getDimensionType ( ) . shouldLoadSpawn ( ) ; 
 - world . provider . getDimensionType ( ) . setLoadSpawn ( true ) ; 
 + keepingLoaded = DimensionManager . keepDimensionLoaded ( dim , true ) ; 
 } 
 
 if ( + + lastNotification > = notificationFrequency ) 
 @ @ - 159 , 7 + 158 , 10 @ @ public class ChunkGenWorker implements IWorker 
 if ( queue . size ( ) = = 0 ) 
 { 
 listener . sendMessage ( TextComponentHelper . createComponentTranslation ( listener , " commands . forge . gen . complete " , genned , total , dim ) ) ; 
 - DimensionManager . getProviderType ( dim ) . setLoadSpawn ( loadSpawn ) ; 
 + if ( keepingLoaded ! = null & & keepingLoaded ) 
 + { 
 + DimensionManager . keepDimensionLoaded ( dim , false ) ; 
 + } 
 } 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / DimensionManager . java b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 index 11c4f48 . . 9012c4b 100644 
 - - - a / src / main / java / net / minecraftforge / common / DimensionManager . java 
 + + + b / src / main / java / net / minecraftforge / common / DimensionManager . java 
 @ @ - 30 , 6 + 30 , 8 @ @ import java . util . Map ; 
 import java . util . Map . Entry ; 
 import java . util . concurrent . ConcurrentMap ; 
 
 + import it . unimi . dsi . fastutil . ints . IntArrayList ; 
 + import it . unimi . dsi . fastutil . ints . IntListIterator ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . collect . HashMultiset ; 
 @ @ - 47 , 7 + 49 , 6 @ @ import net . minecraft . world . WorldProvider ; 
 import net . minecraft . world . WorldServer ; 
 import net . minecraft . world . WorldServerMulti ; 
 import net . minecraft . world . storage . ISaveHandler ; 
 - import net . minecraft . world . storage . SaveHandler ; 
 import net . minecraftforge . event . world . WorldEvent ; 
 import net . minecraftforge . fml . common . FMLCommonHandler ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 @ @ - 56 , 10 + 57 , 21 @ @ import javax . annotation . Nullable ; 
 
 public class DimensionManager 
 { 
 + private static class Dimension 
 + { 
 + private final DimensionType type ; 
 + private int ticksWaited ; 
 + private Dimension ( DimensionType type ) 
 + { 
 + this . type = type ; 
 + this . ticksWaited = 0 ; 
 + } 
 + } 
 + 
 private static Hashtable < Integer , WorldServer > worlds = new Hashtable < Integer , WorldServer > ( ) ; 
 private static boolean hasInit = false ; 
 - private static Hashtable < Integer , DimensionType > dimensions = new Hashtable < Integer , DimensionType > ( ) ; 
 - private static ArrayList < Integer > unloadQueue = new ArrayList < Integer > ( ) ; 
 + private static Hashtable < Integer , Dimension > dimensions = new Hashtable < Integer , Dimension > ( ) ; 
 + private static IntArrayList unloadQueue = new IntArrayList ( ) ; 
 private static BitSet dimensionMap = new BitSet ( Long . SIZE < < 4 ) ; 
 private static ConcurrentMap < World , World > weakWorldMap = new MapMaker ( ) . weakKeys ( ) . weakValues ( ) . < World , World > makeMap ( ) ; 
 private static Multiset < Integer > leakedWorlds = HashMultiset . create ( ) ; 
 @ @ - 71 , 9 + 83 , 9 @ @ public class DimensionManager 
 { 
 int [ ] ret = new int [ dimensions . size ( ) ] ; 
 int x = 0 ; 
 - for ( Map . Entry < Integer , DimensionType > ent : dimensions . entrySet ( ) ) 
 + for ( Map . Entry < Integer , Dimension > ent : dimensions . entrySet ( ) ) 
 { 
 - if ( ent . getValue ( ) = = type ) 
 + if ( ent . getValue ( ) . type = = type ) 
 { 
 ret [ x + + ] = ent . getKey ( ) ; 
 } 
 @ @ - 103 , 7 + 115 , 7 @ @ public class DimensionManager 
 { 
 throw new IllegalArgumentException ( String . format ( " Failed to register dimension for id % d , One is already registered " , id ) ) ; 
 } 
 - dimensions . put ( id , type ) ; 
 + dimensions . put ( id , new Dimension ( type ) ) ; 
 if ( id > = 0 ) 
 { 
 dimensionMap . set ( id ) ; 
 @ @ - 133 , 7 + 145 , 7 @ @ public class DimensionManager 
 { 
 throw new IllegalArgumentException ( String . format ( " Could not get provider type for dimension % d , does not exist " , dim ) ) ; 
 } 
 - return dimensions . get ( dim ) ; 
 + return dimensions . get ( dim ) . type ; 
 } 
 
 public static WorldProvider getProvider ( int dim ) 
 @ @ - 286 , 39 + 298 , 65 @ @ public class DimensionManager 
 } 
 } 
 
 - public static void unloadWorld ( int id ) { 
 - unloadQueue . add ( id ) ; 
 + / * * 
 + * Queues a dimension to unload . 
 + * If the dimension is already queued , it will reset the delay to unload 
 + * @ param id The id of the dimension 
 + * / 
 + public static void unloadWorld ( int id ) 
 + { 
 + if ( ! unloadQueue . contains ( id ) ) 
 + { 
 + FMLLog . fine ( " Queueing dimension % s to unload " , id ) ; 
 + unloadQueue . add ( id ) ; 
 + } 
 + else 
 + { 
 + dimensions . get ( id ) . ticksWaited = 0 ; 
 + } 
 + } 
 + 
 + public static boolean isWorldQueuedToUnload ( int id ) 
 + { 
 + return unloadQueue . contains ( id ) ; 
 } 
 
 / * 
 * To be called by the server at the appropriate time , do not call from mod code . 
 * / 
 public static void unloadWorlds ( Hashtable < Integer , long [ ] > worldTickTimes ) { 
 - for ( int id : unloadQueue ) { 
 + IntListIterator queueIterator = unloadQueue . iterator ( ) ; 
 + while ( queueIterator . hasNext ( ) ) { 
 + int id = queueIterator . next ( ) ; 
 + Dimension dimension = dimensions . get ( id ) ; 
 + if ( dimension . ticksWaited < ForgeModContainer . dimensionUnloadQueueDelay ) 
 + { 
 + dimension . ticksWaited + + ; 
 + continue ; 
 + } 
 WorldServer w = worlds . get ( id ) ; 
 - try { 
 - if ( w ! = null ) 
 - { 
 - w . saveAllChunks ( true , null ) ; 
 - } 
 - else 
 - { 
 - FMLLog . warning ( " Unexpected world unload - world % d is already unloaded " , id ) ; 
 - } 
 - } catch ( MinecraftException e ) { 
 + queueIterator . remove ( ) ; 
 + dimension . ticksWaited = 0 ; 
 + if ( w = = null | | ! ForgeChunkManager . getPersistentChunksFor ( w ) . isEmpty ( ) | | ! w . playerEntities . isEmpty ( ) | | dimension . type . shouldLoadSpawn ( ) ) / / Don ' t unload the world if the status changed 
 + { 
 + FMLLog . fine ( " Aborting unload for dimension % s as status changed " , id ) ; 
 + continue ; 
 + } 
 + try 
 + { 
 + w . saveAllChunks ( true , null ) ; 
 + } 
 + catch ( MinecraftException e ) 
 + { 
 e . printStackTrace ( ) ; 
 } 
 finally 
 { 
 - if ( w ! = null ) 
 - { 
 - MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Unload ( w ) ) ; 
 - w . flush ( ) ; 
 - setWorld ( id , null , w . getMinecraftServer ( ) ) ; 
 - } 
 + MinecraftForge . EVENT _ BUS . post ( new WorldEvent . Unload ( w ) ) ; 
 + w . flush ( ) ; 
 + setWorld ( id , null , w . getMinecraftServer ( ) ) ; 
 } 
 } 
 - unloadQueue . clear ( ) ; 
 } 
 
 / * * 
 diff - - git a / src / main / java / net / minecraftforge / common / ForgeModContainer . java b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 index 516a3b4 . . ddfc75a 100644 
 - - - a / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 + + + b / src / main / java / net / minecraftforge / common / ForgeModContainer . java 
 @ @ - 116 , 6 + 116 , 7 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 public static long java8Reminder = 0 ; 
 public static boolean disableStairSlabCulling = false ; / / Also known as the " DontCullStairsBecauseIUseACrappyTexturePackThatBreaksBasicBlockShapesSoICantTrustBasicBlockCulling " flag 
 public static boolean alwaysSetupTerrainOffThread = false ; / / In RenderGlobal . setupTerrain , always force the chunk render updates to be queued to the thread 
 + public static int dimensionUnloadQueueDelay = 0 ; 
 public static boolean logCascadingWorldGeneration = true ; / / see Chunk # logCascadingWorldGeneration ( ) 
 
 private static Configuration config ; 
 @ @ - 281 , 6 + 282 , 13 @ @ public class ForgeModContainer extends DummyModContainer implements WorldAccessC 
 prop . setLanguageKey ( " forge . configgui . logCascadingWorldGeneration " ) ; 
 propOrder . add ( prop . getName ( ) ) ; 
 
 + prop = config . get ( Configuration . CATEGORY _ GENERAL , " dimensionUnloadQueueDelay " , 0 , 
 + " The time in ticks the server will wait when a dimension was queued to unload . " + 
 + " This can be useful when rapidly loading and unloading dimensions , like e . g . throwing items through a nether portal a few time per second . " ) ; 
 + dimensionUnloadQueueDelay = prop . getInt ( 0 ) ; 
 + prop . setLanguageKey ( " forge . configgui . dimensionUnloadQueueDelay " ) ; 
 + propOrder . add ( prop . getName ( ) ) ; 
 + 
 config . setCategoryPropertyOrder ( CATEGORY _ GENERAL , propOrder ) ; 
 
 propOrder = new ArrayList < String > ( ) ; 
 diff - - git a / src / main / resources / assets / forge / lang / en _ US . lang b / src / main / resources / assets / forge / lang / en _ US . lang 
 index 31b0722 . . 16c4ed4 100644 
 - - - a / src / main / resources / assets / forge / lang / en _ US . lang 
 + + + b / src / main / resources / assets / forge / lang / en _ US . lang 
 @ @ - 29 , 6 + 29 , 8 @ @ forge . configgui . clumpingThreshold . tooltip = Controls the number threshold at which 
 forge . configgui . clumpingThreshold = Packet Clumping Threshold 
 forge . configgui . disableVersionCheck . tooltip = Set to true to disable Forge ' s version check mechanics . Forge queries a small json file on our server for version information . For more details see the ForgeVersion class in our github . 
 forge . configgui . disableVersionCheck = Disable Forge Version Check 
 + forge . configgui . dimensionUnloadQueueDelay = Delay when unloading dimension 
 + forge . configgui . dimensionUnloadQueueDelay . tooltip = The time in ticks the server will wait until unloading a dimension . This can be useful when rapidly loading and unloading dimensions , like e . g . throwing items through a nether portal a few time per second . 
 forge . configgui . enableGlobalConfig = Enable Global Config 
 forge . configgui . forceDuplicateFluidBlockCrash . tooltip = Set this to true to force a crash if more than one block attempts to link back to the same Fluid . 
 forge . configgui . forceDuplicateFluidBlockCrash = Force Dupe Fluid Block Crash
