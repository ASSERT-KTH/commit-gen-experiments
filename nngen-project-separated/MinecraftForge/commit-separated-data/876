BLEU SCORE: 0.04753622060013115

TEST MSG: Fixed perspective transformation handling for fluid models , changed inventory fluid model to use unrotated still texture .
GENERATED MSG: Caching of fluid models . Fixes # 2145 .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> index f7a1fc1 . . a76bb89 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> @ @ - 5 , 6 + 5 , 7 @ @ import java . util . Collections ; <nl> import java . util . EnumMap ; <nl> import java . util . List ; <nl> <nl> + import javax . vecmath . Matrix4f ; <nl> import javax . vecmath . Vector4f ; <nl> <nl> import net . minecraft . block . state . IBlockState ; <nl> @ @ - 27 , 6 + 28 , 8 @ @ import net . minecraftforge . fluids . Fluid ; <nl> import net . minecraftforge . fluids . FluidRegistry ; <nl> import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> + import org . apache . commons . lang3 . tuple . Pair ; <nl> + <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> import com . google . common . cache . CacheBuilder ; <nl> @ @ - 64 , 12 + 67 , 7 @ @ public class ModelFluid implements IModelCustomData <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ; <nl> - IFlexibleBakedModel ret = new BakedFluid ( state . apply ( Optional . < IModelPart > absent ( ) ) , format , fluid . getColor ( ) , bakedTextureGetter . apply ( fluid . getStill ( ) ) , bakedTextureGetter . apply ( fluid . getFlowing ( ) ) , fluid . isGaseous ( ) ) ; <nl> - if ( map . isEmpty ( ) ) <nl> - { <nl> - return ret ; <nl> - } <nl> - return new IPerspectiveAwareModel . MapWrapper ( ret , map ) ; <nl> + return new BakedFluid ( state . apply ( Optional . < IModelPart > absent ( ) ) , map , format , fluid . getColor ( ) , bakedTextureGetter . apply ( fluid . getStill ( ) ) , bakedTextureGetter . apply ( fluid . getFlowing ( ) ) , fluid . isGaseous ( ) , Optional . absent ( ) ) ; <nl> } <nl> <nl> public IModelState getDefaultState ( ) <nl> @ @ - 97 , 7 + 95 , 7 @ @ public class ModelFluid implements IModelCustomData <nl> } <nl> } <nl> <nl> - public static class BakedFluid implements IFlexibleBakedModel , ISmartBlockModel <nl> + public static class BakedFluid implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel <nl> { <nl> private static final int x [ ] = { 0 , 0 , 1 , 1 } ; <nl> private static final int z [ ] = { 0 , 1 , 1 , 0 } ; <nl> @ @ - 116 , 11 + 114 , 12 @ @ public class ModelFluid implements IModelCustomData <nl> key > > > = 10 ; <nl> } <nl> int flowRound = ( int ) ( key & 0x7FF ) - 1024 ; <nl> - return new BakedFluid ( transformation , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; <nl> + return new BakedFluid ( transformation , transforms , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; <nl> } <nl> } ) ; <nl> <nl> private final Optional < TRSRTransformation > transformation ; <nl> + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; <nl> private final VertexFormat format ; <nl> private final int color ; <nl> private final TextureAtlasSprite still , flowing ; <nl> @ @ - 134 , 7 + 133 , 12 @ @ public class ModelFluid implements IModelCustomData <nl> <nl> public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) <nl> { <nl> - this ( transformation , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; <nl> + this ( transformation , ImmutableMap . of ( ) , format , color , still , flowing , gas , stateOption ) ; <nl> + } <nl> + <nl> + public BakedFluid ( Optional < TRSRTransformation > transformation , ImmutableMap < TransformType , TRSRTransformation > transforms , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) <nl> + { <nl> + this ( transformation , transforms , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; <nl> } <nl> <nl> private static int [ ] getCorners ( Optional < IExtendedBlockState > stateOption ) <nl> @ @ - 163 , 9 + 167 , 10 @ @ public class ModelFluid implements IModelCustomData <nl> return flowRound ; <nl> } <nl> <nl> - public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) <nl> + public BakedFluid ( Optional < TRSRTransformation > transformation , ImmutableMap < TransformType , TRSRTransformation > transforms , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) <nl> { <nl> this . transformation = transformation ; <nl> + this . transforms = transforms ; <nl> this . format = format ; <nl> this . color = color ; <nl> this . still = still ; <nl> @ @ - 278 , 8 + 283 , 8 @ @ public class ModelFluid implements IModelCustomData <nl> putVertex ( <nl> builder , EnumFacing . UP , <nl> z [ i ] , x [ i ] , 0 , <nl> - still . getInterpolatedU ( x [ i ] * 16 ) , <nl> - still . getInterpolatedV ( z [ i ] * 16 ) ) ; <nl> + still . getInterpolatedU ( z [ i ] * 16 ) , <nl> + still . getInterpolatedV ( x [ i ] * 16 ) ) ; <nl> } <nl> faceQuads . put ( EnumFacing . SOUTH , ImmutableList . < BakedQuad > of ( builder . build ( ) ) ) ; <nl> } <nl> @ @ - 293 , 7 + 298 , 7 @ @ public class ModelFluid implements IModelCustomData <nl> { <nl> case POSITION : <nl> float [ ] data = new float [ ] { x - side . getDirectionVec ( ) . getX ( ) * eps , y , z - side . getDirectionVec ( ) . getZ ( ) * eps , 1 } ; <nl> - if ( transformation . isPresent ( ) ) <nl> + if ( transformation . isPresent ( ) & & transformation . get ( ) ! = TRSRTransformation . identity ( ) ) <nl> { <nl> Vector4f vec = new Vector4f ( data ) ; <nl> transformation . get ( ) . getMatrix ( ) . transform ( vec ) ; <nl> @ @ - 383 , 6 + 388 , 12 @ @ public class ModelFluid implements IModelCustomData <nl> } <nl> return this ; <nl> } <nl> + <nl> + @ Override <nl> + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType type ) <nl> + { <nl> + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , transforms , type ) ; <nl> + } <nl> } <nl> <nl> @ Override <nl> diff - - git a / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json b / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json <nl> index bce5d7c . . 6cf10de 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json <nl> @ @ - 1 , 17 + 1 , 18 @ @ <nl> { <nl> " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " model " : " forge : fluid " , <nl> + " transform " : " forge : default - item " <nl> + } , <nl> " variants " : { <nl> - " fluid " : { <nl> - " model " : " forge : fluid " , <nl> + " fluid " : [ { <nl> " custom " : { " fluid " : " testfluid " } <nl> - } , <nl> - " gas " : { <nl> - " model " : " forge : fluid " , <nl> + } ] , <nl> + " gas " : [ { <nl> " custom " : { " fluid " : " testgas " } <nl> - } , <nl> - " milk " : { <nl> - " model " : " forge : fluid " , <nl> + } ] , <nl> + " milk " : [ { <nl> " custom " : { " fluid " : " milk " } <nl> - } <nl> + } ] <nl> } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> index 1fc7d10 . . dd4fb11 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java <nl> @ @ - 29 , 6 + 29 , 9 @ @ import net . minecraftforge . fml . common . FMLLog ; <nl> <nl> import com . google . common . base . Function ; <nl> import com . google . common . base . Optional ; <nl> + import com . google . common . cache . CacheBuilder ; <nl> + import com . google . common . cache . CacheLoader ; <nl> + import com . google . common . cache . LoadingCache ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> import com . google . common . collect . ImmutableSet ; <nl> @ @ - 100 , 12 + 103 , 28 @ @ public class ModelFluid implements IModelCustomData <nl> private static final int z [ ] = { 0 , 1 , 1 , 0 } ; <nl> private static final float eps = 1e - 3f ; <nl> <nl> + private final LoadingCache < Long , BakedFluid > modelCache = CacheBuilder . newBuilder ( ) . maximumSize ( 200 ) . build ( new CacheLoader < Long , BakedFluid > ( ) <nl> + { <nl> + public BakedFluid load ( Long key ) throws Exception <nl> + { <nl> + boolean statePresent = ( key & 1 ) ! = 0 ; <nl> + key > > > = 1 ; <nl> + int [ ] cornerRound = new int [ 4 ] ; <nl> + for ( int i = 0 ; i < 4 ; i + + ) <nl> + { <nl> + cornerRound [ i ] = ( int ) ( key & 0x3FF ) ; <nl> + key > > > = 10 ; <nl> + } <nl> + int flowRound = ( int ) ( key & 0x7FF ) - 1024 ; <nl> + return new BakedFluid ( transformation , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; <nl> + } <nl> + } ) ; <nl> + <nl> private final Optional < TRSRTransformation > transformation ; <nl> private final VertexFormat format ; <nl> private final int color ; <nl> private final TextureAtlasSprite still , flowing ; <nl> private final boolean gas ; <nl> - private final Optional < IExtendedBlockState > state ; <nl> private final EnumMap < EnumFacing , List < BakedQuad > > faceQuads ; <nl> <nl> public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas ) <nl> @ @ - 115 , 13 + 134 , 41 @ @ public class ModelFluid implements IModelCustomData <nl> <nl> public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) <nl> { <nl> + this ( transformation , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; <nl> + } <nl> + <nl> + private static int [ ] getCorners ( Optional < IExtendedBlockState > stateOption ) <nl> + { <nl> + int [ ] cornerRound = new int [ ] { 0 , 0 , 0 , 0 } ; <nl> + if ( stateOption . isPresent ( ) ) <nl> + { <nl> + IExtendedBlockState state = stateOption . get ( ) ; <nl> + for ( int i = 0 ; i < 4 ; i + + ) <nl> + { <nl> + cornerRound [ i ] = Math . round ( state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) * 768 ) ; <nl> + } <nl> + } <nl> + return cornerRound ; <nl> + } <nl> + <nl> + private static int getFlow ( Optional < IExtendedBlockState > stateOption ) <nl> + { <nl> + int flowRound = - 1000 ; <nl> + if ( stateOption . isPresent ( ) ) <nl> + { <nl> + flowRound = ( int ) Math . round ( Math . toDegrees ( stateOption . get ( ) . getValue ( BlockFluidBase . FLOW _ DIRECTION ) ) ) ; <nl> + } <nl> + return flowRound ; <nl> + } <nl> + <nl> + public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) <nl> + { <nl> this . transformation = transformation ; <nl> this . format = format ; <nl> this . color = color ; <nl> this . still = still ; <nl> this . flowing = flowing ; <nl> this . gas = gas ; <nl> - this . state = stateOption ; <nl> <nl> faceQuads = Maps . newEnumMap ( EnumFacing . class ) ; <nl> for ( EnumFacing side : EnumFacing . values ( ) ) <nl> @ @ - 129 , 23 + 176 , 22 @ @ public class ModelFluid implements IModelCustomData <nl> faceQuads . put ( side , ImmutableList . < BakedQuad > of ( ) ) ; <nl> } <nl> <nl> - if ( state . isPresent ( ) ) <nl> + if ( statePresent ) <nl> { <nl> - IExtendedBlockState state = this . state . get ( ) ; <nl> float [ ] y = new float [ 4 ] ; <nl> for ( int i = 0 ; i < 4 ; i + + ) <nl> { <nl> if ( gas ) <nl> { <nl> - y [ i ] = 1 - state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) ; <nl> + y [ i ] = 1 - cornerRound [ i ] / 768f ; <nl> } <nl> else <nl> { <nl> - y [ i ] = state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) ; <nl> + y [ i ] = cornerRound [ i ] / 768f ; <nl> } <nl> } <nl> <nl> - float flow = state . getValue ( BlockFluidBase . FLOW _ DIRECTION ) ; <nl> + float flow = ( float ) Math . toRadians ( flowRound ) ; <nl> <nl> / / top <nl> <nl> @ @ - 222 , 7 + 268 , 6 @ @ public class ModelFluid implements IModelCustomData <nl> else <nl> { <nl> / / 1 quad for inventory <nl> - <nl> UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; <nl> builder . setQuadOrientation ( EnumFacing . UP ) ; <nl> builder . setQuadColored ( ) ; <nl> @ @ - 242 , 7 + 287 , 6 @ @ public class ModelFluid implements IModelCustomData <nl> { <nl> for ( int e = 0 ; e < format . getElementCount ( ) ; e + + ) <nl> { <nl> - / / TODO transformation <nl> switch ( format . getElement ( e ) . getUsage ( ) ) <nl> { <nl> case POSITION : <nl> @ @ - 280 , 7 + 324 , 7 @ @ public class ModelFluid implements IModelCustomData <nl> <nl> public boolean isAmbientOcclusion ( ) <nl> { <nl> - return false ; / / FIXME <nl> + return false ; <nl> } <nl> <nl> public boolean isGui3d ( ) <nl> @ @ - 320 , 7 + 364 , 22 @ @ public class ModelFluid implements IModelCustomData <nl> <nl> public IBakedModel handleBlockState ( IBlockState state ) <nl> { <nl> - return new BakedFluid ( transformation , format , color , still , flowing , gas , Optional . of ( ( IExtendedBlockState ) state ) ) ; <nl> + if ( state instanceof IExtendedBlockState ) <nl> + { <nl> + IExtendedBlockState exState = ( IExtendedBlockState ) state ; <nl> + int [ ] cornerRound = getCorners ( Optional . of ( exState ) ) ; <nl> + int flowRound = getFlow ( Optional . of ( exState ) ) ; <nl> + long key = flowRound + 1024 ; <nl> + for ( int i = 3 ; i > = 0 ; i - - ) <nl> + { <nl> + key < < = 10 ; <nl> + key | = cornerRound [ i ] ; <nl> + } <nl> + key < < = 1 ; <nl> + key | = 1 ; <nl> + return modelCache . getUnchecked ( key ) ; <nl> + } <nl> + return this ; <nl> } <nl> } <nl>

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 index f7a1fc1 . . a76bb89 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 @ @ - 5 , 6 + 5 , 7 @ @ import java . util . Collections ; 
 import java . util . EnumMap ; 
 import java . util . List ; 
 
 + import javax . vecmath . Matrix4f ; 
 import javax . vecmath . Vector4f ; 
 
 import net . minecraft . block . state . IBlockState ; 
 @ @ - 27 , 6 + 28 , 8 @ @ import net . minecraftforge . fluids . Fluid ; 
 import net . minecraftforge . fluids . FluidRegistry ; 
 import net . minecraftforge . fml . common . FMLLog ; 
 
 + import org . apache . commons . lang3 . tuple . Pair ; 
 + 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 import com . google . common . cache . CacheBuilder ; 
 @ @ - 64 , 12 + 67 , 7 @ @ public class ModelFluid implements IModelCustomData 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 ImmutableMap < TransformType , TRSRTransformation > map = IPerspectiveAwareModel . MapWrapper . getTransforms ( state ) ; 
 - IFlexibleBakedModel ret = new BakedFluid ( state . apply ( Optional . < IModelPart > absent ( ) ) , format , fluid . getColor ( ) , bakedTextureGetter . apply ( fluid . getStill ( ) ) , bakedTextureGetter . apply ( fluid . getFlowing ( ) ) , fluid . isGaseous ( ) ) ; 
 - if ( map . isEmpty ( ) ) 
 - { 
 - return ret ; 
 - } 
 - return new IPerspectiveAwareModel . MapWrapper ( ret , map ) ; 
 + return new BakedFluid ( state . apply ( Optional . < IModelPart > absent ( ) ) , map , format , fluid . getColor ( ) , bakedTextureGetter . apply ( fluid . getStill ( ) ) , bakedTextureGetter . apply ( fluid . getFlowing ( ) ) , fluid . isGaseous ( ) , Optional . absent ( ) ) ; 
 } 
 
 public IModelState getDefaultState ( ) 
 @ @ - 97 , 7 + 95 , 7 @ @ public class ModelFluid implements IModelCustomData 
 } 
 } 
 
 - public static class BakedFluid implements IFlexibleBakedModel , ISmartBlockModel 
 + public static class BakedFluid implements IFlexibleBakedModel , ISmartBlockModel , IPerspectiveAwareModel 
 { 
 private static final int x [ ] = { 0 , 0 , 1 , 1 } ; 
 private static final int z [ ] = { 0 , 1 , 1 , 0 } ; 
 @ @ - 116 , 11 + 114 , 12 @ @ public class ModelFluid implements IModelCustomData 
 key > > > = 10 ; 
 } 
 int flowRound = ( int ) ( key & 0x7FF ) - 1024 ; 
 - return new BakedFluid ( transformation , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; 
 + return new BakedFluid ( transformation , transforms , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; 
 } 
 } ) ; 
 
 private final Optional < TRSRTransformation > transformation ; 
 + private final ImmutableMap < TransformType , TRSRTransformation > transforms ; 
 private final VertexFormat format ; 
 private final int color ; 
 private final TextureAtlasSprite still , flowing ; 
 @ @ - 134 , 7 + 133 , 12 @ @ public class ModelFluid implements IModelCustomData 
 
 public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) 
 { 
 - this ( transformation , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; 
 + this ( transformation , ImmutableMap . of ( ) , format , color , still , flowing , gas , stateOption ) ; 
 + } 
 + 
 + public BakedFluid ( Optional < TRSRTransformation > transformation , ImmutableMap < TransformType , TRSRTransformation > transforms , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) 
 + { 
 + this ( transformation , transforms , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; 
 } 
 
 private static int [ ] getCorners ( Optional < IExtendedBlockState > stateOption ) 
 @ @ - 163 , 9 + 167 , 10 @ @ public class ModelFluid implements IModelCustomData 
 return flowRound ; 
 } 
 
 - public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) 
 + public BakedFluid ( Optional < TRSRTransformation > transformation , ImmutableMap < TransformType , TRSRTransformation > transforms , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) 
 { 
 this . transformation = transformation ; 
 + this . transforms = transforms ; 
 this . format = format ; 
 this . color = color ; 
 this . still = still ; 
 @ @ - 278 , 8 + 283 , 8 @ @ public class ModelFluid implements IModelCustomData 
 putVertex ( 
 builder , EnumFacing . UP , 
 z [ i ] , x [ i ] , 0 , 
 - still . getInterpolatedU ( x [ i ] * 16 ) , 
 - still . getInterpolatedV ( z [ i ] * 16 ) ) ; 
 + still . getInterpolatedU ( z [ i ] * 16 ) , 
 + still . getInterpolatedV ( x [ i ] * 16 ) ) ; 
 } 
 faceQuads . put ( EnumFacing . SOUTH , ImmutableList . < BakedQuad > of ( builder . build ( ) ) ) ; 
 } 
 @ @ - 293 , 7 + 298 , 7 @ @ public class ModelFluid implements IModelCustomData 
 { 
 case POSITION : 
 float [ ] data = new float [ ] { x - side . getDirectionVec ( ) . getX ( ) * eps , y , z - side . getDirectionVec ( ) . getZ ( ) * eps , 1 } ; 
 - if ( transformation . isPresent ( ) ) 
 + if ( transformation . isPresent ( ) & & transformation . get ( ) ! = TRSRTransformation . identity ( ) ) 
 { 
 Vector4f vec = new Vector4f ( data ) ; 
 transformation . get ( ) . getMatrix ( ) . transform ( vec ) ; 
 @ @ - 383 , 6 + 388 , 12 @ @ public class ModelFluid implements IModelCustomData 
 } 
 return this ; 
 } 
 + 
 + @ Override 
 + public Pair < ? extends IFlexibleBakedModel , Matrix4f > handlePerspective ( TransformType type ) 
 + { 
 + return IPerspectiveAwareModel . MapWrapper . handlePerspective ( this , transforms , type ) ; 
 + } 
 } 
 
 @ Override 
 diff - - git a / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json b / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json 
 index bce5d7c . . 6cf10de 100644 
 - - - a / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelfluid / blockstates / TestFluidBlock . json 
 @ @ - 1 , 17 + 1 , 18 @ @ 
 { 
 " forge _ marker " : 1 , 
 + " defaults " : { 
 + " model " : " forge : fluid " , 
 + " transform " : " forge : default - item " 
 + } , 
 " variants " : { 
 - " fluid " : { 
 - " model " : " forge : fluid " , 
 + " fluid " : [ { 
 " custom " : { " fluid " : " testfluid " } 
 - } , 
 - " gas " : { 
 - " model " : " forge : fluid " , 
 + } ] , 
 + " gas " : [ { 
 " custom " : { " fluid " : " testgas " } 
 - } , 
 - " milk " : { 
 - " model " : " forge : fluid " , 
 + } ] , 
 + " milk " : [ { 
 " custom " : { " fluid " : " milk " } 
 - } 
 + } ] 
 } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelFluid . java b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 index 1fc7d10 . . dd4fb11 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelFluid . java 
 @ @ - 29 , 6 + 29 , 9 @ @ import net . minecraftforge . fml . common . FMLLog ; 
 
 import com . google . common . base . Function ; 
 import com . google . common . base . Optional ; 
 + import com . google . common . cache . CacheBuilder ; 
 + import com . google . common . cache . CacheLoader ; 
 + import com . google . common . cache . LoadingCache ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 import com . google . common . collect . ImmutableSet ; 
 @ @ - 100 , 12 + 103 , 28 @ @ public class ModelFluid implements IModelCustomData 
 private static final int z [ ] = { 0 , 1 , 1 , 0 } ; 
 private static final float eps = 1e - 3f ; 
 
 + private final LoadingCache < Long , BakedFluid > modelCache = CacheBuilder . newBuilder ( ) . maximumSize ( 200 ) . build ( new CacheLoader < Long , BakedFluid > ( ) 
 + { 
 + public BakedFluid load ( Long key ) throws Exception 
 + { 
 + boolean statePresent = ( key & 1 ) ! = 0 ; 
 + key > > > = 1 ; 
 + int [ ] cornerRound = new int [ 4 ] ; 
 + for ( int i = 0 ; i < 4 ; i + + ) 
 + { 
 + cornerRound [ i ] = ( int ) ( key & 0x3FF ) ; 
 + key > > > = 10 ; 
 + } 
 + int flowRound = ( int ) ( key & 0x7FF ) - 1024 ; 
 + return new BakedFluid ( transformation , format , color , still , flowing , gas , statePresent , cornerRound , flowRound ) ; 
 + } 
 + } ) ; 
 + 
 private final Optional < TRSRTransformation > transformation ; 
 private final VertexFormat format ; 
 private final int color ; 
 private final TextureAtlasSprite still , flowing ; 
 private final boolean gas ; 
 - private final Optional < IExtendedBlockState > state ; 
 private final EnumMap < EnumFacing , List < BakedQuad > > faceQuads ; 
 
 public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas ) 
 @ @ - 115 , 13 + 134 , 41 @ @ public class ModelFluid implements IModelCustomData 
 
 public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , Optional < IExtendedBlockState > stateOption ) 
 { 
 + this ( transformation , format , color , still , flowing , gas , stateOption . isPresent ( ) , getCorners ( stateOption ) , getFlow ( stateOption ) ) ; 
 + } 
 + 
 + private static int [ ] getCorners ( Optional < IExtendedBlockState > stateOption ) 
 + { 
 + int [ ] cornerRound = new int [ ] { 0 , 0 , 0 , 0 } ; 
 + if ( stateOption . isPresent ( ) ) 
 + { 
 + IExtendedBlockState state = stateOption . get ( ) ; 
 + for ( int i = 0 ; i < 4 ; i + + ) 
 + { 
 + cornerRound [ i ] = Math . round ( state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) * 768 ) ; 
 + } 
 + } 
 + return cornerRound ; 
 + } 
 + 
 + private static int getFlow ( Optional < IExtendedBlockState > stateOption ) 
 + { 
 + int flowRound = - 1000 ; 
 + if ( stateOption . isPresent ( ) ) 
 + { 
 + flowRound = ( int ) Math . round ( Math . toDegrees ( stateOption . get ( ) . getValue ( BlockFluidBase . FLOW _ DIRECTION ) ) ) ; 
 + } 
 + return flowRound ; 
 + } 
 + 
 + public BakedFluid ( Optional < TRSRTransformation > transformation , VertexFormat format , int color , TextureAtlasSprite still , TextureAtlasSprite flowing , boolean gas , boolean statePresent , int [ ] cornerRound , int flowRound ) 
 + { 
 this . transformation = transformation ; 
 this . format = format ; 
 this . color = color ; 
 this . still = still ; 
 this . flowing = flowing ; 
 this . gas = gas ; 
 - this . state = stateOption ; 
 
 faceQuads = Maps . newEnumMap ( EnumFacing . class ) ; 
 for ( EnumFacing side : EnumFacing . values ( ) ) 
 @ @ - 129 , 23 + 176 , 22 @ @ public class ModelFluid implements IModelCustomData 
 faceQuads . put ( side , ImmutableList . < BakedQuad > of ( ) ) ; 
 } 
 
 - if ( state . isPresent ( ) ) 
 + if ( statePresent ) 
 { 
 - IExtendedBlockState state = this . state . get ( ) ; 
 float [ ] y = new float [ 4 ] ; 
 for ( int i = 0 ; i < 4 ; i + + ) 
 { 
 if ( gas ) 
 { 
 - y [ i ] = 1 - state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) ; 
 + y [ i ] = 1 - cornerRound [ i ] / 768f ; 
 } 
 else 
 { 
 - y [ i ] = state . getValue ( BlockFluidBase . LEVEL _ CORNERS [ i ] ) ; 
 + y [ i ] = cornerRound [ i ] / 768f ; 
 } 
 } 
 
 - float flow = state . getValue ( BlockFluidBase . FLOW _ DIRECTION ) ; 
 + float flow = ( float ) Math . toRadians ( flowRound ) ; 
 
 / / top 
 
 @ @ - 222 , 7 + 268 , 6 @ @ public class ModelFluid implements IModelCustomData 
 else 
 { 
 / / 1 quad for inventory 
 - 
 UnpackedBakedQuad . Builder builder = new UnpackedBakedQuad . Builder ( format ) ; 
 builder . setQuadOrientation ( EnumFacing . UP ) ; 
 builder . setQuadColored ( ) ; 
 @ @ - 242 , 7 + 287 , 6 @ @ public class ModelFluid implements IModelCustomData 
 { 
 for ( int e = 0 ; e < format . getElementCount ( ) ; e + + ) 
 { 
 - / / TODO transformation 
 switch ( format . getElement ( e ) . getUsage ( ) ) 
 { 
 case POSITION : 
 @ @ - 280 , 7 + 324 , 7 @ @ public class ModelFluid implements IModelCustomData 
 
 public boolean isAmbientOcclusion ( ) 
 { 
 - return false ; / / FIXME 
 + return false ; 
 } 
 
 public boolean isGui3d ( ) 
 @ @ - 320 , 7 + 364 , 22 @ @ public class ModelFluid implements IModelCustomData 
 
 public IBakedModel handleBlockState ( IBlockState state ) 
 { 
 - return new BakedFluid ( transformation , format , color , still , flowing , gas , Optional . of ( ( IExtendedBlockState ) state ) ) ; 
 + if ( state instanceof IExtendedBlockState ) 
 + { 
 + IExtendedBlockState exState = ( IExtendedBlockState ) state ; 
 + int [ ] cornerRound = getCorners ( Optional . of ( exState ) ) ; 
 + int flowRound = getFlow ( Optional . of ( exState ) ) ; 
 + long key = flowRound + 1024 ; 
 + for ( int i = 3 ; i > = 0 ; i - - ) 
 + { 
 + key < < = 10 ; 
 + key | = cornerRound [ i ] ; 
 + } 
 + key < < = 1 ; 
 + key | = 1 ; 
 + return modelCache . getUnchecked ( key ) ; 
 + } 
 + return this ; 
 } 
 } 

