BLEU SCORE: 0.040583489434387374

TEST MSG: Added a tooltip color event .
GENERATED MSG: Add RenderTooltipEvent

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java <nl> index 59c0811 . . 52fdf87 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java <nl> + + + b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java <nl> @ @ - 241 , 4 + 241 , 74 @ @ public abstract class RenderTooltipEvent extends Event <nl> public PostText ( @ Nonnull ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) <nl> { super ( stack , textLines , x , y , fr , width , height ) ; } <nl> } <nl> + <nl> + / * * <nl> + * This event is fired when the colours for the tooltip background are determined . <nl> + * / <nl> + public static class Color extends RenderTooltipEvent <nl> + { <nl> + private final int originalBackground ; <nl> + private final int originalBorderStart ; <nl> + private final int originalBorderEnd ; <nl> + private int background ; <nl> + private int borderStart ; <nl> + private int borderEnd ; <nl> + <nl> + public Color ( @ Nonnull ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int background , int borderStart , <nl> + int borderEnd ) <nl> + { <nl> + super ( stack , textLines , x , y , fr ) ; <nl> + this . originalBackground = background ; <nl> + this . originalBorderStart = borderStart ; <nl> + this . originalBorderEnd = borderEnd ; <nl> + this . background = background ; <nl> + this . borderStart = borderStart ; <nl> + this . borderEnd = borderEnd ; <nl> + } <nl> + <nl> + public int getBackground ( ) <nl> + { <nl> + return background ; <nl> + } <nl> + <nl> + public void setBackground ( int background ) <nl> + { <nl> + this . background = background ; <nl> + } <nl> + <nl> + public int getBorderStart ( ) <nl> + { <nl> + return borderStart ; <nl> + } <nl> + <nl> + public void setBorderStart ( int borderStart ) <nl> + { <nl> + this . borderStart = borderStart ; <nl> + } <nl> + <nl> + public int getBorderEnd ( ) <nl> + { <nl> + return borderEnd ; <nl> + } <nl> + <nl> + public void setBorderEnd ( int borderEnd ) <nl> + { <nl> + this . borderEnd = borderEnd ; <nl> + } <nl> + <nl> + public int getOriginalBackground ( ) <nl> + { <nl> + return originalBackground ; <nl> + } <nl> + <nl> + public int getOriginalBorderStart ( ) <nl> + { <nl> + return originalBorderStart ; <nl> + } <nl> + <nl> + public int getOriginalBorderEnd ( ) <nl> + { <nl> + return originalBorderEnd ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> index 0167639 . . afdbf9c 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> @ @ - 371 , 14 + 371 , 19 @ @ public class GuiUtils <nl> } <nl> <nl> final int zLevel = 300 ; <nl> - final int backgroundColor = 0xF0100010 ; <nl> + int backgroundColor = 0xF0100010 ; <nl> + int borderColorStart = 0x505000FF ; <nl> + int borderColorEnd = ( borderColorStart & 0xFEFEFE ) > > 1 | borderColorStart & 0xFF000000 ; <nl> + RenderTooltipEvent . Color colorEvent = new RenderTooltipEvent . Color ( stack , textLines , tooltipX , tooltipY , font , backgroundColor , borderColorStart , borderColorEnd ) ; <nl> + MinecraftForge . EVENT _ BUS . post ( colorEvent ) ; <nl> + backgroundColor = colorEvent . getBackground ( ) ; <nl> + borderColorStart = colorEvent . getBorderStart ( ) ; <nl> + borderColorEnd = colorEvent . getBorderEnd ( ) ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 4 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 , backgroundColor , backgroundColor ) ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY + tooltipHeight + 3 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 4 , backgroundColor , backgroundColor ) ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; <nl> drawGradientRect ( zLevel , tooltipX - 4 , tooltipY - 3 , tooltipX - 3 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; <nl> drawGradientRect ( zLevel , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 4 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; <nl> - final int borderColorStart = 0x505000FF ; <nl> - final int borderColorEnd = ( borderColorStart & 0xFEFEFE ) > > 1 | borderColorStart & 0xFF000000 ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 + 1 , tooltipX - 3 + 1 , tooltipY + tooltipHeight + 3 - 1 , borderColorStart , borderColorEnd ) ; <nl> drawGradientRect ( zLevel , tooltipX + tooltipTextWidth + 2 , tooltipY - 3 + 1 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 - 1 , borderColorStart , borderColorEnd ) ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 + 1 , borderColorStart , borderColorStart ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / TooltipColorTest . java b / src / test / java / net / minecraftforge / debug / TooltipColorTest . java <nl> new file mode 100644 <nl> index 0000000 . . 92e4440 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / TooltipColorTest . java <nl> @ @ - 0 , 0 + 1 , 37 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import net . minecraft . init . Items ; <nl> + import net . minecraftforge . client . event . RenderTooltipEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + import net . minecraftforge . fml . relauncher . SideOnly ; <nl> + <nl> + @ Mod ( modid = TooltipColorTest . MODID , name = " Tooltip Color Test " , version = " 0 . 1 " , clientSideOnly = true ) <nl> + public class TooltipColorTest <nl> + { <nl> + public static final String MODID = " tooltipcolortest " ; <nl> + <nl> + private static final boolean ENABLE = false ; <nl> + <nl> + public TooltipColorTest ( ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + MinecraftForge . EVENT _ BUS . register ( this ) ; <nl> + } <nl> + } <nl> + <nl> + @ SubscribeEvent <nl> + @ SideOnly ( Side . CLIENT ) <nl> + public void getTooltipColor ( RenderTooltipEvent . Color event ) <nl> + { <nl> + if ( event . getStack ( ) . getItem ( ) = = Items . APPLE ) <nl> + { <nl> + event . setBackground ( 0xF0510404 ) ; <nl> + event . setBorderStart ( 0xF0bc0909 ) ; <nl> + event . setBorderEnd ( 0xF03f0f0f ) ; <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> index 7f0473a . . 8792c9c 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch <nl> @ @ - 1 , 21 + 1 , 23 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiScreen . java <nl> + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiScreen . java <nl> - @ @ - 147 , 7 + 147 , 8 @ @ <nl> + @ @ - 147 , 7 + 147 , 10 @ @ <nl> } <nl> } <nl> <nl> - this . func _ 146283 _ a ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ ) ; <nl> + FontRenderer font = p _ 146285 _ 1 _ . func _ 77973 _ b ( ) . getFontRenderer ( p _ 146285 _ 1 _ ) ; <nl> + + net . minecraftforge . fml . client . config . GuiUtils . preItemToolTip ( p _ 146285 _ 1 _ ) ; <nl> + this . drawHoveringText ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ , ( font = = null ? field _ 146289 _ q : font ) ) ; <nl> + + net . minecraftforge . fml . client . config . GuiUtils . postItemToolTip ( ) ; <nl> } <nl> <nl> protected void func _ 146279 _ a ( String p _ 146279 _ 1 _ , int p _ 146279 _ 2 _ , int p _ 146279 _ 3 _ ) <nl> - @ @ - 157 , 7 + 158 , 13 @ @ <nl> + @ @ - 157 , 7 + 160 , 13 @ @ <nl> <nl> protected void func _ 146283 _ a ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) <nl> { <nl> - if ( ! p _ 146283 _ 1 _ . isEmpty ( ) ) <nl> - + drawHoveringText ( p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , field _ 146289 _ q ) ; <nl> + + drawHoveringText ( p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , field _ 146289 _ q ) ; <nl> + } <nl> + <nl> + protected void drawHoveringText ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ , FontRenderer font ) <nl> @ @ - 25 , 7 + 27 , 7 @ @ <nl> { <nl> GlStateManager . func _ 179101 _ C ( ) ; <nl> RenderHelper . func _ 74518 _ a ( ) ; <nl> - @ @ - 427 , 6 + 434 , 7 @ @ <nl> + @ @ - 427 , 6 + 436 , 7 @ @ <nl> { <nl> this . field _ 146297 _ k . field _ 71456 _ v . func _ 146158 _ b ( ) . func _ 146239 _ a ( p _ 175281 _ 1 _ ) ; <nl> } <nl> @ @ - 33 , 7 + 35 , 7 @ @ <nl> <nl> this . field _ 146297 _ k . field _ 71439 _ g . func _ 71165 _ d ( p _ 175281 _ 1 _ ) ; <nl> } <nl> - @ @ - 441 , 9 + 449 , 15 @ @ <nl> + @ @ - 441 , 9 + 451 , 15 @ @ <nl> <nl> if ( guibutton . func _ 146116 _ c ( this . field _ 146297 _ k , p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ) <nl> { <nl> @ @ - 49 , 7 + 51 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 473 , 8 + 487 , 12 @ @ <nl> + @ @ - 473 , 8 + 489 , 12 @ @ <nl> this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; <nl> this . field _ 146294 _ l = p _ 146280 _ 2 _ ; <nl> this . field _ 146295 _ m = p _ 146280 _ 3 _ ; <nl> @ @ - 62 , 7 + 64 , 7 @ @ <nl> } <nl> <nl> public void func _ 183500 _ a ( int p _ 183500 _ 1 _ , int p _ 183500 _ 2 _ ) <nl> - @ @ - 493 , 7 + 511 , 9 @ @ <nl> + @ @ - 493 , 7 + 513 , 9 @ @ <nl> { <nl> while ( Mouse . next ( ) ) <nl> { <nl> @ @ - 72 , 7 + 74 , 7 @ @ <nl> } <nl> } <nl> <nl> - @ @ - 501 , 7 + 521 , 9 @ @ <nl> + @ @ - 501 , 7 + 523 , 9 @ @ <nl> { <nl> while ( Keyboard . next ( ) ) <nl> { <nl> @ @ - 82 , 7 + 84 , 7 @ @ <nl> } <nl> } <nl> } <nl> - @ @ - 563 , 6 + 585 , 7 @ @ <nl> + @ @ - 563 , 6 + 587 , 7 @ @ <nl> public void func _ 146276 _ q _ ( ) <nl> { <nl> this . func _ 146270 _ b ( 0 ) ; <nl> diff - - git a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch <nl> index 9712efc . . 3eb6041 100644 <nl> - - - a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch <nl> + + + b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch <nl> @ @ - 162 , 7 + 162 , 17 @ @ <nl> GlStateManager . func _ 179131 _ c ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; <nl> GlStateManager . func _ 179140 _ f ( ) ; <nl> } <nl> - @ @ - 638 , 16 + 687 , 35 @ @ <nl> + @ @ - 624 , 7 + 673 , 9 @ @ <nl> + } <nl> + } <nl> + <nl> + + net . minecraftforge . fml . client . config . GuiUtils . preItemToolTip ( p _ 146285 _ 1 _ ) ; <nl> + this . func _ 146283 _ a ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ ) ; <nl> + + net . minecraftforge . fml . client . config . GuiUtils . postItemToolTip ( ) ; <nl> + } <nl> + else <nl> + { <nl> + @ @ - 638 , 16 + 689 , 35 @ @ <nl> RenderHelper . func _ 74520 _ c ( ) ; <nl> CreativeTabs creativetabs = CreativeTabs . field _ 78032 _ a [ field _ 147058 _ w ] ; <nl> <nl> @ @ - 199 , 7 + 209 , 7 @ @ <nl> this . field _ 146297 _ k . func _ 110434 _ K ( ) . func _ 110577 _ a ( new ResourceLocation ( " textures / gui / container / creative _ inventory / tab _ " + creativetabs . func _ 78015 _ f ( ) ) ) ; <nl> this . func _ 73729 _ b ( this . field _ 147003 _ i , this . field _ 147009 _ r , 0 , 0 , this . field _ 146999 _ f , this . field _ 147000 _ g ) ; <nl> this . field _ 147062 _ A . func _ 146194 _ f ( ) ; <nl> - @ @ - 662 , 6 + 730 , 14 @ @ <nl> + @ @ - 662 , 6 + 732 , 14 @ @ <nl> this . func _ 73729 _ b ( i , j + ( int ) ( ( float ) ( k - j - 17 ) * this . field _ 147067 _ x ) , 232 + ( this . func _ 147055 _ p ( ) ? 0 : 12 ) , 0 , 12 , 15 ) ; <nl> } <nl> <nl> @ @ - 214 , 7 + 224 , 7 @ @ <nl> this . func _ 147051 _ a ( creativetabs ) ; <nl> <nl> if ( creativetabs = = CreativeTabs . field _ 78036 _ m ) <nl> - @ @ - 672 , 6 + 748 , 14 @ @ <nl> + @ @ - 672 , 6 + 750 , 14 @ @ <nl> <nl> protected boolean func _ 147049 _ a ( CreativeTabs p _ 147049 _ 1 _ , int p _ 147049 _ 2 _ , int p _ 147049 _ 3 _ ) <nl> { <nl> @ @ - 229 , 7 + 239 , 7 @ @ <nl> int i = p _ 147049 _ 1 _ . func _ 78020 _ k ( ) ; <nl> int j = 28 * i ; <nl> int k = 0 ; <nl> - @ @ - 768 , 6 + 852 , 8 @ @ <nl> + @ @ - 768 , 6 + 854 , 8 @ @ <nl> } <nl> <nl> GlStateManager . func _ 179140 _ f ( ) ; <nl> @ @ - 238 , 7 + 248 , 7 @ @ <nl> this . func _ 73729 _ b ( l , i1 , j , k , 28 , 32 ) ; <nl> this . field _ 73735 _ i = 100 . 0F ; <nl> this . field _ 146296 _ j . field _ 77023 _ b = 100 . 0F ; <nl> - @ @ - 794 , 6 + 880 , 15 @ @ <nl> + @ @ - 794 , 6 + 882 , 15 @ @ <nl> { <nl> this . field _ 146297 _ k . func _ 147108 _ a ( new GuiStats ( this , this . field _ 146297 _ k . field _ 71439 _ g . func _ 146107 _ m ( ) ) ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java <nl> new file mode 100644 <nl> index 0000000 . . 858bec7 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java <nl> @ @ - 0 , 0 + 1 , 225 @ @ <nl> + package net . minecraftforge . client . event ; <nl> + <nl> + import java . util . Collections ; <nl> + import java . util . List ; <nl> + <nl> + import javax . annotation . Nonnull ; <nl> + import javax . annotation . Nullable ; <nl> + <nl> + import net . minecraft . client . gui . FontRenderer ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . event . entity . player . ItemTooltipEvent ; <nl> + import net . minecraftforge . fml . common . eventhandler . Cancelable ; <nl> + import net . minecraftforge . fml . common . eventhandler . Event ; <nl> + <nl> + / * * <nl> + * A set of events which are fired at various points during tooltip rendering . <nl> + * < p > <nl> + * Can be used to change the rendering parameters , draw something extra , etc . <nl> + * < p > <nl> + * Do not use this event directly , use one of the subclasses : <nl> + * < ul > <nl> + * < li > { @ link RenderTooltipEvent . Pre } < / li > <nl> + * < li > { @ link RenderTooltipEvent . PostBackground } < / li > <nl> + * < li > { @ link RenderTooltipEvent . PostText } < / li > <nl> + * < / ul > <nl> + * / <nl> + public abstract class RenderTooltipEvent extends Event <nl> + { <nl> + protected final ItemStack stack ; <nl> + protected final List < String > lines ; <nl> + protected int x ; <nl> + protected int y ; <nl> + protected FontRenderer fr ; <nl> + <nl> + public RenderTooltipEvent ( @ Nullable ItemStack stack , @ Nonnull List < String > lines , int x , int y , @ Nonnull FontRenderer fr ) <nl> + { <nl> + this . stack = stack ; <nl> + this . lines = Collections . unmodifiableList ( lines ) ; / / Leave editing to ItemTooltipEvent <nl> + this . x = x ; <nl> + this . y = y ; <nl> + this . fr = fr ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The stack which the tooltip is being rendered for . As tooltips can be drawn without itemstacks , this return is { @ link Nullable } . <nl> + * / <nl> + @ Nullable <nl> + public ItemStack getStack ( ) <nl> + { <nl> + return stack ; <nl> + } <nl> + <nl> + / * * <nl> + * The lines to be drawn . May change between { @ link RenderTooltipEvent . Pre } and { @ link RenderTooltipEvent . Post } . <nl> + * <nl> + * @ return An < i > unmodifiable < / i > list of strings . Use { @ link ItemTooltipEvent } to modify tooltip text . <nl> + * / <nl> + @ Nonnull <nl> + public List < String > getLines ( ) <nl> + { <nl> + return lines ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The X position of the tooltip box . By default , the mouse X position . <nl> + * / <nl> + public int getX ( ) <nl> + { <nl> + return x ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The Y position of the tooltip box . By default , the mouse Y position . <nl> + * / <nl> + public int getY ( ) <nl> + { <nl> + return y ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The { @ link FontRenderer } instance the current render is using . <nl> + * / <nl> + @ Nonnull <nl> + public FontRenderer getFontRenderer ( ) <nl> + { <nl> + return fr ; <nl> + } <nl> + <nl> + / * * <nl> + * This event is fired before any tooltip calculations are done . It provides setters for all aspects of the tooltip , so the final render can be modified . <nl> + * < p > <nl> + * This event is { @ link Cancelable } . <nl> + * / <nl> + @ Cancelable <nl> + public static class Pre extends RenderTooltipEvent <nl> + { <nl> + private int screenWidth ; <nl> + private int screenHeight ; <nl> + private int maxWidth ; <nl> + <nl> + public Pre ( @ Nullable ItemStack stack , @ Nonnull List < String > lines , int x , int y , int screenWidth , int screenHeight , int maxWidth , @ Nonnull FontRenderer fr ) <nl> + { <nl> + super ( stack , lines , x , y , fr ) ; <nl> + this . screenWidth = screenWidth ; <nl> + this . screenHeight = screenHeight ; <nl> + this . maxWidth = maxWidth ; <nl> + } <nl> + <nl> + public int getScreenWidth ( ) <nl> + { <nl> + return screenWidth ; <nl> + } <nl> + <nl> + public void setScreenWidth ( int screenWidth ) <nl> + { <nl> + this . screenWidth = screenWidth ; <nl> + } <nl> + <nl> + public int getScreenHeight ( ) <nl> + { <nl> + return screenHeight ; <nl> + } <nl> + <nl> + public void setScreenHeight ( int screenHeight ) <nl> + { <nl> + this . screenHeight = screenHeight ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The max width the tooltip can be . Defaults to - 1 ( unlimited ) . <nl> + * / <nl> + public int getMaxWidth ( ) <nl> + { <nl> + return maxWidth ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the max width of the tooltip . Use - 1 for unlimited . <nl> + * / <nl> + public void setMaxWidth ( int maxWidth ) <nl> + { <nl> + this . maxWidth = maxWidth ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets the { @ link FontRenderer } to be used to render text . <nl> + * / <nl> + public void setFontRenderer ( @ Nonnull FontRenderer fr ) <nl> + { <nl> + this . fr = fr ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the X origin of the tooltip . <nl> + * / <nl> + public void setX ( int x ) <nl> + { <nl> + this . x = x ; <nl> + } <nl> + <nl> + / * * <nl> + * Set the Y origin of the tooltip . <nl> + * / <nl> + public void setY ( int y ) <nl> + { <nl> + this . y = y ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * Events inheriting from this class are fired at different stages during the tooltip rendering . <nl> + * < p > <nl> + * Do not use this event directly , use one of its subclasses : <nl> + * < ul > <nl> + * < li > { @ link RenderTooltipEvent . PostBackground } < / li > <nl> + * < li > { @ link RenderTooltipEvent . PostText } < / li > <nl> + * < / ul > <nl> + * / <nl> + protected static abstract class Post extends RenderTooltipEvent <nl> + { <nl> + private final int width ; <nl> + private final int height ; <nl> + <nl> + public Post ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) <nl> + { <nl> + super ( stack , textLines , x , y , fr ) ; <nl> + this . width = width ; <nl> + this . height = height ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The width of the tooltip box . This is the width of the < i > inner < / i > box , not including the border . <nl> + * / <nl> + public int getWidth ( ) <nl> + { <nl> + return width ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The height of the tooltip box . This is the height of the < i > inner < / i > box , not including the border . <nl> + * / <nl> + public int getHeight ( ) <nl> + { <nl> + return height ; <nl> + } <nl> + } <nl> + <nl> + / * * <nl> + * This event is fired directly after the tooltip background is drawn , but before any text is drawn . <nl> + * / <nl> + public static class PostBackground extends Post <nl> + { <nl> + public PostBackground ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) <nl> + { super ( stack , textLines , x , y , fr , width , height ) ; } <nl> + } <nl> + <nl> + / * * <nl> + * This event is fired directly after the tooltip text is drawn , but before the GL state is reset . <nl> + * / <nl> + public static class PostText extends Post <nl> + { <nl> + public PostText ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) <nl> + { super ( stack , textLines , x , y , fr , width , height ) ; } <nl> + } <nl> + } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> index ed7267a . . 3d1700e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java <nl> @ @ - 26 , 13 + 26 , 18 @ @ import net . minecraft . client . renderer . RenderHelper ; <nl> import net . minecraft . client . renderer . Tessellator ; <nl> import net . minecraft . client . renderer . VertexBuffer ; <nl> import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> + import net . minecraft . item . ItemStack ; <nl> import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . event . RenderTooltipEvent ; <nl> + import net . minecraftforge . common . MinecraftForge ; <nl> <nl> import org . lwjgl . opengl . GL11 ; <nl> <nl> import java . util . ArrayList ; <nl> import java . util . List ; <nl> <nl> + import javax . annotation . Nullable ; <nl> + <nl> / * * <nl> * This class provides several methods and constants used by the Config GUI classes . <nl> * <nl> @ @ - 205 , 6 + 210 , 26 @ @ public class GuiUtils <nl> tessellator . draw ( ) ; <nl> } <nl> <nl> + private static ItemStack cachedTooltipStack ; <nl> + <nl> + / * * <nl> + * Must be called from { @ code GuiScreen . renderToolTip } before { @ code GuiScreen . drawHoveringText } is called . <nl> + * <nl> + * @ param stack The stack for which a tooltip is about to be drawn . <nl> + * / <nl> + public static void preItemToolTip ( ItemStack stack ) <nl> + { <nl> + cachedTooltipStack = stack ; <nl> + } <nl> + <nl> + / * * <nl> + * Must be called from { @ code GuiScreen . renderToolTip } after { @ code GuiScreen . drawHoveringText } is called . <nl> + * / <nl> + public static void postItemToolTip ( ) <nl> + { <nl> + cachedTooltipStack = null ; <nl> + } <nl> + <nl> / * * <nl> * Draws a tooltip box on the screen with text in it . <nl> * Automatically positions the box relative to the mouse to match Mojang ' s implementation . <nl> @ @ - 220 , 10 + 245 , 32 @ @ public class GuiUtils <nl> * Set to a negative number to have no max width . <nl> * @ param font the font for drawing the text in the tooltip box <nl> * / <nl> - public static void drawHoveringText ( List < String > textLines , final int mouseX , final int mouseY , final int screenWidth , final int screenHeight , final int maxTextWidth , FontRenderer font ) <nl> + public static void drawHoveringText ( List < String > textLines , int mouseX , int mouseY , int screenWidth , int screenHeight , int maxTextWidth , FontRenderer font ) <nl> + { <nl> + drawHoveringText ( cachedTooltipStack , textLines , mouseX , mouseY , screenWidth , screenHeight , maxTextWidth , font ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Use this version if calling from somewhere where ItemStack context is available . <nl> + * <nl> + * @ see # drawHoveringText ( List , int , int , int , int , int , FontRenderer ) <nl> + * / <nl> + public static void drawHoveringText ( @ Nullable final ItemStack stack , List < String > textLines , int mouseX , int mouseY , int screenWidth , int screenHeight , <nl> + int maxTextWidth , FontRenderer font ) <nl> { <nl> if ( ! textLines . isEmpty ( ) ) <nl> { <nl> + RenderTooltipEvent . Pre event = new RenderTooltipEvent . Pre ( stack , textLines , mouseX , mouseY , screenWidth , screenHeight , maxTextWidth , font ) ; <nl> + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) { <nl> + return ; <nl> + } <nl> + mouseX = event . getX ( ) ; <nl> + mouseY = event . getY ( ) ; <nl> + screenWidth = event . getScreenWidth ( ) ; <nl> + screenHeight = event . getScreenHeight ( ) ; <nl> + maxTextWidth = event . getMaxWidth ( ) ; <nl> + font = event . getFontRenderer ( ) ; <nl> + <nl> GlStateManager . disableRescaleNormal ( ) ; <nl> RenderHelper . disableStandardItemLighting ( ) ; <nl> GlStateManager . disableLighting ( ) ; <nl> @ @ - 333 , 6 + 380 , 9 @ @ public class GuiUtils <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 + 1 , borderColorStart , borderColorStart ) ; <nl> drawGradientRect ( zLevel , tooltipX - 3 , tooltipY + tooltipHeight + 2 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 , borderColorEnd , borderColorEnd ) ; <nl> <nl> + MinecraftForge . EVENT _ BUS . post ( new RenderTooltipEvent . PostBackground ( stack , textLines , tooltipX , tooltipY , font , tooltipTextWidth , tooltipHeight ) ) ; <nl> + int tooltipTop = tooltipY ; <nl> + <nl> for ( int lineNumber = 0 ; lineNumber < textLines . size ( ) ; + + lineNumber ) <nl> { <nl> String line = textLines . get ( lineNumber ) ; <nl> @ @ - 346 , 6 + 396 , 8 @ @ public class GuiUtils <nl> tooltipY + = 10 ; <nl> } <nl> <nl> + MinecraftForge . EVENT _ BUS . post ( new RenderTooltipEvent . PostText ( stack , textLines , tooltipX , tooltipTop , font , tooltipTextWidth , tooltipHeight ) ) ; <nl> + <nl> GlStateManager . enableLighting ( ) ; <nl> GlStateManager . enableDepth ( ) ; <nl> RenderHelper . enableStandardItemLighting ( ) ;

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java 
 index 59c0811 . . 52fdf87 100644 
 - - - a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java 
 + + + b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java 
 @ @ - 241 , 4 + 241 , 74 @ @ public abstract class RenderTooltipEvent extends Event 
 public PostText ( @ Nonnull ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) 
 { super ( stack , textLines , x , y , fr , width , height ) ; } 
 } 
 + 
 + / * * 
 + * This event is fired when the colours for the tooltip background are determined . 
 + * / 
 + public static class Color extends RenderTooltipEvent 
 + { 
 + private final int originalBackground ; 
 + private final int originalBorderStart ; 
 + private final int originalBorderEnd ; 
 + private int background ; 
 + private int borderStart ; 
 + private int borderEnd ; 
 + 
 + public Color ( @ Nonnull ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int background , int borderStart , 
 + int borderEnd ) 
 + { 
 + super ( stack , textLines , x , y , fr ) ; 
 + this . originalBackground = background ; 
 + this . originalBorderStart = borderStart ; 
 + this . originalBorderEnd = borderEnd ; 
 + this . background = background ; 
 + this . borderStart = borderStart ; 
 + this . borderEnd = borderEnd ; 
 + } 
 + 
 + public int getBackground ( ) 
 + { 
 + return background ; 
 + } 
 + 
 + public void setBackground ( int background ) 
 + { 
 + this . background = background ; 
 + } 
 + 
 + public int getBorderStart ( ) 
 + { 
 + return borderStart ; 
 + } 
 + 
 + public void setBorderStart ( int borderStart ) 
 + { 
 + this . borderStart = borderStart ; 
 + } 
 + 
 + public int getBorderEnd ( ) 
 + { 
 + return borderEnd ; 
 + } 
 + 
 + public void setBorderEnd ( int borderEnd ) 
 + { 
 + this . borderEnd = borderEnd ; 
 + } 
 + 
 + public int getOriginalBackground ( ) 
 + { 
 + return originalBackground ; 
 + } 
 + 
 + public int getOriginalBorderStart ( ) 
 + { 
 + return originalBorderStart ; 
 + } 
 + 
 + public int getOriginalBorderEnd ( ) 
 + { 
 + return originalBorderEnd ; 
 + } 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 index 0167639 . . afdbf9c 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 @ @ - 371 , 14 + 371 , 19 @ @ public class GuiUtils 
 } 
 
 final int zLevel = 300 ; 
 - final int backgroundColor = 0xF0100010 ; 
 + int backgroundColor = 0xF0100010 ; 
 + int borderColorStart = 0x505000FF ; 
 + int borderColorEnd = ( borderColorStart & 0xFEFEFE ) > > 1 | borderColorStart & 0xFF000000 ; 
 + RenderTooltipEvent . Color colorEvent = new RenderTooltipEvent . Color ( stack , textLines , tooltipX , tooltipY , font , backgroundColor , borderColorStart , borderColorEnd ) ; 
 + MinecraftForge . EVENT _ BUS . post ( colorEvent ) ; 
 + backgroundColor = colorEvent . getBackground ( ) ; 
 + borderColorStart = colorEvent . getBorderStart ( ) ; 
 + borderColorEnd = colorEvent . getBorderEnd ( ) ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 4 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 , backgroundColor , backgroundColor ) ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY + tooltipHeight + 3 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 4 , backgroundColor , backgroundColor ) ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; 
 drawGradientRect ( zLevel , tooltipX - 4 , tooltipY - 3 , tooltipX - 3 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; 
 drawGradientRect ( zLevel , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 4 , tooltipY + tooltipHeight + 3 , backgroundColor , backgroundColor ) ; 
 - final int borderColorStart = 0x505000FF ; 
 - final int borderColorEnd = ( borderColorStart & 0xFEFEFE ) > > 1 | borderColorStart & 0xFF000000 ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 + 1 , tooltipX - 3 + 1 , tooltipY + tooltipHeight + 3 - 1 , borderColorStart , borderColorEnd ) ; 
 drawGradientRect ( zLevel , tooltipX + tooltipTextWidth + 2 , tooltipY - 3 + 1 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 - 1 , borderColorStart , borderColorEnd ) ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 + 1 , borderColorStart , borderColorStart ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / TooltipColorTest . java b / src / test / java / net / minecraftforge / debug / TooltipColorTest . java 
 new file mode 100644 
 index 0000000 . . 92e4440 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / TooltipColorTest . java 
 @ @ - 0 , 0 + 1 , 37 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import net . minecraft . init . Items ; 
 + import net . minecraftforge . client . event . RenderTooltipEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + import net . minecraftforge . fml . relauncher . SideOnly ; 
 + 
 + @ Mod ( modid = TooltipColorTest . MODID , name = " Tooltip Color Test " , version = " 0 . 1 " , clientSideOnly = true ) 
 + public class TooltipColorTest 
 + { 
 + public static final String MODID = " tooltipcolortest " ; 
 + 
 + private static final boolean ENABLE = false ; 
 + 
 + public TooltipColorTest ( ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + MinecraftForge . EVENT _ BUS . register ( this ) ; 
 + } 
 + } 
 + 
 + @ SubscribeEvent 
 + @ SideOnly ( Side . CLIENT ) 
 + public void getTooltipColor ( RenderTooltipEvent . Color event ) 
 + { 
 + if ( event . getStack ( ) . getItem ( ) = = Items . APPLE ) 
 + { 
 + event . setBackground ( 0xF0510404 ) ; 
 + event . setBorderStart ( 0xF0bc0909 ) ; 
 + event . setBorderEnd ( 0xF03f0f0f ) ; 
 + } 
 + } 
 + } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 index 7f0473a . . 8792c9c 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / GuiScreen . java . patch 
 @ @ - 1 , 21 + 1 , 23 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / client / gui / GuiScreen . java 
 + + + . . / src - work / minecraft / net / minecraft / client / gui / GuiScreen . java 
 - @ @ - 147 , 7 + 147 , 8 @ @ 
 + @ @ - 147 , 7 + 147 , 10 @ @ 
 } 
 } 
 
 - this . func _ 146283 _ a ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ ) ; 
 + FontRenderer font = p _ 146285 _ 1 _ . func _ 77973 _ b ( ) . getFontRenderer ( p _ 146285 _ 1 _ ) ; 
 + + net . minecraftforge . fml . client . config . GuiUtils . preItemToolTip ( p _ 146285 _ 1 _ ) ; 
 + this . drawHoveringText ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ , ( font = = null ? field _ 146289 _ q : font ) ) ; 
 + + net . minecraftforge . fml . client . config . GuiUtils . postItemToolTip ( ) ; 
 } 
 
 protected void func _ 146279 _ a ( String p _ 146279 _ 1 _ , int p _ 146279 _ 2 _ , int p _ 146279 _ 3 _ ) 
 - @ @ - 157 , 7 + 158 , 13 @ @ 
 + @ @ - 157 , 7 + 160 , 13 @ @ 
 
 protected void func _ 146283 _ a ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ ) 
 { 
 - if ( ! p _ 146283 _ 1 _ . isEmpty ( ) ) 
 - + drawHoveringText ( p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , field _ 146289 _ q ) ; 
 + + drawHoveringText ( p _ 146283 _ 1 _ , p _ 146283 _ 2 _ , p _ 146283 _ 3 _ , field _ 146289 _ q ) ; 
 + } 
 + 
 + protected void drawHoveringText ( List < String > p _ 146283 _ 1 _ , int p _ 146283 _ 2 _ , int p _ 146283 _ 3 _ , FontRenderer font ) 
 @ @ - 25 , 7 + 27 , 7 @ @ 
 { 
 GlStateManager . func _ 179101 _ C ( ) ; 
 RenderHelper . func _ 74518 _ a ( ) ; 
 - @ @ - 427 , 6 + 434 , 7 @ @ 
 + @ @ - 427 , 6 + 436 , 7 @ @ 
 { 
 this . field _ 146297 _ k . field _ 71456 _ v . func _ 146158 _ b ( ) . func _ 146239 _ a ( p _ 175281 _ 1 _ ) ; 
 } 
 @ @ - 33 , 7 + 35 , 7 @ @ 
 
 this . field _ 146297 _ k . field _ 71439 _ g . func _ 71165 _ d ( p _ 175281 _ 1 _ ) ; 
 } 
 - @ @ - 441 , 9 + 449 , 15 @ @ 
 + @ @ - 441 , 9 + 451 , 15 @ @ 
 
 if ( guibutton . func _ 146116 _ c ( this . field _ 146297 _ k , p _ 73864 _ 1 _ , p _ 73864 _ 2 _ ) ) 
 { 
 @ @ - 49 , 7 + 51 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 473 , 8 + 487 , 12 @ @ 
 + @ @ - 473 , 8 + 489 , 12 @ @ 
 this . field _ 146289 _ q = p _ 146280 _ 1 _ . field _ 71466 _ p ; 
 this . field _ 146294 _ l = p _ 146280 _ 2 _ ; 
 this . field _ 146295 _ m = p _ 146280 _ 3 _ ; 
 @ @ - 62 , 7 + 64 , 7 @ @ 
 } 
 
 public void func _ 183500 _ a ( int p _ 183500 _ 1 _ , int p _ 183500 _ 2 _ ) 
 - @ @ - 493 , 7 + 511 , 9 @ @ 
 + @ @ - 493 , 7 + 513 , 9 @ @ 
 { 
 while ( Mouse . next ( ) ) 
 { 
 @ @ - 72 , 7 + 74 , 7 @ @ 
 } 
 } 
 
 - @ @ - 501 , 7 + 521 , 9 @ @ 
 + @ @ - 501 , 7 + 523 , 9 @ @ 
 { 
 while ( Keyboard . next ( ) ) 
 { 
 @ @ - 82 , 7 + 84 , 7 @ @ 
 } 
 } 
 } 
 - @ @ - 563 , 6 + 585 , 7 @ @ 
 + @ @ - 563 , 6 + 587 , 7 @ @ 
 public void func _ 146276 _ q _ ( ) 
 { 
 this . func _ 146270 _ b ( 0 ) ; 
 diff - - git a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch 
 index 9712efc . . 3eb6041 100644 
 - - - a / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch 
 + + + b / patches / minecraft / net / minecraft / client / gui / inventory / GuiContainerCreative . java . patch 
 @ @ - 162 , 7 + 162 , 17 @ @ 
 GlStateManager . func _ 179131 _ c ( 1 . 0F , 1 . 0F , 1 . 0F , 1 . 0F ) ; 
 GlStateManager . func _ 179140 _ f ( ) ; 
 } 
 - @ @ - 638 , 16 + 687 , 35 @ @ 
 + @ @ - 624 , 7 + 673 , 9 @ @ 
 + } 
 + } 
 + 
 + + net . minecraftforge . fml . client . config . GuiUtils . preItemToolTip ( p _ 146285 _ 1 _ ) ; 
 + this . func _ 146283 _ a ( list , p _ 146285 _ 2 _ , p _ 146285 _ 3 _ ) ; 
 + + net . minecraftforge . fml . client . config . GuiUtils . postItemToolTip ( ) ; 
 + } 
 + else 
 + { 
 + @ @ - 638 , 16 + 689 , 35 @ @ 
 RenderHelper . func _ 74520 _ c ( ) ; 
 CreativeTabs creativetabs = CreativeTabs . field _ 78032 _ a [ field _ 147058 _ w ] ; 
 
 @ @ - 199 , 7 + 209 , 7 @ @ 
 this . field _ 146297 _ k . func _ 110434 _ K ( ) . func _ 110577 _ a ( new ResourceLocation ( " textures / gui / container / creative _ inventory / tab _ " + creativetabs . func _ 78015 _ f ( ) ) ) ; 
 this . func _ 73729 _ b ( this . field _ 147003 _ i , this . field _ 147009 _ r , 0 , 0 , this . field _ 146999 _ f , this . field _ 147000 _ g ) ; 
 this . field _ 147062 _ A . func _ 146194 _ f ( ) ; 
 - @ @ - 662 , 6 + 730 , 14 @ @ 
 + @ @ - 662 , 6 + 732 , 14 @ @ 
 this . func _ 73729 _ b ( i , j + ( int ) ( ( float ) ( k - j - 17 ) * this . field _ 147067 _ x ) , 232 + ( this . func _ 147055 _ p ( ) ? 0 : 12 ) , 0 , 12 , 15 ) ; 
 } 
 
 @ @ - 214 , 7 + 224 , 7 @ @ 
 this . func _ 147051 _ a ( creativetabs ) ; 
 
 if ( creativetabs = = CreativeTabs . field _ 78036 _ m ) 
 - @ @ - 672 , 6 + 748 , 14 @ @ 
 + @ @ - 672 , 6 + 750 , 14 @ @ 
 
 protected boolean func _ 147049 _ a ( CreativeTabs p _ 147049 _ 1 _ , int p _ 147049 _ 2 _ , int p _ 147049 _ 3 _ ) 
 { 
 @ @ - 229 , 7 + 239 , 7 @ @ 
 int i = p _ 147049 _ 1 _ . func _ 78020 _ k ( ) ; 
 int j = 28 * i ; 
 int k = 0 ; 
 - @ @ - 768 , 6 + 852 , 8 @ @ 
 + @ @ - 768 , 6 + 854 , 8 @ @ 
 } 
 
 GlStateManager . func _ 179140 _ f ( ) ; 
 @ @ - 238 , 7 + 248 , 7 @ @ 
 this . func _ 73729 _ b ( l , i1 , j , k , 28 , 32 ) ; 
 this . field _ 73735 _ i = 100 . 0F ; 
 this . field _ 146296 _ j . field _ 77023 _ b = 100 . 0F ; 
 - @ @ - 794 , 6 + 880 , 15 @ @ 
 + @ @ - 794 , 6 + 882 , 15 @ @ 
 { 
 this . field _ 146297 _ k . func _ 147108 _ a ( new GuiStats ( this , this . field _ 146297 _ k . field _ 71439 _ g . func _ 146107 _ m ( ) ) ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java 
 new file mode 100644 
 index 0000000 . . 858bec7 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / client / event / RenderTooltipEvent . java 
 @ @ - 0 , 0 + 1 , 225 @ @ 
 + package net . minecraftforge . client . event ; 
 + 
 + import java . util . Collections ; 
 + import java . util . List ; 
 + 
 + import javax . annotation . Nonnull ; 
 + import javax . annotation . Nullable ; 
 + 
 + import net . minecraft . client . gui . FontRenderer ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . event . entity . player . ItemTooltipEvent ; 
 + import net . minecraftforge . fml . common . eventhandler . Cancelable ; 
 + import net . minecraftforge . fml . common . eventhandler . Event ; 
 + 
 + / * * 
 + * A set of events which are fired at various points during tooltip rendering . 
 + * < p > 
 + * Can be used to change the rendering parameters , draw something extra , etc . 
 + * < p > 
 + * Do not use this event directly , use one of the subclasses : 
 + * < ul > 
 + * < li > { @ link RenderTooltipEvent . Pre } < / li > 
 + * < li > { @ link RenderTooltipEvent . PostBackground } < / li > 
 + * < li > { @ link RenderTooltipEvent . PostText } < / li > 
 + * < / ul > 
 + * / 
 + public abstract class RenderTooltipEvent extends Event 
 + { 
 + protected final ItemStack stack ; 
 + protected final List < String > lines ; 
 + protected int x ; 
 + protected int y ; 
 + protected FontRenderer fr ; 
 + 
 + public RenderTooltipEvent ( @ Nullable ItemStack stack , @ Nonnull List < String > lines , int x , int y , @ Nonnull FontRenderer fr ) 
 + { 
 + this . stack = stack ; 
 + this . lines = Collections . unmodifiableList ( lines ) ; / / Leave editing to ItemTooltipEvent 
 + this . x = x ; 
 + this . y = y ; 
 + this . fr = fr ; 
 + } 
 + 
 + / * * 
 + * @ return The stack which the tooltip is being rendered for . As tooltips can be drawn without itemstacks , this return is { @ link Nullable } . 
 + * / 
 + @ Nullable 
 + public ItemStack getStack ( ) 
 + { 
 + return stack ; 
 + } 
 + 
 + / * * 
 + * The lines to be drawn . May change between { @ link RenderTooltipEvent . Pre } and { @ link RenderTooltipEvent . Post } . 
 + * 
 + * @ return An < i > unmodifiable < / i > list of strings . Use { @ link ItemTooltipEvent } to modify tooltip text . 
 + * / 
 + @ Nonnull 
 + public List < String > getLines ( ) 
 + { 
 + return lines ; 
 + } 
 + 
 + / * * 
 + * @ return The X position of the tooltip box . By default , the mouse X position . 
 + * / 
 + public int getX ( ) 
 + { 
 + return x ; 
 + } 
 + 
 + / * * 
 + * @ return The Y position of the tooltip box . By default , the mouse Y position . 
 + * / 
 + public int getY ( ) 
 + { 
 + return y ; 
 + } 
 + 
 + / * * 
 + * @ return The { @ link FontRenderer } instance the current render is using . 
 + * / 
 + @ Nonnull 
 + public FontRenderer getFontRenderer ( ) 
 + { 
 + return fr ; 
 + } 
 + 
 + / * * 
 + * This event is fired before any tooltip calculations are done . It provides setters for all aspects of the tooltip , so the final render can be modified . 
 + * < p > 
 + * This event is { @ link Cancelable } . 
 + * / 
 + @ Cancelable 
 + public static class Pre extends RenderTooltipEvent 
 + { 
 + private int screenWidth ; 
 + private int screenHeight ; 
 + private int maxWidth ; 
 + 
 + public Pre ( @ Nullable ItemStack stack , @ Nonnull List < String > lines , int x , int y , int screenWidth , int screenHeight , int maxWidth , @ Nonnull FontRenderer fr ) 
 + { 
 + super ( stack , lines , x , y , fr ) ; 
 + this . screenWidth = screenWidth ; 
 + this . screenHeight = screenHeight ; 
 + this . maxWidth = maxWidth ; 
 + } 
 + 
 + public int getScreenWidth ( ) 
 + { 
 + return screenWidth ; 
 + } 
 + 
 + public void setScreenWidth ( int screenWidth ) 
 + { 
 + this . screenWidth = screenWidth ; 
 + } 
 + 
 + public int getScreenHeight ( ) 
 + { 
 + return screenHeight ; 
 + } 
 + 
 + public void setScreenHeight ( int screenHeight ) 
 + { 
 + this . screenHeight = screenHeight ; 
 + } 
 + 
 + / * * 
 + * @ return The max width the tooltip can be . Defaults to - 1 ( unlimited ) . 
 + * / 
 + public int getMaxWidth ( ) 
 + { 
 + return maxWidth ; 
 + } 
 + 
 + / * * 
 + * Sets the max width of the tooltip . Use - 1 for unlimited . 
 + * / 
 + public void setMaxWidth ( int maxWidth ) 
 + { 
 + this . maxWidth = maxWidth ; 
 + } 
 + 
 + / * * 
 + * Sets the { @ link FontRenderer } to be used to render text . 
 + * / 
 + public void setFontRenderer ( @ Nonnull FontRenderer fr ) 
 + { 
 + this . fr = fr ; 
 + } 
 + 
 + / * * 
 + * Set the X origin of the tooltip . 
 + * / 
 + public void setX ( int x ) 
 + { 
 + this . x = x ; 
 + } 
 + 
 + / * * 
 + * Set the Y origin of the tooltip . 
 + * / 
 + public void setY ( int y ) 
 + { 
 + this . y = y ; 
 + } 
 + } 
 + 
 + / * * 
 + * Events inheriting from this class are fired at different stages during the tooltip rendering . 
 + * < p > 
 + * Do not use this event directly , use one of its subclasses : 
 + * < ul > 
 + * < li > { @ link RenderTooltipEvent . PostBackground } < / li > 
 + * < li > { @ link RenderTooltipEvent . PostText } < / li > 
 + * < / ul > 
 + * / 
 + protected static abstract class Post extends RenderTooltipEvent 
 + { 
 + private final int width ; 
 + private final int height ; 
 + 
 + public Post ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) 
 + { 
 + super ( stack , textLines , x , y , fr ) ; 
 + this . width = width ; 
 + this . height = height ; 
 + } 
 + 
 + / * * 
 + * @ return The width of the tooltip box . This is the width of the < i > inner < / i > box , not including the border . 
 + * / 
 + public int getWidth ( ) 
 + { 
 + return width ; 
 + } 
 + 
 + / * * 
 + * @ return The height of the tooltip box . This is the height of the < i > inner < / i > box , not including the border . 
 + * / 
 + public int getHeight ( ) 
 + { 
 + return height ; 
 + } 
 + } 
 + 
 + / * * 
 + * This event is fired directly after the tooltip background is drawn , but before any text is drawn . 
 + * / 
 + public static class PostBackground extends Post 
 + { 
 + public PostBackground ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) 
 + { super ( stack , textLines , x , y , fr , width , height ) ; } 
 + } 
 + 
 + / * * 
 + * This event is fired directly after the tooltip text is drawn , but before the GL state is reset . 
 + * / 
 + public static class PostText extends Post 
 + { 
 + public PostText ( @ Nullable ItemStack stack , @ Nonnull List < String > textLines , int x , int y , @ Nonnull FontRenderer fr , int width , int height ) 
 + { super ( stack , textLines , x , y , fr , width , height ) ; } 
 + } 
 + } 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 index ed7267a . . 3d1700e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiUtils . java 
 @ @ - 26 , 13 + 26 , 18 @ @ import net . minecraft . client . renderer . RenderHelper ; 
 import net . minecraft . client . renderer . Tessellator ; 
 import net . minecraft . client . renderer . VertexBuffer ; 
 import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 + import net . minecraft . item . ItemStack ; 
 import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . event . RenderTooltipEvent ; 
 + import net . minecraftforge . common . MinecraftForge ; 
 
 import org . lwjgl . opengl . GL11 ; 
 
 import java . util . ArrayList ; 
 import java . util . List ; 
 
 + import javax . annotation . Nullable ; 
 + 
 / * * 
 * This class provides several methods and constants used by the Config GUI classes . 
 * 
 @ @ - 205 , 6 + 210 , 26 @ @ public class GuiUtils 
 tessellator . draw ( ) ; 
 } 
 
 + private static ItemStack cachedTooltipStack ; 
 + 
 + / * * 
 + * Must be called from { @ code GuiScreen . renderToolTip } before { @ code GuiScreen . drawHoveringText } is called . 
 + * 
 + * @ param stack The stack for which a tooltip is about to be drawn . 
 + * / 
 + public static void preItemToolTip ( ItemStack stack ) 
 + { 
 + cachedTooltipStack = stack ; 
 + } 
 + 
 + / * * 
 + * Must be called from { @ code GuiScreen . renderToolTip } after { @ code GuiScreen . drawHoveringText } is called . 
 + * / 
 + public static void postItemToolTip ( ) 
 + { 
 + cachedTooltipStack = null ; 
 + } 
 + 
 / * * 
 * Draws a tooltip box on the screen with text in it . 
 * Automatically positions the box relative to the mouse to match Mojang ' s implementation . 
 @ @ - 220 , 10 + 245 , 32 @ @ public class GuiUtils 
 * Set to a negative number to have no max width . 
 * @ param font the font for drawing the text in the tooltip box 
 * / 
 - public static void drawHoveringText ( List < String > textLines , final int mouseX , final int mouseY , final int screenWidth , final int screenHeight , final int maxTextWidth , FontRenderer font ) 
 + public static void drawHoveringText ( List < String > textLines , int mouseX , int mouseY , int screenWidth , int screenHeight , int maxTextWidth , FontRenderer font ) 
 + { 
 + drawHoveringText ( cachedTooltipStack , textLines , mouseX , mouseY , screenWidth , screenHeight , maxTextWidth , font ) ; 
 + } 
 + 
 + / * * 
 + * Use this version if calling from somewhere where ItemStack context is available . 
 + * 
 + * @ see # drawHoveringText ( List , int , int , int , int , int , FontRenderer ) 
 + * / 
 + public static void drawHoveringText ( @ Nullable final ItemStack stack , List < String > textLines , int mouseX , int mouseY , int screenWidth , int screenHeight , 
 + int maxTextWidth , FontRenderer font ) 
 { 
 if ( ! textLines . isEmpty ( ) ) 
 { 
 + RenderTooltipEvent . Pre event = new RenderTooltipEvent . Pre ( stack , textLines , mouseX , mouseY , screenWidth , screenHeight , maxTextWidth , font ) ; 
 + if ( MinecraftForge . EVENT _ BUS . post ( event ) ) { 
 + return ; 
 + } 
 + mouseX = event . getX ( ) ; 
 + mouseY = event . getY ( ) ; 
 + screenWidth = event . getScreenWidth ( ) ; 
 + screenHeight = event . getScreenHeight ( ) ; 
 + maxTextWidth = event . getMaxWidth ( ) ; 
 + font = event . getFontRenderer ( ) ; 
 + 
 GlStateManager . disableRescaleNormal ( ) ; 
 RenderHelper . disableStandardItemLighting ( ) ; 
 GlStateManager . disableLighting ( ) ; 
 @ @ - 333 , 6 + 380 , 9 @ @ public class GuiUtils 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY - 3 , tooltipX + tooltipTextWidth + 3 , tooltipY - 3 + 1 , borderColorStart , borderColorStart ) ; 
 drawGradientRect ( zLevel , tooltipX - 3 , tooltipY + tooltipHeight + 2 , tooltipX + tooltipTextWidth + 3 , tooltipY + tooltipHeight + 3 , borderColorEnd , borderColorEnd ) ; 
 
 + MinecraftForge . EVENT _ BUS . post ( new RenderTooltipEvent . PostBackground ( stack , textLines , tooltipX , tooltipY , font , tooltipTextWidth , tooltipHeight ) ) ; 
 + int tooltipTop = tooltipY ; 
 + 
 for ( int lineNumber = 0 ; lineNumber < textLines . size ( ) ; + + lineNumber ) 
 { 
 String line = textLines . get ( lineNumber ) ; 
 @ @ - 346 , 6 + 396 , 8 @ @ public class GuiUtils 
 tooltipY + = 10 ; 
 } 
 
 + MinecraftForge . EVENT _ BUS . post ( new RenderTooltipEvent . PostText ( stack , textLines , tooltipX , tooltipTop , font , tooltipTextWidth , tooltipHeight ) ) ; 
 + 
 GlStateManager . enableLighting ( ) ; 
 GlStateManager . enableDepth ( ) ; 
 RenderHelper . enableStandardItemLighting ( ) ;
