BLEU SCORE: 0.038261660656802664

TEST MSG: Removed LanguageRegistry and CollectionWrapperFactory .
GENERATED MSG: Make UniqueIdentifier final and add a hashCode . Closes # 348

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> index 5fa7462 . . 19e8d0b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java <nl> @ @ - 88 , 7 + 88 , 6 @ @ import net . minecraftforge . fml . common . WrongMinecraftVersionException ; <nl> import net . minecraftforge . fml . common . eventhandler . EventBus ; <nl> import net . minecraftforge . fml . common . network . FMLNetworkEvent ; <nl> import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; <nl> - import net . minecraftforge . fml . common . registry . LanguageRegistry ; <nl> import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; <nl> import net . minecraftforge . fml . common . toposort . ModSortingException ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> @ @ - 589 , 7 + 588 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> - LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; <nl> Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; <nl> if ( resourcePackType ! = null ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java b / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java <nl> deleted file mode 100644 <nl> index be6ff39 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java <nl> + + + / dev / null <nl> @ @ - 1 , 32 + 0 , 0 @ @ <nl> - package net . minecraftforge . fml . common . functions ; <nl> - <nl> - import java . util . Collection ; <nl> - import java . util . List ; <nl> - import com . google . common . collect . Collections2 ; <nl> - import com . google . common . collect . Lists ; <nl> - <nl> - public class CollectionWrapperFactory { <nl> - / * * <nl> - * Return a read only cast view of the supplied raw collection , based on the element type given <nl> - * @ param coll The collection to cast <nl> - * @ param elementType the super type contained in the collection <nl> - * @ return a collection asserting that type relationship <nl> - * / <nl> - public static < T > Collection < T > wrap ( @ SuppressWarnings ( " rawtypes " ) Collection coll , Class < T > elementType ) <nl> - { <nl> - Collection < ? > asGeneric = coll ; <nl> - return Collections2 . transform ( asGeneric , new TypeCastFunction < T > ( elementType ) ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Return a read only cast view of the supplied raw list , based on the element type given <nl> - * @ param list The list to cast <nl> - * @ param elementType the super type contained in the list <nl> - * @ return a list asserting that type relationship <nl> - * / <nl> - public static < T > List < T > wrap ( @ SuppressWarnings ( " rawtypes " ) List list , Class < T > elementType ) <nl> - { <nl> - List < ? > asGeneric = list ; <nl> - return Lists . transform ( asGeneric , new TypeCastFunction < T > ( elementType ) ) ; <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java <nl> deleted file mode 100644 <nl> index 3b2a369 . . 0000000 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java <nl> + + + / dev / null <nl> @ @ - 1 , 324 + 0 , 0 @ @ <nl> - / * <nl> - * Forge Mod Loader <nl> - * Copyright ( c ) 2012 - 2013 cpw . <nl> - * All rights reserved . This program and the accompanying materials <nl> - * are made available under the terms of the GNU Lesser Public License v2 . 1 <nl> - * which accompanies this distribution , and is available at <nl> - * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html <nl> - * <nl> - * Contributors : <nl> - * cpw - implementation <nl> - * / <nl> - <nl> - package net . minecraftforge . fml . common . registry ; <nl> - <nl> - import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . IOException ; <nl> - import java . io . InputStream ; <nl> - import java . io . InputStreamReader ; <nl> - import java . net . URL ; <nl> - import java . util . Collections ; <nl> - import java . util . HashMap ; <nl> - import java . util . List ; <nl> - import java . util . Map ; <nl> - import java . util . Map . Entry ; <nl> - import java . util . Properties ; <nl> - import java . util . regex . Matcher ; <nl> - import java . util . regex . Pattern ; <nl> - import java . util . zip . ZipEntry ; <nl> - import java . util . zip . ZipFile ; <nl> - <nl> - import org . apache . logging . log4j . Level ; <nl> - <nl> - import net . minecraft . block . Block ; <nl> - import net . minecraft . item . Item ; <nl> - import net . minecraft . item . ItemStack ; <nl> - import net . minecraft . util . text . translation . LanguageMap ; <nl> - import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> - import net . minecraftforge . fml . common . FMLLog ; <nl> - import net . minecraftforge . fml . common . Loader ; <nl> - import net . minecraftforge . fml . common . ModContainer ; <nl> - import net . minecraftforge . fml . relauncher . Side ; <nl> - <nl> - import com . google . common . base . Charsets ; <nl> - import com . google . common . base . Joiner ; <nl> - import com . google . common . collect . Lists ; <nl> - <nl> - public class LanguageRegistry <nl> - { <nl> - private static final LanguageRegistry INSTANCE = new LanguageRegistry ( ) ; <nl> - <nl> - private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; <nl> - <nl> - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( ? : . + / | ) ( [ \ \ w _ - ] + ) . lang " ) ; <nl> - <nl> - public static LanguageRegistry instance ( ) <nl> - { <nl> - return INSTANCE ; <nl> - } <nl> - <nl> - public String getStringLocalization ( String key ) <nl> - { <nl> - return getStringLocalization ( key , FMLCommonHandler . instance ( ) . getCurrentLanguage ( ) ) ; <nl> - } <nl> - <nl> - public String getStringLocalization ( String key , String lang ) <nl> - { <nl> - String localizedString = " " ; <nl> - Properties langPack = modLanguageData . get ( lang ) ; <nl> - <nl> - if ( langPack ! = null ) { <nl> - if ( langPack . getProperty ( key ) ! = null ) { <nl> - localizedString = langPack . getProperty ( key ) ; <nl> - } <nl> - } <nl> - <nl> - return localizedString ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void addStringLocalization ( String key , String value ) <nl> - { <nl> - addStringLocalization ( key , " en _ US " , value ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void addStringLocalization ( String key , String lang , String value ) <nl> - { <nl> - Properties langPack = modLanguageData . get ( lang ) ; <nl> - if ( langPack = = null ) { <nl> - langPack = new Properties ( ) ; <nl> - modLanguageData . put ( lang , langPack ) ; <nl> - } <nl> - langPack . put ( key , value ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void addStringLocalization ( Properties langPackAdditions ) { <nl> - addStringLocalization ( langPackAdditions , " en _ US " ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void addStringLocalization ( Properties langPackAdditions , String lang ) { <nl> - Properties langPack = modLanguageData . get ( lang ) ; <nl> - if ( langPack = = null ) { <nl> - langPack = new Properties ( ) ; <nl> - modLanguageData . put ( lang , langPack ) ; <nl> - } <nl> - if ( langPackAdditions ! = null ) { <nl> - langPack . putAll ( langPackAdditions ) ; <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void addNameForObject ( Object objectToName , String lang , String name ) <nl> - { <nl> - String objectName ; <nl> - if ( objectToName instanceof Item ) { <nl> - objectName = ( ( Item ) objectToName ) . getUnlocalizedName ( ) ; <nl> - } else if ( objectToName instanceof Block ) { <nl> - objectName = ( ( Block ) objectToName ) . getUnlocalizedName ( ) ; <nl> - } else if ( objectToName instanceof ItemStack ) { <nl> - objectName = ( ( ItemStack ) objectToName ) . getItem ( ) . getUnlocalizedName ( ( ItemStack ) objectToName ) ; <nl> - } else { <nl> - throw new IllegalArgumentException ( String . format ( " Illegal object for naming % s " , objectToName ) ) ; <nl> - } <nl> - objectName + = " . name " ; <nl> - addStringLocalization ( objectName , lang , name ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public static void addName ( Object objectToName , String name ) <nl> - { <nl> - instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ SuppressWarnings ( " unchecked " ) <nl> - @ Deprecated <nl> - public void mergeLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map properties , String lang ) <nl> - { <nl> - Properties langPack = modLanguageData . get ( lang ) ; <nl> - if ( langPack ! = null ) { <nl> - mergeWithoutOverwrite ( langPack , properties ) ; <nl> - } <nl> - Properties usPack = modLanguageData . get ( " en _ US " ) ; <nl> - if ( usPack ! = null ) { <nl> - mergeWithoutOverwrite ( usPack , properties ) ; <nl> - } <nl> - } <nl> - <nl> - @ Deprecated <nl> - private < K , V > void mergeWithoutOverwrite ( Map < ? extends K , ? extends V > from , Map < K , V > to ) <nl> - { <nl> - for ( Entry < ? extends K , ? extends V > e : from . entrySet ( ) ) <nl> - { <nl> - if ( ! to . containsKey ( e . getKey ( ) ) ) <nl> - { <nl> - to . put ( e . getKey ( ) , e . getValue ( ) ) ; <nl> - } <nl> - } <nl> - } <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void loadLocalization ( String localizationFile , String lang , boolean isXML ) <nl> - { <nl> - URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; <nl> - if ( urlResource ! = null ) <nl> - { <nl> - loadLocalization ( urlResource , lang , isXML ) ; <nl> - } <nl> - else <nl> - { <nl> - ModContainer activeModContainer = Loader . instance ( ) . activeModContainer ( ) ; <nl> - if ( activeModContainer ! = null ) <nl> - { <nl> - FMLLog . log ( activeModContainer . getModId ( ) , Level . ERROR , " The language resource % s cannot be located on the classpath . This is a programming error . " , localizationFile ) ; <nl> - } <nl> - else <nl> - { <nl> - FMLLog . log ( Level . ERROR , " The language resource % s cannot be located on the classpath . This is a programming error . " , localizationFile ) ; <nl> - } <nl> - } <nl> - } <nl> - <nl> - / * * <nl> - * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> - * / <nl> - @ Deprecated <nl> - public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) <nl> - { <nl> - InputStream langStream = null ; <nl> - Properties langPack = new Properties ( ) ; <nl> - <nl> - try { <nl> - langStream = localizationFile . openStream ( ) ; <nl> - <nl> - if ( isXML ) { <nl> - langPack . loadFromXML ( langStream ) ; <nl> - } <nl> - else { <nl> - langPack . load ( new InputStreamReader ( langStream , Charsets . UTF _ 8 ) ) ; <nl> - } <nl> - <nl> - addStringLocalization ( langPack , lang ) ; <nl> - } <nl> - catch ( IOException e ) { <nl> - FMLLog . log ( Level . ERROR , e , " Unable to load localization from file % s " , localizationFile ) ; <nl> - } <nl> - finally { <nl> - try { <nl> - if ( langStream ! = null ) { <nl> - langStream . close ( ) ; <nl> - } <nl> - } <nl> - catch ( IOException ex ) { <nl> - / / HUSH <nl> - } <nl> - } <nl> - } <nl> - <nl> - public void injectLanguage ( String language , Map < String , String > parsedLangFile ) <nl> - { <nl> - <nl> - Properties p = modLanguageData . get ( language ) ; <nl> - if ( p = = null ) <nl> - { <nl> - p = new Properties ( ) ; <nl> - modLanguageData . put ( language , p ) ; <nl> - } <nl> - p . putAll ( parsedLangFile ) ; <nl> - } <nl> - <nl> - public void loadLanguagesFor ( ModContainer container , Side side ) <nl> - { <nl> - File source = container . getSource ( ) ; <nl> - try <nl> - { <nl> - if ( source . isDirectory ( ) ) <nl> - { <nl> - searchDirForLanguages ( source , " " , side ) ; <nl> - } <nl> - else <nl> - { <nl> - searchZipForLanguages ( source , side ) ; <nl> - } <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - <nl> - private void searchZipForLanguages ( File source , Side side ) throws IOException <nl> - { <nl> - ZipFile zf = new ZipFile ( source ) ; <nl> - List < String > added = Lists . newArrayList ( ) ; <nl> - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> - { <nl> - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - String lang = matcher . group ( 2 ) ; <nl> - / / FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; <nl> - added . add ( lang ) ; <nl> - LanguageRegistry . instance ( ) . injectLanguage ( lang , LanguageMap . parseLangFile ( zf . getInputStream ( ze ) ) ) ; <nl> - / / Ensure en _ US is available to StringTranslate on the server <nl> - if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> - { <nl> - LanguageMap . inject ( zf . getInputStream ( ze ) ) ; <nl> - } <nl> - } <nl> - } <nl> - if ( added . size ( ) > 0 ) <nl> - FMLLog . fine ( " Found translations in % s [ % s ] " , source . getName ( ) , Joiner . on ( " , " ) . join ( added ) ) ; <nl> - zf . close ( ) ; <nl> - } <nl> - <nl> - private void searchDirForLanguages ( File source , String path , Side side ) throws IOException <nl> - { <nl> - for ( File file : source . listFiles ( ) ) <nl> - { <nl> - String currPath = path + file . getName ( ) ; <nl> - if ( file . isDirectory ( ) ) <nl> - { <nl> - searchDirForLanguages ( file , currPath + ' / ' , side ) ; <nl> - } <nl> - Matcher matcher = assetENUSLang . matcher ( currPath ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - String lang = matcher . group ( 2 ) ; <nl> - FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; <nl> - LanguageRegistry . instance ( ) . injectLanguage ( lang , LanguageMap . parseLangFile ( new FileInputStream ( file ) ) ) ; <nl> - / / Ensure en _ US is available to StringTranslate on the server <nl> - if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> - { <nl> - LanguageMap . inject ( new FileInputStream ( file ) ) ; <nl> - } <nl> - } <nl> - } <nl> - } <nl> - } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> index 252e94d . . b80bf1e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java <nl> @ @ - 34 , 7 + 34 , 6 @ @ import net . minecraftforge . fml . common . StartupQuery ; <nl> import net . minecraftforge . fml . common . eventhandler . EventBus ; <nl> import net . minecraftforge . fml . common . functions . GenericIterableFactory ; <nl> import net . minecraftforge . fml . common . network . FMLNetworkEvent ; <nl> - import net . minecraftforge . fml . common . registry . LanguageRegistry ; <nl> import net . minecraftforge . fml . relauncher . Side ; <nl> <nl> import com . google . common . collect . ImmutableList ; <nl> @ @ - 215 , 10 + 214 , 11 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> { <nl> return false ; <nl> } <nl> + <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> - LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; <nl> + / / NOOP <nl> } <nl> <nl> @ Override
NEAREST DIFF (one line): diff - - git a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> index acf32e6 . . 409d67b 100644 <nl> - - - a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> + + + b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch <nl> @ @ - 1 , 6 + 1 , 6 @ @ <nl> - - - . . / src - base / minecraft / net / minecraft / util / StringTranslate . java <nl> + + + . . / src - work / minecraft / net / minecraft / util / StringTranslate . java <nl> - @ @ - 3 , 6 + 3 , 8 @ @ <nl> + @ @ - 3 , 10 + 3 , 13 @ @ <nl> import com . google . common . base . Splitter ; <nl> import com . google . common . collect . Iterables ; <nl> import com . google . common . collect . Maps ; <nl> @ @ - 9 , 33 + 9 , 53 @ @ <nl> import cpw . mods . fml . relauncher . Side ; <nl> import cpw . mods . fml . relauncher . SideOnly ; <nl> import java . io . IOException ; <nl> - @ @ - 25 , 9 + 27 , 19 @ @ <nl> + import java . io . InputStream ; <nl> + + import java . util . HashMap ; <nl> + import java . util . IllegalFormatException ; <nl> + import java . util . Iterator ; <nl> + import java . util . Map ; <nl> + @ @ - 25 , 9 + 28 , 22 @ @ <nl> <nl> public StringTranslate ( ) <nl> { <nl> + InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; <nl> - + localInject ( inputstream ) ; <nl> + + inject ( inputstream ) ; <nl> + } <nl> + <nl> + public static void inject ( InputStream inputstream ) <nl> + { <nl> - + field _ 74817 _ a . localInject ( inputstream ) ; <nl> + + HashMap < String , String > map = parseLangFile ( inputstream ) ; <nl> + + field _ 74817 _ a . field _ 74816 _ c . putAll ( map ) ; <nl> + + field _ 74817 _ a . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> + } <nl> + <nl> - + private void localInject ( InputStream inputstream ) <nl> + + public static HashMap < String , String > parseLangFile ( InputStream inputstream ) <nl> + { <nl> + + HashMap < String , String > table = Maps . newHashMap ( ) ; <nl> try <nl> { <nl> - InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; <nl> Iterator iterator = IOUtils . readLines ( inputstream , Charsets . UTF _ 8 ) . iterator ( ) ; <nl> <nl> while ( iterator . hasNext ( ) ) <nl> - @ @ - 49 , 7 + 61 , 7 @ @ <nl> + @ @ - 42 , 17 + 58 , 17 @ @ <nl> + { <nl> + String s1 = astring [ 0 ] ; <nl> + String s2 = field _ 111053 _ a . matcher ( astring [ 1 ] ) . replaceAll ( " % $ 1s " ) ; <nl> + - this . field _ 74816 _ c . put ( s1 , s2 ) ; <nl> + + table . put ( s1 , s2 ) ; <nl> + } <nl> + } <nl> + } <nl> <nl> - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> + - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; <nl> } <nl> - catch ( IOException ioexception ) <nl> + catch ( Exception ioexception ) <nl> { <nl> ; <nl> } <nl> + + return table ; <nl> + } <nl> + <nl> + static StringTranslate func _ 74808 _ a ( ) <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> index 46c3773 . . fa5971b 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java <nl> @ @ - 17 , 8 + 17 , 8 @ @ import java . util . Arrays ; <nl> import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Map ; <nl> - import java . util . Set ; <nl> import java . util . Map . Entry ; <nl> + import java . util . Set ; <nl> import java . util . concurrent . CountDownLatch ; <nl> import java . util . concurrent . TimeUnit ; <nl> import java . util . logging . Logger ; <nl> @ @ - 75 , 6 + 75 , 7 @ @ import cpw . mods . fml . common . WrongMinecraftVersionException ; <nl> import cpw . mods . fml . common . eventhandler . EventBus ; <nl> import cpw . mods . fml . common . network . FMLNetworkEvent ; <nl> import cpw . mods . fml . common . registry . GameData ; <nl> + import cpw . mods . fml . common . registry . LanguageRegistry ; <nl> import cpw . mods . fml . common . toposort . ModSortingException ; <nl> import cpw . mods . fml . relauncher . Side ; <nl> <nl> @ @ - 480 , 6 + 481 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; <nl> Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; <nl> if ( resourcePackType ! = null ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> index 2604b45 . . 6418f1a 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java <nl> @ @ - 79 , 7 + 79 , 6 @ @ public class FMLCommonHandler <nl> private List < ICrashCallable > crashCallables = Lists . newArrayList ( Loader . instance ( ) . getCallableCrashInformation ( ) ) ; <nl> private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; <nl> private EventBus eventBus = new EventBus ( ) ; <nl> - <nl> / * * <nl> * The FML event bus . Subscribe here for FML related events <nl> * <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> index 77110de . . 95e931b 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java <nl> @ @ - 338 , 7 + 338 , 7 @ @ public class GameRegistry <nl> 	 return null ; <nl> 	 } <nl> <nl> - 	 public static class UniqueIdentifier <nl> + 	 public static final class UniqueIdentifier <nl> 	 { <nl> 	 public final String modId ; <nl> 	 public final String name ; <nl> @ @ - 363 , 7 + 363 , 13 @ @ public class GameRegistry <nl> final UniqueIdentifier other = ( UniqueIdentifier ) obj ; <nl> return Objects . equal ( modId , other . modId ) & & Objects . equal ( name , other . name ) ; <nl> } <nl> - <nl> + <nl> + @ Override <nl> + public int hashCode ( ) <nl> + { <nl> + return Objects . hashCode ( modId , name ) ; <nl> + } <nl> + <nl> @ Override <nl> public String toString ( ) <nl> { <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> index 8273d5c . . 4cc00c8 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java <nl> @ @ - 12 , 18 + 12 , 26 @ @ <nl> <nl> package cpw . mods . fml . common . registry ; <nl> <nl> + import java . io . File ; <nl> + import java . io . FileInputStream ; <nl> import java . io . IOException ; <nl> import java . io . InputStream ; <nl> import java . io . InputStreamReader ; <nl> import java . net . URL ; <nl> + import java . util . Collections ; <nl> import java . util . HashMap ; <nl> import java . util . Map ; <nl> import java . util . Properties ; <nl> + import java . util . regex . Matcher ; <nl> + import java . util . regex . Pattern ; <nl> + import java . util . zip . ZipEntry ; <nl> + import java . util . zip . ZipFile ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import net . minecraft . block . Block ; <nl> import net . minecraft . item . Item ; <nl> import net . minecraft . item . ItemStack ; <nl> + import net . minecraft . util . StringTranslate ; <nl> <nl> import com . google . common . base . Charsets ; <nl> <nl> @ @ - 31 , 6 + 39 , 7 @ @ import cpw . mods . fml . common . FMLCommonHandler ; <nl> import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> + import cpw . mods . fml . relauncher . Side ; <nl> <nl> public class LanguageRegistry <nl> { <nl> @ @ - 38 , 6 + 47 , 8 @ @ public class LanguageRegistry <nl> <nl> private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; <nl> <nl> + private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( . * ) . lang " ) ; <nl> + <nl> public static LanguageRegistry instance ( ) <nl> { <nl> return INSTANCE ; <nl> @ @ - 62 , 10 + 73 , 19 @ @ public class LanguageRegistry <nl> return localizedString ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( String key , String value ) <nl> { <nl> addStringLocalization ( key , " en _ US " , value ) ; <nl> } <nl> + <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( String key , String lang , String value ) <nl> { <nl> Properties langPack = modLanguageData . get ( lang ) ; <nl> @ @ - 76 , 10 + 96 , 18 @ @ public class LanguageRegistry <nl> langPack . put ( key , value ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( Properties langPackAdditions ) { <nl> addStringLocalization ( langPackAdditions , " en _ US " ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addStringLocalization ( Properties langPackAdditions , String lang ) { <nl> Properties langPack = modLanguageData . get ( lang ) ; <nl> if ( langPack = = null ) { <nl> @ @ - 91 , 14 + 119 , 10 @ @ public class LanguageRegistry <nl> } <nl> } <nl> <nl> - public static void reloadLanguageTable ( ) <nl> - { <nl> - / / / / reload language table by forcing lang to null and reloading the properties file <nl> - / / String lang = StringTranslate . func _ 74808 _ a ( ) . func _ 74811 _ c ( ) ; <nl> - / / StringTranslate . func _ 74808 _ a ( ) . func _ 74810 _ a ( lang , true ) ; <nl> - } <nl> - <nl> - <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void addNameForObject ( Object objectToName , String lang , String name ) <nl> { <nl> String objectName ; <nl> @ @ - 115 , 12 + 139 , 20 @ @ public class LanguageRegistry <nl> addStringLocalization ( objectName , lang , name ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public static void addName ( Object objectToName , String name ) <nl> { <nl> instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> @ SuppressWarnings ( " unchecked " ) <nl> + @ Deprecated <nl> public void loadLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map field _ 135032 _ a , String lang ) <nl> { <nl> Properties usPack = modLanguageData . get ( " en _ US " ) ; <nl> @ @ - 134 , 6 + 166 , 10 @ @ public class LanguageRegistry <nl> field _ 135032 _ a . putAll ( langPack ) ; <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void loadLocalization ( String localizationFile , String lang , boolean isXML ) <nl> { <nl> URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; <nl> @ @ - 155 , 6 + 191 , 10 @ @ public class LanguageRegistry <nl> } <nl> } <nl> <nl> + / * * <nl> + * Deprecated for removal in 1 . 8 . Use the assets lang system <nl> + * / <nl> + @ Deprecated <nl> public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) <nl> { <nl> InputStream langStream = null ; <nl> @ @ - 186 , 4 + 226 , 81 @ @ public class LanguageRegistry <nl> } <nl> } <nl> } <nl> + <nl> + public void injectLanguage ( String language , HashMap < String , String > parsedLangFile ) <nl> + { <nl> + <nl> + Properties p = modLanguageData . get ( language ) ; <nl> + if ( p = = null ) <nl> + { <nl> + p = new Properties ( ) ; <nl> + modLanguageData . put ( language , p ) ; <nl> + } <nl> + p . putAll ( parsedLangFile ) ; <nl> + } <nl> + <nl> + public void loadLanguagesFor ( ModContainer container , Side side ) <nl> + { <nl> + File source = container . getSource ( ) ; <nl> + try <nl> + { <nl> + if ( source . isDirectory ( ) ) <nl> + { <nl> + searchDirForLanguages ( source , " " , side ) ; <nl> + } <nl> + else <nl> + { <nl> + searchZipForLanguages ( source , side ) ; <nl> + } <nl> + } <nl> + catch ( IOException ioe ) <nl> + { <nl> + <nl> + } <nl> + } <nl> + <nl> + private void searchZipForLanguages ( File source , Side side ) throws IOException <nl> + { <nl> + ZipFile zf = new ZipFile ( source ) ; <nl> + for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> + { <nl> + Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> + if ( matcher . matches ( ) ) <nl> + { <nl> + String lang = matcher . group ( 2 ) ; <nl> + FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; <nl> + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; <nl> + / / Ensure en _ US is available to StringTranslate on the server <nl> + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> + { <nl> + StringTranslate . inject ( zf . getInputStream ( ze ) ) ; <nl> + } <nl> + } <nl> + } <nl> + zf . close ( ) ; <nl> + } <nl> + <nl> + private void searchDirForLanguages ( File source , String path , Side side ) throws IOException <nl> + { <nl> + for ( File file : source . listFiles ( ) ) <nl> + { <nl> + String currPath = path + file . getName ( ) ; <nl> + if ( file . isDirectory ( ) ) <nl> + { <nl> + searchDirForLanguages ( file , currPath + ' / ' , side ) ; <nl> + } <nl> + Matcher matcher = assetENUSLang . matcher ( currPath ) ; <nl> + if ( matcher . matches ( ) ) <nl> + { <nl> + String lang = matcher . group ( 2 ) ; <nl> + FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; <nl> + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( new FileInputStream ( file ) ) ) ; <nl> + / / Ensure en _ US is available to StringTranslate on the server <nl> + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) <nl> + { <nl> + StringTranslate . inject ( new FileInputStream ( file ) ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> } <nl> diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> index b4965d0 . . 17bb021 100644 <nl> - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java <nl> @ @ - 12 , 27 + 12 , 14 @ @ <nl> * / <nl> package cpw . mods . fml . server ; <nl> <nl> - import java . io . File ; <nl> - import java . io . FileInputStream ; <nl> - import java . io . IOException ; <nl> - import java . util . Collections ; <nl> import java . util . List ; <nl> import java . util . Set ; <nl> - import java . util . regex . Matcher ; <nl> - import java . util . regex . Pattern ; <nl> - import java . util . zip . ZipEntry ; <nl> - import java . util . zip . ZipFile ; <nl> - <nl> import net . minecraft . network . INetHandler ; <nl> import net . minecraft . network . NetHandlerPlayServer ; <nl> import net . minecraft . network . NetworkManager ; <nl> import net . minecraft . server . MinecraftServer ; <nl> - import net . minecraft . util . StringTranslate ; <nl> - <nl> import com . google . common . collect . ImmutableList ; <nl> - <nl> import cpw . mods . fml . common . FMLCommonHandler ; <nl> - import cpw . mods . fml . common . FMLLog ; <nl> import cpw . mods . fml . common . IFMLSidedHandler ; <nl> import cpw . mods . fml . common . Loader ; <nl> import cpw . mods . fml . common . ModContainer ; <nl> @ @ - 94 , 7 + 81 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> public void finishServerLoading ( ) <nl> { <nl> Loader . instance ( ) . initializeMods ( ) ; <nl> - LanguageRegistry . reloadLanguageTable ( ) ; <nl> } <nl> <nl> @ Override <nl> @ @ - 150 , 55 + 136 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler <nl> @ Override <nl> public void addModAsResource ( ModContainer container ) <nl> { <nl> - File source = container . getSource ( ) ; <nl> - try <nl> - { <nl> - if ( source . isDirectory ( ) ) <nl> - { <nl> - searchDirForENUSLanguage ( source , " " ) ; <nl> - } <nl> - else <nl> - { <nl> - searchZipForENUSLanguage ( source ) ; <nl> - } <nl> - } <nl> - catch ( IOException ioe ) <nl> - { <nl> - <nl> - } <nl> - } <nl> - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / en _ US . lang " ) ; <nl> - private void searchZipForENUSLanguage ( File source ) throws IOException <nl> - { <nl> - ZipFile zf = new ZipFile ( source ) ; <nl> - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) <nl> - { <nl> - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - FMLLog . fine ( " Injecting found translation data in zip file % s at % s into language system " , source . getName ( ) , ze . getName ( ) ) ; <nl> - StringTranslate . inject ( zf . getInputStream ( ze ) ) ; <nl> - } <nl> - } <nl> - zf . close ( ) ; <nl> - } <nl> - private void searchDirForENUSLanguage ( File source , String path ) throws IOException <nl> - { <nl> - for ( File file : source . listFiles ( ) ) <nl> - { <nl> - String currPath = path + file . getName ( ) ; <nl> - if ( file . isDirectory ( ) ) <nl> - { <nl> - searchDirForENUSLanguage ( file , currPath + ' / ' ) ; <nl> - } <nl> - Matcher matcher = assetENUSLang . matcher ( currPath ) ; <nl> - if ( matcher . matches ( ) ) <nl> - { <nl> - FMLLog . fine ( " Injecting found translation data at % s into language system " , currPath ) ; <nl> - StringTranslate . inject ( new FileInputStream ( file ) ) ; <nl> - } <nl> - } <nl> + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; <nl> } <nl> + <nl> @ Override <nl> public void updateResourcePackList ( ) <nl> {

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 index 5fa7462 . . 19e8d0b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / FMLClientHandler . java 
 @ @ - 88 , 7 + 88 , 6 @ @ import net . minecraftforge . fml . common . WrongMinecraftVersionException ; 
 import net . minecraftforge . fml . common . eventhandler . EventBus ; 
 import net . minecraftforge . fml . common . network . FMLNetworkEvent ; 
 import net . minecraftforge . fml . common . network . internal . FMLNetworkHandler ; 
 - import net . minecraftforge . fml . common . registry . LanguageRegistry ; 
 import net . minecraftforge . fml . common . registry . PersistentRegistryManager ; 
 import net . minecraftforge . fml . common . toposort . ModSortingException ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 @ @ - 589 , 7 + 588 , 6 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 - LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; 
 Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; 
 if ( resourcePackType ! = null ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java b / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java 
 deleted file mode 100644 
 index be6ff39 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / common / functions / CollectionWrapperFactory . java 
 + + + / dev / null 
 @ @ - 1 , 32 + 0 , 0 @ @ 
 - package net . minecraftforge . fml . common . functions ; 
 - 
 - import java . util . Collection ; 
 - import java . util . List ; 
 - import com . google . common . collect . Collections2 ; 
 - import com . google . common . collect . Lists ; 
 - 
 - public class CollectionWrapperFactory { 
 - / * * 
 - * Return a read only cast view of the supplied raw collection , based on the element type given 
 - * @ param coll The collection to cast 
 - * @ param elementType the super type contained in the collection 
 - * @ return a collection asserting that type relationship 
 - * / 
 - public static < T > Collection < T > wrap ( @ SuppressWarnings ( " rawtypes " ) Collection coll , Class < T > elementType ) 
 - { 
 - Collection < ? > asGeneric = coll ; 
 - return Collections2 . transform ( asGeneric , new TypeCastFunction < T > ( elementType ) ) ; 
 - } 
 - 
 - / * * 
 - * Return a read only cast view of the supplied raw list , based on the element type given 
 - * @ param list The list to cast 
 - * @ param elementType the super type contained in the list 
 - * @ return a list asserting that type relationship 
 - * / 
 - public static < T > List < T > wrap ( @ SuppressWarnings ( " rawtypes " ) List list , Class < T > elementType ) 
 - { 
 - List < ? > asGeneric = list ; 
 - return Lists . transform ( asGeneric , new TypeCastFunction < T > ( elementType ) ) ; 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java 
 deleted file mode 100644 
 index 3b2a369 . . 0000000 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / LanguageRegistry . java 
 + + + / dev / null 
 @ @ - 1 , 324 + 0 , 0 @ @ 
 - / * 
 - * Forge Mod Loader 
 - * Copyright ( c ) 2012 - 2013 cpw . 
 - * All rights reserved . This program and the accompanying materials 
 - * are made available under the terms of the GNU Lesser Public License v2 . 1 
 - * which accompanies this distribution , and is available at 
 - * http : / / www . gnu . org / licenses / old - licenses / gpl - 2 . 0 . html 
 - * 
 - * Contributors : 
 - * cpw - implementation 
 - * / 
 - 
 - package net . minecraftforge . fml . common . registry ; 
 - 
 - import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . IOException ; 
 - import java . io . InputStream ; 
 - import java . io . InputStreamReader ; 
 - import java . net . URL ; 
 - import java . util . Collections ; 
 - import java . util . HashMap ; 
 - import java . util . List ; 
 - import java . util . Map ; 
 - import java . util . Map . Entry ; 
 - import java . util . Properties ; 
 - import java . util . regex . Matcher ; 
 - import java . util . regex . Pattern ; 
 - import java . util . zip . ZipEntry ; 
 - import java . util . zip . ZipFile ; 
 - 
 - import org . apache . logging . log4j . Level ; 
 - 
 - import net . minecraft . block . Block ; 
 - import net . minecraft . item . Item ; 
 - import net . minecraft . item . ItemStack ; 
 - import net . minecraft . util . text . translation . LanguageMap ; 
 - import net . minecraftforge . fml . common . FMLCommonHandler ; 
 - import net . minecraftforge . fml . common . FMLLog ; 
 - import net . minecraftforge . fml . common . Loader ; 
 - import net . minecraftforge . fml . common . ModContainer ; 
 - import net . minecraftforge . fml . relauncher . Side ; 
 - 
 - import com . google . common . base . Charsets ; 
 - import com . google . common . base . Joiner ; 
 - import com . google . common . collect . Lists ; 
 - 
 - public class LanguageRegistry 
 - { 
 - private static final LanguageRegistry INSTANCE = new LanguageRegistry ( ) ; 
 - 
 - private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; 
 - 
 - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( ? : . + / | ) ( [ \ \ w _ - ] + ) . lang " ) ; 
 - 
 - public static LanguageRegistry instance ( ) 
 - { 
 - return INSTANCE ; 
 - } 
 - 
 - public String getStringLocalization ( String key ) 
 - { 
 - return getStringLocalization ( key , FMLCommonHandler . instance ( ) . getCurrentLanguage ( ) ) ; 
 - } 
 - 
 - public String getStringLocalization ( String key , String lang ) 
 - { 
 - String localizedString = " " ; 
 - Properties langPack = modLanguageData . get ( lang ) ; 
 - 
 - if ( langPack ! = null ) { 
 - if ( langPack . getProperty ( key ) ! = null ) { 
 - localizedString = langPack . getProperty ( key ) ; 
 - } 
 - } 
 - 
 - return localizedString ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void addStringLocalization ( String key , String value ) 
 - { 
 - addStringLocalization ( key , " en _ US " , value ) ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void addStringLocalization ( String key , String lang , String value ) 
 - { 
 - Properties langPack = modLanguageData . get ( lang ) ; 
 - if ( langPack = = null ) { 
 - langPack = new Properties ( ) ; 
 - modLanguageData . put ( lang , langPack ) ; 
 - } 
 - langPack . put ( key , value ) ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void addStringLocalization ( Properties langPackAdditions ) { 
 - addStringLocalization ( langPackAdditions , " en _ US " ) ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void addStringLocalization ( Properties langPackAdditions , String lang ) { 
 - Properties langPack = modLanguageData . get ( lang ) ; 
 - if ( langPack = = null ) { 
 - langPack = new Properties ( ) ; 
 - modLanguageData . put ( lang , langPack ) ; 
 - } 
 - if ( langPackAdditions ! = null ) { 
 - langPack . putAll ( langPackAdditions ) ; 
 - } 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void addNameForObject ( Object objectToName , String lang , String name ) 
 - { 
 - String objectName ; 
 - if ( objectToName instanceof Item ) { 
 - objectName = ( ( Item ) objectToName ) . getUnlocalizedName ( ) ; 
 - } else if ( objectToName instanceof Block ) { 
 - objectName = ( ( Block ) objectToName ) . getUnlocalizedName ( ) ; 
 - } else if ( objectToName instanceof ItemStack ) { 
 - objectName = ( ( ItemStack ) objectToName ) . getItem ( ) . getUnlocalizedName ( ( ItemStack ) objectToName ) ; 
 - } else { 
 - throw new IllegalArgumentException ( String . format ( " Illegal object for naming % s " , objectToName ) ) ; 
 - } 
 - objectName + = " . name " ; 
 - addStringLocalization ( objectName , lang , name ) ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public static void addName ( Object objectToName , String name ) 
 - { 
 - instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ SuppressWarnings ( " unchecked " ) 
 - @ Deprecated 
 - public void mergeLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map properties , String lang ) 
 - { 
 - Properties langPack = modLanguageData . get ( lang ) ; 
 - if ( langPack ! = null ) { 
 - mergeWithoutOverwrite ( langPack , properties ) ; 
 - } 
 - Properties usPack = modLanguageData . get ( " en _ US " ) ; 
 - if ( usPack ! = null ) { 
 - mergeWithoutOverwrite ( usPack , properties ) ; 
 - } 
 - } 
 - 
 - @ Deprecated 
 - private < K , V > void mergeWithoutOverwrite ( Map < ? extends K , ? extends V > from , Map < K , V > to ) 
 - { 
 - for ( Entry < ? extends K , ? extends V > e : from . entrySet ( ) ) 
 - { 
 - if ( ! to . containsKey ( e . getKey ( ) ) ) 
 - { 
 - to . put ( e . getKey ( ) , e . getValue ( ) ) ; 
 - } 
 - } 
 - } 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void loadLocalization ( String localizationFile , String lang , boolean isXML ) 
 - { 
 - URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; 
 - if ( urlResource ! = null ) 
 - { 
 - loadLocalization ( urlResource , lang , isXML ) ; 
 - } 
 - else 
 - { 
 - ModContainer activeModContainer = Loader . instance ( ) . activeModContainer ( ) ; 
 - if ( activeModContainer ! = null ) 
 - { 
 - FMLLog . log ( activeModContainer . getModId ( ) , Level . ERROR , " The language resource % s cannot be located on the classpath . This is a programming error . " , localizationFile ) ; 
 - } 
 - else 
 - { 
 - FMLLog . log ( Level . ERROR , " The language resource % s cannot be located on the classpath . This is a programming error . " , localizationFile ) ; 
 - } 
 - } 
 - } 
 - 
 - / * * 
 - * Deprecated for removal in 1 . 8 . Use the assets lang system 
 - * / 
 - @ Deprecated 
 - public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) 
 - { 
 - InputStream langStream = null ; 
 - Properties langPack = new Properties ( ) ; 
 - 
 - try { 
 - langStream = localizationFile . openStream ( ) ; 
 - 
 - if ( isXML ) { 
 - langPack . loadFromXML ( langStream ) ; 
 - } 
 - else { 
 - langPack . load ( new InputStreamReader ( langStream , Charsets . UTF _ 8 ) ) ; 
 - } 
 - 
 - addStringLocalization ( langPack , lang ) ; 
 - } 
 - catch ( IOException e ) { 
 - FMLLog . log ( Level . ERROR , e , " Unable to load localization from file % s " , localizationFile ) ; 
 - } 
 - finally { 
 - try { 
 - if ( langStream ! = null ) { 
 - langStream . close ( ) ; 
 - } 
 - } 
 - catch ( IOException ex ) { 
 - / / HUSH 
 - } 
 - } 
 - } 
 - 
 - public void injectLanguage ( String language , Map < String , String > parsedLangFile ) 
 - { 
 - 
 - Properties p = modLanguageData . get ( language ) ; 
 - if ( p = = null ) 
 - { 
 - p = new Properties ( ) ; 
 - modLanguageData . put ( language , p ) ; 
 - } 
 - p . putAll ( parsedLangFile ) ; 
 - } 
 - 
 - public void loadLanguagesFor ( ModContainer container , Side side ) 
 - { 
 - File source = container . getSource ( ) ; 
 - try 
 - { 
 - if ( source . isDirectory ( ) ) 
 - { 
 - searchDirForLanguages ( source , " " , side ) ; 
 - } 
 - else 
 - { 
 - searchZipForLanguages ( source , side ) ; 
 - } 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - 
 - } 
 - } 
 - 
 - private void searchZipForLanguages ( File source , Side side ) throws IOException 
 - { 
 - ZipFile zf = new ZipFile ( source ) ; 
 - List < String > added = Lists . newArrayList ( ) ; 
 - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 - { 
 - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - String lang = matcher . group ( 2 ) ; 
 - / / FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; 
 - added . add ( lang ) ; 
 - LanguageRegistry . instance ( ) . injectLanguage ( lang , LanguageMap . parseLangFile ( zf . getInputStream ( ze ) ) ) ; 
 - / / Ensure en _ US is available to StringTranslate on the server 
 - if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 - { 
 - LanguageMap . inject ( zf . getInputStream ( ze ) ) ; 
 - } 
 - } 
 - } 
 - if ( added . size ( ) > 0 ) 
 - FMLLog . fine ( " Found translations in % s [ % s ] " , source . getName ( ) , Joiner . on ( " , " ) . join ( added ) ) ; 
 - zf . close ( ) ; 
 - } 
 - 
 - private void searchDirForLanguages ( File source , String path , Side side ) throws IOException 
 - { 
 - for ( File file : source . listFiles ( ) ) 
 - { 
 - String currPath = path + file . getName ( ) ; 
 - if ( file . isDirectory ( ) ) 
 - { 
 - searchDirForLanguages ( file , currPath + ' / ' , side ) ; 
 - } 
 - Matcher matcher = assetENUSLang . matcher ( currPath ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - String lang = matcher . group ( 2 ) ; 
 - FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; 
 - LanguageRegistry . instance ( ) . injectLanguage ( lang , LanguageMap . parseLangFile ( new FileInputStream ( file ) ) ) ; 
 - / / Ensure en _ US is available to StringTranslate on the server 
 - if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 - { 
 - LanguageMap . inject ( new FileInputStream ( file ) ) ; 
 - } 
 - } 
 - } 
 - } 
 - } 
 diff - - git a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 index 252e94d . . b80bf1e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / server / FMLServerHandler . java 
 @ @ - 34 , 7 + 34 , 6 @ @ import net . minecraftforge . fml . common . StartupQuery ; 
 import net . minecraftforge . fml . common . eventhandler . EventBus ; 
 import net . minecraftforge . fml . common . functions . GenericIterableFactory ; 
 import net . minecraftforge . fml . common . network . FMLNetworkEvent ; 
 - import net . minecraftforge . fml . common . registry . LanguageRegistry ; 
 import net . minecraftforge . fml . relauncher . Side ; 
 
 import com . google . common . collect . ImmutableList ; 
 @ @ - 215 , 10 + 214 , 11 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 { 
 return false ; 
 } 
 + 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 - LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; 
 + / / NOOP 
 } 
 
 @ Override

NEAREST DIFF:
diff - - git a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 index acf32e6 . . 409d67b 100644 
 - - - a / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 + + + b / fml / patches / minecraft / net / minecraft / util / StringTranslate . java . patch 
 @ @ - 1 , 6 + 1 , 6 @ @ 
 - - - . . / src - base / minecraft / net / minecraft / util / StringTranslate . java 
 + + + . . / src - work / minecraft / net / minecraft / util / StringTranslate . java 
 - @ @ - 3 , 6 + 3 , 8 @ @ 
 + @ @ - 3 , 10 + 3 , 13 @ @ 
 import com . google . common . base . Splitter ; 
 import com . google . common . collect . Iterables ; 
 import com . google . common . collect . Maps ; 
 @ @ - 9 , 33 + 9 , 53 @ @ 
 import cpw . mods . fml . relauncher . Side ; 
 import cpw . mods . fml . relauncher . SideOnly ; 
 import java . io . IOException ; 
 - @ @ - 25 , 9 + 27 , 19 @ @ 
 + import java . io . InputStream ; 
 + + import java . util . HashMap ; 
 + import java . util . IllegalFormatException ; 
 + import java . util . Iterator ; 
 + import java . util . Map ; 
 + @ @ - 25 , 9 + 28 , 22 @ @ 
 
 public StringTranslate ( ) 
 { 
 + InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; 
 - + localInject ( inputstream ) ; 
 + + inject ( inputstream ) ; 
 + } 
 + 
 + public static void inject ( InputStream inputstream ) 
 + { 
 - + field _ 74817 _ a . localInject ( inputstream ) ; 
 + + HashMap < String , String > map = parseLangFile ( inputstream ) ; 
 + + field _ 74817 _ a . field _ 74816 _ c . putAll ( map ) ; 
 + + field _ 74817 _ a . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 + } 
 + 
 - + private void localInject ( InputStream inputstream ) 
 + + public static HashMap < String , String > parseLangFile ( InputStream inputstream ) 
 + { 
 + + HashMap < String , String > table = Maps . newHashMap ( ) ; 
 try 
 { 
 - InputStream inputstream = StringTranslate . class . getResourceAsStream ( " / assets / minecraft / lang / en _ US . lang " ) ; 
 Iterator iterator = IOUtils . readLines ( inputstream , Charsets . UTF _ 8 ) . iterator ( ) ; 
 
 while ( iterator . hasNext ( ) ) 
 - @ @ - 49 , 7 + 61 , 7 @ @ 
 + @ @ - 42 , 17 + 58 , 17 @ @ 
 + { 
 + String s1 = astring [ 0 ] ; 
 + String s2 = field _ 111053 _ a . matcher ( astring [ 1 ] ) . replaceAll ( " % $ 1s " ) ; 
 + - this . field _ 74816 _ c . put ( s1 , s2 ) ; 
 + + table . put ( s1 , s2 ) ; 
 + } 
 + } 
 + } 
 
 - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 + - this . field _ 150511 _ e = System . currentTimeMillis ( ) ; 
 } 
 - catch ( IOException ioexception ) 
 + catch ( Exception ioexception ) 
 { 
 ; 
 } 
 + + return table ; 
 + } 
 + 
 + static StringTranslate func _ 74808 _ a ( ) 
 diff - - git a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 index 46c3773 . . fa5971b 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / client / FMLClientHandler . java 
 @ @ - 17 , 8 + 17 , 8 @ @ import java . util . Arrays ; 
 import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Map ; 
 - import java . util . Set ; 
 import java . util . Map . Entry ; 
 + import java . util . Set ; 
 import java . util . concurrent . CountDownLatch ; 
 import java . util . concurrent . TimeUnit ; 
 import java . util . logging . Logger ; 
 @ @ - 75 , 6 + 75 , 7 @ @ import cpw . mods . fml . common . WrongMinecraftVersionException ; 
 import cpw . mods . fml . common . eventhandler . EventBus ; 
 import cpw . mods . fml . common . network . FMLNetworkEvent ; 
 import cpw . mods . fml . common . registry . GameData ; 
 + import cpw . mods . fml . common . registry . LanguageRegistry ; 
 import cpw . mods . fml . common . toposort . ModSortingException ; 
 import cpw . mods . fml . relauncher . Side ; 
 
 @ @ - 480 , 6 + 481 , 7 @ @ public class FMLClientHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . CLIENT ) ; 
 Class < ? > resourcePackType = container . getCustomResourcePackClass ( ) ; 
 if ( resourcePackType ! = null ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 index 2604b45 . . 6418f1a 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / FMLCommonHandler . java 
 @ @ - 79 , 7 + 79 , 6 @ @ public class FMLCommonHandler 
 private List < ICrashCallable > crashCallables = Lists . newArrayList ( Loader . instance ( ) . getCallableCrashInformation ( ) ) ; 
 private Set < SaveHandler > handlerSet = Sets . newSetFromMap ( new MapMaker ( ) . weakKeys ( ) . < SaveHandler , Boolean > makeMap ( ) ) ; 
 private EventBus eventBus = new EventBus ( ) ; 
 - 
 / * * 
 * The FML event bus . Subscribe here for FML related events 
 * 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 index 77110de . . 95e931b 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / GameRegistry . java 
 @ @ - 338 , 7 + 338 , 7 @ @ public class GameRegistry 
 	 return null ; 
 	 } 
 
 - 	 public static class UniqueIdentifier 
 + 	 public static final class UniqueIdentifier 
 	 { 
 	 public final String modId ; 
 	 public final String name ; 
 @ @ - 363 , 7 + 363 , 13 @ @ public class GameRegistry 
 final UniqueIdentifier other = ( UniqueIdentifier ) obj ; 
 return Objects . equal ( modId , other . modId ) & & Objects . equal ( name , other . name ) ; 
 } 
 - 
 + 
 + @ Override 
 + public int hashCode ( ) 
 + { 
 + return Objects . hashCode ( modId , name ) ; 
 + } 
 + 
 @ Override 
 public String toString ( ) 
 { 
 diff - - git a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 index 8273d5c . . 4cc00c8 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 + + + b / fml / src / main / java / cpw / mods / fml / common / registry / LanguageRegistry . java 
 @ @ - 12 , 18 + 12 , 26 @ @ 
 
 package cpw . mods . fml . common . registry ; 
 
 + import java . io . File ; 
 + import java . io . FileInputStream ; 
 import java . io . IOException ; 
 import java . io . InputStream ; 
 import java . io . InputStreamReader ; 
 import java . net . URL ; 
 + import java . util . Collections ; 
 import java . util . HashMap ; 
 import java . util . Map ; 
 import java . util . Properties ; 
 + import java . util . regex . Matcher ; 
 + import java . util . regex . Pattern ; 
 + import java . util . zip . ZipEntry ; 
 + import java . util . zip . ZipFile ; 
 import org . apache . logging . log4j . Level ; 
 
 import net . minecraft . block . Block ; 
 import net . minecraft . item . Item ; 
 import net . minecraft . item . ItemStack ; 
 + import net . minecraft . util . StringTranslate ; 
 
 import com . google . common . base . Charsets ; 
 
 @ @ - 31 , 6 + 39 , 7 @ @ import cpw . mods . fml . common . FMLCommonHandler ; 
 import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 + import cpw . mods . fml . relauncher . Side ; 
 
 public class LanguageRegistry 
 { 
 @ @ - 38 , 6 + 47 , 8 @ @ public class LanguageRegistry 
 
 private Map < String , Properties > modLanguageData = new HashMap < String , Properties > ( ) ; 
 
 + private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / ( . * ) . lang " ) ; 
 + 
 public static LanguageRegistry instance ( ) 
 { 
 return INSTANCE ; 
 @ @ - 62 , 10 + 73 , 19 @ @ public class LanguageRegistry 
 return localizedString ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( String key , String value ) 
 { 
 addStringLocalization ( key , " en _ US " , value ) ; 
 } 
 + 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( String key , String lang , String value ) 
 { 
 Properties langPack = modLanguageData . get ( lang ) ; 
 @ @ - 76 , 10 + 96 , 18 @ @ public class LanguageRegistry 
 langPack . put ( key , value ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( Properties langPackAdditions ) { 
 addStringLocalization ( langPackAdditions , " en _ US " ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addStringLocalization ( Properties langPackAdditions , String lang ) { 
 Properties langPack = modLanguageData . get ( lang ) ; 
 if ( langPack = = null ) { 
 @ @ - 91 , 14 + 119 , 10 @ @ public class LanguageRegistry 
 } 
 } 
 
 - public static void reloadLanguageTable ( ) 
 - { 
 - / / / / reload language table by forcing lang to null and reloading the properties file 
 - / / String lang = StringTranslate . func _ 74808 _ a ( ) . func _ 74811 _ c ( ) ; 
 - / / StringTranslate . func _ 74808 _ a ( ) . func _ 74810 _ a ( lang , true ) ; 
 - } 
 - 
 - 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void addNameForObject ( Object objectToName , String lang , String name ) 
 { 
 String objectName ; 
 @ @ - 115 , 12 + 139 , 20 @ @ public class LanguageRegistry 
 addStringLocalization ( objectName , lang , name ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public static void addName ( Object objectToName , String name ) 
 { 
 instance ( ) . addNameForObject ( objectToName , " en _ US " , name ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 @ SuppressWarnings ( " unchecked " ) 
 + @ Deprecated 
 public void loadLanguageTable ( @ SuppressWarnings ( " rawtypes " ) Map field _ 135032 _ a , String lang ) 
 { 
 Properties usPack = modLanguageData . get ( " en _ US " ) ; 
 @ @ - 134 , 6 + 166 , 10 @ @ public class LanguageRegistry 
 field _ 135032 _ a . putAll ( langPack ) ; 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void loadLocalization ( String localizationFile , String lang , boolean isXML ) 
 { 
 URL urlResource = this . getClass ( ) . getResource ( localizationFile ) ; 
 @ @ - 155 , 6 + 191 , 10 @ @ public class LanguageRegistry 
 } 
 } 
 
 + / * * 
 + * Deprecated for removal in 1 . 8 . Use the assets lang system 
 + * / 
 + @ Deprecated 
 public void loadLocalization ( URL localizationFile , String lang , boolean isXML ) 
 { 
 InputStream langStream = null ; 
 @ @ - 186 , 4 + 226 , 81 @ @ public class LanguageRegistry 
 } 
 } 
 } 
 + 
 + public void injectLanguage ( String language , HashMap < String , String > parsedLangFile ) 
 + { 
 + 
 + Properties p = modLanguageData . get ( language ) ; 
 + if ( p = = null ) 
 + { 
 + p = new Properties ( ) ; 
 + modLanguageData . put ( language , p ) ; 
 + } 
 + p . putAll ( parsedLangFile ) ; 
 + } 
 + 
 + public void loadLanguagesFor ( ModContainer container , Side side ) 
 + { 
 + File source = container . getSource ( ) ; 
 + try 
 + { 
 + if ( source . isDirectory ( ) ) 
 + { 
 + searchDirForLanguages ( source , " " , side ) ; 
 + } 
 + else 
 + { 
 + searchZipForLanguages ( source , side ) ; 
 + } 
 + } 
 + catch ( IOException ioe ) 
 + { 
 + 
 + } 
 + } 
 + 
 + private void searchZipForLanguages ( File source , Side side ) throws IOException 
 + { 
 + ZipFile zf = new ZipFile ( source ) ; 
 + for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 + { 
 + Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 + if ( matcher . matches ( ) ) 
 + { 
 + String lang = matcher . group ( 2 ) ; 
 + FMLLog . fine ( " Injecting found translation data for lang % s in zip file % s at % s into language system " , lang , source . getName ( ) , ze . getName ( ) ) ; 
 + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( zf . getInputStream ( ze ) ) ) ; 
 + / / Ensure en _ US is available to StringTranslate on the server 
 + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 + { 
 + StringTranslate . inject ( zf . getInputStream ( ze ) ) ; 
 + } 
 + } 
 + } 
 + zf . close ( ) ; 
 + } 
 + 
 + private void searchDirForLanguages ( File source , String path , Side side ) throws IOException 
 + { 
 + for ( File file : source . listFiles ( ) ) 
 + { 
 + String currPath = path + file . getName ( ) ; 
 + if ( file . isDirectory ( ) ) 
 + { 
 + searchDirForLanguages ( file , currPath + ' / ' , side ) ; 
 + } 
 + Matcher matcher = assetENUSLang . matcher ( currPath ) ; 
 + if ( matcher . matches ( ) ) 
 + { 
 + String lang = matcher . group ( 2 ) ; 
 + FMLLog . fine ( " Injecting found translation assets for lang % s at % s into language system " , lang , currPath ) ; 
 + LanguageRegistry . instance ( ) . injectLanguage ( lang , StringTranslate . parseLangFile ( new FileInputStream ( file ) ) ) ; 
 + / / Ensure en _ US is available to StringTranslate on the server 
 + if ( " en _ US " . equals ( lang ) & & side = = Side . SERVER ) 
 + { 
 + StringTranslate . inject ( new FileInputStream ( file ) ) ; 
 + } 
 + } 
 + } 
 + } 
 } 
 diff - - git a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 index b4965d0 . . 17bb021 100644 
 - - - a / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 + + + b / fml / src / main / java / cpw / mods / fml / server / FMLServerHandler . java 
 @ @ - 12 , 27 + 12 , 14 @ @ 
 * / 
 package cpw . mods . fml . server ; 
 
 - import java . io . File ; 
 - import java . io . FileInputStream ; 
 - import java . io . IOException ; 
 - import java . util . Collections ; 
 import java . util . List ; 
 import java . util . Set ; 
 - import java . util . regex . Matcher ; 
 - import java . util . regex . Pattern ; 
 - import java . util . zip . ZipEntry ; 
 - import java . util . zip . ZipFile ; 
 - 
 import net . minecraft . network . INetHandler ; 
 import net . minecraft . network . NetHandlerPlayServer ; 
 import net . minecraft . network . NetworkManager ; 
 import net . minecraft . server . MinecraftServer ; 
 - import net . minecraft . util . StringTranslate ; 
 - 
 import com . google . common . collect . ImmutableList ; 
 - 
 import cpw . mods . fml . common . FMLCommonHandler ; 
 - import cpw . mods . fml . common . FMLLog ; 
 import cpw . mods . fml . common . IFMLSidedHandler ; 
 import cpw . mods . fml . common . Loader ; 
 import cpw . mods . fml . common . ModContainer ; 
 @ @ - 94 , 7 + 81 , 6 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 public void finishServerLoading ( ) 
 { 
 Loader . instance ( ) . initializeMods ( ) ; 
 - LanguageRegistry . reloadLanguageTable ( ) ; 
 } 
 
 @ Override 
 @ @ - 150 , 55 + 136 , 9 @ @ public class FMLServerHandler implements IFMLSidedHandler 
 @ Override 
 public void addModAsResource ( ModContainer container ) 
 { 
 - File source = container . getSource ( ) ; 
 - try 
 - { 
 - if ( source . isDirectory ( ) ) 
 - { 
 - searchDirForENUSLanguage ( source , " " ) ; 
 - } 
 - else 
 - { 
 - searchZipForENUSLanguage ( source ) ; 
 - } 
 - } 
 - catch ( IOException ioe ) 
 - { 
 - 
 - } 
 - } 
 - private static final Pattern assetENUSLang = Pattern . compile ( " assets / ( . * ) / lang / en _ US . lang " ) ; 
 - private void searchZipForENUSLanguage ( File source ) throws IOException 
 - { 
 - ZipFile zf = new ZipFile ( source ) ; 
 - for ( ZipEntry ze : Collections . list ( zf . entries ( ) ) ) 
 - { 
 - Matcher matcher = assetENUSLang . matcher ( ze . getName ( ) ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - FMLLog . fine ( " Injecting found translation data in zip file % s at % s into language system " , source . getName ( ) , ze . getName ( ) ) ; 
 - StringTranslate . inject ( zf . getInputStream ( ze ) ) ; 
 - } 
 - } 
 - zf . close ( ) ; 
 - } 
 - private void searchDirForENUSLanguage ( File source , String path ) throws IOException 
 - { 
 - for ( File file : source . listFiles ( ) ) 
 - { 
 - String currPath = path + file . getName ( ) ; 
 - if ( file . isDirectory ( ) ) 
 - { 
 - searchDirForENUSLanguage ( file , currPath + ' / ' ) ; 
 - } 
 - Matcher matcher = assetENUSLang . matcher ( currPath ) ; 
 - if ( matcher . matches ( ) ) 
 - { 
 - FMLLog . fine ( " Injecting found translation data at % s into language system " , currPath ) ; 
 - StringTranslate . inject ( new FileInputStream ( file ) ) ; 
 - } 
 - } 
 + LanguageRegistry . instance ( ) . loadLanguagesFor ( container , Side . SERVER ) ; 
 } 
 + 
 @ Override 
 public void updateResourcePackList ( ) 
 {
