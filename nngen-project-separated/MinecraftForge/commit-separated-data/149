BLEU SCORE: 0.040583489434387374

TEST MSG: Fix new launcher jar packaging .
GENERATED MSG: Added PermissionAPI

TEST DIFF (one line): diff - - git a / CREDITS . txt b / CREDITS . txt <nl> index 589f482 . . a70c53d 100644 <nl> - - - a / CREDITS . txt <nl> + + + b / CREDITS . txt <nl> @ @ - 10 , 7 + 10 , 7 @ @ alpha . Eloraam of RedPower , and SpaceToad of Buildcraft , without their acceptian <nl> of me taking over the project , who knows what Minecraft modding would be today . <nl> <nl> Secondly , someone who has worked with me , and developed some of the core features <nl> - that allow modding to he as functional , and as simple as it is , cpw . For developing <nl> + that allow modding to be as functional , and as simple as it is , cpw . For developing <nl> FML , which stabelized the client and server modding ecosystem . As well as the base <nl> loading system that allows us to modify Minecraft ' s code as elegently as possible . <nl> <nl> diff - - git a / build . gradle b / build . gradle <nl> index 5c50d32 . . 13f1958 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 190 , 6 + 190 , 41 @ @ project ( ' : forge ' ) { <nl> } <nl> <nl> version = getVersion ( ) <nl> + <nl> + ext { <nl> + MANIFESTS = [ <nl> + ' / ' : [ <nl> + ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , <nl> + ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , <nl> + ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) <nl> + ] as LinkedHashMap , <nl> + ' net / minecraftforge / versions / forge / ' : [ <nl> + ' Specification - Title ' : ' Forge ' , <nl> + ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> + ' Specification - Version ' : SPEC _ VERSION , <nl> + ' Implementation - Title ' : project . group , <nl> + ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> + ' Implementation - Vendor ' : ' Forge Development LLC ' <nl> + ] as LinkedHashMap , <nl> + ' net / minecraftforge / versions / mcp / ' : [ <nl> + ' Specification - Title ' : ' Minecraft ' , <nl> + ' Specification - Vendor ' : ' Mojang ' , <nl> + ' Specification - Version ' : MC _ VERSION , <nl> + ' Implementation - Title ' : ' MCP ' , <nl> + ' Implementation - Version ' : MCP _ VERSION , <nl> + ' Implementation - Vendor ' : ' Forge ' <nl> + ] as LinkedHashMap , <nl> + ' net / minecraftforge / fml / javafmlmod / ' : [ <nl> + ' Specification - Title ' : ' Mod Language Provider ' , <nl> + ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> + ' Specification - Version ' : ' 1 ' , <nl> + ' Implementation - Title ' : ' FML Java Mod ' , <nl> + ' Implementation - Version ' : SPEC _ VERSION , <nl> + ' Implementation - Vendor ' : ' Forge ' <nl> + ] as LinkedHashMap <nl> + ] <nl> + } <nl> + <nl> applyPatches { <nl> canonicalizeAccess true <nl> canonicalizeWhitespace true <nl> @ @ - 200 , 6 + 235 , 7 @ @ project ( ' : forge ' ) { <nl> transitive = false / / Don ' t pull all libraries , if we ' re missing something , add it to the installer list so the installer knows to download it . <nl> } <nl> api . extendsFrom ( installer ) <nl> + fmllauncherImplementation . extendsFrom ( installer ) <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> @ @ - 220 , 19 + 256 , 6 @ @ project ( ' : forge ' ) { <nl> installer ' java3d : vecmath : 1 . 5 . 2 ' <nl> installer ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' <nl> installer ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' <nl> - fmllauncherImplementation ' org . ow2 . asm : asm : 6 . 2 ' <nl> - fmllauncherImplementation ' org . ow2 . asm : asm - commons : 6 . 2 ' <nl> - fmllauncherImplementation ' org . ow2 . asm : asm - tree : 6 . 2 ' <nl> - fmllauncherImplementation ' cpw . mods : modlauncher : 0 . 1 . 0 ' <nl> - fmllauncherImplementation ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> - fmllauncherImplementation ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> - fmllauncherImplementation ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> - fmllauncherImplementation ' net . minecraftforge : coremods : 0 . 1 + ' <nl> - fmllauncherImplementation ' com . electronwill . night - config : core : 3 . 4 . 0 ' <nl> - fmllauncherImplementation ' com . electronwill . night - config : toml : 3 . 4 . 0 ' <nl> - fmllauncherImplementation ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' <nl> - fmllauncherImplementation ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' <nl> - fmllauncherImplementation ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' <nl> fmllauncherImplementation ' com . google . guava : guava : 21 . 0 ' <nl> fmllauncherImplementation ' com . google . code . gson : gson : 2 . 8 . 0 ' <nl> } <nl> @ @ - 249 , 21 + 272 , 9 @ @ project ( ' : forge ' ) { <nl> } <nl> / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> - main ' net . minecraftforge . fml . LaunchTesting ' <nl> - systemProperties = [ <nl> - " org . lwjgl . util . Debug " : " true " , <nl> - " org . lwjgl . util . DebugLoader " : " true " , <nl> - " mc . version " : " $ { MC _ VERSION } " , <nl> - " mcp . version " : " $ { MCP _ VERSION } " , <nl> - " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , <nl> - " forge . spec " : " $ { SPEC _ VERSION } " , <nl> - " forge . group " : project . group <nl> - ] <nl> - environment + = [ <nl> - target : ' fmldevclient ' , <nl> - assetDirectory : downloadAssets . output , <nl> - nativesDirectory : extractNatives . output <nl> - ] <nl> + main patcher . clientRun . main <nl> + systemProperties = patcher . clientRun . properties <nl> + environment + = patcher . clientRun . environment <nl> workingDir ' runclient ' <nl> } <nl> <nl> @ @ - 278 , 16 + 289 , 10 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> classpath sourceSets . main . runtimeClasspath <nl> - main ' net . minecraftforge . fml . LaunchTesting ' <nl> + main patcher . serverRun . main <nl> args ' nogui ' <nl> - systemProperties = [ <nl> - " mc . version " : " $ { MC _ VERSION } " , <nl> - " mcp . version " : " $ { MCP _ VERSION } " , <nl> - " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , <nl> - " forge . spec " : " $ { SPEC _ VERSION } " , <nl> - " forge . group " : project . group <nl> - ] <nl> - environment target : ' fmldevserver ' <nl> + systemProperties = patcher . serverRun . properties <nl> + environment + = patcher . serverRun . environment <nl> workingDir ' runserver ' <nl> standardInput = System . in <nl> } <nl> @ @ - 405 , 7 + 410 , 7 @ @ project ( ' : forge ' ) { <nl> } <nl> } <nl> <nl> - task launcherJson ( dependsOn : ' signUniversal ' ) { <nl> + task launcherJson ( dependsOn : [ ' signUniversalJar ' , ' signLauncherJar ' ] ) { <nl> inputs . file universalJar . archivePath <nl> ext { <nl> output = file ( ' build / version . json ' ) <nl> @ @ - 431 , 28 + 436 , 31 @ @ project ( ' : forge ' ) { <nl> type : ' release ' , <nl> mainClass : ' cpw . mods . modlauncher . Launcher ' , <nl> inheritsFrom : MC _ VERSION , <nl> - logging : [ client : [ <nl> + logging : [ <nl> + client : [ <nl> argument : ' - Dlog4j . configurationFile = $ { path } ' , <nl> file : [ <nl> - id : ' client - 1 . 12 . xml ' , <nl> - sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , <nl> - size : 877 , <nl> - url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' <nl> + id : ' client - 1 . 12 . xml ' , <nl> + sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , <nl> + size : 877 , <nl> + url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' <nl> ] , <nl> type : ' log4j2 - xml ' <nl> - ] ] , <nl> + ] <nl> + ] , <nl> arguments : [ <nl> game : [ ' - - launchTarget ' , ' fmlclient ' ] <nl> ] , <nl> libraries : [ <nl> [ <nl> + / / Package our launcher jar as the ' main ' jar Mojang ' s launcher loads . It will in turn load Forge ' s regular jars itself . <nl> name : " $ { project . group } : $ { project . name } : $ { project . version } " , <nl> downloads : [ <nl> artifact : [ <nl> path : " $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / $ { project . name } - $ { project . version } . jar " , <nl> url : " " , / / Do not include the URL so that the installer / launcher won ' t grab it . This is also why we don ' t have the universal classifier <nl> - sha1 : sha1 ( universalJar . archivePath ) , <nl> - size : universalJar . archivePath . length ( ) <nl> + sha1 : sha1 ( launcherJar . archivePath ) , <nl> + size : launcherJar . archivePath . length ( ) <nl> ] <nl> ] <nl> ] <nl> @ @ - 483 , 7 + 491 , 19 @ @ project ( ' : forge ' ) { <nl> inputs . file launcherJson . output <nl> outputs . file output <nl> doLast { <nl> - def libs = [ : ] <nl> + def libs = [ <nl> + " $ { project . group } : $ { project . name } : $ { project . version } : universal " : [ <nl> + name : " $ { project . group } : $ { project . name } : $ { project . version } : universal " , <nl> + downloads : [ <nl> + artifact : [ <nl> + path : " $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / $ { project . name } - $ { project . version } - universal . jar " , <nl> + url : " " , / / Do not include the URL so that the installer / launcher won ' t grab it . This is also why we don ' t have the universal classifier <nl> + sha1 : sha1 ( universalJar . archivePath ) , <nl> + size : universalJar . archivePath . length ( ) <nl> + ] <nl> + ] <nl> + ] <nl> + ] <nl> def json = [ <nl> _ comment _ : launcherJson . comment , <nl> spec : 0 , <nl> @ @ - 637 , 6 + 657 , 20 @ @ project ( ' : forge ' ) { <nl> dependsOn crowdin <nl> <nl> doFirst { <nl> + MANIFESTS . each { pkg , values - > <nl> + if ( pkg = = ' / ' ) { <nl> + manifest . attributes ( values ) <nl> + } else { <nl> + manifest . attributes ( values , pkg ) <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + task launcherJar ( type : Jar ) { <nl> + classifier ' launcher ' <nl> + from sourceSets . fmllauncher . output <nl> + doFirst { <nl> def classpath = new StringBuilder ( ) <nl> def artifacts = getArtifacts ( project , project . configurations . installer , false ) <nl> artifacts . each { key , lib - > <nl> @ @ - 645 , 88 + 679 , 25 @ @ project ( ' : forge ' ) { <nl> classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - data . jar " <nl> classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - extra . jar " <nl> <nl> - <nl> - manifest . attributes ( [ <nl> - ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , <nl> - ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , <nl> - ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , <nl> - ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) , <nl> - ' Class - Path ' : classpath . toString ( ) <nl> - ] as LinkedHashMap ) <nl> - manifest . attributes ( [ <nl> - ' Specification - Title ' : ' Forge ' , <nl> - ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> - ' Specification - Version ' : SPEC _ VERSION , <nl> - ' Implementation - Title ' : project . group , <nl> - ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> - ' Implementation - Vendor ' : ' Forge Development LLC ' <nl> - ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) <nl> - manifest . attributes ( [ <nl> - ' Specification - Title ' : ' Minecraft ' , <nl> - ' Specification - Vendor ' : ' Mojang ' , <nl> - ' Specification - Version ' : MC _ VERSION , <nl> - ' Implementation - Title ' : ' MCP ' , <nl> - ' Implementation - Version ' : MCP _ VERSION , <nl> - ' Implementation - Vendor ' : ' Forge ' <nl> - ] as LinkedHashMap , ' net / minecraftforge / versions / mcp / ' ) <nl> - / / manifest entry for FML @ Mod <nl> - manifest . attributes ( [ <nl> - ' Specification - Title ' : ' Mod Language Provider ' , <nl> - ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> - ' Specification - Version ' : ' 1 ' , <nl> - ' Implementation - Title ' : ' FML Java Mod ' , <nl> - ' Implementation - Version ' : SPEC _ VERSION , <nl> - ' Implementation - Vendor ' : ' Forge ' <nl> - ] as LinkedHashMap , ' net / minecraftforge / fml / javafmlmod / ' ) <nl> - } <nl> - } <nl> - <nl> - task fmllauncherJar ( type : Jar ) { <nl> - from sourceSets . fmllauncher . output <nl> - doFirst { <nl> - manifest . attributes ( [ <nl> - ' Specification - Title ' : ' Forge ' , <nl> - ' Specification - Vendor ' : ' Forge Development LLC ' , <nl> - ' Specification - Version ' : SPEC _ VERSION , <nl> - ' Implementation - Title ' : project . group , <nl> - ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , <nl> - ' Implementation - Vendor ' : ' Forge Development LLC ' <nl> - ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) <nl> - manifest . attributes ( [ <nl> - ' Specification - Title ' : ' Minecraft ' , <nl> - ' Specification - Vendor ' : ' Mojang ' , <nl> - ' Specification - Version ' : MC _ VERSION , <nl> - ' Implementation - Title ' : ' MCP ' , <nl> - ' Implementation - Version ' : MCP _ VERSION , <nl> - ' Implementation - Vendor ' : ' Forge ' <nl> - ] as LinkedHashMap , ' net / minecraftforge / versions / mcp / ' ) <nl> - } <nl> - } <nl> - <nl> - task signUniversal ( type : SignJar , dependsOn : universalJar ) { <nl> - onlyIf { <nl> - JAR _ SIGNER ! = null & & universalJar . state . failure = = null <nl> - } <nl> - <nl> - def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER <nl> - alias = ' forge ' <nl> - storePass = jarsigner . storepass <nl> - keyPass = jarsigner . keypass <nl> - keyStore = jarsigner . keystore <nl> - inputFile = universalJar . archivePath <nl> - outputFile = universalJar . archivePath <nl> - doFirst { <nl> - project . logger . lifecycle ( ' Signing : ' + inputFile ) <nl> + MANIFESTS . each { pkg , values - > <nl> + if ( pkg = = ' / ' ) { <nl> + manifest . attributes ( values + = [ <nl> + ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , <nl> + ' Class - Path ' : classpath . toString ( ) <nl> + ] ) <nl> + } else { <nl> + manifest . attributes ( values , pkg ) <nl> + } <nl> + } <nl> } <nl> } <nl> - universalJar . finalizedBy ( signUniversal ) <nl> <nl> task downloadInstaller ( type : DownloadMavenArtifact ) { <nl> artifact = ' net . minecraftforge : installer : 2 . 0 . + : shrunk ' <nl> changing = true <nl> } <nl> <nl> - task installerJar ( type : Zip , dependsOn : [ downloadInstaller , signUniversal , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { <nl> + task installerJar ( type : Zip , dependsOn : [ downloadInstaller , installerJson , launcherJson , genClientBinPatches , genServerBinPatches , ' signUniversalJar ' , ' signLauncherJar ' ] ) { <nl> classifier = ' installer ' <nl> extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension <nl> destinationDir = file ( ' build / libs ' ) <nl> @ @ - 743 , 6 + 714 , 9 @ @ project ( ' : forge ' ) { <nl> } <nl> from ( universalJar ) { <nl> into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " <nl> + } <nl> + from ( launcherJar ) { <nl> + into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " <nl> rename { " $ { project . name } - $ { project . version } . jar " } <nl> } <nl> from ( installerJson . output ) <nl> @ @ - 751 , 23 + 725 , 25 @ @ project ( ' : forge ' ) { <nl> duplicatesStrategy = ' exclude ' <nl> } <nl> } <nl> - task signInstaller ( type : SignJar , dependsOn : installerJar ) { <nl> - onlyIf { <nl> - JAR _ SIGNER ! = null & & installerJar . state . failure = = null <nl> - } <nl> - <nl> - def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER <nl> - alias = ' forge ' <nl> - storePass = jarsigner . storepass <nl> - keyPass = jarsigner . keypass <nl> - keyStore = jarsigner . keystore <nl> - inputFile = installerJar . archivePath <nl> - outputFile = installerJar . archivePath <nl> - doFirst { <nl> - project . logger . lifecycle ( ' Signing : ' + inputFile ) <nl> + <nl> + [ universalJar , launcherJar , installerJar ] . each { t - > <nl> + task " sign $ { t . name . capitalize ( ) } " ( type : SignJar , dependsOn : t ) { <nl> + onlyIf { <nl> + JAR _ SIGNER ! = null & & t . state . failure = = null <nl> + } <nl> + def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER <nl> + alias = ' forge ' <nl> + storePass = jarsigner . storepass <nl> + keyPass = jarsigner . keypass <nl> + keyStore = jarsigner . keystore <nl> + inputFile = t . archivePath <nl> + outputFile = t . archivePath <nl> + doFirst { <nl> + project . logger . lifecycle ( ' Signing : ' + inputFile ) <nl> + } <nl> } <nl> + t . finalizedBy ( tasks . getByName ( " sign $ { t . name . capitalize ( ) } " ) ) <nl> } <nl> - installerJar . finalizedBy ( signInstaller ) <nl> <nl> task makeMdk ( type : Zip ) { <nl> baseName = project . name <nl> @ @ - 867 , 7 + 843 , 7 @ @ project ( ' : forge ' ) { <nl> artifact makeMdk <nl> artifact userdevJar <nl> artifact sourcesJar <nl> - artifact fmllauncherJar <nl> + artifact launcherJar <nl> <nl> pom { <nl> name = ' forge ' <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java b / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java <nl> index 6525987 . . 975a1bb 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . language ; <nl> <nl> public interface ILifecycleEvent < R extends ILifecycleEvent < ? > > { <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java <nl> index 053ac03 . . edc6dea 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading ; <nl> <nl> import java . util . Optional ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java <nl> index 7c0954b . . 7f7d072 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading ; <nl> <nl> import org . apache . logging . log4j . LogManager ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java <nl> index 9736178 . . bcd9d20 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading ; <nl> <nl> import com . google . common . collect . ObjectArrays ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java <nl> index a70bb6c . . 435154e 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading ; <nl> <nl> import org . apache . logging . log4j . Marker ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java <nl> index 7ed0af4 . . 3db2545 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading ; <nl> <nl> import java . nio . file . Path ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java <nl> index 4a6b820 . . 70dfddd 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import org . apache . logging . log4j . LogManager ; <nl> diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> index e7a1fb9 . . b9923ea 100644 <nl> - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml . loading . moddiscovery ; <nl> <nl> import net . minecraftforge . fml . loading . FMLPaths ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java b / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java <nl> index 02e0343 . . a2f4b92 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import net . minecraft . block . state . IBlockState ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java b / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java <nl> index 8c86904 . . a07fac4 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import net . minecraft . util . math . BlockPos ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java b / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java <nl> index b1a3f83 . . 79746f3 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java <nl> + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . client . extensions ; <nl> <nl> import java . util . Collection ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java b / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java <nl> index 9fdbba8 . . 4c48731 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java <nl> @ @ - 16 , 6 + 16 , 7 @ @ <nl> * License along with this library ; if not , write to the Free Software <nl> * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> * / <nl> + <nl> package net . minecraftforge . common . extensions ; <nl> <nl> import net . minecraft . block . BlockRailBase ; <nl> diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> index 0fbdb5e . . 0bdcd6f 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . common . extensions ; <nl> <nl> import java . util . function . LongFunction ; <nl> diff - - git a / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java b / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java <nl> index 9033460 . . aa204b0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java <nl> + + + b / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . fml ; <nl> <nl> import com . google . common . base . Joiner ; <nl> diff - - git a / src / test / java / net / minecraftforge / test / TestProgressBar . java b / src / test / java / net / minecraftforge / test / TestProgressBar . java <nl> index b58feb3 . . 00837d8 100644 <nl> - - - a / src / test / java / net / minecraftforge / test / TestProgressBar . java <nl> + + + b / src / test / java / net / minecraftforge / test / TestProgressBar . java <nl> @ @ - 1 , 3 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 - 2018 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> package net . minecraftforge . test ; <nl> <nl> import net . minecraftforge . fml . common . progress . IProgressBarTracker ;
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java <nl> new file mode 100644 <nl> index 0000000 . . 6dc6677 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java <nl> @ @ - 0 , 0 + 1 , 94 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission ; <nl> + <nl> + import com . mojang . authlib . GameProfile ; <nl> + import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . server . permission . context . IContext ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . util . Collection ; <nl> + import java . util . Collections ; <nl> + import java . util . HashMap ; <nl> + <nl> + / * * <nl> + * Default implementation of PermissionAPI . <nl> + * { @ link # hasPermission ( GameProfile , String , IContext ) } is based on DefaultPermissionLevel <nl> + * <nl> + * @ see IPermissionHandler <nl> + * / <nl> + public enum DefaultPermissionHandler implements IPermissionHandler <nl> + { <nl> + INSTANCE ; <nl> + private static final HashMap < String , DefaultPermissionLevel > PERMISSION _ LEVEL _ MAP = new HashMap < String , DefaultPermissionLevel > ( ) ; <nl> + private static final HashMap < String , String > DESCRIPTION _ MAP = new HashMap < String , String > ( ) ; <nl> + <nl> + @ Override <nl> + public void registerNode ( String node , DefaultPermissionLevel level , String desc ) <nl> + { <nl> + PERMISSION _ LEVEL _ MAP . put ( node , level ) ; <nl> + <nl> + if ( ! desc . isEmpty ( ) ) <nl> + { <nl> + DESCRIPTION _ MAP . put ( node , desc ) ; <nl> + } <nl> + } <nl> + <nl> + @ Override <nl> + public Collection < String > getRegisteredNodes ( ) <nl> + { <nl> + return Collections . unmodifiableSet ( PERMISSION _ LEVEL _ MAP . keySet ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) <nl> + { <nl> + DefaultPermissionLevel level = getDefaultPermissionLevel ( node ) ; <nl> + <nl> + if ( level = = DefaultPermissionLevel . NONE ) <nl> + { <nl> + return false ; <nl> + } <nl> + else if ( level = = DefaultPermissionLevel . ALL ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + MinecraftServer server = FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) ; <nl> + return server ! = null & & server . getPlayerList ( ) . canSendCommands ( profile ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getNodeDescription ( String node ) <nl> + { <nl> + String desc = DESCRIPTION _ MAP . get ( node ) ; <nl> + return desc = = null ? " " : desc ; <nl> + } <nl> + <nl> + / * * <nl> + * @ return The default permission level of a node . If the permission isn ' t registred , it will return NONE <nl> + * / <nl> + public DefaultPermissionLevel getDefaultPermissionLevel ( String node ) <nl> + { <nl> + DefaultPermissionLevel level = PERMISSION _ LEVEL _ MAP . get ( node ) ; <nl> + return level = = null ? DefaultPermissionLevel . NONE : level ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java <nl> new file mode 100644 <nl> index 0000000 . . 30593fa <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java <nl> @ @ - 0 , 0 + 1 , 35 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission ; <nl> + <nl> + / * * <nl> + * < table > < thead > < tr > < th > Level < / th > < th > Player < / th > < th > OP < / th > < / tr > <nl> + * < / thead > < tbody > <nl> + * < tr > < td > ALL < / td > < td > true < / td > < td > true < / td > < / tr > <nl> + * < tr > < td > OP < / td > < td > false < / td > < td > true < / td > < / tr > <nl> + * < tr > < td > NONE < / td > < td > false < / td > < td > false < / td > < / tr > <nl> + * < / tbody > < / table > <nl> + * / <nl> + public enum DefaultPermissionLevel <nl> + { <nl> + ALL , <nl> + OP , <nl> + NONE <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java b / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java <nl> new file mode 100644 <nl> index 0000000 . . fa772ef <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java <nl> @ @ - 0 , 0 + 1 , 51 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission ; <nl> + <nl> + import com . mojang . authlib . GameProfile ; <nl> + import net . minecraftforge . server . permission . context . IContext ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . util . Collection ; <nl> + <nl> + public interface IPermissionHandler <nl> + { <nl> + / * * <nl> + * Use { @ link PermissionAPI # registerNode ( String , DefaultPermissionLevel , String ) } <nl> + * / <nl> + void registerNode ( String node , DefaultPermissionLevel level , String desc ) ; <nl> + <nl> + / * * <nl> + * @ return Immutable collection of all registered nodes <nl> + * / <nl> + Collection < String > getRegisteredNodes ( ) ; <nl> + <nl> + / * * <nl> + * Use { @ link PermissionAPI # hasPermission ( GameProfile , String , IContext ) } <nl> + * / <nl> + boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) ; <nl> + <nl> + / * * <nl> + * @ param node Permission node <nl> + * @ return Description of the node . " " in case this node doesn ' t have a decription <nl> + * @ see # registerNode ( String , DefaultPermissionLevel , String ) <nl> + * / <nl> + String getNodeDescription ( String node ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java b / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java <nl> new file mode 100644 <nl> index 0000000 . . 4349bcb <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java <nl> @ @ - 0 , 0 + 1 , 97 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import com . mojang . authlib . GameProfile ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Loader ; <nl> + import net . minecraftforge . fml . common . LoaderState ; <nl> + import net . minecraftforge . server . permission . context . IContext ; <nl> + import net . minecraftforge . server . permission . context . PlayerContext ; <nl> + import org . apache . logging . log4j . Level ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + public class PermissionAPI <nl> + { <nl> + private static IPermissionHandler permissionHandler = DefaultPermissionHandler . INSTANCE ; <nl> + <nl> + / * * <nl> + * < b > Only use this in PreInit state ! < / b > <nl> + * / <nl> + public static void setPermissionHandler ( IPermissionHandler handler ) <nl> + { <nl> + Preconditions . checkNotNull ( handler , " Permission handler can ' t be null ! " ) ; <nl> + Preconditions . checkState ( Loader . instance ( ) . getLoaderState ( ) . ordinal ( ) < = LoaderState . PREINITIALIZATION . ordinal ( ) , " Can ' t register after IPermissionHandler PreInit ! " ) ; <nl> + FMLLog . log ( Level . WARN , " Replacing " + permissionHandler . getClass ( ) . getName ( ) + " with " + handler . getClass ( ) . getName ( ) ) ; <nl> + permissionHandler = handler ; <nl> + } <nl> + <nl> + public static IPermissionHandler getPermissionHandler ( ) <nl> + { <nl> + return permissionHandler ; <nl> + } <nl> + <nl> + / * * <nl> + * < b > Only use this after PreInit state ! < / b > <nl> + * <nl> + * @ param node Permission node , best if it ' s lowercase and contains ' . ' ( e . g . < code > " modid . subgroup . permission _ id " < / code > ) <nl> + * @ param level Default permission level for this node . If not isn ' t registered , it ' s level is going to be ' NONE ' <nl> + * @ param desc Optional description of the node <nl> + * / <nl> + public static String registerNode ( String node , DefaultPermissionLevel level , String desc ) <nl> + { <nl> + Preconditions . checkNotNull ( node , " Permission node can ' t be null ! " ) ; <nl> + Preconditions . checkNotNull ( level , " Permission level can ' t be null ! " ) ; <nl> + Preconditions . checkNotNull ( desc , " Permission description can ' t be null ! " ) ; <nl> + Preconditions . checkArgument ( ! node . isEmpty ( ) , " Permission node can ' t be empty ! " ) ; <nl> + Preconditions . checkState ( Loader . instance ( ) . getLoaderState ( ) . ordinal ( ) > LoaderState . PREINITIALIZATION . ordinal ( ) , " Can ' t register permission nodes before Init ! " ) ; <nl> + permissionHandler . registerNode ( node , level , desc ) ; <nl> + return node ; <nl> + } <nl> + <nl> + / * * <nl> + * @ param profile GameProfile of the player who is requesting permission . The player doesn ' t have to be online <nl> + * @ param node Permission node . See { @ link # registerNode ( String , DefaultPermissionLevel , String ) } <nl> + * @ param context Context for this permission . Highly recommended to not be null . See { @ link IContext } <nl> + * @ return true , if player has permission , false if he does not . <nl> + * @ see DefaultPermissionHandler <nl> + * / <nl> + public static boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) <nl> + { <nl> + Preconditions . checkNotNull ( profile , " GameProfile can ' t be null ! " ) ; <nl> + Preconditions . checkNotNull ( node , " Permission node can ' t be null ! " ) ; <nl> + Preconditions . checkArgument ( ! node . isEmpty ( ) , " Permission node can ' t be empty ! " ) ; <nl> + return permissionHandler . hasPermission ( profile , node , context ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Shortcut method using EntityPlayer and creating PlayerContext <nl> + * <nl> + * @ see PermissionAPI # hasPermission ( GameProfile , String , IContext ) <nl> + * / <nl> + public static boolean hasPermission ( EntityPlayer player , String node ) <nl> + { <nl> + Preconditions . checkNotNull ( player , " Player can ' t be null ! " ) ; <nl> + return hasPermission ( player . getGameProfile ( ) , node , new PlayerContext ( player ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java b / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java <nl> new file mode 100644 <nl> index 0000000 . . df82e5e <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java <nl> @ @ - 0 , 0 + 1 , 50 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + public class AreaContext extends PlayerContext <nl> + { <nl> + private final AxisAlignedBB area ; <nl> + <nl> + public AreaContext ( EntityPlayer ep , AxisAlignedBB aabb ) <nl> + { <nl> + super ( ep ) ; <nl> + area = Preconditions . checkNotNull ( aabb , " AxisAlignedBB can ' t be null in AreaContext ! " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public < T > T get ( ContextKey < T > key ) <nl> + { <nl> + return key . equals ( ContextKeys . AREA ) ? ( T ) area : super . get ( key ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean covers ( ContextKey < ? > key ) <nl> + { <nl> + return key . equals ( ContextKeys . AREA ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java b / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java <nl> new file mode 100644 <nl> index 0000000 . . 88a0eee <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java <nl> @ @ - 0 , 0 + 1 , 80 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . math . ChunkPos ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + public class BlockPosContext extends PlayerContext <nl> + { <nl> + private final BlockPos blockPos ; <nl> + private IBlockState blockState ; <nl> + private EnumFacing facing ; <nl> + <nl> + public BlockPosContext ( EntityPlayer ep , BlockPos pos , @ Nullable IBlockState state , @ Nullable EnumFacing f ) <nl> + { <nl> + super ( ep ) ; <nl> + blockPos = Preconditions . checkNotNull ( pos , " BlockPos can ' t be null in BlockPosContext ! " ) ; <nl> + blockState = state ; <nl> + facing = f ; <nl> + } <nl> + <nl> + public BlockPosContext ( EntityPlayer ep , ChunkPos pos ) <nl> + { <nl> + this ( ep , new BlockPos ( ( pos . chunkXPos < < 4 ) + 8 , 0 , ( pos . chunkZPos < < 4 ) + 8 ) , null , null ) ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public < T > T get ( ContextKey < T > key ) <nl> + { <nl> + if ( key . equals ( ContextKeys . POS ) ) <nl> + { <nl> + return ( T ) blockPos ; <nl> + } <nl> + else if ( key . equals ( ContextKeys . BLOCK _ STATE ) ) <nl> + { <nl> + if ( blockState = = null ) <nl> + { <nl> + blockState = getWorld ( ) . getBlockState ( blockPos ) ; <nl> + } <nl> + <nl> + return ( T ) blockState ; <nl> + } <nl> + else if ( key . equals ( ContextKeys . FACING ) ) <nl> + { <nl> + return ( T ) facing ; <nl> + } <nl> + <nl> + return super . get ( key ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean covers ( ContextKey < ? > key ) <nl> + { <nl> + return key . equals ( ContextKeys . POS ) | | key . equals ( ContextKeys . BLOCK _ STATE ) | | ( facing ! = null & & key . equals ( ContextKeys . FACING ) ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / Context . java b / src / main / java / net / minecraftforge / server / permission / context / Context . java <nl> new file mode 100644 <nl> index 0000000 . . e1e4505 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / Context . java <nl> @ @ - 0 , 0 + 1 , 87 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . world . World ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + import java . util . HashMap ; <nl> + import java . util . Map ; <nl> + <nl> + public class Context implements IContext <nl> + { <nl> + private Map < ContextKey < ? > , Object > map ; <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public World getWorld ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public EntityPlayer getPlayer ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public < T > T get ( ContextKey < T > key ) <nl> + { <nl> + return map = = null | | map . isEmpty ( ) ? null : ( T ) map . get ( key ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean has ( ContextKey < ? > key ) <nl> + { <nl> + return covers ( key ) | | ( map ! = null & & ! map . isEmpty ( ) & & map . containsKey ( key ) ) ; <nl> + } <nl> + <nl> + / * * <nl> + * Sets Context object <nl> + * <nl> + * @ param key Context key <nl> + * @ param obj Context object . Can be null <nl> + * @ return itself , for easy context chaining <nl> + * / <nl> + public < T > Context set ( ContextKey < T > key , @ Nullable T obj ) <nl> + { <nl> + if ( covers ( key ) ) <nl> + { <nl> + return this ; <nl> + } <nl> + <nl> + if ( map = = null ) <nl> + { <nl> + map = new HashMap < ContextKey < ? > , Object > ( ) ; <nl> + } <nl> + <nl> + map . put ( key , obj ) ; <nl> + return this ; <nl> + } <nl> + <nl> + protected boolean covers ( ContextKey < ? > key ) <nl> + { <nl> + return false ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java b / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java <nl> new file mode 100644 <nl> index 0000000 . . 0b91298 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java <nl> @ @ - 0 , 0 + 1 , 67 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + <nl> + public final class ContextKey < T > <nl> + { <nl> + private final String ID ; <nl> + private final Class < T > typeClass ; <nl> + <nl> + public static < E > ContextKey < E > create ( String id , Class < E > c ) <nl> + { <nl> + Preconditions . checkNotNull ( id , " ContextKey ' s ID can ' t be null ! " ) ; <nl> + Preconditions . checkNotNull ( c , " ContextKey ' s Type can ' t be null ! " ) ; <nl> + <nl> + if ( id . isEmpty ( ) ) <nl> + { <nl> + throw new IllegalArgumentException ( " ContextKey ' s ID can ' t be blank ! " ) ; <nl> + } <nl> + <nl> + return new ContextKey < E > ( id , c ) ; <nl> + } <nl> + <nl> + private ContextKey ( String id , Class < T > c ) <nl> + { <nl> + ID = id ; <nl> + typeClass = c ; <nl> + } <nl> + <nl> + public String toString ( ) <nl> + { <nl> + return ID ; <nl> + } <nl> + <nl> + public int hashCode ( ) <nl> + { <nl> + return ID . hashCode ( ) ; <nl> + } <nl> + <nl> + public boolean equals ( Object o ) <nl> + { <nl> + return o = = this | | ( o ! = null & & o . toString ( ) . equals ( ID ) ) ; <nl> + } <nl> + <nl> + public Class < T > getTypeClass ( ) <nl> + { <nl> + return typeClass ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java b / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java <nl> new file mode 100644 <nl> index 0000000 . . 1109710 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . util . EnumFacing ; <nl> + import net . minecraft . util . math . AxisAlignedBB ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + <nl> + / * * <nl> + * Some default context keys , for easier compatibility <nl> + * / <nl> + public class ContextKeys <nl> + { <nl> + / * * <nl> + * BlockPos for interacting , breaking and other permissions <nl> + * / <nl> + public static final ContextKey < BlockPos > POS = ContextKey . create ( " pos " , BlockPos . class ) ; <nl> + <nl> + / * * <nl> + * The entity can be anything that gets interacted with - a sheep when you try to dye it , skeleton that you attack , etc . <nl> + * / <nl> + public static final ContextKey < Entity > TARGET = ContextKey . create ( " target " , Entity . class ) ; <nl> + <nl> + public static final ContextKey < EnumFacing > FACING = ContextKey . create ( " facing " , EnumFacing . class ) ; <nl> + public static final ContextKey < AxisAlignedBB > AREA = ContextKey . create ( " area " , AxisAlignedBB . class ) ; <nl> + public static final ContextKey < IBlockState > BLOCK _ STATE = ContextKey . create ( " blockstate " , IBlockState . class ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / IContext . java b / src / main / java / net / minecraftforge / server / permission / context / IContext . java <nl> new file mode 100644 <nl> index 0000000 . . becbeeb <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / IContext . java <nl> @ @ - 0 , 0 + 1 , 56 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . world . World ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + / * * <nl> + * Use { @ link BlockPosContext } or { @ link PlayerContext } when possible <nl> + * / <nl> + public interface IContext <nl> + { <nl> + / * * <nl> + * World from where permission is requested . Can be null <nl> + * / <nl> + @ Nullable <nl> + World getWorld ( ) ; <nl> + <nl> + / * * <nl> + * @ return Player requesting permission . Can be null <nl> + * / <nl> + @ Nullable <nl> + EntityPlayer getPlayer ( ) ; <nl> + <nl> + / * * <nl> + * @ param key Context key <nl> + * @ return Context object <nl> + * / <nl> + @ Nullable <nl> + < T > T get ( ContextKey < T > key ) ; <nl> + <nl> + / * * <nl> + * @ param key Context key <nl> + * @ return true if context contains this key <nl> + * / <nl> + boolean has ( ContextKey < ? > key ) ; <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java b / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java <nl> new file mode 100644 <nl> index 0000000 . . c522787 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java <nl> @ @ - 0 , 0 + 1 , 46 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . world . World ; <nl> + <nl> + public class PlayerContext extends Context <nl> + { <nl> + private final EntityPlayer player ; <nl> + <nl> + public PlayerContext ( EntityPlayer ep ) <nl> + { <nl> + player = Preconditions . checkNotNull ( ep , " Player can ' t be null in PlayerContext ! " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public World getWorld ( ) <nl> + { <nl> + return player . getEntityWorld ( ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public EntityPlayer getPlayer ( ) <nl> + { <nl> + return player ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java b / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java <nl> new file mode 100644 <nl> index 0000000 . . 7e8ef52 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import net . minecraft . entity . Entity ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + public class TargetContext extends PlayerContext <nl> + { <nl> + private final Entity target ; <nl> + <nl> + public TargetContext ( EntityPlayer ep , @ Nullable Entity entity ) <nl> + { <nl> + super ( ep ) ; <nl> + target = entity ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public < T > T get ( ContextKey < T > key ) <nl> + { <nl> + return key . equals ( ContextKeys . TARGET ) ? ( T ) target : super . get ( key ) ; <nl> + } <nl> + <nl> + @ Override <nl> + protected boolean covers ( ContextKey < ? > key ) <nl> + { <nl> + return target ! = null & & key . equals ( ContextKeys . TARGET ) ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java b / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java <nl> new file mode 100644 <nl> index 0000000 . . ced75d2 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java <nl> @ @ - 0 , 0 + 1 , 49 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . server . permission . context ; <nl> + <nl> + import com . google . common . base . Preconditions ; <nl> + import net . minecraft . entity . player . EntityPlayer ; <nl> + import net . minecraft . world . World ; <nl> + <nl> + import javax . annotation . Nullable ; <nl> + <nl> + public class WorldContext extends Context <nl> + { <nl> + private final World world ; <nl> + <nl> + public WorldContext ( World w ) <nl> + { <nl> + world = Preconditions . checkNotNull ( w , " World can ' t be null in WorldContext ! " ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public World getWorld ( ) <nl> + { <nl> + return world ; <nl> + } <nl> + <nl> + @ Override <nl> + @ Nullable <nl> + public EntityPlayer getPlayer ( ) <nl> + { <nl> + return null ; <nl> + } <nl> + } <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / context / package - info . java b / src / main / java / net / minecraftforge / server / permission / context / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 35acccc <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / context / package - info . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + @ javax . annotation . ParametersAreNonnullByDefault <nl> + @ mcp . MethodsReturnNonnullByDefault <nl> + package net . minecraftforge . server . permission . context ; <nl> \ No newline at end of file <nl> diff - - git a / src / main / java / net / minecraftforge / server / permission / package - info . java b / src / main / java / net / minecraftforge / server / permission / package - info . java <nl> new file mode 100644 <nl> index 0000000 . . 706a0ac <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / server / permission / package - info . java <nl> @ @ - 0 , 0 + 1 , 22 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + @ javax . annotation . ParametersAreNonnullByDefault <nl> + @ mcp . MethodsReturnNonnullByDefault <nl> + package net . minecraftforge . server . permission ; <nl> \ No newline at end of file <nl> diff - - git a / src / test / java / net / minecraftforge / test / PermissionTest . java b / src / test / java / net / minecraftforge / test / PermissionTest . java <nl> new file mode 100644 <nl> index 0000000 . . 61afb5c <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / PermissionTest . java <nl> @ @ - 0 , 0 + 1 , 177 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import net . minecraft . block . Block ; <nl> + import net . minecraft . block . state . IBlockState ; <nl> + import net . minecraft . command . CommandBase ; <nl> + import net . minecraft . command . CommandException ; <nl> + import net . minecraft . command . ICommandSender ; <nl> + import net . minecraft . command . WrongUsageException ; <nl> + import net . minecraft . entity . player . EntityPlayerMP ; <nl> + import net . minecraft . nbt . NBTTagCompound ; <nl> + import net . minecraft . server . MinecraftServer ; <nl> + import net . minecraft . tileentity . TileEntity ; <nl> + import net . minecraft . util . math . BlockPos ; <nl> + import net . minecraft . util . math . ChunkPos ; <nl> + import net . minecraft . util . text . TextComponentString ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; <nl> + import net . minecraftforge . fml . common . event . FMLServerStartingEvent ; <nl> + import net . minecraftforge . server . permission . DefaultPermissionLevel ; <nl> + import net . minecraftforge . server . permission . PermissionAPI ; <nl> + import net . minecraftforge . server . permission . context . BlockPosContext ; <nl> + import net . minecraftforge . server . permission . context . ContextKey ; <nl> + <nl> + @ Mod ( modid = PermissionTest . MOD _ ID , name = " PermissionTest " , version = " 1 . 0 . 0 " ) <nl> + public class PermissionTest <nl> + { <nl> + public static final String MOD _ ID = " PermissionTest " ; <nl> + <nl> + @ Mod . Instance ( PermissionTest . MOD _ ID ) <nl> + public static PermissionTest inst ; <nl> + <nl> + @ Mod . EventHandler <nl> + public void onInit ( FMLInitializationEvent event ) <nl> + { <nl> + Permissions . init ( ) ; <nl> + } <nl> + <nl> + @ Mod . EventHandler <nl> + public void onServerStarted ( FMLServerStartingEvent event ) <nl> + { <nl> + event . registerServerCommand ( new CommandPermissionTest ( ) ) ; <nl> + } <nl> + <nl> + public static class Permissions <nl> + { <nl> + public static final String CLAIM _ CHUNK = " testmod . chunk . claim " ; <nl> + public static final String UNCLAIM _ CHUNK = " testmod . chunk . unclaim " ; <nl> + public static final String SET _ BLOCK = " testmod . block . set " ; <nl> + public static final String READ _ TILE = " testmod . tileentity . read " ; <nl> + <nl> + public static void init ( ) <nl> + { <nl> + PermissionAPI . registerNode ( CLAIM _ CHUNK , DefaultPermissionLevel . ALL , " Node for claiming chunks " ) ; <nl> + PermissionAPI . registerNode ( UNCLAIM _ CHUNK , DefaultPermissionLevel . ALL , " Node for unclaiming chunks " ) ; <nl> + PermissionAPI . registerNode ( SET _ BLOCK , DefaultPermissionLevel . OP , " Node for setting blocks with a command " ) ; <nl> + PermissionAPI . registerNode ( READ _ TILE , DefaultPermissionLevel . NONE , " Node for reading and printing TileEntity data " ) ; <nl> + } <nl> + } <nl> + <nl> + public static class ContextKeys <nl> + { <nl> + public static final ContextKey < TileEntity > TILE _ ENTITY = ContextKey . create ( " tile _ entity " , TileEntity . class ) ; <nl> + } <nl> + <nl> + public static class CommandPermissionTest extends CommandBase <nl> + { <nl> + @ Override <nl> + public String getCommandName ( ) <nl> + { <nl> + return " permission _ test " ; <nl> + } <nl> + <nl> + @ Override <nl> + public String getCommandUsage ( ICommandSender sender ) <nl> + { <nl> + return " commands . permission _ test . usage " ; <nl> + } <nl> + <nl> + @ Override <nl> + public boolean checkPermission ( MinecraftServer server , ICommandSender sender ) <nl> + { <nl> + return true ; <nl> + } <nl> + <nl> + @ Override <nl> + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException <nl> + { <nl> + EntityPlayerMP player = getCommandSenderAsPlayer ( sender ) ; <nl> + <nl> + if ( args . length < 1 ) <nl> + { <nl> + sender . addChatMessage ( new TextComponentString ( " claim , unclaim , setblock , read _ tile " ) ) ; <nl> + return ; <nl> + } <nl> + <nl> + / / Example using BlockPosContext with ChunkPos and permission available to players by default <nl> + boolean b = args [ 0 ] . equals ( " claim " ) ; <nl> + if ( b | | args [ 0 ] . equals ( " unclaim " ) ) <nl> + { <nl> + ChunkPos chunkPos = new ChunkPos ( parseInt ( args [ 1 ] ) , parseInt ( args [ 2 ] ) ) ; <nl> + <nl> + if ( PermissionAPI . hasPermission ( player . getGameProfile ( ) , b ? Permissions . CLAIM _ CHUNK : Permissions . UNCLAIM _ CHUNK , new BlockPosContext ( player , chunkPos ) ) ) <nl> + { <nl> + if ( b ) <nl> + { <nl> + / / claim chunk <nl> + sender . addChatMessage ( new TextComponentString ( " Chunk claimed ! " ) ) ; <nl> + } <nl> + else <nl> + { <nl> + / / unclaim chunk <nl> + sender . addChatMessage ( new TextComponentString ( " Chunk unclaimed ! " ) ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + throw new CommandException ( " commands . generic . permission " ) ; <nl> + } <nl> + } <nl> + / / Example using BlockPosContext and permission available to only OPs by default <nl> + else if ( args [ 0 ] . equals ( " setblock " ) ) <nl> + { <nl> + if ( args . length < 5 ) <nl> + { <nl> + throw new WrongUsageException ( " commands . setblock . usage " ) ; <nl> + } <nl> + <nl> + BlockPos blockpos = parseBlockPos ( sender , args , 1 , false ) ; <nl> + Block block = CommandBase . getBlockByText ( sender , args [ 4 ] ) ; <nl> + int i = 0 ; <nl> + <nl> + if ( args . length > = 6 ) <nl> + { <nl> + i = parseInt ( args [ 5 ] , 0 , 15 ) ; <nl> + } <nl> + <nl> + if ( ! player . worldObj . isBlockLoaded ( blockpos ) ) <nl> + { <nl> + throw new CommandException ( " commands . setblock . outOfWorld " ) ; <nl> + } <nl> + else <nl> + { <nl> + IBlockState state = block . getStateFromMeta ( i ) ; <nl> + <nl> + if ( ! PermissionAPI . hasPermission ( player . getGameProfile ( ) , Permissions . SET _ BLOCK , new BlockPosContext ( player , blockpos , state , null ) ) ) <nl> + { <nl> + throw new CommandException ( " commands . generic . permission " ) ; <nl> + } <nl> + else if ( ! player . worldObj . setBlockState ( blockpos , state , 2 ) ) <nl> + { <nl> + throw new CommandException ( " commands . setblock . noChange " ) ; <nl> + } <nl> + } <nl> + } <nl> + / / Example using custom ContextKey and permission available to only OPs by default <nl> + else if ( args [ 0 ] . equals ( " read _ tile " ) ) <nl> + { <nl> + BlockPos blockpos = parseBlockPos ( sender , args , 1 , false ) ; <nl> + TileEntity tileEntity = player . worldObj . getTileEntity ( blockpos ) ; <nl> + <nl> + if ( PermissionAPI . hasPermission ( player . getGameProfile ( ) , Permissions . READ _ TILE , new BlockPosContext ( player , blockpos , null , null ) . set ( ContextKeys . TILE _ ENTITY , tileEntity ) ) ) <nl> + { <nl> + NBTTagCompound tag = tileEntity = = null ? null : tileEntity . serializeNBT ( ) ; <nl> + sender . addChatMessage ( new TextComponentString ( String . valueOf ( tag ) ) ) ; <nl> + } <nl> + else <nl> + { <nl> + throw new CommandException ( " commands . generic . permission " ) ; <nl> + } <nl> + } <nl> + else <nl> + { <nl> + throw new CommandException ( " commands . generic . permission " ) ; <nl> + } <nl> + } <nl> + } <nl> + } <nl> \ No newline at end of file

TEST DIFF:
diff - - git a / CREDITS . txt b / CREDITS . txt 
 index 589f482 . . a70c53d 100644 
 - - - a / CREDITS . txt 
 + + + b / CREDITS . txt 
 @ @ - 10 , 7 + 10 , 7 @ @ alpha . Eloraam of RedPower , and SpaceToad of Buildcraft , without their acceptian 
 of me taking over the project , who knows what Minecraft modding would be today . 
 
 Secondly , someone who has worked with me , and developed some of the core features 
 - that allow modding to he as functional , and as simple as it is , cpw . For developing 
 + that allow modding to be as functional , and as simple as it is , cpw . For developing 
 FML , which stabelized the client and server modding ecosystem . As well as the base 
 loading system that allows us to modify Minecraft ' s code as elegently as possible . 
 
 diff - - git a / build . gradle b / build . gradle 
 index 5c50d32 . . 13f1958 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 190 , 6 + 190 , 41 @ @ project ( ' : forge ' ) { 
 } 
 
 version = getVersion ( ) 
 + 
 + ext { 
 + MANIFESTS = [ 
 + ' / ' : [ 
 + ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , 
 + ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , 
 + ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) 
 + ] as LinkedHashMap , 
 + ' net / minecraftforge / versions / forge / ' : [ 
 + ' Specification - Title ' : ' Forge ' , 
 + ' Specification - Vendor ' : ' Forge Development LLC ' , 
 + ' Specification - Version ' : SPEC _ VERSION , 
 + ' Implementation - Title ' : project . group , 
 + ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 + ' Implementation - Vendor ' : ' Forge Development LLC ' 
 + ] as LinkedHashMap , 
 + ' net / minecraftforge / versions / mcp / ' : [ 
 + ' Specification - Title ' : ' Minecraft ' , 
 + ' Specification - Vendor ' : ' Mojang ' , 
 + ' Specification - Version ' : MC _ VERSION , 
 + ' Implementation - Title ' : ' MCP ' , 
 + ' Implementation - Version ' : MCP _ VERSION , 
 + ' Implementation - Vendor ' : ' Forge ' 
 + ] as LinkedHashMap , 
 + ' net / minecraftforge / fml / javafmlmod / ' : [ 
 + ' Specification - Title ' : ' Mod Language Provider ' , 
 + ' Specification - Vendor ' : ' Forge Development LLC ' , 
 + ' Specification - Version ' : ' 1 ' , 
 + ' Implementation - Title ' : ' FML Java Mod ' , 
 + ' Implementation - Version ' : SPEC _ VERSION , 
 + ' Implementation - Vendor ' : ' Forge ' 
 + ] as LinkedHashMap 
 + ] 
 + } 
 + 
 applyPatches { 
 canonicalizeAccess true 
 canonicalizeWhitespace true 
 @ @ - 200 , 6 + 235 , 7 @ @ project ( ' : forge ' ) { 
 transitive = false / / Don ' t pull all libraries , if we ' re missing something , add it to the installer list so the installer knows to download it . 
 } 
 api . extendsFrom ( installer ) 
 + fmllauncherImplementation . extendsFrom ( installer ) 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 @ @ - 220 , 19 + 256 , 6 @ @ project ( ' : forge ' ) { 
 installer ' java3d : vecmath : 1 . 5 . 2 ' 
 installer ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' 
 installer ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' 
 - fmllauncherImplementation ' org . ow2 . asm : asm : 6 . 2 ' 
 - fmllauncherImplementation ' org . ow2 . asm : asm - commons : 6 . 2 ' 
 - fmllauncherImplementation ' org . ow2 . asm : asm - tree : 6 . 2 ' 
 - fmllauncherImplementation ' cpw . mods : modlauncher : 0 . 1 . 0 ' 
 - fmllauncherImplementation ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 - fmllauncherImplementation ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 - fmllauncherImplementation ' net . minecraftforge : forgespi : 0 . 1 + ' 
 - fmllauncherImplementation ' net . minecraftforge : coremods : 0 . 1 + ' 
 - fmllauncherImplementation ' com . electronwill . night - config : core : 3 . 4 . 0 ' 
 - fmllauncherImplementation ' com . electronwill . night - config : toml : 3 . 4 . 0 ' 
 - fmllauncherImplementation ' org . apache . maven : maven - artifact : 3 . 5 . 3 ' 
 - fmllauncherImplementation ' org . apache . logging . log4j : log4j - api : 2 . 11 . 1 ' 
 - fmllauncherImplementation ' org . apache . logging . log4j : log4j - core : 2 . 11 . 1 ' 
 fmllauncherImplementation ' com . google . guava : guava : 21 . 0 ' 
 fmllauncherImplementation ' com . google . code . gson : gson : 2 . 8 . 0 ' 
 } 
 @ @ - 249 , 21 + 272 , 9 @ @ project ( ' : forge ' ) { 
 } 
 / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 - main ' net . minecraftforge . fml . LaunchTesting ' 
 - systemProperties = [ 
 - " org . lwjgl . util . Debug " : " true " , 
 - " org . lwjgl . util . DebugLoader " : " true " , 
 - " mc . version " : " $ { MC _ VERSION } " , 
 - " mcp . version " : " $ { MCP _ VERSION } " , 
 - " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , 
 - " forge . spec " : " $ { SPEC _ VERSION } " , 
 - " forge . group " : project . group 
 - ] 
 - environment + = [ 
 - target : ' fmldevclient ' , 
 - assetDirectory : downloadAssets . output , 
 - nativesDirectory : extractNatives . output 
 - ] 
 + main patcher . clientRun . main 
 + systemProperties = patcher . clientRun . properties 
 + environment + = patcher . clientRun . environment 
 workingDir ' runclient ' 
 } 
 
 @ @ - 278 , 16 + 289 , 10 @ @ project ( ' : forge ' ) { 
 } 
 } 
 classpath sourceSets . main . runtimeClasspath 
 - main ' net . minecraftforge . fml . LaunchTesting ' 
 + main patcher . serverRun . main 
 args ' nogui ' 
 - systemProperties = [ 
 - " mc . version " : " $ { MC _ VERSION } " , 
 - " mcp . version " : " $ { MCP _ VERSION } " , 
 - " forge . version " : " $ { project . version . substring ( MC _ VERSION . length ( ) + 1 ) } " , 
 - " forge . spec " : " $ { SPEC _ VERSION } " , 
 - " forge . group " : project . group 
 - ] 
 - environment target : ' fmldevserver ' 
 + systemProperties = patcher . serverRun . properties 
 + environment + = patcher . serverRun . environment 
 workingDir ' runserver ' 
 standardInput = System . in 
 } 
 @ @ - 405 , 7 + 410 , 7 @ @ project ( ' : forge ' ) { 
 } 
 } 
 
 - task launcherJson ( dependsOn : ' signUniversal ' ) { 
 + task launcherJson ( dependsOn : [ ' signUniversalJar ' , ' signLauncherJar ' ] ) { 
 inputs . file universalJar . archivePath 
 ext { 
 output = file ( ' build / version . json ' ) 
 @ @ - 431 , 28 + 436 , 31 @ @ project ( ' : forge ' ) { 
 type : ' release ' , 
 mainClass : ' cpw . mods . modlauncher . Launcher ' , 
 inheritsFrom : MC _ VERSION , 
 - logging : [ client : [ 
 + logging : [ 
 + client : [ 
 argument : ' - Dlog4j . configurationFile = $ { path } ' , 
 file : [ 
 - id : ' client - 1 . 12 . xml ' , 
 - sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , 
 - size : 877 , 
 - url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' 
 + id : ' client - 1 . 12 . xml ' , 
 + sha1 : ' ef4f57b922df243d0cef096efe808c72db042149 ' , 
 + size : 877 , 
 + url : ' https : / / launcher . mojang . com / v1 / objects / ef4f57b922df243d0cef096efe808c72db042149 / client - 1 . 12 . xml ' 
 ] , 
 type : ' log4j2 - xml ' 
 - ] ] , 
 + ] 
 + ] , 
 arguments : [ 
 game : [ ' - - launchTarget ' , ' fmlclient ' ] 
 ] , 
 libraries : [ 
 [ 
 + / / Package our launcher jar as the ' main ' jar Mojang ' s launcher loads . It will in turn load Forge ' s regular jars itself . 
 name : " $ { project . group } : $ { project . name } : $ { project . version } " , 
 downloads : [ 
 artifact : [ 
 path : " $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / $ { project . name } - $ { project . version } . jar " , 
 url : " " , / / Do not include the URL so that the installer / launcher won ' t grab it . This is also why we don ' t have the universal classifier 
 - sha1 : sha1 ( universalJar . archivePath ) , 
 - size : universalJar . archivePath . length ( ) 
 + sha1 : sha1 ( launcherJar . archivePath ) , 
 + size : launcherJar . archivePath . length ( ) 
 ] 
 ] 
 ] 
 @ @ - 483 , 7 + 491 , 19 @ @ project ( ' : forge ' ) { 
 inputs . file launcherJson . output 
 outputs . file output 
 doLast { 
 - def libs = [ : ] 
 + def libs = [ 
 + " $ { project . group } : $ { project . name } : $ { project . version } : universal " : [ 
 + name : " $ { project . group } : $ { project . name } : $ { project . version } : universal " , 
 + downloads : [ 
 + artifact : [ 
 + path : " $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / $ { project . name } - $ { project . version } - universal . jar " , 
 + url : " " , / / Do not include the URL so that the installer / launcher won ' t grab it . This is also why we don ' t have the universal classifier 
 + sha1 : sha1 ( universalJar . archivePath ) , 
 + size : universalJar . archivePath . length ( ) 
 + ] 
 + ] 
 + ] 
 + ] 
 def json = [ 
 _ comment _ : launcherJson . comment , 
 spec : 0 , 
 @ @ - 637 , 6 + 657 , 20 @ @ project ( ' : forge ' ) { 
 dependsOn crowdin 
 
 doFirst { 
 + MANIFESTS . each { pkg , values - > 
 + if ( pkg = = ' / ' ) { 
 + manifest . attributes ( values ) 
 + } else { 
 + manifest . attributes ( values , pkg ) 
 + } 
 + } 
 + } 
 + } 
 + 
 + task launcherJar ( type : Jar ) { 
 + classifier ' launcher ' 
 + from sourceSets . fmllauncher . output 
 + doFirst { 
 def classpath = new StringBuilder ( ) 
 def artifacts = getArtifacts ( project , project . configurations . installer , false ) 
 artifacts . each { key , lib - > 
 @ @ - 645 , 88 + 679 , 25 @ @ project ( ' : forge ' ) { 
 classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - data . jar " 
 classpath + = " libraries / net / minecraft / server / $ { MC _ VERSION } / server - $ { MC _ VERSION } - extra . jar " 
 
 - 
 - manifest . attributes ( [ 
 - ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , 
 - ' Timestamp ' : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , 
 - ' GitCommit ' : grgit . head ( ) . getAbbreviatedId ( 8 ) , 
 - ' Git - Branch ' : grgit . branch . current ( ) . getName ( ) , 
 - ' Class - Path ' : classpath . toString ( ) 
 - ] as LinkedHashMap ) 
 - manifest . attributes ( [ 
 - ' Specification - Title ' : ' Forge ' , 
 - ' Specification - Vendor ' : ' Forge Development LLC ' , 
 - ' Specification - Version ' : SPEC _ VERSION , 
 - ' Implementation - Title ' : project . group , 
 - ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 - ' Implementation - Vendor ' : ' Forge Development LLC ' 
 - ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) 
 - manifest . attributes ( [ 
 - ' Specification - Title ' : ' Minecraft ' , 
 - ' Specification - Vendor ' : ' Mojang ' , 
 - ' Specification - Version ' : MC _ VERSION , 
 - ' Implementation - Title ' : ' MCP ' , 
 - ' Implementation - Version ' : MCP _ VERSION , 
 - ' Implementation - Vendor ' : ' Forge ' 
 - ] as LinkedHashMap , ' net / minecraftforge / versions / mcp / ' ) 
 - / / manifest entry for FML @ Mod 
 - manifest . attributes ( [ 
 - ' Specification - Title ' : ' Mod Language Provider ' , 
 - ' Specification - Vendor ' : ' Forge Development LLC ' , 
 - ' Specification - Version ' : ' 1 ' , 
 - ' Implementation - Title ' : ' FML Java Mod ' , 
 - ' Implementation - Version ' : SPEC _ VERSION , 
 - ' Implementation - Vendor ' : ' Forge ' 
 - ] as LinkedHashMap , ' net / minecraftforge / fml / javafmlmod / ' ) 
 - } 
 - } 
 - 
 - task fmllauncherJar ( type : Jar ) { 
 - from sourceSets . fmllauncher . output 
 - doFirst { 
 - manifest . attributes ( [ 
 - ' Specification - Title ' : ' Forge ' , 
 - ' Specification - Vendor ' : ' Forge Development LLC ' , 
 - ' Specification - Version ' : SPEC _ VERSION , 
 - ' Implementation - Title ' : project . group , 
 - ' Implementation - Version ' : project . version . substring ( MC _ VERSION . length ( ) + 1 ) , 
 - ' Implementation - Vendor ' : ' Forge Development LLC ' 
 - ] as LinkedHashMap , ' net / minecraftforge / versions / forge / ' ) 
 - manifest . attributes ( [ 
 - ' Specification - Title ' : ' Minecraft ' , 
 - ' Specification - Vendor ' : ' Mojang ' , 
 - ' Specification - Version ' : MC _ VERSION , 
 - ' Implementation - Title ' : ' MCP ' , 
 - ' Implementation - Version ' : MCP _ VERSION , 
 - ' Implementation - Vendor ' : ' Forge ' 
 - ] as LinkedHashMap , ' net / minecraftforge / versions / mcp / ' ) 
 - } 
 - } 
 - 
 - task signUniversal ( type : SignJar , dependsOn : universalJar ) { 
 - onlyIf { 
 - JAR _ SIGNER ! = null & & universalJar . state . failure = = null 
 - } 
 - 
 - def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER 
 - alias = ' forge ' 
 - storePass = jarsigner . storepass 
 - keyPass = jarsigner . keypass 
 - keyStore = jarsigner . keystore 
 - inputFile = universalJar . archivePath 
 - outputFile = universalJar . archivePath 
 - doFirst { 
 - project . logger . lifecycle ( ' Signing : ' + inputFile ) 
 + MANIFESTS . each { pkg , values - > 
 + if ( pkg = = ' / ' ) { 
 + manifest . attributes ( values + = [ 
 + ' Main - Class ' : ' net . minecraftforge . server . ServerMain ' , 
 + ' Class - Path ' : classpath . toString ( ) 
 + ] ) 
 + } else { 
 + manifest . attributes ( values , pkg ) 
 + } 
 + } 
 } 
 } 
 - universalJar . finalizedBy ( signUniversal ) 
 
 task downloadInstaller ( type : DownloadMavenArtifact ) { 
 artifact = ' net . minecraftforge : installer : 2 . 0 . + : shrunk ' 
 changing = true 
 } 
 
 - task installerJar ( type : Zip , dependsOn : [ downloadInstaller , signUniversal , installerJson , launcherJson , genClientBinPatches , genServerBinPatches ] ) { 
 + task installerJar ( type : Zip , dependsOn : [ downloadInstaller , installerJson , launcherJson , genClientBinPatches , genServerBinPatches , ' signUniversalJar ' , ' signLauncherJar ' ] ) { 
 classifier = ' installer ' 
 extension = ' jar ' / / Needs to be Zip task to not override Manifest , so set extension 
 destinationDir = file ( ' build / libs ' ) 
 @ @ - 743 , 6 + 714 , 9 @ @ project ( ' : forge ' ) { 
 } 
 from ( universalJar ) { 
 into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " 
 + } 
 + from ( launcherJar ) { 
 + into " / maven / $ { project . group . replace ( ' . ' , ' / ' ) } / $ { project . name } / $ { project . version } / " 
 rename { " $ { project . name } - $ { project . version } . jar " } 
 } 
 from ( installerJson . output ) 
 @ @ - 751 , 23 + 725 , 25 @ @ project ( ' : forge ' ) { 
 duplicatesStrategy = ' exclude ' 
 } 
 } 
 - task signInstaller ( type : SignJar , dependsOn : installerJar ) { 
 - onlyIf { 
 - JAR _ SIGNER ! = null & & installerJar . state . failure = = null 
 - } 
 - 
 - def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER 
 - alias = ' forge ' 
 - storePass = jarsigner . storepass 
 - keyPass = jarsigner . keypass 
 - keyStore = jarsigner . keystore 
 - inputFile = installerJar . archivePath 
 - outputFile = installerJar . archivePath 
 - doFirst { 
 - project . logger . lifecycle ( ' Signing : ' + inputFile ) 
 + 
 + [ universalJar , launcherJar , installerJar ] . each { t - > 
 + task " sign $ { t . name . capitalize ( ) } " ( type : SignJar , dependsOn : t ) { 
 + onlyIf { 
 + JAR _ SIGNER ! = null & & t . state . failure = = null 
 + } 
 + def jarsigner = JAR _ SIGNER = = null ? [ : ] : JAR _ SIGNER 
 + alias = ' forge ' 
 + storePass = jarsigner . storepass 
 + keyPass = jarsigner . keypass 
 + keyStore = jarsigner . keystore 
 + inputFile = t . archivePath 
 + outputFile = t . archivePath 
 + doFirst { 
 + project . logger . lifecycle ( ' Signing : ' + inputFile ) 
 + } 
 } 
 + t . finalizedBy ( tasks . getByName ( " sign $ { t . name . capitalize ( ) } " ) ) 
 } 
 - installerJar . finalizedBy ( signInstaller ) 
 
 task makeMdk ( type : Zip ) { 
 baseName = project . name 
 @ @ - 867 , 7 + 843 , 7 @ @ project ( ' : forge ' ) { 
 artifact makeMdk 
 artifact userdevJar 
 artifact sourcesJar 
 - artifact fmllauncherJar 
 + artifact launcherJar 
 
 pom { 
 name = ' forge ' 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java b / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java 
 index 6525987 . . 975a1bb 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / language / ILifecycleEvent . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . language ; 
 
 public interface ILifecycleEvent < R extends ILifecycleEvent < ? > > { 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java 
 index 053ac03 . . edc6dea 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / JarVersionLookupHandler . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading ; 
 
 import java . util . Optional ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java 
 index 7c0954b . . 7f7d072 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LauncherVersion . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading ; 
 
 import org . apache . logging . log4j . LogManager ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java 
 index 9736178 . . bcd9d20 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LibraryFinder . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading ; 
 
 import com . google . common . collect . ObjectArrays ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java 
 index a70bb6c . . 435154e 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / LogMarkers . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading ; 
 
 import org . apache . logging . log4j . Marker ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java 
 index 7ed0af4 . . 3db2545 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / MavenCoordinateResolver . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading ; 
 
 import java . nio . file . Path ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java 
 index 4a6b820 . . 70dfddd 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / AbstractJarFileLocator . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import org . apache . logging . log4j . LogManager ; 
 diff - - git a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 index e7a1fb9 . . b9923ea 100644 
 - - - a / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 + + + b / src / fmllauncher / java / net / minecraftforge / fml / loading / moddiscovery / MavenDirectoryLocator . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml . loading . moddiscovery ; 
 
 import net . minecraftforge . fml . loading . FMLPaths ; 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java b / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java 
 index 02e0343 . . a2f4b92 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeBakedModel . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import net . minecraft . block . state . IBlockState ; 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java b / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java 
 index 8c86904 . . a07fac4 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeRenderChunk . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import net . minecraft . util . math . BlockPos ; 
 diff - - git a / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java b / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java 
 index b1a3f83 . . 79746f3 100644 
 - - - a / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java 
 + + + b / src / main / java / net / minecraftforge / client / extensions / IForgeTextureAtlasSprite . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . client . extensions ; 
 
 import java . util . Collection ; 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java b / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java 
 index 9fdbba8 . . 4c48731 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeEntityMinecart . java 
 @ @ - 16 , 6 + 16 , 7 @ @ 
 * License along with this library ; if not , write to the Free Software 
 * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 * / 
 + 
 package net . minecraftforge . common . extensions ; 
 
 import net . minecraft . block . BlockRailBase ; 
 diff - - git a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 index 0fbdb5e . . 0bdcd6f 100644 
 - - - a / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 + + + b / src / main / java / net / minecraftforge / common / extensions / IForgeWorldType . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . common . extensions ; 
 
 import java . util . function . LongFunction ; 
 diff - - git a / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java b / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java 
 index 9033460 . . aa204b0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java 
 + + + b / src / main / java / net / minecraftforge / fml / ResourceLocationUtils . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . fml ; 
 
 import com . google . common . base . Joiner ; 
 diff - - git a / src / test / java / net / minecraftforge / test / TestProgressBar . java b / src / test / java / net / minecraftforge / test / TestProgressBar . java 
 index b58feb3 . . 00837d8 100644 
 - - - a / src / test / java / net / minecraftforge / test / TestProgressBar . java 
 + + + b / src / test / java / net / minecraftforge / test / TestProgressBar . java 
 @ @ - 1 , 3 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 - 2018 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 package net . minecraftforge . test ; 
 
 import net . minecraftforge . fml . common . progress . IProgressBarTracker ;

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java 
 new file mode 100644 
 index 0000000 . . 6dc6677 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionHandler . java 
 @ @ - 0 , 0 + 1 , 94 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission ; 
 + 
 + import com . mojang . authlib . GameProfile ; 
 + import net . minecraft . server . MinecraftServer ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . server . permission . context . IContext ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . util . Collection ; 
 + import java . util . Collections ; 
 + import java . util . HashMap ; 
 + 
 + / * * 
 + * Default implementation of PermissionAPI . 
 + * { @ link # hasPermission ( GameProfile , String , IContext ) } is based on DefaultPermissionLevel 
 + * 
 + * @ see IPermissionHandler 
 + * / 
 + public enum DefaultPermissionHandler implements IPermissionHandler 
 + { 
 + INSTANCE ; 
 + private static final HashMap < String , DefaultPermissionLevel > PERMISSION _ LEVEL _ MAP = new HashMap < String , DefaultPermissionLevel > ( ) ; 
 + private static final HashMap < String , String > DESCRIPTION _ MAP = new HashMap < String , String > ( ) ; 
 + 
 + @ Override 
 + public void registerNode ( String node , DefaultPermissionLevel level , String desc ) 
 + { 
 + PERMISSION _ LEVEL _ MAP . put ( node , level ) ; 
 + 
 + if ( ! desc . isEmpty ( ) ) 
 + { 
 + DESCRIPTION _ MAP . put ( node , desc ) ; 
 + } 
 + } 
 + 
 + @ Override 
 + public Collection < String > getRegisteredNodes ( ) 
 + { 
 + return Collections . unmodifiableSet ( PERMISSION _ LEVEL _ MAP . keySet ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) 
 + { 
 + DefaultPermissionLevel level = getDefaultPermissionLevel ( node ) ; 
 + 
 + if ( level = = DefaultPermissionLevel . NONE ) 
 + { 
 + return false ; 
 + } 
 + else if ( level = = DefaultPermissionLevel . ALL ) 
 + { 
 + return true ; 
 + } 
 + 
 + MinecraftServer server = FMLCommonHandler . instance ( ) . getMinecraftServerInstance ( ) ; 
 + return server ! = null & & server . getPlayerList ( ) . canSendCommands ( profile ) ; 
 + } 
 + 
 + @ Override 
 + public String getNodeDescription ( String node ) 
 + { 
 + String desc = DESCRIPTION _ MAP . get ( node ) ; 
 + return desc = = null ? " " : desc ; 
 + } 
 + 
 + / * * 
 + * @ return The default permission level of a node . If the permission isn ' t registred , it will return NONE 
 + * / 
 + public DefaultPermissionLevel getDefaultPermissionLevel ( String node ) 
 + { 
 + DefaultPermissionLevel level = PERMISSION _ LEVEL _ MAP . get ( node ) ; 
 + return level = = null ? DefaultPermissionLevel . NONE : level ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java 
 new file mode 100644 
 index 0000000 . . 30593fa 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / DefaultPermissionLevel . java 
 @ @ - 0 , 0 + 1 , 35 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission ; 
 + 
 + / * * 
 + * < table > < thead > < tr > < th > Level < / th > < th > Player < / th > < th > OP < / th > < / tr > 
 + * < / thead > < tbody > 
 + * < tr > < td > ALL < / td > < td > true < / td > < td > true < / td > < / tr > 
 + * < tr > < td > OP < / td > < td > false < / td > < td > true < / td > < / tr > 
 + * < tr > < td > NONE < / td > < td > false < / td > < td > false < / td > < / tr > 
 + * < / tbody > < / table > 
 + * / 
 + public enum DefaultPermissionLevel 
 + { 
 + ALL , 
 + OP , 
 + NONE 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java b / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java 
 new file mode 100644 
 index 0000000 . . fa772ef 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / IPermissionHandler . java 
 @ @ - 0 , 0 + 1 , 51 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission ; 
 + 
 + import com . mojang . authlib . GameProfile ; 
 + import net . minecraftforge . server . permission . context . IContext ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . util . Collection ; 
 + 
 + public interface IPermissionHandler 
 + { 
 + / * * 
 + * Use { @ link PermissionAPI # registerNode ( String , DefaultPermissionLevel , String ) } 
 + * / 
 + void registerNode ( String node , DefaultPermissionLevel level , String desc ) ; 
 + 
 + / * * 
 + * @ return Immutable collection of all registered nodes 
 + * / 
 + Collection < String > getRegisteredNodes ( ) ; 
 + 
 + / * * 
 + * Use { @ link PermissionAPI # hasPermission ( GameProfile , String , IContext ) } 
 + * / 
 + boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) ; 
 + 
 + / * * 
 + * @ param node Permission node 
 + * @ return Description of the node . " " in case this node doesn ' t have a decription 
 + * @ see # registerNode ( String , DefaultPermissionLevel , String ) 
 + * / 
 + String getNodeDescription ( String node ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java b / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java 
 new file mode 100644 
 index 0000000 . . 4349bcb 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / PermissionAPI . java 
 @ @ - 0 , 0 + 1 , 97 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import com . mojang . authlib . GameProfile ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Loader ; 
 + import net . minecraftforge . fml . common . LoaderState ; 
 + import net . minecraftforge . server . permission . context . IContext ; 
 + import net . minecraftforge . server . permission . context . PlayerContext ; 
 + import org . apache . logging . log4j . Level ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + public class PermissionAPI 
 + { 
 + private static IPermissionHandler permissionHandler = DefaultPermissionHandler . INSTANCE ; 
 + 
 + / * * 
 + * < b > Only use this in PreInit state ! < / b > 
 + * / 
 + public static void setPermissionHandler ( IPermissionHandler handler ) 
 + { 
 + Preconditions . checkNotNull ( handler , " Permission handler can ' t be null ! " ) ; 
 + Preconditions . checkState ( Loader . instance ( ) . getLoaderState ( ) . ordinal ( ) < = LoaderState . PREINITIALIZATION . ordinal ( ) , " Can ' t register after IPermissionHandler PreInit ! " ) ; 
 + FMLLog . log ( Level . WARN , " Replacing " + permissionHandler . getClass ( ) . getName ( ) + " with " + handler . getClass ( ) . getName ( ) ) ; 
 + permissionHandler = handler ; 
 + } 
 + 
 + public static IPermissionHandler getPermissionHandler ( ) 
 + { 
 + return permissionHandler ; 
 + } 
 + 
 + / * * 
 + * < b > Only use this after PreInit state ! < / b > 
 + * 
 + * @ param node Permission node , best if it ' s lowercase and contains ' . ' ( e . g . < code > " modid . subgroup . permission _ id " < / code > ) 
 + * @ param level Default permission level for this node . If not isn ' t registered , it ' s level is going to be ' NONE ' 
 + * @ param desc Optional description of the node 
 + * / 
 + public static String registerNode ( String node , DefaultPermissionLevel level , String desc ) 
 + { 
 + Preconditions . checkNotNull ( node , " Permission node can ' t be null ! " ) ; 
 + Preconditions . checkNotNull ( level , " Permission level can ' t be null ! " ) ; 
 + Preconditions . checkNotNull ( desc , " Permission description can ' t be null ! " ) ; 
 + Preconditions . checkArgument ( ! node . isEmpty ( ) , " Permission node can ' t be empty ! " ) ; 
 + Preconditions . checkState ( Loader . instance ( ) . getLoaderState ( ) . ordinal ( ) > LoaderState . PREINITIALIZATION . ordinal ( ) , " Can ' t register permission nodes before Init ! " ) ; 
 + permissionHandler . registerNode ( node , level , desc ) ; 
 + return node ; 
 + } 
 + 
 + / * * 
 + * @ param profile GameProfile of the player who is requesting permission . The player doesn ' t have to be online 
 + * @ param node Permission node . See { @ link # registerNode ( String , DefaultPermissionLevel , String ) } 
 + * @ param context Context for this permission . Highly recommended to not be null . See { @ link IContext } 
 + * @ return true , if player has permission , false if he does not . 
 + * @ see DefaultPermissionHandler 
 + * / 
 + public static boolean hasPermission ( GameProfile profile , String node , @ Nullable IContext context ) 
 + { 
 + Preconditions . checkNotNull ( profile , " GameProfile can ' t be null ! " ) ; 
 + Preconditions . checkNotNull ( node , " Permission node can ' t be null ! " ) ; 
 + Preconditions . checkArgument ( ! node . isEmpty ( ) , " Permission node can ' t be empty ! " ) ; 
 + return permissionHandler . hasPermission ( profile , node , context ) ; 
 + } 
 + 
 + / * * 
 + * Shortcut method using EntityPlayer and creating PlayerContext 
 + * 
 + * @ see PermissionAPI # hasPermission ( GameProfile , String , IContext ) 
 + * / 
 + public static boolean hasPermission ( EntityPlayer player , String node ) 
 + { 
 + Preconditions . checkNotNull ( player , " Player can ' t be null ! " ) ; 
 + return hasPermission ( player . getGameProfile ( ) , node , new PlayerContext ( player ) ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java b / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java 
 new file mode 100644 
 index 0000000 . . df82e5e 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / AreaContext . java 
 @ @ - 0 , 0 + 1 , 50 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + public class AreaContext extends PlayerContext 
 + { 
 + private final AxisAlignedBB area ; 
 + 
 + public AreaContext ( EntityPlayer ep , AxisAlignedBB aabb ) 
 + { 
 + super ( ep ) ; 
 + area = Preconditions . checkNotNull ( aabb , " AxisAlignedBB can ' t be null in AreaContext ! " ) ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public < T > T get ( ContextKey < T > key ) 
 + { 
 + return key . equals ( ContextKeys . AREA ) ? ( T ) area : super . get ( key ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean covers ( ContextKey < ? > key ) 
 + { 
 + return key . equals ( ContextKeys . AREA ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java b / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java 
 new file mode 100644 
 index 0000000 . . 88a0eee 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / BlockPosContext . java 
 @ @ - 0 , 0 + 1 , 80 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . math . ChunkPos ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + public class BlockPosContext extends PlayerContext 
 + { 
 + private final BlockPos blockPos ; 
 + private IBlockState blockState ; 
 + private EnumFacing facing ; 
 + 
 + public BlockPosContext ( EntityPlayer ep , BlockPos pos , @ Nullable IBlockState state , @ Nullable EnumFacing f ) 
 + { 
 + super ( ep ) ; 
 + blockPos = Preconditions . checkNotNull ( pos , " BlockPos can ' t be null in BlockPosContext ! " ) ; 
 + blockState = state ; 
 + facing = f ; 
 + } 
 + 
 + public BlockPosContext ( EntityPlayer ep , ChunkPos pos ) 
 + { 
 + this ( ep , new BlockPos ( ( pos . chunkXPos < < 4 ) + 8 , 0 , ( pos . chunkZPos < < 4 ) + 8 ) , null , null ) ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public < T > T get ( ContextKey < T > key ) 
 + { 
 + if ( key . equals ( ContextKeys . POS ) ) 
 + { 
 + return ( T ) blockPos ; 
 + } 
 + else if ( key . equals ( ContextKeys . BLOCK _ STATE ) ) 
 + { 
 + if ( blockState = = null ) 
 + { 
 + blockState = getWorld ( ) . getBlockState ( blockPos ) ; 
 + } 
 + 
 + return ( T ) blockState ; 
 + } 
 + else if ( key . equals ( ContextKeys . FACING ) ) 
 + { 
 + return ( T ) facing ; 
 + } 
 + 
 + return super . get ( key ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean covers ( ContextKey < ? > key ) 
 + { 
 + return key . equals ( ContextKeys . POS ) | | key . equals ( ContextKeys . BLOCK _ STATE ) | | ( facing ! = null & & key . equals ( ContextKeys . FACING ) ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / Context . java b / src / main / java / net / minecraftforge / server / permission / context / Context . java 
 new file mode 100644 
 index 0000000 . . e1e4505 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / Context . java 
 @ @ - 0 , 0 + 1 , 87 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . world . World ; 
 + 
 + import javax . annotation . Nullable ; 
 + import java . util . HashMap ; 
 + import java . util . Map ; 
 + 
 + public class Context implements IContext 
 + { 
 + private Map < ContextKey < ? > , Object > map ; 
 + 
 + @ Override 
 + @ Nullable 
 + public World getWorld ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public EntityPlayer getPlayer ( ) 
 + { 
 + return null ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public < T > T get ( ContextKey < T > key ) 
 + { 
 + return map = = null | | map . isEmpty ( ) ? null : ( T ) map . get ( key ) ; 
 + } 
 + 
 + @ Override 
 + public boolean has ( ContextKey < ? > key ) 
 + { 
 + return covers ( key ) | | ( map ! = null & & ! map . isEmpty ( ) & & map . containsKey ( key ) ) ; 
 + } 
 + 
 + / * * 
 + * Sets Context object 
 + * 
 + * @ param key Context key 
 + * @ param obj Context object . Can be null 
 + * @ return itself , for easy context chaining 
 + * / 
 + public < T > Context set ( ContextKey < T > key , @ Nullable T obj ) 
 + { 
 + if ( covers ( key ) ) 
 + { 
 + return this ; 
 + } 
 + 
 + if ( map = = null ) 
 + { 
 + map = new HashMap < ContextKey < ? > , Object > ( ) ; 
 + } 
 + 
 + map . put ( key , obj ) ; 
 + return this ; 
 + } 
 + 
 + protected boolean covers ( ContextKey < ? > key ) 
 + { 
 + return false ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java b / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java 
 new file mode 100644 
 index 0000000 . . 0b91298 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / ContextKey . java 
 @ @ - 0 , 0 + 1 , 67 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + 
 + public final class ContextKey < T > 
 + { 
 + private final String ID ; 
 + private final Class < T > typeClass ; 
 + 
 + public static < E > ContextKey < E > create ( String id , Class < E > c ) 
 + { 
 + Preconditions . checkNotNull ( id , " ContextKey ' s ID can ' t be null ! " ) ; 
 + Preconditions . checkNotNull ( c , " ContextKey ' s Type can ' t be null ! " ) ; 
 + 
 + if ( id . isEmpty ( ) ) 
 + { 
 + throw new IllegalArgumentException ( " ContextKey ' s ID can ' t be blank ! " ) ; 
 + } 
 + 
 + return new ContextKey < E > ( id , c ) ; 
 + } 
 + 
 + private ContextKey ( String id , Class < T > c ) 
 + { 
 + ID = id ; 
 + typeClass = c ; 
 + } 
 + 
 + public String toString ( ) 
 + { 
 + return ID ; 
 + } 
 + 
 + public int hashCode ( ) 
 + { 
 + return ID . hashCode ( ) ; 
 + } 
 + 
 + public boolean equals ( Object o ) 
 + { 
 + return o = = this | | ( o ! = null & & o . toString ( ) . equals ( ID ) ) ; 
 + } 
 + 
 + public Class < T > getTypeClass ( ) 
 + { 
 + return typeClass ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java b / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java 
 new file mode 100644 
 index 0000000 . . 1109710 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / ContextKeys . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . util . EnumFacing ; 
 + import net . minecraft . util . math . AxisAlignedBB ; 
 + import net . minecraft . util . math . BlockPos ; 
 + 
 + / * * 
 + * Some default context keys , for easier compatibility 
 + * / 
 + public class ContextKeys 
 + { 
 + / * * 
 + * BlockPos for interacting , breaking and other permissions 
 + * / 
 + public static final ContextKey < BlockPos > POS = ContextKey . create ( " pos " , BlockPos . class ) ; 
 + 
 + / * * 
 + * The entity can be anything that gets interacted with - a sheep when you try to dye it , skeleton that you attack , etc . 
 + * / 
 + public static final ContextKey < Entity > TARGET = ContextKey . create ( " target " , Entity . class ) ; 
 + 
 + public static final ContextKey < EnumFacing > FACING = ContextKey . create ( " facing " , EnumFacing . class ) ; 
 + public static final ContextKey < AxisAlignedBB > AREA = ContextKey . create ( " area " , AxisAlignedBB . class ) ; 
 + public static final ContextKey < IBlockState > BLOCK _ STATE = ContextKey . create ( " blockstate " , IBlockState . class ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / IContext . java b / src / main / java / net / minecraftforge / server / permission / context / IContext . java 
 new file mode 100644 
 index 0000000 . . becbeeb 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / IContext . java 
 @ @ - 0 , 0 + 1 , 56 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . world . World ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + / * * 
 + * Use { @ link BlockPosContext } or { @ link PlayerContext } when possible 
 + * / 
 + public interface IContext 
 + { 
 + / * * 
 + * World from where permission is requested . Can be null 
 + * / 
 + @ Nullable 
 + World getWorld ( ) ; 
 + 
 + / * * 
 + * @ return Player requesting permission . Can be null 
 + * / 
 + @ Nullable 
 + EntityPlayer getPlayer ( ) ; 
 + 
 + / * * 
 + * @ param key Context key 
 + * @ return Context object 
 + * / 
 + @ Nullable 
 + < T > T get ( ContextKey < T > key ) ; 
 + 
 + / * * 
 + * @ param key Context key 
 + * @ return true if context contains this key 
 + * / 
 + boolean has ( ContextKey < ? > key ) ; 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java b / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java 
 new file mode 100644 
 index 0000000 . . c522787 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / PlayerContext . java 
 @ @ - 0 , 0 + 1 , 46 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . world . World ; 
 + 
 + public class PlayerContext extends Context 
 + { 
 + private final EntityPlayer player ; 
 + 
 + public PlayerContext ( EntityPlayer ep ) 
 + { 
 + player = Preconditions . checkNotNull ( ep , " Player can ' t be null in PlayerContext ! " ) ; 
 + } 
 + 
 + @ Override 
 + public World getWorld ( ) 
 + { 
 + return player . getEntityWorld ( ) ; 
 + } 
 + 
 + @ Override 
 + public EntityPlayer getPlayer ( ) 
 + { 
 + return player ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java b / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java 
 new file mode 100644 
 index 0000000 . . 7e8ef52 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / TargetContext . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import net . minecraft . entity . Entity ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + public class TargetContext extends PlayerContext 
 + { 
 + private final Entity target ; 
 + 
 + public TargetContext ( EntityPlayer ep , @ Nullable Entity entity ) 
 + { 
 + super ( ep ) ; 
 + target = entity ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public < T > T get ( ContextKey < T > key ) 
 + { 
 + return key . equals ( ContextKeys . TARGET ) ? ( T ) target : super . get ( key ) ; 
 + } 
 + 
 + @ Override 
 + protected boolean covers ( ContextKey < ? > key ) 
 + { 
 + return target ! = null & & key . equals ( ContextKeys . TARGET ) ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java b / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java 
 new file mode 100644 
 index 0000000 . . ced75d2 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / WorldContext . java 
 @ @ - 0 , 0 + 1 , 49 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . server . permission . context ; 
 + 
 + import com . google . common . base . Preconditions ; 
 + import net . minecraft . entity . player . EntityPlayer ; 
 + import net . minecraft . world . World ; 
 + 
 + import javax . annotation . Nullable ; 
 + 
 + public class WorldContext extends Context 
 + { 
 + private final World world ; 
 + 
 + public WorldContext ( World w ) 
 + { 
 + world = Preconditions . checkNotNull ( w , " World can ' t be null in WorldContext ! " ) ; 
 + } 
 + 
 + @ Override 
 + public World getWorld ( ) 
 + { 
 + return world ; 
 + } 
 + 
 + @ Override 
 + @ Nullable 
 + public EntityPlayer getPlayer ( ) 
 + { 
 + return null ; 
 + } 
 + } 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / context / package - info . java b / src / main / java / net / minecraftforge / server / permission / context / package - info . java 
 new file mode 100644 
 index 0000000 . . 35acccc 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / context / package - info . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + @ javax . annotation . ParametersAreNonnullByDefault 
 + @ mcp . MethodsReturnNonnullByDefault 
 + package net . minecraftforge . server . permission . context ; 
 \ No newline at end of file 
 diff - - git a / src / main / java / net / minecraftforge / server / permission / package - info . java b / src / main / java / net / minecraftforge / server / permission / package - info . java 
 new file mode 100644 
 index 0000000 . . 706a0ac 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / server / permission / package - info . java 
 @ @ - 0 , 0 + 1 , 22 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + @ javax . annotation . ParametersAreNonnullByDefault 
 + @ mcp . MethodsReturnNonnullByDefault 
 + package net . minecraftforge . server . permission ; 
 \ No newline at end of file 
 diff - - git a / src / test / java / net / minecraftforge / test / PermissionTest . java b / src / test / java / net / minecraftforge / test / PermissionTest . java 
 new file mode 100644 
 index 0000000 . . 61afb5c 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / PermissionTest . java 
 @ @ - 0 , 0 + 1 , 177 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import net . minecraft . block . Block ; 
 + import net . minecraft . block . state . IBlockState ; 
 + import net . minecraft . command . CommandBase ; 
 + import net . minecraft . command . CommandException ; 
 + import net . minecraft . command . ICommandSender ; 
 + import net . minecraft . command . WrongUsageException ; 
 + import net . minecraft . entity . player . EntityPlayerMP ; 
 + import net . minecraft . nbt . NBTTagCompound ; 
 + import net . minecraft . server . MinecraftServer ; 
 + import net . minecraft . tileentity . TileEntity ; 
 + import net . minecraft . util . math . BlockPos ; 
 + import net . minecraft . util . math . ChunkPos ; 
 + import net . minecraft . util . text . TextComponentString ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLInitializationEvent ; 
 + import net . minecraftforge . fml . common . event . FMLServerStartingEvent ; 
 + import net . minecraftforge . server . permission . DefaultPermissionLevel ; 
 + import net . minecraftforge . server . permission . PermissionAPI ; 
 + import net . minecraftforge . server . permission . context . BlockPosContext ; 
 + import net . minecraftforge . server . permission . context . ContextKey ; 
 + 
 + @ Mod ( modid = PermissionTest . MOD _ ID , name = " PermissionTest " , version = " 1 . 0 . 0 " ) 
 + public class PermissionTest 
 + { 
 + public static final String MOD _ ID = " PermissionTest " ; 
 + 
 + @ Mod . Instance ( PermissionTest . MOD _ ID ) 
 + public static PermissionTest inst ; 
 + 
 + @ Mod . EventHandler 
 + public void onInit ( FMLInitializationEvent event ) 
 + { 
 + Permissions . init ( ) ; 
 + } 
 + 
 + @ Mod . EventHandler 
 + public void onServerStarted ( FMLServerStartingEvent event ) 
 + { 
 + event . registerServerCommand ( new CommandPermissionTest ( ) ) ; 
 + } 
 + 
 + public static class Permissions 
 + { 
 + public static final String CLAIM _ CHUNK = " testmod . chunk . claim " ; 
 + public static final String UNCLAIM _ CHUNK = " testmod . chunk . unclaim " ; 
 + public static final String SET _ BLOCK = " testmod . block . set " ; 
 + public static final String READ _ TILE = " testmod . tileentity . read " ; 
 + 
 + public static void init ( ) 
 + { 
 + PermissionAPI . registerNode ( CLAIM _ CHUNK , DefaultPermissionLevel . ALL , " Node for claiming chunks " ) ; 
 + PermissionAPI . registerNode ( UNCLAIM _ CHUNK , DefaultPermissionLevel . ALL , " Node for unclaiming chunks " ) ; 
 + PermissionAPI . registerNode ( SET _ BLOCK , DefaultPermissionLevel . OP , " Node for setting blocks with a command " ) ; 
 + PermissionAPI . registerNode ( READ _ TILE , DefaultPermissionLevel . NONE , " Node for reading and printing TileEntity data " ) ; 
 + } 
 + } 
 + 
 + public static class ContextKeys 
 + { 
 + public static final ContextKey < TileEntity > TILE _ ENTITY = ContextKey . create ( " tile _ entity " , TileEntity . class ) ; 
 + } 
 + 
 + public static class CommandPermissionTest extends CommandBase 
 + { 
 + @ Override 
 + public String getCommandName ( ) 
 + { 
 + return " permission _ test " ; 
 + } 
 + 
 + @ Override 
 + public String getCommandUsage ( ICommandSender sender ) 
 + { 
 + return " commands . permission _ test . usage " ; 
 + } 
 + 
 + @ Override 
 + public boolean checkPermission ( MinecraftServer server , ICommandSender sender ) 
 + { 
 + return true ; 
 + } 
 + 
 + @ Override 
 + public void execute ( MinecraftServer server , ICommandSender sender , String [ ] args ) throws CommandException 
 + { 
 + EntityPlayerMP player = getCommandSenderAsPlayer ( sender ) ; 
 + 
 + if ( args . length < 1 ) 
 + { 
 + sender . addChatMessage ( new TextComponentString ( " claim , unclaim , setblock , read _ tile " ) ) ; 
 + return ; 
 + } 
 + 
 + / / Example using BlockPosContext with ChunkPos and permission available to players by default 
 + boolean b = args [ 0 ] . equals ( " claim " ) ; 
 + if ( b | | args [ 0 ] . equals ( " unclaim " ) ) 
 + { 
 + ChunkPos chunkPos = new ChunkPos ( parseInt ( args [ 1 ] ) , parseInt ( args [ 2 ] ) ) ; 
 + 
 + if ( PermissionAPI . hasPermission ( player . getGameProfile ( ) , b ? Permissions . CLAIM _ CHUNK : Permissions . UNCLAIM _ CHUNK , new BlockPosContext ( player , chunkPos ) ) ) 
 + { 
 + if ( b ) 
 + { 
 + / / claim chunk 
 + sender . addChatMessage ( new TextComponentString ( " Chunk claimed ! " ) ) ; 
 + } 
 + else 
 + { 
 + / / unclaim chunk 
 + sender . addChatMessage ( new TextComponentString ( " Chunk unclaimed ! " ) ) ; 
 + } 
 + } 
 + else 
 + { 
 + throw new CommandException ( " commands . generic . permission " ) ; 
 + } 
 + } 
 + / / Example using BlockPosContext and permission available to only OPs by default 
 + else if ( args [ 0 ] . equals ( " setblock " ) ) 
 + { 
 + if ( args . length < 5 ) 
 + { 
 + throw new WrongUsageException ( " commands . setblock . usage " ) ; 
 + } 
 + 
 + BlockPos blockpos = parseBlockPos ( sender , args , 1 , false ) ; 
 + Block block = CommandBase . getBlockByText ( sender , args [ 4 ] ) ; 
 + int i = 0 ; 
 + 
 + if ( args . length > = 6 ) 
 + { 
 + i = parseInt ( args [ 5 ] , 0 , 15 ) ; 
 + } 
 + 
 + if ( ! player . worldObj . isBlockLoaded ( blockpos ) ) 
 + { 
 + throw new CommandException ( " commands . setblock . outOfWorld " ) ; 
 + } 
 + else 
 + { 
 + IBlockState state = block . getStateFromMeta ( i ) ; 
 + 
 + if ( ! PermissionAPI . hasPermission ( player . getGameProfile ( ) , Permissions . SET _ BLOCK , new BlockPosContext ( player , blockpos , state , null ) ) ) 
 + { 
 + throw new CommandException ( " commands . generic . permission " ) ; 
 + } 
 + else if ( ! player . worldObj . setBlockState ( blockpos , state , 2 ) ) 
 + { 
 + throw new CommandException ( " commands . setblock . noChange " ) ; 
 + } 
 + } 
 + } 
 + / / Example using custom ContextKey and permission available to only OPs by default 
 + else if ( args [ 0 ] . equals ( " read _ tile " ) ) 
 + { 
 + BlockPos blockpos = parseBlockPos ( sender , args , 1 , false ) ; 
 + TileEntity tileEntity = player . worldObj . getTileEntity ( blockpos ) ; 
 + 
 + if ( PermissionAPI . hasPermission ( player . getGameProfile ( ) , Permissions . READ _ TILE , new BlockPosContext ( player , blockpos , null , null ) . set ( ContextKeys . TILE _ ENTITY , tileEntity ) ) ) 
 + { 
 + NBTTagCompound tag = tileEntity = = null ? null : tileEntity . serializeNBT ( ) ; 
 + sender . addChatMessage ( new TextComponentString ( String . valueOf ( tag ) ) ) ; 
 + } 
 + else 
 + { 
 + throw new CommandException ( " commands . generic . permission " ) ; 
 + } 
 + } 
 + else 
 + { 
 + throw new CommandException ( " commands . generic . permission " ) ; 
 + } 
 + } 
 + } 
 + } 
 \ No newline at end of file
