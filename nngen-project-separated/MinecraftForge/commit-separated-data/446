BLEU SCORE: 0.027611988917697356

TEST MSG: Allow condition factories to be registered from JSON
GENERATED MSG: Add Forge fluid handler test

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> index 0db0418 . . 4c0c085 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java <nl> @ @ - 533 , 21 + 533 , 7 @ @ public class CraftingHelper { <nl> { <nl> ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; <nl> String clsName = JsonUtils . getString ( entry . getValue ( ) , " ingredients [ " + entry . getValue ( ) + " ] " ) ; <nl> - try <nl> - { <nl> - Class < ? > cls = Class . forName ( clsName ) ; <nl> - if ( ! IIngredientFactory . class . isAssignableFrom ( cls ) ) <nl> - throw new JsonSyntaxException ( " Class ' " + clsName + " \ ' is not a IIngredientFactory ! " ) ; <nl> - register ( key , ( IIngredientFactory ) cls . newInstance ( ) ) ; <nl> - } <nl> - catch ( ClassNotFoundException e ) <nl> - { <nl> - throw new JsonSyntaxException ( " Could not find ingredient factory : " + clsName , e ) ; <nl> - } <nl> - catch ( InstantiationException | IllegalAccessException e ) <nl> - { <nl> - throw new JsonSyntaxException ( " Could not instantiate ingredient factory : " + clsName , e ) ; <nl> - } <nl> + register ( key , getClassInstance ( clsName , IIngredientFactory . class ) ) ; <nl> } <nl> } <nl> <nl> @ @ - 557 , 25 + 543 , 40 @ @ public class CraftingHelper { <nl> { <nl> ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; <nl> String clsName = JsonUtils . getString ( entry . getValue ( ) , " recipes [ " + entry . getValue ( ) + " ] " ) ; <nl> - try <nl> - { <nl> - Class < ? > cls = Class . forName ( clsName ) ; <nl> - if ( ! IRecipeFactory . class . isAssignableFrom ( cls ) ) <nl> - throw new JsonSyntaxException ( " Class ' " + clsName + " \ ' is not a IRecipeFactory ! " ) ; <nl> - register ( key , ( IRecipeFactory ) cls . newInstance ( ) ) ; <nl> - } <nl> - catch ( ClassNotFoundException e ) <nl> - { <nl> - throw new JsonSyntaxException ( " Could not find recipe factory : " + clsName , e ) ; <nl> - } <nl> - catch ( InstantiationException | IllegalAccessException e ) <nl> - { <nl> - throw new JsonSyntaxException ( " Could not instantiate recipe factory : " + clsName , e ) ; <nl> - } <nl> + register ( key , getClassInstance ( clsName , IRecipeFactory . class ) ) ; <nl> + } <nl> + } <nl> + <nl> + if ( json . has ( " conditions " ) ) <nl> + { <nl> + for ( Entry < String , JsonElement > entry : JsonUtils . getJsonObject ( json , " conditions " ) . entrySet ( ) ) <nl> + { <nl> + ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; <nl> + String clsName = JsonUtils . getString ( entry . getValue ( ) , " conditions [ " + entry . getValue ( ) + " ] " ) ; <nl> + register ( key , getClassInstance ( clsName , IConditionFactory . class ) ) ; <nl> } <nl> } <nl> } <nl> <nl> + private static < T > T getClassInstance ( String clsName , Class < T > expected ) <nl> + { <nl> + try <nl> + { <nl> + Class < ? > cls = Class . forName ( clsName ) ; <nl> + if ( ! expected . isAssignableFrom ( cls ) ) <nl> + throw new JsonSyntaxException ( " Class ' " + clsName + " ' is not an " + expected . getSimpleName ( ) ) ; <nl> + return ( T ) cls . newInstance ( ) ; <nl> + } <nl> + catch ( ClassNotFoundException e ) <nl> + { <nl> + throw new JsonSyntaxException ( " Could not find " + expected . getSimpleName ( ) + " : " + clsName , e ) ; <nl> + } <nl> + catch ( InstantiationException | IllegalAccessException e ) <nl> + { <nl> + throw new JsonSyntaxException ( " Could not instantiate " + expected . getSimpleName ( ) + " : " + clsName , e ) ; <nl> + } <nl> + } <nl> + <nl> public static void loadRecipes ( ) <nl> { <nl> / / TODO : If this errors in ServerInit it freezes the client at loading world , find a way to pop that up ? <nl> diff - - git a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> index 744f275 . . 3e0ffa5 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java <nl> @ @ - 4 , 6 + 4 , 7 @ @ import com . google . gson . JsonObject ; <nl> <nl> import net . minecraft . item . crafting . IRecipe ; <nl> import net . minecraft . item . crafting . Ingredient ; <nl> + import net . minecraftforge . common . crafting . IConditionFactory ; <nl> import net . minecraftforge . common . crafting . IIngredientFactory ; <nl> import net . minecraftforge . common . crafting . IRecipeFactory ; <nl> import net . minecraftforge . common . crafting . JsonContext ; <nl> @ @ - 12 , 6 + 13 , 8 @ @ import net . minecraftforge . fml . common . FMLLog ; <nl> import net . minecraftforge . fml . common . Mod ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> <nl> + import java . util . function . BooleanSupplier ; <nl> + <nl> @ Mod ( modid = CraftingSystemTest . MOD _ ID , name = " CraftingTestMod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) <nl> @ Mod . EventBusSubscriber <nl> public class CraftingSystemTest <nl> @ @ - 43 , 4 + 46 , 13 @ @ public class CraftingSystemTest <nl> } <nl> <nl> } <nl> + <nl> + public static class ConditionFactory implements IConditionFactory <nl> + { <nl> + @ Override <nl> + public BooleanSupplier parse ( JsonContext context , JsonObject json ) <nl> + { <nl> + return ( ) - > true ; <nl> + } <nl> + } <nl> } <nl> diff - - git a / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json b / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json <nl> index 5b299e3 . . b2749a7 100644 <nl> - - - a / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json <nl> + + + b / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json <nl> @ @ - 4 , 5 + 4 , 8 @ @ <nl> } , <nl> " recipes " : { <nl> " free " : " net . minecraftforge . debug . CraftingSystemTest $ RecipeFactory " <nl> + } , <nl> + " conditions " : { <nl> + " true " : " net . minecraftforge . debug . CraftingSystemTest $ ConditionFactory " <nl> } <nl> } <nl> \ No newline at end of file
NEAREST DIFF (one line): diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> index e38452f . . ba06fcc 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java <nl> @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest <nl> private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; <nl> private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; <nl> <nl> + private static final boolean ENABLE = false ; <nl> + <nl> static <nl> { <nl> - FluidRegistry . enableUniversalBucket ( ) ; <nl> + if ( ENABLE ) <nl> + { <nl> + FluidRegistry . enableUniversalBucket ( ) ; <nl> + } <nl> } <nl> <nl> @ SidedProxy <nl> @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest <nl> @ Override <nl> void setupModels ( ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> ModelLoader . setBucketModelDefinition ( dynBucket ) ; <nl> <nl> final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; <nl> @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest <nl> @ EventHandler <nl> public void preInit ( FMLPreInitializationEvent event ) <nl> { <nl> + if ( ! ENABLE ) <nl> + return ; <nl> + <nl> GameRegistry . register ( new TestItem ( ) , testItemName ) ; <nl> Block tank = new BlockSimpleTank ( ) ; <nl> GameRegistry . register ( tank , simpleTankName ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> index 9d92565 . . ccbfb40 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java <nl> @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug <nl> public static final String MODID = " ForgeDebugModelFluid " ; <nl> public static final String VERSION = " 1 . 0 " ; <nl> <nl> + public static final boolean ENABLE = false ; <nl> + <nl> @ SidedProxy <nl> public static CommonProxy proxy ; <nl> <nl> public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; <nl> <nl> @ EventHandler <nl> - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } <nl> + public void preInit ( FMLPreInitializationEvent event ) <nl> + { <nl> + if ( ENABLE ) <nl> + { <nl> + proxy . preInit ( event ) ; <nl> + } <nl> + } <nl> <nl> public static class CommonProxy <nl> { <nl> diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> new file mode 100644 <nl> index 0000000 . . 0ed4331 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java <nl> @ @ - 0 , 0 + 1 , 108 @ @ <nl> + package net . minecraftforge . test ; <nl> + <nl> + import java . util . ArrayList ; <nl> + import java . util . List ; <nl> + <nl> + import net . minecraft . creativetab . CreativeTabs ; <nl> + import net . minecraft . item . Item ; <nl> + import net . minecraft . item . ItemStack ; <nl> + import net . minecraftforge . fluids . Fluid ; <nl> + import net . minecraftforge . fluids . FluidRegistry ; <nl> + import net . minecraftforge . fluids . FluidStack ; <nl> + import net . minecraftforge . fluids . FluidUtil ; <nl> + import net . minecraftforge . fluids . capability . IFluidHandler ; <nl> + import net . minecraftforge . fml . common . FMLCommonHandler ; <nl> + import net . minecraftforge . fml . common . FMLLog ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; <nl> + import net . minecraftforge . fml . common . registry . ForgeRegistries ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) <nl> + public class FluidHandlerTest <nl> + { <nl> + 	 public static final boolean ENABLE = false ; <nl> + <nl> + 	 @ Mod . EventHandler <nl> + 	 public void loadComplete ( FMLLoadCompleteEvent event ) <nl> + 	 { <nl> + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) <nl> + 	 	 	 return ; <nl> + <nl> + 	 	 for ( ItemStack stack : getAllItems ( ) ) <nl> + 	 	 { <nl> + 	 	 	 testFluidContainer ( stack ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static void testFluidContainer ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 ItemStack drainedStack = stack . copy ( ) ; <nl> + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; <nl> + 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 { <nl> + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; <nl> + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; <nl> + <nl> + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; <nl> + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; <nl> + 	 	 	 	 if ( fluidHandler ! = null ) <nl> + 	 	 	 	 { <nl> + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; <nl> + 	 	 	 	 	 if ( filled > 0 ) <nl> + 	 	 	 	 	 { <nl> + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; <nl> + 	 	 	 	 	 } <nl> + 	 	 	 	 } <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String fluidString ( FluidStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null ) <nl> + 	 	 { <nl> + 	 	 	 return " no fluid " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static String stackString ( ItemStack stack ) <nl> + 	 { <nl> + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) <nl> + 	 	 { <nl> + 	 	 	 return " no item " ; <nl> + 	 	 } <nl> + 	 	 else <nl> + 	 	 { <nl> + 	 	 	 String resourceDomain ; <nl> + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = " unknown " ; <nl> + 	 	 	 } <nl> + 	 	 	 else <nl> + 	 	 	 { <nl> + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; <nl> + 	 	 	 } <nl> + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; <nl> + 	 	 } <nl> + 	 } <nl> + <nl> + 	 private static List < ItemStack > getAllItems ( ) <nl> + 	 { <nl> + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; <nl> + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) <nl> + 	 	 { <nl> + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) <nl> + 	 	 	 { <nl> + 	 	 	 	 item . getSubItems ( item , tab , list ) ; <nl> + 	 	 	 } <nl> + 	 	 } <nl> + 	 	 return list ; <nl> + 	 } <nl> + }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 index 0db0418 . . 4c0c085 100644 
 - - - a / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 + + + b / src / main / java / net / minecraftforge / common / crafting / CraftingHelper . java 
 @ @ - 533 , 21 + 533 , 7 @ @ public class CraftingHelper { 
 { 
 ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; 
 String clsName = JsonUtils . getString ( entry . getValue ( ) , " ingredients [ " + entry . getValue ( ) + " ] " ) ; 
 - try 
 - { 
 - Class < ? > cls = Class . forName ( clsName ) ; 
 - if ( ! IIngredientFactory . class . isAssignableFrom ( cls ) ) 
 - throw new JsonSyntaxException ( " Class ' " + clsName + " \ ' is not a IIngredientFactory ! " ) ; 
 - register ( key , ( IIngredientFactory ) cls . newInstance ( ) ) ; 
 - } 
 - catch ( ClassNotFoundException e ) 
 - { 
 - throw new JsonSyntaxException ( " Could not find ingredient factory : " + clsName , e ) ; 
 - } 
 - catch ( InstantiationException | IllegalAccessException e ) 
 - { 
 - throw new JsonSyntaxException ( " Could not instantiate ingredient factory : " + clsName , e ) ; 
 - } 
 + register ( key , getClassInstance ( clsName , IIngredientFactory . class ) ) ; 
 } 
 } 
 
 @ @ - 557 , 25 + 543 , 40 @ @ public class CraftingHelper { 
 { 
 ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; 
 String clsName = JsonUtils . getString ( entry . getValue ( ) , " recipes [ " + entry . getValue ( ) + " ] " ) ; 
 - try 
 - { 
 - Class < ? > cls = Class . forName ( clsName ) ; 
 - if ( ! IRecipeFactory . class . isAssignableFrom ( cls ) ) 
 - throw new JsonSyntaxException ( " Class ' " + clsName + " \ ' is not a IRecipeFactory ! " ) ; 
 - register ( key , ( IRecipeFactory ) cls . newInstance ( ) ) ; 
 - } 
 - catch ( ClassNotFoundException e ) 
 - { 
 - throw new JsonSyntaxException ( " Could not find recipe factory : " + clsName , e ) ; 
 - } 
 - catch ( InstantiationException | IllegalAccessException e ) 
 - { 
 - throw new JsonSyntaxException ( " Could not instantiate recipe factory : " + clsName , e ) ; 
 - } 
 + register ( key , getClassInstance ( clsName , IRecipeFactory . class ) ) ; 
 + } 
 + } 
 + 
 + if ( json . has ( " conditions " ) ) 
 + { 
 + for ( Entry < String , JsonElement > entry : JsonUtils . getJsonObject ( json , " conditions " ) . entrySet ( ) ) 
 + { 
 + ResourceLocation key = new ResourceLocation ( context . getModId ( ) , entry . getKey ( ) ) ; 
 + String clsName = JsonUtils . getString ( entry . getValue ( ) , " conditions [ " + entry . getValue ( ) + " ] " ) ; 
 + register ( key , getClassInstance ( clsName , IConditionFactory . class ) ) ; 
 } 
 } 
 } 
 
 + private static < T > T getClassInstance ( String clsName , Class < T > expected ) 
 + { 
 + try 
 + { 
 + Class < ? > cls = Class . forName ( clsName ) ; 
 + if ( ! expected . isAssignableFrom ( cls ) ) 
 + throw new JsonSyntaxException ( " Class ' " + clsName + " ' is not an " + expected . getSimpleName ( ) ) ; 
 + return ( T ) cls . newInstance ( ) ; 
 + } 
 + catch ( ClassNotFoundException e ) 
 + { 
 + throw new JsonSyntaxException ( " Could not find " + expected . getSimpleName ( ) + " : " + clsName , e ) ; 
 + } 
 + catch ( InstantiationException | IllegalAccessException e ) 
 + { 
 + throw new JsonSyntaxException ( " Could not instantiate " + expected . getSimpleName ( ) + " : " + clsName , e ) ; 
 + } 
 + } 
 + 
 public static void loadRecipes ( ) 
 { 
 / / TODO : If this errors in ServerInit it freezes the client at loading world , find a way to pop that up ? 
 diff - - git a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 index 744f275 . . 3e0ffa5 100644 
 - - - a / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / CraftingSystemTest . java 
 @ @ - 4 , 6 + 4 , 7 @ @ import com . google . gson . JsonObject ; 
 
 import net . minecraft . item . crafting . IRecipe ; 
 import net . minecraft . item . crafting . Ingredient ; 
 + import net . minecraftforge . common . crafting . IConditionFactory ; 
 import net . minecraftforge . common . crafting . IIngredientFactory ; 
 import net . minecraftforge . common . crafting . IRecipeFactory ; 
 import net . minecraftforge . common . crafting . JsonContext ; 
 @ @ - 12 , 6 + 13 , 8 @ @ import net . minecraftforge . fml . common . FMLLog ; 
 import net . minecraftforge . fml . common . Mod ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 
 + import java . util . function . BooleanSupplier ; 
 + 
 @ Mod ( modid = CraftingSystemTest . MOD _ ID , name = " CraftingTestMod " , version = " 1 . 0 " , acceptableRemoteVersions = " * " ) 
 @ Mod . EventBusSubscriber 
 public class CraftingSystemTest 
 @ @ - 43 , 4 + 46 , 13 @ @ public class CraftingSystemTest 
 } 
 
 } 
 + 
 + public static class ConditionFactory implements IConditionFactory 
 + { 
 + @ Override 
 + public BooleanSupplier parse ( JsonContext context , JsonObject json ) 
 + { 
 + return ( ) - > true ; 
 + } 
 + } 
 } 
 diff - - git a / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json b / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json 
 index 5b299e3 . . b2749a7 100644 
 - - - a / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json 
 + + + b / src / test / resources / assets / crafting _ system _ test / recipes / _ factories . json 
 @ @ - 4 , 5 + 4 , 8 @ @ 
 } , 
 " recipes " : { 
 " free " : " net . minecraftforge . debug . CraftingSystemTest $ RecipeFactory " 
 + } , 
 + " conditions " : { 
 + " true " : " net . minecraftforge . debug . CraftingSystemTest $ ConditionFactory " 
 } 
 } 
 \ No newline at end of file

NEAREST DIFF:
diff - - git a / src / test / java / net / minecraftforge / debug / DynBucketTest . java b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 index e38452f . . ba06fcc 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 + + + b / src / test / java / net / minecraftforge / debug / DynBucketTest . java 
 @ @ - 54 , 9 + 54 , 14 @ @ public class DynBucketTest 
 private static final ResourceLocation simpleTankName = new ResourceLocation ( MODID , " simpletank " ) ; 
 private static final ResourceLocation testItemName = new ResourceLocation ( MODID , " testitem " ) ; 
 
 + private static final boolean ENABLE = false ; 
 + 
 static 
 { 
 - FluidRegistry . enableUniversalBucket ( ) ; 
 + if ( ENABLE ) 
 + { 
 + FluidRegistry . enableUniversalBucket ( ) ; 
 + } 
 } 
 
 @ SidedProxy 
 @ @ - 78 , 6 + 83 , 9 @ @ public class DynBucketTest 
 @ Override 
 void setupModels ( ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 ModelLoader . setBucketModelDefinition ( dynBucket ) ; 
 
 final ModelResourceLocation bottle = new ModelResourceLocation ( new ResourceLocation ( " forge " , " dynbottle " ) , " inventory " ) ; 
 @ @ - 99 , 6 + 107 , 9 @ @ public class DynBucketTest 
 @ EventHandler 
 public void preInit ( FMLPreInitializationEvent event ) 
 { 
 + if ( ! ENABLE ) 
 + return ; 
 + 
 GameRegistry . register ( new TestItem ( ) , testItemName ) ; 
 Block tank = new BlockSimpleTank ( ) ; 
 GameRegistry . register ( tank , simpleTankName ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 index 9d92565 . . ccbfb40 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelFluidDebug . java 
 @ @ - 27 , 13 + 27 , 21 @ @ public class ModelFluidDebug 
 public static final String MODID = " ForgeDebugModelFluid " ; 
 public static final String VERSION = " 1 . 0 " ; 
 
 + public static final boolean ENABLE = false ; 
 + 
 @ SidedProxy 
 public static CommonProxy proxy ; 
 
 public static final Fluid milkFluid = new Fluid ( " milk " , new ResourceLocation ( " forge " , " blocks / milk _ still " ) , new ResourceLocation ( " forge " , " blocks / milk _ flow " ) ) ; 
 
 @ EventHandler 
 - public void preInit ( FMLPreInitializationEvent event ) { proxy . preInit ( event ) ; } 
 + public void preInit ( FMLPreInitializationEvent event ) 
 + { 
 + if ( ENABLE ) 
 + { 
 + proxy . preInit ( event ) ; 
 + } 
 + } 
 
 public static class CommonProxy 
 { 
 diff - - git a / src / test / java / net / minecraftforge / test / FluidHandlerTest . java b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 new file mode 100644 
 index 0000000 . . 0ed4331 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / test / FluidHandlerTest . java 
 @ @ - 0 , 0 + 1 , 108 @ @ 
 + package net . minecraftforge . test ; 
 + 
 + import java . util . ArrayList ; 
 + import java . util . List ; 
 + 
 + import net . minecraft . creativetab . CreativeTabs ; 
 + import net . minecraft . item . Item ; 
 + import net . minecraft . item . ItemStack ; 
 + import net . minecraftforge . fluids . Fluid ; 
 + import net . minecraftforge . fluids . FluidRegistry ; 
 + import net . minecraftforge . fluids . FluidStack ; 
 + import net . minecraftforge . fluids . FluidUtil ; 
 + import net . minecraftforge . fluids . capability . IFluidHandler ; 
 + import net . minecraftforge . fml . common . FMLCommonHandler ; 
 + import net . minecraftforge . fml . common . FMLLog ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . event . FMLLoadCompleteEvent ; 
 + import net . minecraftforge . fml . common . registry . ForgeRegistries ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = " FluidHandlerTest " , name = " FluidHandlerTest " , version = " 0 . 0 . 0 " ) 
 + public class FluidHandlerTest 
 + { 
 + 	 public static final boolean ENABLE = false ; 
 + 
 + 	 @ Mod . EventHandler 
 + 	 public void loadComplete ( FMLLoadCompleteEvent event ) 
 + 	 { 
 + 	 	 if ( ! ENABLE | | FMLCommonHandler . instance ( ) . getSide ( ) ! = Side . CLIENT ) 
 + 	 	 	 return ; 
 + 
 + 	 	 for ( ItemStack stack : getAllItems ( ) ) 
 + 	 	 { 
 + 	 	 	 testFluidContainer ( stack ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static void testFluidContainer ( ItemStack stack ) 
 + 	 { 
 + 	 	 ItemStack drainedStack = stack . copy ( ) ; 
 + 	 	 IFluidHandler fluidHandler = FluidUtil . getFluidHandler ( drainedStack ) ; 
 + 	 	 if ( fluidHandler ! = null ) 
 + 	 	 { 
 + 	 	 	 FluidStack drain = fluidHandler . drain ( Integer . MAX _ VALUE , true ) ; 
 + 	 	 	 FMLLog . info ( " Draining " + stackString ( stack ) + " gives " + fluidString ( drain ) + " and " + stackString ( drainedStack ) ) ; 
 + 
 + 	 	 	 for ( Fluid fluid : FluidRegistry . getRegisteredFluids ( ) . values ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 ItemStack filledStack = stack . copy ( ) ; 
 + 	 	 	 	 fluidHandler = FluidUtil . getFluidHandler ( filledStack ) ; 
 + 	 	 	 	 if ( fluidHandler ! = null ) 
 + 	 	 	 	 { 
 + 	 	 	 	 	 int filled = fluidHandler . fill ( new FluidStack ( fluid , Integer . MAX _ VALUE ) , true ) ; 
 + 	 	 	 	 	 if ( filled > 0 ) 
 + 	 	 	 	 	 { 
 + 	 	 	 	 	 	 FMLLog . info ( " Filling " + stackString ( stack ) + " with " + fluidString ( new FluidStack ( fluid , filled ) ) + " gives " + stackString ( filledStack ) ) ; 
 + 	 	 	 	 	 } 
 + 	 	 	 	 } 
 + 	 	 	 } 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String fluidString ( FluidStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null ) 
 + 	 	 { 
 + 	 	 	 return " no fluid " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 return stack . amount + " mB " + stack . getLocalizedName ( ) ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static String stackString ( ItemStack stack ) 
 + 	 { 
 + 	 	 if ( stack = = null | | stack . stackSize < = 0 ) 
 + 	 	 { 
 + 	 	 	 return " no item " ; 
 + 	 	 } 
 + 	 	 else 
 + 	 	 { 
 + 	 	 	 String resourceDomain ; 
 + 	 	 	 if ( stack . getItem ( ) = = null | | stack . getItem ( ) . getRegistryName ( ) = = null ) 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = " unknown " ; 
 + 	 	 	 } 
 + 	 	 	 else 
 + 	 	 	 { 
 + 	 	 	 	 resourceDomain = stack . getItem ( ) . getRegistryName ( ) . getResourceDomain ( ) ; 
 + 	 	 	 } 
 + 	 	 	 return stack . stackSize + " " + stack . getDisplayName ( ) + " ( " + resourceDomain + " ) " ; 
 + 	 	 } 
 + 	 } 
 + 
 + 	 private static List < ItemStack > getAllItems ( ) 
 + 	 { 
 + 	 	 List < ItemStack > list = new ArrayList < ItemStack > ( ) ; 
 + 	 	 for ( Item item : ForgeRegistries . ITEMS . getValues ( ) ) 
 + 	 	 { 
 + 	 	 	 for ( CreativeTabs tab : item . getCreativeTabs ( ) ) 
 + 	 	 	 { 
 + 	 	 	 	 item . getSubItems ( item , tab , list ) ; 
 + 	 	 	 } 
 + 	 	 } 
 + 	 	 return list ; 
 + 	 } 
 + }
