BLEU SCORE: 0.015445276590783498

TEST MSG: Add support for running IModel . retexture ( ) on models from blockstates
GENERATED MSG: B3D Improvements

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index d9bdcb6 . . 751d7d7 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 701 , 14 + 701 , 17 @ @ public final class ModelLoader extends ModelBakery <nl> private static final class WeightedRandomModel implements IModel <nl> { <nl> private final List < Variant > variants ; <nl> - private final List < ResourceLocation > locations = new ArrayList < > ( ) ; <nl> - private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; <nl> - private final List < IModel > models = new ArrayList < > ( ) ; <nl> + private final List < ResourceLocation > locations ; <nl> + private final Set < ResourceLocation > textures ; <nl> + private final List < IModel > models ; <nl> private final IModelState defaultState ; <nl> <nl> public WeightedRandomModel ( ResourceLocation parent , VariantList variants ) throws Exception <nl> { <nl> this . variants = variants . getVariantList ( ) ; <nl> + this . locations = new ArrayList < > ( ) ; <nl> + this . textures = Sets . newHashSet ( ) ; <nl> + this . models = new ArrayList < > ( ) ; <nl> ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; <nl> for ( Variant v : this . variants ) <nl> { <nl> @ @ - 754 , 6 + 757 , 15 @ @ public final class ModelLoader extends ModelBakery <nl> defaultState = new MultiModelState ( builder . build ( ) ) ; <nl> } <nl> <nl> + private WeightedRandomModel ( List < Variant > variants , List < ResourceLocation > locations , Set < ResourceLocation > textures , List < IModel > models , IModelState defaultState ) <nl> + { <nl> + this . variants = variants ; <nl> + this . locations = locations ; <nl> + this . textures = textures ; <nl> + this . models = models ; <nl> + this . defaultState = defaultState ; <nl> + } <nl> + <nl> @ Override <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> { <nl> @ @ - 792 , 6 + 804 , 28 @ @ public final class ModelLoader extends ModelBakery <nl> { <nl> return defaultState ; <nl> } <nl> + <nl> + @ Override <nl> + public WeightedRandomModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + if ( textures . isEmpty ( ) ) <nl> + return this ; <nl> + <nl> + / / rebuild the texture list taking into account new textures <nl> + Set < ResourceLocation > modelTextures = Sets . newHashSet ( ) ; <nl> + / / also recreate the MultiModelState so IModelState data is properly applied to the retextured model <nl> + ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; <nl> + List < IModel > retexturedModels = Lists . newArrayList ( ) ; <nl> + for ( int i = 0 ; i < this . variants . size ( ) ; i + + ) <nl> + { <nl> + IModel retextured = this . models . get ( i ) . retexture ( textures ) ; <nl> + modelTextures . addAll ( retextured . getTextures ( ) ) ; <nl> + retexturedModels . add ( retextured ) ; <nl> + builder . add ( Pair . of ( retextured , this . variants . get ( i ) . getState ( ) ) ) ; <nl> + } <nl> + <nl> + return new WeightedRandomModel ( this . variants , this . locations , modelTextures , retexturedModels , new MultiModelState ( builder . build ( ) ) ) ; <nl> + } <nl> } <nl> <nl> protected IModel getMissingModel ( ) <nl> @ @ - 1243 , 6 + 1277 , 13 @ @ public final class ModelLoader extends ModelBakery <nl> partModels = builder . build ( ) ; <nl> } <nl> <nl> + private MultipartModel ( ResourceLocation location , Multipart multipart , ImmutableMap < Selector , IModel > partModels ) <nl> + { <nl> + this . location = location ; <nl> + this . multipart = multipart ; <nl> + this . partModels = partModels ; <nl> + } <nl> + <nl> / / FIXME : represent selectors as dependencies ? <nl> / / FIXME <nl> @ Override <nl> @ @ - 1258 , 5 + 1299 , 20 @ @ public final class ModelLoader extends ModelBakery <nl> IBakedModel bakedModel = builder . makeMultipartModel ( ) ; <nl> return bakedModel ; <nl> } <nl> + <nl> + @ Override <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + if ( textures . isEmpty ( ) ) <nl> + return this ; <nl> + <nl> + ImmutableMap . Builder < Selector , IModel > builder = ImmutableMap . builder ( ) ; <nl> + for ( Entry < Selector , IModel > partModel : this . partModels . entrySet ( ) ) <nl> + { <nl> + builder . put ( partModel . getKey ( ) , partModel . getValue ( ) . retexture ( textures ) ) ; <nl> + } <nl> + <nl> + return new MultipartModel ( location , multipart , builder . build ( ) ) ; <nl> + } <nl> } <nl> } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java b / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java <nl> new file mode 100644 <nl> index 0000000 . . f26a490 <nl> - - - / dev / null <nl> + + + b / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java <nl> @ @ - 0 , 0 + 1 , 61 @ @ <nl> + package net . minecraftforge . debug ; <nl> + <nl> + import java . util . function . Function ; <nl> + <nl> + import com . google . common . collect . ImmutableMap ; <nl> + <nl> + import net . minecraft . client . Minecraft ; <nl> + import net . minecraft . client . renderer . block . model . IBakedModel ; <nl> + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; <nl> + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; <nl> + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . client . event . ModelBakeEvent ; <nl> + import net . minecraftforge . client . model . IModel ; <nl> + import net . minecraftforge . client . model . ModelLoaderRegistry ; <nl> + import net . minecraftforge . fml . common . Mod ; <nl> + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> + import net . minecraftforge . fml . relauncher . Side ; <nl> + <nl> + @ Mod ( modid = BlockstateRetextureTest . MODID , name = " BlockstateRetextureTest " , version = BlockstateRetextureTest . VERSION , acceptableRemoteVersions = " * " ) <nl> + public class BlockstateRetextureTest <nl> + { <nl> + public static final String MODID = " forge _ blockstate _ retexture _ test " ; <nl> + public static final String VERSION = " 1 . 0 " ; <nl> + static final boolean ENABLED = false ; <nl> + <nl> + private static ResourceLocation fenceName = new ResourceLocation ( " minecraft " , " fence " ) ; <nl> + private static ModelResourceLocation fenceLocation = new ModelResourceLocation ( fenceName , " east = true , north = false , south = false , west = true " ) ; <nl> + private static ResourceLocation stoneName = new ResourceLocation ( " minecraft " , " stone " ) ; <nl> + private static ModelResourceLocation stoneLocation = new ModelResourceLocation ( stoneName , " normal " ) ; <nl> + <nl> + private static Function < ResourceLocation , TextureAtlasSprite > textureGetter = location - > <nl> + { <nl> + assert location ! = null ; <nl> + return Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; <nl> + } ; <nl> + <nl> + @ Mod . EventBusSubscriber ( modid = MODID , value = Side . CLIENT ) <nl> + public static class ClientEvents <nl> + { <nl> + @ SubscribeEvent <nl> + public static void onModelBakeEvent ( ModelBakeEvent event ) <nl> + { <nl> + if ( ! ENABLED ) <nl> + { <nl> + return ; <nl> + } <nl> + <nl> + IModel fence = ModelLoaderRegistry . getModelOrLogError ( fenceLocation , " Error loading fence model " ) ; <nl> + IModel stone = ModelLoaderRegistry . getModelOrLogError ( stoneLocation , " Error loading planks model " ) ; <nl> + IModel retexturedFence = fence . retexture ( ImmutableMap . of ( " texture " , " blocks / log _ oak " ) ) ; <nl> + IModel retexturedStone = stone . retexture ( ImmutableMap . of ( " all " , " blocks / diamond _ block " ) ) ; <nl> + <nl> + IBakedModel fenceResult = retexturedFence . bake ( fence . getDefaultState ( ) , DefaultVertexFormats . BLOCK , textureGetter ) ; <nl> + IBakedModel stoneResult = retexturedStone . bake ( stone . getDefaultState ( ) , DefaultVertexFormats . BLOCK , textureGetter ) ; <nl> + <nl> + event . getModelRegistry ( ) . putObject ( fenceLocation , fenceResult ) ; <nl> + event . getModelRegistry ( ) . putObject ( stoneLocation , stoneResult ) ; <nl> + } <nl> + } <nl> + }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> index ca6ab30 . . 46f1c46 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java <nl> @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; <nl> import net . minecraftforge . client . model . ICustomModelLoader ; <nl> import net . minecraftforge . client . model . IFlexibleBakedModel ; <nl> import net . minecraftforge . client . model . IModel ; <nl> + import net . minecraftforge . client . model . IModelCustomData ; <nl> import net . minecraftforge . client . model . IModelPart ; <nl> import net . minecraftforge . client . model . IModelState ; <nl> + import net . minecraftforge . client . model . IRetexturableModel ; <nl> import net . minecraftforge . client . model . ISmartBlockModel ; <nl> import net . minecraftforge . client . model . ISmartItemModel ; <nl> import net . minecraftforge . client . model . ModelLoader ; <nl> @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; <nl> import org . lwjgl . BufferUtils ; <nl> <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Predicate ; <nl> import com . google . common . cache . CacheBuilder ; <nl> import com . google . common . cache . CacheLoader ; <nl> import com . google . common . cache . LoadingCache ; <nl> + import com . google . common . collect . Collections2 ; <nl> import com . google . common . collect . ImmutableList ; <nl> import com . google . common . collect . ImmutableMap ; <nl> + import com . google . common . collect . Maps ; <nl> import com . google . common . collect . Multimap ; <nl> <nl> / * <nl> @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader <nl> public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) <nl> { <nl> TRSRTransformation ret = TRSRTransformation . identity ( ) ; <nl> - if ( node . getParent ( ) ! = null ) <nl> - { <nl> - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> - ret = ret . compose ( pm ) ; <nl> - } <nl> Key key = null ; <nl> if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; <nl> else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; <nl> - if ( key = = null ) <nl> - { <nl> - FMLLog . severe ( " invalid key index : " + frame ) ; <nl> - } <nl> - else <nl> + if ( key ! = null ) <nl> { <nl> + Node < ? > parent = node . getParent ( ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; <nl> + ret = ret . compose ( pm ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; <nl> + } <nl> ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; <nl> Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; <nl> rm . invert ( ) ; <nl> ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + if ( parent ! = null ) <nl> + { <nl> + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; <nl> + rm . invert ( ) ; <nl> + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; <nl> + } <nl> } <nl> return ret ; <nl> } <nl> @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader <nl> } <nl> } <nl> <nl> - public static class Wrapper extends PartWrapper < Mesh > implements IModel <nl> + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData <nl> { <nl> private final ResourceLocation location ; <nl> private final ImmutableMap < String , ResourceLocation > textures ; <nl> <nl> public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) <nl> { <nl> - this ( location , buildTextures ( location , textures ) , mesh ) ; <nl> + this ( location , buildTextures ( textures ) , mesh ) ; <nl> } <nl> <nl> public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) <nl> @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader <nl> this . textures = textures ; <nl> } <nl> <nl> - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) <nl> + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) <nl> { <nl> ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> <nl> for ( Texture t : textures ) <nl> { <nl> String path = t . getPath ( ) ; <nl> - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; <nl> + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; <nl> } <nl> return builder . build ( ) ; <nl> } <nl> <nl> + private static String getLocation ( String path ) <nl> + { <nl> + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; <nl> + return path ; <nl> + } <nl> + <nl> public Collection < ResourceLocation > getDependencies ( ) <nl> { <nl> / / no dependencies for in - file models <nl> @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader <nl> <nl> public Collection < ResourceLocation > getTextures ( ) <nl> { <nl> - return textures . values ( ) ; <nl> + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) <nl> + { <nl> + public boolean apply ( ResourceLocation loc ) <nl> + { <nl> + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; <nl> + } <nl> + } ) ; <nl> } <nl> <nl> public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) <nl> { <nl> ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; <nl> - for ( String path : textures . keySet ( ) ) <nl> + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) <nl> { <nl> - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; <nl> + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) <nl> + { <nl> + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; <nl> + builder . put ( e . getKey ( ) , missing ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; <nl> + } <nl> } <nl> - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; <nl> + builder . put ( " missingno " , missing ) ; <nl> return new BakedWrapper ( this , state , format , builder . build ( ) ) ; <nl> } <nl> <nl> @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader <nl> else if ( ! location . equals ( other . location ) ) return false ; <nl> return true ; <nl> } <nl> + <nl> + @ Override <nl> + public IModel retexture ( ImmutableMap < String , String > textures ) <nl> + { <nl> + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; <nl> + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) <nl> + { <nl> + String path = e . getKey ( ) ; <nl> + String loc = getLocation ( path ) ; <nl> + if ( textures . containsKey ( loc ) ) <nl> + { <nl> + String newLoc = textures . get ( loc ) ; <nl> + if ( newLoc = = null ) newLoc = getLocation ( path ) ; <nl> + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; <nl> + } <nl> + else <nl> + { <nl> + builder . put ( e ) ; <nl> + } <nl> + } <nl> + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; <nl> + } <nl> + <nl> + @ Override <nl> + public IModel process ( ImmutableMap < String , String > customData ) <nl> + { <nl> + / / TODO keyframe <nl> + return null ; <nl> + } <nl> } <nl> <nl> private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel <nl> @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader <nl> for ( Face f : faces ) <nl> { <nl> buf . clear ( ) ; <nl> - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; <nl> + List < Texture > textures = null ; <nl> + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; <nl> TextureAtlasSprite sprite ; <nl> - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; <nl> else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; <nl> else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; <nl> putVertexData ( f . getV1 ( ) , sprite ) ; <nl> diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> index 3fe304b . . 2358b93 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java <nl> @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug <nl> <nl> private void clientPreInit ( ) <nl> { <nl> - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; <nl> B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; <nl> - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; <nl> - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; <nl> - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; <nl> Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; <nl> - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; <nl> - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; <nl> + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; <nl> } <nl> <nl> public static class CustomModelBlock extends Block <nl> @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug <nl> @ Override <nl> public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) <nl> { <nl> - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; <nl> - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; <nl> - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; <nl> + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; <nl> return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; <nl> } <nl> <nl> @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug <nl> return false ; <nl> } <nl> } <nl> - <nl> - public static class DummyModelLoader implements ICustomModelLoader <nl> - { <nl> - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; <nl> - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; <nl> - <nl> - public boolean accepts ( ResourceLocation modelLocation ) <nl> - { <nl> - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; <nl> - } <nl> - <nl> - public IModel loadModel ( ResourceLocation model ) <nl> - { <nl> - return DummyModel . instance ; <nl> - } <nl> - <nl> - public static enum DummyModel implements IModel <nl> - { <nl> - instance ; <nl> - <nl> - public Collection < ResourceLocation > getDependencies ( ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - public Collection < ResourceLocation > getTextures ( ) <nl> - { <nl> - return Collections . singletonList ( dummyTexture ) ; <nl> - } <nl> - <nl> - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) <nl> - { <nl> - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; <nl> - } <nl> - <nl> - public IModelState getDefaultState ( ) <nl> - { <nl> - return ModelRotation . X0 _ Y0 ; <nl> - } <nl> - } <nl> - <nl> - public static class DummyBakedModel implements IFlexibleBakedModel <nl> - { <nl> - private final TextureAtlasSprite texture ; <nl> - <nl> - public DummyBakedModel ( TextureAtlasSprite texture ) <nl> - { <nl> - this . texture = texture ; <nl> - } <nl> - <nl> - public List < BakedQuad > getFaceQuads ( EnumFacing side ) <nl> - { <nl> - return Collections . emptyList ( ) ; <nl> - } <nl> - <nl> - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) <nl> - { <nl> - return new int [ ] { <nl> - Float . floatToRawIntBits ( x ) , <nl> - Float . floatToRawIntBits ( y ) , <nl> - Float . floatToRawIntBits ( z ) , <nl> - color , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , <nl> - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , <nl> - 0 <nl> - } ; <nl> - } <nl> - <nl> - public List < BakedQuad > getGeneralQuads ( ) <nl> - { <nl> - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; <nl> - / / 1 half - way rotated quad looking UP <nl> - ret . add ( new BakedQuad ( Ints . concat ( <nl> - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , <nl> - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , <nl> - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , <nl> - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) <nl> - ) , - 1 , EnumFacing . UP ) ) ; <nl> - return ret ; <nl> - } <nl> - <nl> - public boolean isGui3d ( ) { return true ; } <nl> - <nl> - public boolean isAmbientOcclusion ( ) { return true ; } <nl> - <nl> - public boolean isBuiltInRenderer ( ) { return false ; } <nl> - <nl> - public TextureAtlasSprite getTexture ( ) { return this . texture ; } <nl> - <nl> - public ItemCameraTransforms getItemCameraTransforms ( ) <nl> - { <nl> - return ItemCameraTransforms . DEFAULT ; <nl> - } <nl> - <nl> - public VertexFormat getFormat ( ) <nl> - { <nl> - return Attributes . DEFAULT _ BAKED _ FORMAT ; <nl> - } <nl> - } <nl> - <nl> - public void onResourceManagerReload ( IResourceManager resourceManager ) { } <nl> - } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> index 1ebdfc8 . . c6db8d8 100644 <nl> - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json <nl> @ @ - 1 , 5 + 1 , 18 @ @ <nl> { <nl> + " forge _ marker " : 1 , <nl> + " defaults " : { <nl> + " textures " : { <nl> + " # texture " : " forgedebugmodelloaderregistry : texture " , <nl> + " # chest " : " entity / chest / normal " <nl> + } , <nl> + " model " : " forgedebugmodelloaderregistry : chest . b3d " <nl> + } , <nl> " variants " : { <nl> - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } <nl> + " normal " : { <nl> + " dummy " : " " <nl> + } , <nl> + " inventory " : { <nl> + " dummy " : " " <nl> + } <nl> } <nl> } <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d <nl> new file mode 100644 <nl> index 0000000 . . b070d7a <nl> Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ <nl> diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d <nl> index 14e9c4d . . 8f4bd09 100644 <nl> Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index d9bdcb6 . . 751d7d7 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 701 , 14 + 701 , 17 @ @ public final class ModelLoader extends ModelBakery 
 private static final class WeightedRandomModel implements IModel 
 { 
 private final List < Variant > variants ; 
 - private final List < ResourceLocation > locations = new ArrayList < > ( ) ; 
 - private final Set < ResourceLocation > textures = Sets . newHashSet ( ) ; 
 - private final List < IModel > models = new ArrayList < > ( ) ; 
 + private final List < ResourceLocation > locations ; 
 + private final Set < ResourceLocation > textures ; 
 + private final List < IModel > models ; 
 private final IModelState defaultState ; 
 
 public WeightedRandomModel ( ResourceLocation parent , VariantList variants ) throws Exception 
 { 
 this . variants = variants . getVariantList ( ) ; 
 + this . locations = new ArrayList < > ( ) ; 
 + this . textures = Sets . newHashSet ( ) ; 
 + this . models = new ArrayList < > ( ) ; 
 ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; 
 for ( Variant v : this . variants ) 
 { 
 @ @ - 754 , 6 + 757 , 15 @ @ public final class ModelLoader extends ModelBakery 
 defaultState = new MultiModelState ( builder . build ( ) ) ; 
 } 
 
 + private WeightedRandomModel ( List < Variant > variants , List < ResourceLocation > locations , Set < ResourceLocation > textures , List < IModel > models , IModelState defaultState ) 
 + { 
 + this . variants = variants ; 
 + this . locations = locations ; 
 + this . textures = textures ; 
 + this . models = models ; 
 + this . defaultState = defaultState ; 
 + } 
 + 
 @ Override 
 public Collection < ResourceLocation > getDependencies ( ) 
 { 
 @ @ - 792 , 6 + 804 , 28 @ @ public final class ModelLoader extends ModelBakery 
 { 
 return defaultState ; 
 } 
 + 
 + @ Override 
 + public WeightedRandomModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + if ( textures . isEmpty ( ) ) 
 + return this ; 
 + 
 + / / rebuild the texture list taking into account new textures 
 + Set < ResourceLocation > modelTextures = Sets . newHashSet ( ) ; 
 + / / also recreate the MultiModelState so IModelState data is properly applied to the retextured model 
 + ImmutableList . Builder < Pair < IModel , IModelState > > builder = ImmutableList . builder ( ) ; 
 + List < IModel > retexturedModels = Lists . newArrayList ( ) ; 
 + for ( int i = 0 ; i < this . variants . size ( ) ; i + + ) 
 + { 
 + IModel retextured = this . models . get ( i ) . retexture ( textures ) ; 
 + modelTextures . addAll ( retextured . getTextures ( ) ) ; 
 + retexturedModels . add ( retextured ) ; 
 + builder . add ( Pair . of ( retextured , this . variants . get ( i ) . getState ( ) ) ) ; 
 + } 
 + 
 + return new WeightedRandomModel ( this . variants , this . locations , modelTextures , retexturedModels , new MultiModelState ( builder . build ( ) ) ) ; 
 + } 
 } 
 
 protected IModel getMissingModel ( ) 
 @ @ - 1243 , 6 + 1277 , 13 @ @ public final class ModelLoader extends ModelBakery 
 partModels = builder . build ( ) ; 
 } 
 
 + private MultipartModel ( ResourceLocation location , Multipart multipart , ImmutableMap < Selector , IModel > partModels ) 
 + { 
 + this . location = location ; 
 + this . multipart = multipart ; 
 + this . partModels = partModels ; 
 + } 
 + 
 / / FIXME : represent selectors as dependencies ? 
 / / FIXME 
 @ Override 
 @ @ - 1258 , 5 + 1299 , 20 @ @ public final class ModelLoader extends ModelBakery 
 IBakedModel bakedModel = builder . makeMultipartModel ( ) ; 
 return bakedModel ; 
 } 
 + 
 + @ Override 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + if ( textures . isEmpty ( ) ) 
 + return this ; 
 + 
 + ImmutableMap . Builder < Selector , IModel > builder = ImmutableMap . builder ( ) ; 
 + for ( Entry < Selector , IModel > partModel : this . partModels . entrySet ( ) ) 
 + { 
 + builder . put ( partModel . getKey ( ) , partModel . getValue ( ) . retexture ( textures ) ) ; 
 + } 
 + 
 + return new MultipartModel ( location , multipart , builder . build ( ) ) ; 
 + } 
 } 
 } 
 diff - - git a / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java b / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java 
 new file mode 100644 
 index 0000000 . . f26a490 
 - - - / dev / null 
 + + + b / src / test / java / net / minecraftforge / debug / BlockstateRetextureTest . java 
 @ @ - 0 , 0 + 1 , 61 @ @ 
 + package net . minecraftforge . debug ; 
 + 
 + import java . util . function . Function ; 
 + 
 + import com . google . common . collect . ImmutableMap ; 
 + 
 + import net . minecraft . client . Minecraft ; 
 + import net . minecraft . client . renderer . block . model . IBakedModel ; 
 + import net . minecraft . client . renderer . block . model . ModelResourceLocation ; 
 + import net . minecraft . client . renderer . texture . TextureAtlasSprite ; 
 + import net . minecraft . client . renderer . vertex . DefaultVertexFormats ; 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . client . event . ModelBakeEvent ; 
 + import net . minecraftforge . client . model . IModel ; 
 + import net . minecraftforge . client . model . ModelLoaderRegistry ; 
 + import net . minecraftforge . fml . common . Mod ; 
 + import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 + import net . minecraftforge . fml . relauncher . Side ; 
 + 
 + @ Mod ( modid = BlockstateRetextureTest . MODID , name = " BlockstateRetextureTest " , version = BlockstateRetextureTest . VERSION , acceptableRemoteVersions = " * " ) 
 + public class BlockstateRetextureTest 
 + { 
 + public static final String MODID = " forge _ blockstate _ retexture _ test " ; 
 + public static final String VERSION = " 1 . 0 " ; 
 + static final boolean ENABLED = false ; 
 + 
 + private static ResourceLocation fenceName = new ResourceLocation ( " minecraft " , " fence " ) ; 
 + private static ModelResourceLocation fenceLocation = new ModelResourceLocation ( fenceName , " east = true , north = false , south = false , west = true " ) ; 
 + private static ResourceLocation stoneName = new ResourceLocation ( " minecraft " , " stone " ) ; 
 + private static ModelResourceLocation stoneLocation = new ModelResourceLocation ( stoneName , " normal " ) ; 
 + 
 + private static Function < ResourceLocation , TextureAtlasSprite > textureGetter = location - > 
 + { 
 + assert location ! = null ; 
 + return Minecraft . getMinecraft ( ) . getTextureMapBlocks ( ) . getAtlasSprite ( location . toString ( ) ) ; 
 + } ; 
 + 
 + @ Mod . EventBusSubscriber ( modid = MODID , value = Side . CLIENT ) 
 + public static class ClientEvents 
 + { 
 + @ SubscribeEvent 
 + public static void onModelBakeEvent ( ModelBakeEvent event ) 
 + { 
 + if ( ! ENABLED ) 
 + { 
 + return ; 
 + } 
 + 
 + IModel fence = ModelLoaderRegistry . getModelOrLogError ( fenceLocation , " Error loading fence model " ) ; 
 + IModel stone = ModelLoaderRegistry . getModelOrLogError ( stoneLocation , " Error loading planks model " ) ; 
 + IModel retexturedFence = fence . retexture ( ImmutableMap . of ( " texture " , " blocks / log _ oak " ) ) ; 
 + IModel retexturedStone = stone . retexture ( ImmutableMap . of ( " all " , " blocks / diamond _ block " ) ) ; 
 + 
 + IBakedModel fenceResult = retexturedFence . bake ( fence . getDefaultState ( ) , DefaultVertexFormats . BLOCK , textureGetter ) ; 
 + IBakedModel stoneResult = retexturedStone . bake ( stone . getDefaultState ( ) , DefaultVertexFormats . BLOCK , textureGetter ) ; 
 + 
 + event . getModelRegistry ( ) . putObject ( fenceLocation , fenceResult ) ; 
 + event . getModelRegistry ( ) . putObject ( stoneLocation , stoneResult ) ; 
 + } 
 + } 
 + }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 index ca6ab30 . . 46f1c46 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / b3d / B3DLoader . java 
 @ @ - 30 , 8 + 30 , 10 @ @ import net . minecraftforge . client . model . IColoredBakedQuad . ColoredBakedQuad ; 
 import net . minecraftforge . client . model . ICustomModelLoader ; 
 import net . minecraftforge . client . model . IFlexibleBakedModel ; 
 import net . minecraftforge . client . model . IModel ; 
 + import net . minecraftforge . client . model . IModelCustomData ; 
 import net . minecraftforge . client . model . IModelPart ; 
 import net . minecraftforge . client . model . IModelState ; 
 + import net . minecraftforge . client . model . IRetexturableModel ; 
 import net . minecraftforge . client . model . ISmartBlockModel ; 
 import net . minecraftforge . client . model . ISmartItemModel ; 
 import net . minecraftforge . client . model . ModelLoader ; 
 @ @ - 56 , 11 + 58 , 14 @ @ import org . apache . logging . log4j . Level ; 
 import org . lwjgl . BufferUtils ; 
 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Predicate ; 
 import com . google . common . cache . CacheBuilder ; 
 import com . google . common . cache . CacheLoader ; 
 import com . google . common . cache . LoadingCache ; 
 + import com . google . common . collect . Collections2 ; 
 import com . google . common . collect . ImmutableList ; 
 import com . google . common . collect . ImmutableMap ; 
 + import com . google . common . collect . Maps ; 
 import com . google . common . collect . Multimap ; 
 
 / * 
 @ @ - 238 , 24 + 243 , 28 @ @ public class B3DLoader implements ICustomModelLoader 
 public static TRSRTransformation getNodeMatrix ( Animation animation , Node < ? > node , int frame ) 
 { 
 TRSRTransformation ret = TRSRTransformation . identity ( ) ; 
 - if ( node . getParent ( ) ! = null ) 
 - { 
 - TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 - ret = ret . compose ( pm ) ; 
 - } 
 Key key = null ; 
 if ( animation ! = null ) key = animation . getKeys ( ) . get ( frame , node ) ; 
 else if ( key = = null & & node . getAnimation ( ) ! = null & & node . getAnimation ( ) ! = animation ) key = node . getAnimation ( ) . getKeys ( ) . get ( frame , node ) ; 
 - if ( key = = null ) 
 - { 
 - FMLLog . severe ( " invalid key index : " + frame ) ; 
 - } 
 - else 
 + if ( key ! = null ) 
 { 
 + Node < ? > parent = node . getParent ( ) ; 
 + if ( parent ! = null ) 
 + { 
 + TRSRTransformation pm = cache . getUnchecked ( Triple . < Animation , Node < ? > , Integer > of ( animation , node . getParent ( ) , frame ) ) ; 
 + ret = ret . compose ( pm ) ; 
 + ret = ret . compose ( new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) ) ; 
 + } 
 ret = ret . compose ( new TRSRTransformation ( key . getPos ( ) , key . getRot ( ) , key . getScale ( ) , null ) ) ; 
 Matrix4f rm = new TRSRTransformation ( node . getPos ( ) , node . getRot ( ) , node . getScale ( ) , null ) . getMatrix ( ) ; 
 rm . invert ( ) ; 
 ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + if ( parent ! = null ) 
 + { 
 + rm = new TRSRTransformation ( parent . getPos ( ) , parent . getRot ( ) , parent . getScale ( ) , null ) . getMatrix ( ) ; 
 + rm . invert ( ) ; 
 + ret = ret . compose ( new TRSRTransformation ( rm ) ) ; 
 + } 
 } 
 return ret ; 
 } 
 @ @ - 305 , 14 + 314 , 14 @ @ public class B3DLoader implements ICustomModelLoader 
 } 
 } 
 
 - public static class Wrapper extends PartWrapper < Mesh > implements IModel 
 + public static class Wrapper extends PartWrapper < Mesh > implements IRetexturableModel , IModelCustomData 
 { 
 private final ResourceLocation location ; 
 private final ImmutableMap < String , ResourceLocation > textures ; 
 
 public Wrapper ( ResourceLocation location , List < Texture > textures , B3DModel . Node < Mesh > mesh ) 
 { 
 - this ( location , buildTextures ( location , textures ) , mesh ) ; 
 + this ( location , buildTextures ( textures ) , mesh ) ; 
 } 
 
 public Wrapper ( ResourceLocation location , ImmutableMap < String , ResourceLocation > textures , B3DModel . Node < Mesh > mesh ) 
 @ @ - 322 , 19 + 331 , 24 @ @ public class B3DLoader implements ICustomModelLoader 
 this . textures = textures ; 
 } 
 
 - private static ImmutableMap < String , ResourceLocation > buildTextures ( ResourceLocation location , List < Texture > textures ) 
 + private static ImmutableMap < String , ResourceLocation > buildTextures ( List < Texture > textures ) 
 { 
 ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 
 for ( Texture t : textures ) 
 { 
 String path = t . getPath ( ) ; 
 - if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 - builder . put ( t . getPath ( ) , new ResourceLocation ( location . getResourceDomain ( ) , path ) ) ; 
 + builder . put ( path , new ResourceLocation ( getLocation ( path ) ) ) ; 
 } 
 return builder . build ( ) ; 
 } 
 
 + private static String getLocation ( String path ) 
 + { 
 + if ( path . endsWith ( " . png " ) ) path = path . substring ( 0 , path . length ( ) - " . png " . length ( ) ) ; 
 + return path ; 
 + } 
 + 
 public Collection < ResourceLocation > getDependencies ( ) 
 { 
 / / no dependencies for in - file models 
 @ @ - 344 , 17 + 358 , 32 @ @ public class B3DLoader implements ICustomModelLoader 
 
 public Collection < ResourceLocation > getTextures ( ) 
 { 
 - return textures . values ( ) ; 
 + return Collections2 . filter ( textures . values ( ) , new Predicate < ResourceLocation > ( ) 
 + { 
 + public boolean apply ( ResourceLocation loc ) 
 + { 
 + return ! loc . getResourcePath ( ) . startsWith ( " # " ) ; 
 + } 
 + } ) ; 
 } 
 
 public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > bakedTextureGetter ) 
 { 
 ImmutableMap . Builder < String , TextureAtlasSprite > builder = ImmutableMap . builder ( ) ; 
 - for ( String path : textures . keySet ( ) ) 
 + TextureAtlasSprite missing = bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : textures . entrySet ( ) ) 
 { 
 - builder . put ( path , bakedTextureGetter . apply ( textures . get ( path ) ) ) ; 
 + if ( e . getValue ( ) . getResourcePath ( ) . startsWith ( " # " ) ) 
 + { 
 + FMLLog . severe ( " unresolved texture ' % s ' for b3d model ' % s ' " , e . getValue ( ) . getResourcePath ( ) , location ) ; 
 + builder . put ( e . getKey ( ) , missing ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e . getKey ( ) , bakedTextureGetter . apply ( e . getValue ( ) ) ) ; 
 + } 
 } 
 - builder . put ( " missingno " , bakedTextureGetter . apply ( new ResourceLocation ( " missingno " ) ) ) ; 
 + builder . put ( " missingno " , missing ) ; 
 return new BakedWrapper ( this , state , format , builder . build ( ) ) ; 
 } 
 
 @ @ - 396 , 6 + 425 , 35 @ @ public class B3DLoader implements ICustomModelLoader 
 else if ( ! location . equals ( other . location ) ) return false ; 
 return true ; 
 } 
 + 
 + @ Override 
 + public IModel retexture ( ImmutableMap < String , String > textures ) 
 + { 
 + ImmutableMap . Builder < String , ResourceLocation > builder = ImmutableMap . builder ( ) ; 
 + for ( Map . Entry < String , ResourceLocation > e : this . textures . entrySet ( ) ) 
 + { 
 + String path = e . getKey ( ) ; 
 + String loc = getLocation ( path ) ; 
 + if ( textures . containsKey ( loc ) ) 
 + { 
 + String newLoc = textures . get ( loc ) ; 
 + if ( newLoc = = null ) newLoc = getLocation ( path ) ; 
 + builder . put ( e . getKey ( ) , new ResourceLocation ( newLoc ) ) ; 
 + } 
 + else 
 + { 
 + builder . put ( e ) ; 
 + } 
 + } 
 + return new Wrapper ( location , builder . build ( ) , getNode ( ) ) ; 
 + } 
 + 
 + @ Override 
 + public IModel process ( ImmutableMap < String , String > customData ) 
 + { 
 + / / TODO keyframe 
 + return null ; 
 + } 
 } 
 
 private static class BakedWrapper implements IFlexibleBakedModel , ISmartBlockModel , ISmartItemModel 
 @ @ - 454 , 9 + 512 , 10 @ @ public class B3DLoader implements ICustomModelLoader 
 for ( Face f : faces ) 
 { 
 buf . clear ( ) ; 
 - List < Texture > textures = f . getBrush ( ) . getTextures ( ) ; 
 + List < Texture > textures = null ; 
 + if ( f . getBrush ( ) ! = null ) textures = f . getBrush ( ) . getTextures ( ) ; 
 TextureAtlasSprite sprite ; 
 - if ( textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 + if ( textures = = null | | textures . isEmpty ( ) ) sprite = this . textures . get ( " missingno " ) ; 
 else if ( textures . get ( 0 ) = = B3DModel . Texture . White ) sprite = ModelLoader . White . instance ; 
 else sprite = this . textures . get ( textures . get ( 0 ) . getPath ( ) ) ; 
 putVertexData ( f . getV1 ( ) , sprite ) ; 
 diff - - git a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 index 3fe304b . . 2358b93 100644 
 - - - a / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / ModelLoaderRegistryDebug . java 
 @ @ - 64 , 14 + 64 , 9 @ @ public class ModelLoaderRegistryDebug 
 
 private void clientPreInit ( ) 
 { 
 - / / ModelLoaderRegistry . registerLoader ( DummyModelLoader . instance ) ; 
 B3DLoader . instance . addDomain ( MODID . toLowerCase ( ) ) ; 
 - / / ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , " forgedebug : dummymodel " ) ; 
 - String modelLocation = MODID . toLowerCase ( ) + " : untitled2 . b3d " ; 
 - ModelBakery . addVariantName ( Item . getItemFromBlock ( CustomModelBlock . instance ) , modelLocation ) ; 
 Item item = Item . getItemFromBlock ( CustomModelBlock . instance ) ; 
 - ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( modelLocation , " inventory " ) ) ; 
 - / / ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( " forgedebug : dummymodel " , " inventory " ) ) ; 
 + ModelLoader . setCustomModelResourceLocation ( item , 0 , new ModelResourceLocation ( MODID . toLowerCase ( ) + " : " + CustomModelBlock . name , " inventory " ) ) ; 
 } 
 
 public static class CustomModelBlock extends Block 
 @ @ - 100 , 9 + 95 , 7 @ @ public class ModelLoaderRegistryDebug 
 @ Override 
 public IBlockState getExtendedState ( IBlockState state , IBlockAccess world , BlockPos pos ) 
 { 
 - IModel model = ModelLoaderRegistry . getModel ( new ResourceLocation ( MODID . toLowerCase ( ) , " block / untitled2 . b3d " ) ) ; 
 - B3DLoader . B3DState defaultState = ( ( B3DLoader . Wrapper ) model ) . getDefaultState ( ) ; 
 - B3DLoader . B3DState newState = new B3DLoader . B3DState ( defaultState . getAnimation ( ) , counter ) ; 
 + B3DLoader . B3DState newState = new B3DLoader . B3DState ( null , counter ) ; 
 return ( ( IExtendedBlockState ) this . state . getBaseState ( ) ) . withProperty ( B3DLoader . B3DFrameProperty . instance , newState ) ; 
 } 
 
 @ @ - 120 , 106 + 113 , 4 @ @ public class ModelLoaderRegistryDebug 
 return false ; 
 } 
 } 
 - 
 - public static class DummyModelLoader implements ICustomModelLoader 
 - { 
 - public static final DummyModelLoader instance = new DummyModelLoader ( ) ; 
 - public static final ResourceLocation dummyTexture = new ResourceLocation ( " minecraft : blocks / dirt " ) ; 
 - 
 - public boolean accepts ( ResourceLocation modelLocation ) 
 - { 
 - return modelLocation . getResourceDomain ( ) . equals ( " forgedebug " ) & & modelLocation . getResourcePath ( ) . contains ( " dummymodel " ) ; 
 - } 
 - 
 - public IModel loadModel ( ResourceLocation model ) 
 - { 
 - return DummyModel . instance ; 
 - } 
 - 
 - public static enum DummyModel implements IModel 
 - { 
 - instance ; 
 - 
 - public Collection < ResourceLocation > getDependencies ( ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - public Collection < ResourceLocation > getTextures ( ) 
 - { 
 - return Collections . singletonList ( dummyTexture ) ; 
 - } 
 - 
 - public IFlexibleBakedModel bake ( IModelState state , VertexFormat format , Function < ResourceLocation , TextureAtlasSprite > textures ) 
 - { 
 - return new DummyBakedModel ( textures . apply ( dummyTexture ) ) ; 
 - } 
 - 
 - public IModelState getDefaultState ( ) 
 - { 
 - return ModelRotation . X0 _ Y0 ; 
 - } 
 - } 
 - 
 - public static class DummyBakedModel implements IFlexibleBakedModel 
 - { 
 - private final TextureAtlasSprite texture ; 
 - 
 - public DummyBakedModel ( TextureAtlasSprite texture ) 
 - { 
 - this . texture = texture ; 
 - } 
 - 
 - public List < BakedQuad > getFaceQuads ( EnumFacing side ) 
 - { 
 - return Collections . emptyList ( ) ; 
 - } 
 - 
 - private int [ ] vertexToInts ( float x , float y , float z , int color , float u , float v ) 
 - { 
 - return new int [ ] { 
 - Float . floatToRawIntBits ( x ) , 
 - Float . floatToRawIntBits ( y ) , 
 - Float . floatToRawIntBits ( z ) , 
 - color , 
 - Float . floatToRawIntBits ( texture . getInterpolatedU ( u ) ) , 
 - Float . floatToRawIntBits ( texture . getInterpolatedV ( v ) ) , 
 - 0 
 - } ; 
 - } 
 - 
 - public List < BakedQuad > getGeneralQuads ( ) 
 - { 
 - List < BakedQuad > ret = new ArrayList < BakedQuad > ( ) ; 
 - / / 1 half - way rotated quad looking UP 
 - ret . add ( new BakedQuad ( Ints . concat ( 
 - vertexToInts ( 0 , . 5f , . 5f , - 1 , 0 , 0 ) , 
 - vertexToInts ( . 5f , . 5f , 1 , - 1 , 0 , 16 ) , 
 - vertexToInts ( 1 , . 5f , . 5f , - 1 , 16 , 16 ) , 
 - vertexToInts ( . 5f , . 5f , 0 , - 1 , 16 , 0 ) 
 - ) , - 1 , EnumFacing . UP ) ) ; 
 - return ret ; 
 - } 
 - 
 - public boolean isGui3d ( ) { return true ; } 
 - 
 - public boolean isAmbientOcclusion ( ) { return true ; } 
 - 
 - public boolean isBuiltInRenderer ( ) { return false ; } 
 - 
 - public TextureAtlasSprite getTexture ( ) { return this . texture ; } 
 - 
 - public ItemCameraTransforms getItemCameraTransforms ( ) 
 - { 
 - return ItemCameraTransforms . DEFAULT ; 
 - } 
 - 
 - public VertexFormat getFormat ( ) 
 - { 
 - return Attributes . DEFAULT _ BAKED _ FORMAT ; 
 - } 
 - } 
 - 
 - public void onResourceManagerReload ( IResourceManager resourceManager ) { } 
 - } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 index 1ebdfc8 . . c6db8d8 100644 
 - - - a / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 + + + b / src / test / resources / assets / forgedebugmodelloaderregistry / blockstates / CustomModelBlock . json 
 @ @ - 1 , 5 + 1 , 18 @ @ 
 { 
 + " forge _ marker " : 1 , 
 + " defaults " : { 
 + " textures " : { 
 + " # texture " : " forgedebugmodelloaderregistry : texture " , 
 + " # chest " : " entity / chest / normal " 
 + } , 
 + " model " : " forgedebugmodelloaderregistry : chest . b3d " 
 + } , 
 " variants " : { 
 - " normal " : { " model " : " forgedebugmodelloaderregistry : untitled2 . b3d " } 
 + " normal " : { 
 + " dummy " : " " 
 + } , 
 + " inventory " : { 
 + " dummy " : " " 
 + } 
 } 
 } 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d 
 new file mode 100644 
 index 0000000 . . b070d7a 
 Binary files / dev / null and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / chest . b3d differ 
 diff - - git a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d 
 index 14e9c4d . . 8f4bd09 100644 
 Binary files a / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d and b / src / test / resources / assets / forgedebugmodelloaderregistry / models / block / untitled2 . b3d differ
