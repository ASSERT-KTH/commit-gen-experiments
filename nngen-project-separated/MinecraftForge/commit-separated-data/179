BLEU SCORE: 0.039297526283216276

TEST MSG: Work on publishing tasks .
GENERATED MSG: Added FG2 buildscript + updated for Gradle 2 . 4

TEST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 8f4afe0 . . 688185b 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 35 , 3 + 35 , 4 @ @ changelog . txt <nl> / logs / <nl> <nl> / . project <nl> + gradle . properties <nl> diff - - git a / build . gradle b / build . gradle <nl> index cacd8c9 . . e324da7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 9 , 9 + 9 , 19 @ @ buildscript { <nl> classpath ' net . minecraftforge . gradle : ForgeGradle : 3 . + ' <nl> } <nl> } <nl> + import groovy . json . JsonSlurper <nl> + import groovy . json . JsonBuilder <nl> + import java . text . SimpleDateFormat <nl> + import java . util . Date <nl> + import java . security . MessageDigest <nl> + import net . minecraftforge . gradle . common . task . SignJar <nl> + import org . apache . tools . ant . filters . ReplaceTokens <nl> + import de . undercouch . gradle . tasks . download . Download <nl> <nl> plugins { <nl> id ' net . minecrell . licenser ' version ' 0 . 4 ' <nl> + id ' org . ajoberstar . grgit ' version ' 2 . 3 . 0 ' <nl> + id ' de . undercouch . download ' version ' 3 . 3 . 0 ' <nl> } <nl> apply plugin : ' eclipse ' <nl> <nl> @ @ - 50 , 12 + 60 , 14 @ @ project ( ' : clean ' ) { <nl> } <nl> } <nl> <nl> - project ( ' : forge ' ) { <nl> + project ( ' : forge ' ) { <nl> evaluationDependsOn ( ' : clean ' ) <nl> apply plugin : ' java - library ' <nl> + apply plugin : ' maven - publish ' <nl> apply plugin : ' eclipse ' <nl> apply plugin : ' net . minecraftforge . gradle . forgedev . patcher ' <nl> apply plugin : ' net . minecrell . licenser ' <nl> + apply plugin : ' de . undercouch . download ' <nl> <nl> compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . <nl> <nl> @ @ - 98 , 6 + 110 , 8 @ @ project ( ' : forge ' ) { <nl> } <nl> mcVersion = ' 1 . 13 ' <nl> } <nl> + group = ' net . minecraftforge ' <nl> + version = getVersionFromJava ( file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) , patcher . mcVersion ) <nl> applyPatches { <nl> canonicalizeAccess true <nl> canonicalizeWhitespace true <nl> @ @ - 105 , 7 + 119 , 10 @ @ project ( ' : forge ' ) { <nl> } <nl> dependencies { <nl> api ' net . minecraft : client : 1 . 13 : extra ' <nl> - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype <nl> + api ' org . ow2 . asm : asm : 6 . 2 ' <nl> + api ' org . ow2 . asm : asm - commons : 6 . 2 ' <nl> + api ' org . ow2 . asm : asm - tree : 6 . 2 ' <nl> + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . + ' <nl> api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' <nl> api ' net . minecraftforge : eventbus : 0 . 1 + : service ' <nl> api ' net . minecraftforge : forgespi : 0 . 1 + ' <nl> @ @ - 117 , 27 + 134 , 6 @ @ project ( ' : forge ' ) { <nl> api ' java3d : vecmath : 1 . 5 . 2 ' <nl> } <nl> <nl> - / * <nl> - configurations { <nl> - ecj <nl> - } <nl> - <nl> - dependencies { <nl> - ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' <nl> - } <nl> - * / <nl> - <nl> - / * Forge compiles , no longer need eclipse compiler <nl> - compileJava { <nl> - options . fork = true <nl> - options . failOnError = false <nl> - options . forkOptions . with { <nl> - executable = ' java ' <nl> - jvmArgs = [ ' - classpath ' , project . configurations . ecj . asPath , ' org . eclipse . jdt . internal . compiler . batch . Main ' , ' - nowarn ' , ' - proceedOnError ' , ' - preserveAllLocals ' , ' - parameters ' ] <nl> - } <nl> - } <nl> - * / <nl> - <nl> task runclient ( type : JavaExec , dependsOn : [ " : forge : downloadAssets " , " : forge : extractNatives " ] ) { <nl> doFirst { <nl> mkdir ' runclient ' <nl> @ @ - 148 , 7 + 144 , 7 @ @ project ( ' : forge ' ) { <nl> into " $ buildDir / classes / java / main " <nl> } <nl> } <nl> - / / jvmArgs = [ ' - verbose : class ' ] <nl> + / / jvmArgs = [ ' - verbose : class ' ] <nl> classpath sourceSets . main . runtimeClasspath <nl> main ' net . minecraftforge . fml . LaunchTesting ' <nl> systemProperties = [ <nl> @ @ - 174 , 6 + 170 , 284 @ @ project ( ' : forge ' ) { <nl> workingDir ' runserver ' <nl> } <nl> <nl> + task ciWriteBuildNumber < < { <nl> + def file = file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) <nl> + def bn = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 <nl> + def outfile = ' ' <nl> + <nl> + file . eachLine { String s - > <nl> + if ( s . matches ( ' ^ public static final int buildVersion = [ \ \ d ] + ; \ $ ' ) ) <nl> + s = " public static final int buildVersion = $ { bn } ; " <nl> + if ( s . matches ( ' ^ public static final String mcVersion = " [ ^ \ \ " ] + " ; ' ) ) <nl> + s = " public static final String mcVersion = \ " $ { patcher . mcVersion } \ " ; " <nl> + outfile + = ( s + ' \ n ' ) <nl> + } <nl> + file . write ( outfile ) <nl> + } <nl> + <nl> + <nl> + def extraTxts = [ <nl> + rootProject . file ( ' CREDITS . txt ' ) , <nl> + rootProject . file ( ' LICENSE . txt ' ) <nl> + ] <nl> + / * TODO : Changelog <nl> + if ( project . hasProperty ( ' forgeJenkinsPass ' ) ) <nl> + extraTxts + = changelog <nl> + * / <nl> + <nl> + task downloadCrowdin ( ) { <nl> + ext { <nl> + output = file ( ' build / crowdin _ raw . zip ' ) <nl> + update = file ( ' build / crowdin . json ' ) <nl> + id = ' minecraft - forge ' <nl> + } <nl> + onlyIf { <nl> + project . hasProperty ( ' crowdinKey ' ) & & ! project . gradle . startParameter . isOffline ( ) <nl> + } <nl> + doLast { <nl> + download { <nl> + src " https : / / api . crowdin . com / api / project / $ { id } / export ? key = $ { project . crowdinKey } & json " <nl> + dest update <nl> + overwrite true <nl> + } <nl> + if ( ! update . text . contains ( ' success ' ) ) { <nl> + throw new RuntimeException ( " Crowdin export failed , see $ { update } for more info " ) <nl> + } <nl> + download { <nl> + src " https : / / api . crowdin . com / api / project / $ { id } / download / all . zip ? key = $ { project . crowdinKey } " <nl> + dest output <nl> + overwrite true <nl> + } <nl> + } <nl> + } <nl> + <nl> + task crowdin ( type : Zip ) { <nl> + dependsOn downloadCrowdin <nl> + baseName = project . name <nl> + version = project . version <nl> + classifier = ' crowdin ' <nl> + destinationDir = file ( ' build / distributions ' ) <nl> + from ( zipTree ( downloadCrowdin . output ) ) { <nl> + eachFile { / / Tired of waiting for crowdin API , rename things myself . Remove once crowdin stops being dumb <nl> + if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { <nl> + it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' <nl> + it . path = ' assets / forge / lang / ' + it . name <nl> + } <nl> + } <nl> + exclude { it . isDirectory ( ) } <nl> + rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . <nl> + exclude ' * * / * . lang ' / / Pre - 1 . 13 format <nl> + } <nl> + } <nl> + <nl> + task launcherJson ( ) { <nl> + ext { <nl> + output = file ( ' build / libs / version . json ' ) <nl> + vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) <nl> + timestamp = dateToIso8601 ( new Date ( ) ) <nl> + comment = [ <nl> + " Please do not automate the download and installation of Forge . " , <nl> + " Our efforts are supported by ads from the download page . " , <nl> + " If you MUST automate this , please consider supporting the project through https : / / www . patreon . com / LexManos / " <nl> + ] <nl> + } <nl> + inputs . file vanilla <nl> + outputs . file output <nl> + doLast { <nl> + def json _ vanilla = new JsonSlurper ( ) . parseText ( vanilla . text ) <nl> + def json = [ <nl> + _ comment _ : comment , <nl> + id : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , <nl> + time : timestamp , <nl> + releaseTime : timestamp , <nl> + type : ' release ' , <nl> + mainClass : ' cpw . mods . modlauncher . Launcher ' , <nl> + inheritsFrom : patcher . mcVersion , <nl> + logging : [ ] , <nl> + arguments : [ <nl> + game : json _ vanilla . arguments . game + [ ' - - launchTarget ' , ' fmlclient ' ] <nl> + ] , <nl> + libraries : [ <nl> + [ name : " $ { project . group } : $ { project . name } : $ { project . version } " ] <nl> + ] <nl> + ] <nl> + <nl> + / / TODO : There should be a way to mark this in the config declaration . . . <nl> + def forge = [ <nl> + ' cpw . mods : modlauncher ' , <nl> + ' org . ow2 . asm : asm ' , <nl> + ' org . ow2 . asm : asm - commons ' , <nl> + ' org . ow2 . asm : asm - tree ' , <nl> + ' net . minecraftforge : accesstransformers ' , <nl> + ' net . minecraftforge : eventbus ' , <nl> + ' net . minecraftforge : forgespi ' , <nl> + ' net . minecraftforge : coremods ' , <nl> + ' com . electronwill . night - config : core ' , <nl> + ' com . electronwill . night - config : toml ' , <nl> + ' org . jline : jline ' , <nl> + ' org . apache . maven : maven - artifact ' , <nl> + ' java3d : vecmath ' <nl> + ] <nl> + def mojang = [ ] <nl> + <nl> + project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { <nl> + def art = [ <nl> + group : it . moduleVersion . id . group , <nl> + name : it . moduleVersion . id . name , <nl> + version : it . moduleVersion . id . version , <nl> + classifier : it . classifier , <nl> + extension : it . extension , <nl> + file : it . file <nl> + ] <nl> + def key = art . group + ' : ' + art . name <nl> + if ( forge . contains ( key ) | | mojang . contains ( key ) ) { <nl> + def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " <nl> + def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " <nl> + if ( art . classifier ! = null ) <nl> + path + = " - $ { art . classifier } " <nl> + path + = " . $ { art . extension } " <nl> + def lib = [ <nl> + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , <nl> + downloads : [ <nl> + path : path , <nl> + url : url + path , <nl> + sha1 : sha1 ( art . file ) , <nl> + size : art . file . length ( ) <nl> + ] <nl> + ] <nl> + json . libraries . add ( lib ) <nl> + } <nl> + } <nl> + <nl> + output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> + } <nl> + } <nl> + <nl> + task installerJson ( ) { <nl> + ext { <nl> + output = file ( ' build / libs / installer . json ' ) <nl> + } <nl> + dependsOn launcherJson <nl> + inputs . file launcherJson . output <nl> + outputs . file output <nl> + doLast { <nl> + def json = [ <nl> + install : [ <nl> + _ comment _ : launcherJson . comment , <nl> + profileName : project . name , <nl> + version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , <nl> + json : ' / version . json ' , <nl> + logo : ' / big _ logo . png ' <nl> + ] <nl> + ] <nl> + output . text = new JsonBuilder ( json ) . toPrettyString ( ) <nl> + } <nl> + } <nl> + <nl> + universalJar { <nl> + dependsOn launcherJson <nl> + from ( launcherJson . output ) { <nl> + rename { ' version . json ' } <nl> + } <nl> + from extraTxts <nl> + <nl> + / * TODO : Annotation Cache ? need to talk to cpw about his new design . <nl> + from ( fixAnnotationsJson ) { <nl> + into ' META - INF ' <nl> + } <nl> + dependsOn fixAnnotationsJson <nl> + * / <nl> + <nl> + / / add crowdin locales <nl> + from { crowdin . getDidWork ( ) ? zipTree ( crowdin . archivePath ) : null } <nl> + dependsOn crowdin <nl> + <nl> + doFirst { <nl> + def json = new JsonSlurper ( ) . parseText ( launcherJson . output . text ) <nl> + def classpath = new StringBuilder ( ) <nl> + json . libraries . each { lib - > <nl> + if ( ! lib . name . startsWith ( " $ { project . group } : $ { project . name } " ) ) { <nl> + / / group : artifact : version [ : classifier ] [ @ extension ] <nl> + def split = lib . name . split ( ' : ' ) <nl> + def ext = ' jar ' <nl> + if ( split [ split . length - 1 ] . indexOf ( ' @ ' ) ! = - 1 ) { <nl> + ext = split [ split . length - 1 ] . split ( ' @ ' ) [ 1 ] <nl> + split [ split . length - 1 ] = split [ split . length - 1 ] . split ( ' @ ' ) [ 0 ] <nl> + } <nl> + <nl> + def group = split [ 0 ] . replace ( ' . ' , ' / ' ) <nl> + def artifact = split [ 1 ] <nl> + def version = split [ 2 ] <nl> + def classifier = split . length > 3 ? split [ 3 ] : null <nl> + <nl> + if ( classifier = = null ) <nl> + classpath + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } . $ { ext } " <nl> + else <nl> + classpath + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } - $ { classifier } . $ { ext } " <nl> + } <nl> + } <nl> + classpath + = " minecraft _ server . $ { patcher . mcVersion } . jar " <nl> + <nl> + manifest . attributes ( [ <nl> + " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , <nl> + " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , <nl> + " Class - Path " : classpath . toString ( ) <nl> + ] ) <nl> + } <nl> + } <nl> + <nl> + task signUniversal ( type : SignJar , dependsOn : universalJar ) { <nl> + onlyIf { <nl> + project . hasProperty ( ' jarsigner ' ) <nl> + } <nl> + <nl> + def jarsigner = [ : ] ; <nl> + <nl> + if ( project . hasProperty ( ' jarsigner ' ) ) <nl> + jarsigner = project . jarsigner ; <nl> + <nl> + alias = ' forge ' <nl> + storePass = jarsigner . storepass <nl> + keyPass = jarsigner . keypass <nl> + keyStore = jarsigner . keystore <nl> + inputFile = universalJar . archivePath <nl> + outputFile = universalJar . archivePath <nl> + } <nl> + publish . dependsOn signUniversal <nl> + build . dependsOn signUniversal <nl> + <nl> + / * <nl> + installer { <nl> + dependsOn signUniversal <nl> + classifier = ' installer ' <nl> + from extraTxts <nl> + from " src / main / resources / forge _ logo . png " <nl> + from " src / main / resources / url . png " <nl> + rename " forge _ logo \ \ . png " , " big _ logo . png " <nl> + } <nl> + * / <nl> + <nl> + task makeMdk ( type : Zip ) { <nl> + baseName = project . name <nl> + classifier = ' mdk ' <nl> + version = project . version <nl> + destinationDir = file ( ' build / distributions ' ) <nl> + <nl> + from rootProject . file ( ' gradlew ' ) <nl> + from rootProject . file ( ' gradlew . bat ' ) <nl> + from extraTxts <nl> + from ( rootProject . file ( ' gradle / ' ) ) { <nl> + into ( ' gradle / ' ) <nl> + } <nl> + from ( rootProject . file ( ' mdk / ' ) ) { <nl> + / * filter ( ReplaceTokens , tokens : [ <nl> + VERSION : project . version <nl> + ] ) <nl> + * / <nl> + rename ' gitignore \ \ . txt ' , ' . gitignore ' <nl> + } <nl> + } <nl> + <nl> license { <nl> header = file ( " $ rootDir / LICENSE - header . txt " ) <nl> <nl> @ @ - 193 , 7 + 467 , 101 @ @ project ( ' : forge ' ) { <nl> files = files ( " $ rootDir / src / test / java " ) <nl> } <nl> } <nl> + } <nl> + <nl> + publishing { <nl> + publications { <nl> + mavenJava ( MavenPublication ) { <nl> + artifact universalJar <nl> + / / TODO : changelog <nl> + / / TODO : installer <nl> + / / TODO : installer - win <nl> + artifact makeMdk <nl> + artifact userdevJar <nl> + <nl> + pom { <nl> + name = ' forge ' <nl> + description = ' Modifactions to Minecraft to enable mod developers . ' <nl> + url = ' https : / / github . com / MinecraftForge / MinecraftForge ' <nl> + <nl> + scm { <nl> + url = ' https : / / github . com / MinecraftForge / MinecraftForge ' <nl> + connection = ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' <nl> + developerConnection = ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' <nl> + } <nl> + <nl> + issueManagement { <nl> + system = ' github ' <nl> + url = ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' <nl> + } <nl> + <nl> + licenses { <nl> + license { <nl> + name = ' LGPL 2 . 1 ' <nl> + url = ' https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 13 - pre / LICENSE . txt ' <nl> + distribution = ' repo ' <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + repositories { <nl> + maven { <nl> + if ( project . hasProperty ( ' forgeMavenPassword ' ) ) { <nl> + credentials { <nl> + username project . properties . forgeMavenUser <nl> + password project . properties . forgeMavenPassword <nl> + } <nl> + url ' http : / / files . minecraftforge . net / maven / manage / upload ' <nl> + } else { <nl> + url ' file : / / ' + rootProject . file ( ' repo ' ) . getAbsolutePath ( ) <nl> + } <nl> + } <nl> + } <nl> + } <nl> + } <nl> + <nl> + def getVersionFromJava ( def file , def mcver ) { <nl> + def major , minor , revision , build = ' 0 ' <nl> + def prefix = ' public static final int ' <nl> + file . eachLine { String s - > <nl> + s = s . trim ( ) <nl> + if ( s . startsWith ( prefix ) ) { <nl> + s = s . substring ( prefix . length ( ) , s . length ( ) - 1 ) <nl> + s = s . replace ( ' = ' , ' ' ) . replace ( ' Version ' , ' ' ) . replaceAll ( ' + ' , ' ' ) . trim ( ) <nl> + String [ ] pts = s . split ( ' ' ) <nl> + if ( pts [ 0 ] . equals ( ' major ' ) ) major = pts [ pts . length - 1 ] <nl> + else if ( pts [ 0 ] = = ' minor ' ) minor = pts [ pts . length - 1 ] <nl> + else if ( pts [ 0 ] = = ' revision ' ) revision = pts [ pts . length - 1 ] <nl> + } <nl> + } <nl> + build = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 <nl> + String branch = null <nl> + if ( ! System . getenv ( ) . containsKey ( ' GIT _ BRANCH ' ) ) { <nl> + branch = grgit . branch . current ( ) . name <nl> + } else { <nl> + branch = System . getenv ( ' GIT _ BRANCH ' ) <nl> + branch = branch . substring ( branch . lastIndexOf ( ' / ' ) + 1 ) <nl> + } <nl> + def out = " $ { mcver . replace ( ' - ' , ' _ ' ) } - $ major . $ minor . $ revision . $ build " <nl> + if ( branch & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = mcver & & branch ! = mcver + ' . 0 ' ) { <nl> + if ( ! ( branch . endsWith ( ' . x ' ) & & mcver . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) <nl> + out + = " - $ branch " <nl> + } <nl> + return out <nl> + } <nl> + <nl> + def dateToIso8601 ( date ) { <nl> + def format = new SimpleDateFormat ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) <nl> + def result = format . format ( date ) <nl> + return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] <nl> + } <nl> + def sha1 ( file ) { <nl> + MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; <nl> + file . eachByte 4096 , { bytes , size - > <nl> + md . update ( bytes , 0 , size ) ; <nl> } <nl> + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; <nl> } <nl> <nl> / / evaluationDependsOnChildren ( ) <nl> diff - - git a / mdk / build . gradle b / mdk / build . gradle <nl> index deaf2d9 . . 6dead0b 100644 <nl> - - - a / mdk / build . gradle <nl> + + + b / mdk / build . gradle <nl> @ @ - 4 , 7 + 4 , 7 @ @ buildscript { <nl> maven { url = " http : / / files . minecraftforge . net / maven " } <nl> } <nl> dependencies { <nl> - classpath ' net . minecraftforge . gradle : ForgeGradle : 2 . 3 - SNAPSHOT ' <nl> + classpath ' net . minecraftforge . gradle : ForgeGradle : 3 . + ' <nl> } <nl> } <nl> apply plugin : ' net . minecraftforge . gradle . forge '
NEAREST DIFF (one line): diff - - git a / . gitignore b / . gitignore <nl> index 5c737dd . . f99fd0d 100644 <nl> - - - a / . gitignore <nl> + + + b / . gitignore <nl> @ @ - 12 , 13 + 12 , 14 @ @ <nl> / . gradle <nl> <nl> # occupational hazards <nl> - / eclipse / <nl> + / projects / <nl> / repo / <nl> / buildSrc <nl> <nl> # Patch rejects <nl> * . rej <nl> / patches - / <nl> + <nl> # FML changelog <nl> changelog . txt <nl> / patches _ old / <nl> diff - - git a / build . gradle b / build . gradle <nl> index 14c5723 . . f77c1c7 100644 <nl> - - - a / build . gradle <nl> + + + b / build . gradle <nl> @ @ - 1 , 11 + 1 , 6 @ @ <nl> buildscript { <nl> repositories { <nl> - maven { <nl> - name = " central _ mirrior " <nl> - url = " http : / / uk . maven . org / maven2 " <nl> - } <nl> mavenCentral ( ) <nl> - mavenLocal ( ) <nl> maven { <nl> name = " forge " <nl> url = " http : / / files . minecraftforge . net / maven " <nl> @ @ - 16 , 71 + 11 , 184 @ @ buildscript { <nl> } <nl> } <nl> dependencies { <nl> - classpath ' net . minecraftforge . gradle : ForgeGradle : 1 . 2 - SNAPSHOT ' <nl> + classpath ' net . minecraftforge . gradle : ForgeGradle : 2 . 0 - SNAPSHOT ' <nl> } <nl> } <nl> <nl> - configurations { <nl> - deployJars <nl> - } <nl> + apply plugin : " maven " <nl> + apply plugin : " net . minecraftforge . gradle . patcher " <nl> + apply plugin : " net . minecraftforge . gradle . launch4j " <nl> <nl> - import static net . minecraftforge . gradle . dev . ForgeDevPlugin . * <nl> - <nl> - apply plugin : ' maven ' <nl> - apply plugin : ' forgedev ' <nl> + minecraft { <nl> + version = " 1 . 8 " <nl> + / / mappings = ' stable _ 16 ' <nl> + mappings = " snapshot _ nodoc _ 20141130 " <nl> + workspaceDir = " projects " <nl> + versionJson = " fml / jsons / 1 . 8 - dev . json " <nl> + buildUserdev = true <nl> + buildInstaller = true <nl> + installerVersion = " 1 . 4 " <nl> <nl> - repositories { <nl> - maven { <nl> - name = " central _ mirrior " <nl> - url = " http : / / uk . maven . org / maven2 " <nl> + def common = { <nl> + patchPrefixOriginal " . . / src - base / minecraft " <nl> + patchPrefixChanged " . . / src - work / minecraft " <nl> + mainClassClient " net . minecraft . launchwrapper . Launch " <nl> + tweakClassClient " net . minecraftforge . fml . common . launcher . FMLTweaker " <nl> + mainClassServer " net . minecraft . launchwrapper . Launch " <nl> + tweakClassServer " net . minecraftforge . fml . common . launcher . FMLServerTweaker " <nl> } <nl> - mavenLocal ( ) <nl> - flatDir { <nl> - name " fileRepo " <nl> - dirs " repo " <nl> + <nl> + projects { <nl> + fml { <nl> + rootDir ' fml ' <nl> + patchDir " fml / patches / minecraft " <nl> + patchAfter " clean " <nl> + genPatchesFrom " clean " <nl> + <nl> + with common <nl> + } <nl> + forge { <nl> + rootDir " . " <nl> + patchDir " patches / minecraft " <nl> + patchAfter " fml " <nl> + genPatchesFrom " fml " <nl> + <nl> + with common <nl> + } <nl> } <nl> } <nl> <nl> - minecraft { <nl> - version = ' 1 . 8 ' <nl> - mcpVersion = ' 9 . 10 ' <nl> - mappings = ' snapshot _ nodoc _ 20141130 ' <nl> - fmlDir = projectDir . getAbsolutePath ( ) + " / fml " ; <nl> - mainClass = ' net . minecraftforge . fml . relauncher . ServerLaunchWrapper ' <nl> - tweakClass = ' net . minecraftforge . fml . common . launcher . FMLTweaker ' <nl> - installerVersion = " 1 . 4 " <nl> + group = ' net . minecraftforge ' <nl> + version = getVersionFromJava ( file ( " src / main / java / net / minecraftforge / common / ForgeVersion . java " ) ) <nl> + <nl> + extractFmlSources { exclude " * * / SideOnly . java " , " * * / Side . java " } <nl> + <nl> + genGradleProjects { addTestCompileDep " junit : junit : 4 . 12 " } <nl> + <nl> + processJson { <nl> + releaseJson = " fml / jsons / 1 . 8 - rel . json " <nl> + addReplacements ( [ <nl> + " @ minecraft _ version @ " : project . minecraft . version , <nl> + " @ version @ " : project . version , <nl> + " @ project @ " : " forge " , <nl> + " @ artifact @ " : " net . minecraftforge : forge : $ { project . version } " , <nl> + " @ universal _ jar @ " : { outputJar . archiveName } , <nl> + " @ timestamp @ " : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , <nl> + ] ) <nl> } <nl> <nl> - group = ' net . minecraftforge ' <nl> - version = getVersionFromJava ( getProject ( ) , ' src / main / java / net / minecraftforge / common / ForgeVersion . java ' ) <nl> + task changelog ( type : JenkinsChangelog ) { <nl> <nl> - jenkins { <nl> - job = ' minecraftforge ' <nl> + / / skip if there is no forge jenkins pass <nl> + onlyIf { project . hasProperty ( ' forgeJenkinsPass ' ) } <nl> + <nl> + outputs . upToDateWhen { false } / / never up to date <nl> + serverRoot = " http : / / ci . jenkins . minecraftforge . net / " <nl> + jobName = " minecraftforge " <nl> + targetBuild = System . env [ ' BUILD _ NUMBER ' ] ? : 0 ; <nl> + authName = " console _ script " <nl> + authPassword = project . hasProperty ( ' forgeJenkinsPass ' ) ? project . getProperty ( ' forgeJenkinsPass ' ) : " " ; <nl> + output = " build / distributions / $ { project . name } - $ { project . version } - changelog . txt " <nl> + } <nl> + <nl> + task crowdin ( type : CrowdinDownload ) { <nl> + output = " build / crowdin . zip " <nl> + projectId = ' minecraft - forge ' <nl> + extract = false / / we wanna keep it as a zip . not extract it to a folder named " crowdin . zip " <nl> + <nl> + / / task auomatically skips if this is null <nl> + if ( project . hasProperty ( ' crowdinKey ' ) ) <nl> + apiKey = project . crowdinKey <nl> } <nl> <nl> - / / crowdin stuff <nl> - if ( project . hasProperty ( " crowdinKey " ) ) <nl> - tasks . getLocalizations . apiKey = project . crowdinKey <nl> + def extraTxts = [ <nl> + changelog , / / yeah we can do thi , because gradle and groovy are awesome <nl> + " fml / LICENSE - fml . txt " , <nl> + " fml / CREDITS - fml . txt " , <nl> + " MinecraftForge - Credits . txt " , <nl> + " MinecraftForge - License . txt " , <nl> + " Paulscode SoundSystem CodecIBXM License . txt " , <nl> + " Paulscode IBXM Library License . txt " <nl> + ] <nl> <nl> + outputJar { <nl> + classifier = ' universal ' <nl> + from extraTxts <nl> + <nl> + / / add crowdin locales <nl> + from { crowdin . getDidWork ( ) ? zipTree ( crowdin ) : null } <nl> + dependsOn ' crowdin ' <nl> + <nl> + manifest . attributes ( [ <nl> + " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , <nl> + " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , <nl> + " Class - Path " : getServerClasspath ( file ( " fml / jsons / 1 . 8 - rel . json " ) ) <nl> + ] ) <nl> + } <nl> + <nl> + installer { <nl> + classifier = ' installer ' <nl> + from extraTxts <nl> + from " src / main / resources / forge _ logo . png " <nl> + rename " forge _ logo \ \ . png " , " big _ logo . png " <nl> + } <nl> + <nl> + task signUniversal ( type : SignJar , dependsOn : ' outputJar ' ) { <nl> + onlyIf { <nl> + project . hasProperty ( ' jarsigner ' ) <nl> + } <nl> + <nl> + def jarsigner = [ : ] ; <nl> + <nl> + if ( project . hasProperty ( ' jarsigner ' ) ) <nl> + jarsigner = project . jarsigner ; <nl> + <nl> + alias = ' forge ' <nl> + exclude " paulscode / * * " <nl> + storePass = jarsigner . storepass <nl> + keyPass = jarsigner . keypass <nl> + keyStore = jarsigner . keystore <nl> + inputFile = outputJar . archivePath <nl> + outputFile = outputJar . archivePath <nl> + } <nl> + uploadArchives . dependsOn signUniversal <nl> + build . dependsOn signUniversal <nl> + <nl> + / / launch4j <nl> <nl> launch4j { <nl> + jar = installer . archivePath . canonicalPath <nl> + outfile = file ( " build / distributions / $ { project . name } - $ { project . version } - installer - win . exe " ) . canonicalPath <nl> + icon = file ( ' icon . ico ' ) . canonicalPath <nl> + manifest = file ( ' l4jManifest . xml ' ) . canonicalPath <nl> jreMinVersion = ' 1 . 6 . 0 ' <nl> + initialHeapPercent = 5 ; <nl> + maxHeapPercent = 100 ; <nl> + } <nl> + tasks . generateXmlConfig . dependsOn installer <nl> + tasks . build . dependsOn ' launch4j ' <nl> + <nl> + / / MAVEN <nl> + <nl> + artifacts { <nl> + archives changelog . output <nl> + archives file ( " build / distributions / $ { project . name } - $ { project . version } - installer - win . exe " ) <nl> } <nl> <nl> uploadArchives { <nl> - repositories { <nl> - add getProject ( ) . repositories . mavenLocal ( ) <nl> - } <nl> repositories . mavenDeployer { <nl> - configuration = configurations . deployJars <nl> <nl> - if ( project . hasProperty ( " filesmaven " ) ) { <nl> - logger . info ( ' Publishing to files server ' ) <nl> - repository ( url : project . filesmaven . url ) { <nl> - authentication ( userName : project . filesmaven . username , privateKey : project . filesmaven . key ) <nl> + dependsOn ' build ' <nl> + <nl> + if ( project . hasProperty ( ' forgeMavenPass ' ) ) <nl> + { <nl> + repository ( url : " http : / / files . minecraftforge . net / maven / manage / upload " ) { <nl> + authentication ( userName : " forge " , project . getProperty ( ' forgeMavenPass ' ) ) / / the elvis operator . look it up . <nl> } <nl> - } else { <nl> - logger . info ( ' Publishing to repo folder ' ) <nl> + } <nl> + else <nl> + { <nl> + / / local repo folder . Might wanna juset use gradle install if you wanans end it to maven - local <nl> repository ( url : ' file : / / localhost / ' + project . file ( ' repo ' ) . getAbsolutePath ( ) ) <nl> } <nl> <nl> @ @ - 88 , 49 + 196 , 120 @ @ uploadArchives { <nl> groupId = project . group <nl> version = project . version <nl> artifactId = project . archivesBaseName <nl> - } <nl> - pom . project { <nl> - name project . archivesBaseName <nl> - packaging ' jar ' <nl> - description ' Minecraft Forge API ' <nl> - url ' https : / / github . com / MinecraftForge / MinecraftForge ' <nl> - <nl> - scm { <nl> + project { <nl> + name project . archivesBaseName <nl> + packaging ' jar ' <nl> + description ' Minecraft Forge API ' <nl> url ' https : / / github . com / MinecraftForge / MinecraftForge ' <nl> - connection ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' <nl> - developerConnection ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' <nl> - } <nl> <nl> - issueManagement { <nl> - system ' github ' <nl> - url ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' <nl> - } <nl> - <nl> - licenses { <nl> - license { <nl> - name ' Forge Public License ' <nl> - url ' https : / / raw . github . com / MinecraftForge / MinecraftForge / master / MinecraftForge - License . txt ' <nl> - distribution ' repo ' <nl> + scm { <nl> + url ' https : / / github . com / MinecraftForge / MinecraftForge ' <nl> + connection ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' <nl> + developerConnection ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' <nl> } <nl> - } <nl> <nl> - developers { <nl> - developer { <nl> - id ' cpw ' <nl> - name ' cpw ' <nl> - roles { role ' developer ' } <nl> + issueManagement { <nl> + system ' github ' <nl> + url ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' <nl> } <nl> - developer { <nl> - id ' LexManos ' <nl> - name ' Lex Manos ' <nl> - roles { role ' developer ' } <nl> + <nl> + licenses { <nl> + license { <nl> + name ' Forge Public License ' <nl> + url ' https : / / raw . github . com / MinecraftForge / MinecraftForge / master / MinecraftForge - License . txt ' <nl> + distribution ' repo ' <nl> + } <nl> } <nl> - developer { <nl> - id ' AbrarSyed ' <nl> - name ' Abrar Syed ' <nl> - roles { role ' contributor ' } <nl> + <nl> + developers { <nl> + developer { <nl> + id ' cpw ' <nl> + name ' cpw ' <nl> + roles { role ' developer ' } <nl> + } <nl> + developer { <nl> + id ' LexManos ' <nl> + name ' Lex Manos ' <nl> + roles { role ' developer ' } <nl> + } <nl> + developer { <nl> + id ' AbrarSyed ' <nl> + name ' Abrar Syed ' <nl> + roles { role ' contributor ' } <nl> + } <nl> } <nl> } <nl> } <nl> } <nl> } <nl> + <nl> + / / HELPER METHODS <nl> + <nl> + import groovy . json . JsonSlurper ; <nl> + <nl> + String getServerClasspath ( File file ) <nl> + { <nl> + def node = new JsonSlurper ( ) . parse ( file ) ; <nl> + def out = new StringBuilder ( ) <nl> + node . versionInfo . libraries . each { lib - > <nl> + if ( lib . serverreq ) <nl> + { <nl> + / / group : artifact : version <nl> + def split = lib . name . split ( ' : ' ) <nl> + def group = split [ 0 ] . replace ( ' . ' , ' / ' ) <nl> + def artifact = split [ 1 ] <nl> + def version = split [ 2 ] <nl> + out + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } . jar " <nl> + } <nl> + } <nl> + out + = " minecraft _ server . $ { minecraft . version } . jar " <nl> + <nl> + return out . toString ( ) ; <nl> + } <nl> + <nl> + String getVersionFromJava ( File file ) <nl> + { <nl> + String major = " 0 " ; <nl> + String minor = " 0 " ; <nl> + String revision = " 0 " ; <nl> + String build = " 0 " ; <nl> + <nl> + String prefix = " public static final int " ; <nl> + file . eachLine { String s - > <nl> + s = s . trim ( ) ; <nl> + if ( s . startsWith ( prefix ) ) <nl> + { <nl> + s = s . substring ( prefix . length ( ) , s . length ( ) - 1 ) ; <nl> + s = s . replace ( ' = ' , ' ' ) . replace ( " Version " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; <nl> + String [ ] pts = s . split ( " " ) ; <nl> + <nl> + if ( pts [ 0 ] . equals ( " major " ) ) major = pts [ pts . length - 1 ] ; <nl> + else if ( pts [ 0 ] = = " minor " ) minor = pts [ pts . length - 1 ] ; <nl> + else if ( pts [ 0 ] = = " revision " ) revision = pts [ pts . length - 1 ] ; <nl> + } <nl> + } <nl> + <nl> + if ( System . getenv ( ) . containsKey ( " BUILD _ NUMBER " ) ) <nl> + { <nl> + build = System . getenv ( " BUILD _ NUMBER " ) ; <nl> + } <nl> + <nl> + String branch = null ; <nl> + if ( ! System . getenv ( ) . containsKey ( " GIT _ BRANCH " ) ) <nl> + { <nl> + / / TODO : use grgit <nl> + branch = " git rev - parse - - abbrev - ref HEAD " . execute ( ) . text . trim ( ) <nl> + } <nl> + else <nl> + { <nl> + branch = System . getenv ( " GIT _ BRANCH " ) ; <nl> + branch = branch . substring ( branch . lastIndexOf ( ' / ' ) + 1 ) ; <nl> + } <nl> + <nl> + def out = " $ { minecraft . version . replace ( ' - ' , ' _ ' ) } - $ major . $ minor . $ revision . $ build " <nl> + <nl> + if ( branch & & branch ! = ' master ' & & branch ! = ' HEAD ' ) <nl> + out + = " - $ branch " <nl> + <nl> + return out ; <nl> + } <nl> diff - - git a / gradle / wrapper / gradle - wrapper . jar b / gradle / wrapper / gradle - wrapper . jar <nl> new file mode 100644 <nl> index 0000000 . . b5166da <nl> Binary files / dev / null and b / gradle / wrapper / gradle - wrapper . jar differ <nl> diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties <nl> new file mode 100644 <nl> index 0000000 . . 7822bea <nl> - - - / dev / null <nl> + + + b / gradle / wrapper / gradle - wrapper . properties <nl> @ @ - 0 , 0 + 1 , 6 @ @ <nl> + # Sat May 16 19 : 56 : 41 CDT 2015 <nl> + distributionBase = GRADLE _ USER _ HOME <nl> + distributionPath = wrapper / dists <nl> + zipStoreBase = GRADLE _ USER _ HOME <nl> + zipStorePath = wrapper / dists <nl> + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 4 - bin . zip <nl> diff - - git a / gradlew b / gradlew <nl> new file mode 100755 <nl> index 0000000 . . 91a7e26 <nl> - - - / dev / null <nl> + + + b / gradlew <nl> @ @ - 0 , 0 + 1 , 164 @ @ <nl> + # ! / usr / bin / env bash <nl> + <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + # # <nl> + # # Gradle start up script for UN * X <nl> + # # <nl> + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + <nl> + # Add default JVM options here . You can also use JAVA _ OPTS and GRADLE _ OPTS to pass JVM options to this script . <nl> + DEFAULT _ JVM _ OPTS = " " <nl> + <nl> + APP _ NAME = " Gradle " <nl> + APP _ BASE _ NAME = ` basename " $ 0 " ` <nl> + <nl> + # Use the maximum available , or set MAX _ FD ! = - 1 to use that value . <nl> + MAX _ FD = " maximum " <nl> + <nl> + warn ( ) { <nl> + echo " $ * " <nl> + } <nl> + <nl> + die ( ) { <nl> + echo <nl> + echo " $ * " <nl> + echo <nl> + exit 1 <nl> + } <nl> + <nl> + # OS specific support ( must be ' true ' or ' false ' ) . <nl> + cygwin = false <nl> + msys = false <nl> + darwin = false <nl> + case " ` uname ` " in <nl> + CYGWIN * ) <nl> + cygwin = true <nl> + ; ; <nl> + Darwin * ) <nl> + darwin = true <nl> + ; ; <nl> + MINGW * ) <nl> + msys = true <nl> + ; ; <nl> + esac <nl> + <nl> + # For Cygwin , ensure paths are in UNIX format before anything is touched . <nl> + if $ cygwin ; then <nl> + [ - n " $ JAVA _ HOME " ] & & JAVA _ HOME = ` cygpath - - unix " $ JAVA _ HOME " ` <nl> + fi <nl> + <nl> + # Attempt to set APP _ HOME <nl> + # Resolve links : $ 0 may be a link <nl> + PRG = " $ 0 " <nl> + # Need this for relative symlinks . <nl> + while [ - h " $ PRG " ] ; do <nl> + ls = ` ls - ld " $ PRG " ` <nl> + link = ` expr " $ ls " : ' . * - > \ ( . * \ ) $ ' ` <nl> + if expr " $ link " : ' / . * ' > / dev / null ; then <nl> + PRG = " $ link " <nl> + else <nl> + PRG = ` dirname " $ PRG " ` " / $ link " <nl> + fi <nl> + done <nl> + SAVED = " ` pwd ` " <nl> + cd " ` dirname \ " $ PRG \ " ` / " > & - <nl> + APP _ HOME = " ` pwd - P ` " <nl> + cd " $ SAVED " > & - <nl> + <nl> + CLASSPATH = $ APP _ HOME / gradle / wrapper / gradle - wrapper . jar <nl> + <nl> + # Determine the Java command to use to start the JVM . <nl> + if [ - n " $ JAVA _ HOME " ] ; then <nl> + if [ - x " $ JAVA _ HOME / jre / sh / java " ] ; then <nl> + # IBM ' s JDK on AIX uses strange locations for the executables <nl> + JAVACMD = " $ JAVA _ HOME / jre / sh / java " <nl> + else <nl> + JAVACMD = " $ JAVA _ HOME / bin / java " <nl> + fi <nl> + if [ ! - x " $ JAVACMD " ] ; then <nl> + die " ERROR : JAVA _ HOME is set to an invalid directory : $ JAVA _ HOME <nl> + <nl> + Please set the JAVA _ HOME variable in your environment to match the <nl> + location of your Java installation . " <nl> + fi <nl> + else <nl> + JAVACMD = " java " <nl> + which java > / dev / null 2 > & 1 | | die " ERROR : JAVA _ HOME is not set and no ' java ' command could be found in your PATH . <nl> + <nl> + Please set the JAVA _ HOME variable in your environment to match the <nl> + location of your Java installation . " <nl> + fi <nl> + <nl> + # Increase the maximum file descriptors if we can . <nl> + if [ " $ cygwin " = " false " - a " $ darwin " = " false " ] ; then <nl> + MAX _ FD _ LIMIT = ` ulimit - H - n ` <nl> + if [ $ ? - eq 0 ] ; then <nl> + if [ " $ MAX _ FD " = " maximum " - o " $ MAX _ FD " = " max " ] ; then <nl> + MAX _ FD = " $ MAX _ FD _ LIMIT " <nl> + fi <nl> + ulimit - n $ MAX _ FD <nl> + if [ $ ? - ne 0 ] ; then <nl> + warn " Could not set maximum file descriptor limit : $ MAX _ FD " <nl> + fi <nl> + else <nl> + warn " Could not query maximum file descriptor limit : $ MAX _ FD _ LIMIT " <nl> + fi <nl> + fi <nl> + <nl> + # For Darwin , add options to specify how the application appears in the dock <nl> + if $ darwin ; then <nl> + GRADLE _ OPTS = " $ GRADLE _ OPTS \ " - Xdock : name = $ APP _ NAME \ " \ " - Xdock : icon = $ APP _ HOME / media / gradle . icns \ " " <nl> + fi <nl> + <nl> + # For Cygwin , switch paths to Windows format before running java <nl> + if $ cygwin ; then <nl> + APP _ HOME = ` cygpath - - path - - mixed " $ APP _ HOME " ` <nl> + CLASSPATH = ` cygpath - - path - - mixed " $ CLASSPATH " ` <nl> + <nl> + # We build the pattern for arguments to be converted via cygpath <nl> + ROOTDIRSRAW = ` find - L / - maxdepth 1 - mindepth 1 - type d 2 > / dev / null ` <nl> + SEP = " " <nl> + for dir in $ ROOTDIRSRAW ; do <nl> + ROOTDIRS = " $ ROOTDIRS $ SEP $ dir " <nl> + SEP = " | " <nl> + done <nl> + OURCYGPATTERN = " ( ^ ( $ ROOTDIRS ) ) " <nl> + # Add a user - defined pattern to the cygpath arguments <nl> + if [ " $ GRADLE _ CYGPATTERN " ! = " " ] ; then <nl> + OURCYGPATTERN = " $ OURCYGPATTERN | ( $ GRADLE _ CYGPATTERN ) " <nl> + fi <nl> + # Now convert the arguments - kludge to limit ourselves to / bin / sh <nl> + i = 0 <nl> + for arg in " $ @ " ; do <nl> + CHECK = ` echo " $ arg " | egrep - c " $ OURCYGPATTERN " - ` <nl> + CHECK2 = ` echo " $ arg " | egrep - c " ^ - " ` # # # Determine if an option <nl> + <nl> + if [ $ CHECK - ne 0 ] & & [ $ CHECK2 - eq 0 ] ; then # # # Added a condition <nl> + eval ` echo args $ i ` = ` cygpath - - path - - ignore - - mixed " $ arg " ` <nl> + else <nl> + eval ` echo args $ i ` = " \ " $ arg \ " " <nl> + fi <nl> + i = $ ( ( i + 1 ) ) <nl> + done <nl> + case $ i in <nl> + ( 0 ) set - - ; ; <nl> + ( 1 ) set - - " $ args0 " ; ; <nl> + ( 2 ) set - - " $ args0 " " $ args1 " ; ; <nl> + ( 3 ) set - - " $ args0 " " $ args1 " " $ args2 " ; ; <nl> + ( 4 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " ; ; <nl> + ( 5 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " ; ; <nl> + ( 6 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " ; ; <nl> + ( 7 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " ; ; <nl> + ( 8 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " " $ args7 " ; ; <nl> + ( 9 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " " $ args7 " " $ args8 " ; ; <nl> + esac <nl> + fi <nl> + <nl> + # Split up the JVM _ OPTS And GRADLE _ OPTS values into an array , following the shell quoting and substitution rules <nl> + function splitJvmOpts ( ) { <nl> + JVM _ OPTS = ( " $ @ " ) <nl> + } <nl> + eval splitJvmOpts $ DEFAULT _ JVM _ OPTS $ JAVA _ OPTS $ GRADLE _ OPTS <nl> + JVM _ OPTS [ $ { # JVM _ OPTS [ * ] } ] = " - Dorg . gradle . appname = $ APP _ BASE _ NAME " <nl> + <nl> + exec " $ JAVACMD " " $ { JVM _ OPTS [ @ ] } " - classpath " $ CLASSPATH " org . gradle . wrapper . GradleWrapperMain " $ @ " <nl> diff - - git a / gradlew . bat b / gradlew . bat <nl> new file mode 100644 <nl> index 0000000 . . 8a0b282 <nl> - - - / dev / null <nl> + + + b / gradlew . bat <nl> @ @ - 0 , 0 + 1 , 90 @ @ <nl> + @ if " % DEBUG % " = = " " @ echo off <nl> + @ rem # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + @ rem <nl> + @ rem Gradle startup script for Windows <nl> + @ rem <nl> + @ rem # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # <nl> + <nl> + @ rem Set local scope for the variables with windows NT shell <nl> + if " % OS % " = = " Windows _ NT " setlocal <nl> + <nl> + @ rem Add default JVM options here . You can also use JAVA _ OPTS and GRADLE _ OPTS to pass JVM options to this script . <nl> + set DEFAULT _ JVM _ OPTS = <nl> + <nl> + set DIRNAME = % ~ dp0 <nl> + if " % DIRNAME % " = = " " set DIRNAME = . <nl> + set APP _ BASE _ NAME = % ~ n0 <nl> + set APP _ HOME = % DIRNAME % <nl> + <nl> + @ rem Find java . exe <nl> + if defined JAVA _ HOME goto findJavaFromJavaHome <nl> + <nl> + set JAVA _ EXE = java . exe <nl> + % JAVA _ EXE % - version > NUL 2 > & 1 <nl> + if " % ERRORLEVEL % " = = " 0 " goto init <nl> + <nl> + echo . <nl> + echo ERROR : JAVA _ HOME is not set and no ' java ' command could be found in your PATH . <nl> + echo . <nl> + echo Please set the JAVA _ HOME variable in your environment to match the <nl> + echo location of your Java installation . <nl> + <nl> + goto fail <nl> + <nl> + : findJavaFromJavaHome <nl> + set JAVA _ HOME = % JAVA _ HOME : " = % <nl> + set JAVA _ EXE = % JAVA _ HOME % / bin / java . exe <nl> + <nl> + if exist " % JAVA _ EXE % " goto init <nl> + <nl> + echo . <nl> + echo ERROR : JAVA _ HOME is set to an invalid directory : % JAVA _ HOME % <nl> + echo . <nl> + echo Please set the JAVA _ HOME variable in your environment to match the <nl> + echo location of your Java installation . <nl> + <nl> + goto fail <nl> + <nl> + : init <nl> + @ rem Get command - line arguments , handling Windowz variants <nl> + <nl> + if not " % OS % " = = " Windows _ NT " goto win9xME _ args <nl> + if " % @ eval [ 2 + 2 ] " = = " 4 " goto 4NT _ args <nl> + <nl> + : win9xME _ args <nl> + @ rem Slurp the command line arguments . <nl> + set CMD _ LINE _ ARGS = <nl> + set _ SKIP = 2 <nl> + <nl> + : win9xME _ args _ slurp <nl> + if " x % ~ 1 " = = " x " goto execute <nl> + <nl> + set CMD _ LINE _ ARGS = % * <nl> + goto execute <nl> + <nl> + : 4NT _ args <nl> + @ rem Get arguments from the 4NT Shell from JP Software <nl> + set CMD _ LINE _ ARGS = % $ <nl> + <nl> + : execute <nl> + @ rem Setup the command line <nl> + <nl> + set CLASSPATH = % APP _ HOME % \ gradle \ wrapper \ gradle - wrapper . jar <nl> + <nl> + @ rem Execute Gradle <nl> + " % JAVA _ EXE % " % DEFAULT _ JVM _ OPTS % % JAVA _ OPTS % % GRADLE _ OPTS % " - Dorg . gradle . appname = % APP _ BASE _ NAME % " - classpath " % CLASSPATH % " org . gradle . wrapper . GradleWrapperMain % CMD _ LINE _ ARGS % <nl> + <nl> + : end <nl> + @ rem End local scope for the variables with windows NT shell <nl> + if " % ERRORLEVEL % " = = " 0 " goto mainEnd <nl> + <nl> + : fail <nl> + rem Set variable GRADLE _ EXIT _ CONSOLE if you need the _ script _ return code instead of <nl> + rem the _ cmd . exe / c _ return code ! <nl> + if not " " = = " % GRADLE _ EXIT _ CONSOLE % " exit 1 <nl> + exit / b 1 <nl> + <nl> + : mainEnd <nl> + if " % OS % " = = " Windows _ NT " endlocal <nl> + <nl> + : omega <nl> diff - - git a / icon . ico b / icon . ico <nl> new file mode 100644 <nl> index 0000000 . . f47d8ec <nl> Binary files / dev / null and b / icon . ico differ <nl> diff - - git a / l4jManifest . xml b / l4jManifest . xml <nl> new file mode 100644 <nl> index 0000000 . . a57d63e <nl> - - - / dev / null <nl> + + + b / l4jManifest . xml <nl> @ @ - 0 , 0 + 1 , 26 @ @ <nl> + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " yes " ? > <nl> + < assembly xmlns = " urn : schemas - microsoft - com : asm . v1 " manifestVersion = " 1 . 0 " > <nl> + < compatibility xmlns = " urn : schemas - microsoft - com : compatibility . v1 " > <nl> + < application > <nl> + < ! - - The ID below indicates application support for Windows Vista - - > <nl> + < supportedOS Id = " { e2011457 - 1546 - 43c5 - a5fe - 008deee3d3f0 } " / > <nl> + < ! - - The ID below indicates application support for Windows 7 - - > <nl> + < supportedOS Id = " { 35138b9a - 5d96 - 4fbd - 8e2d - a2440225f93a } " / > <nl> + < ! - - The ID below indicates application support for Windows 8 - - > <nl> + < supportedOS Id = " { 4a2f28e3 - 53b9 - 4441 - ba9c - d69d4a4a6e38 } " / > <nl> + < ! - - The ID below indicates application support for Windows 8 . 1 - - > <nl> + < supportedOS Id = " { 1f676c76 - 80e1 - 4239 - 95bb - 83d0f6d0da78 } " / > <nl> + < ! - - The ID below indicates application supprort for Windows 10 - - > <nl> + < supportedOS Id = " { 8e0f7a12 - bfb3 - 4fe8 - b9a5 - 48fd50a15a9a } " / > <nl> + < / application > <nl> + < / compatibility > <nl> + <nl> + < ! - - following stuff is so the EXE doesnt ask for admin access - - > <nl> + < trustInfo xmlns = " urn : schemas - microsoft - com : asm . v3 " > <nl> + < security > <nl> + < requestedPrivileges > <nl> + < requestedExecutionLevel level = " asInvoker " uiAccess = " false " / > <nl> + < / requestedPrivileges > <nl> + < / security > <nl> + < / trustInfo > <nl> + < / assembly >

TEST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 8f4afe0 . . 688185b 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 35 , 3 + 35 , 4 @ @ changelog . txt 
 / logs / 
 
 / . project 
 + gradle . properties 
 diff - - git a / build . gradle b / build . gradle 
 index cacd8c9 . . e324da7 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 9 , 9 + 9 , 19 @ @ buildscript { 
 classpath ' net . minecraftforge . gradle : ForgeGradle : 3 . + ' 
 } 
 } 
 + import groovy . json . JsonSlurper 
 + import groovy . json . JsonBuilder 
 + import java . text . SimpleDateFormat 
 + import java . util . Date 
 + import java . security . MessageDigest 
 + import net . minecraftforge . gradle . common . task . SignJar 
 + import org . apache . tools . ant . filters . ReplaceTokens 
 + import de . undercouch . gradle . tasks . download . Download 
 
 plugins { 
 id ' net . minecrell . licenser ' version ' 0 . 4 ' 
 + id ' org . ajoberstar . grgit ' version ' 2 . 3 . 0 ' 
 + id ' de . undercouch . download ' version ' 3 . 3 . 0 ' 
 } 
 apply plugin : ' eclipse ' 
 
 @ @ - 50 , 12 + 60 , 14 @ @ project ( ' : clean ' ) { 
 } 
 } 
 
 - project ( ' : forge ' ) { 
 + project ( ' : forge ' ) { 
 evaluationDependsOn ( ' : clean ' ) 
 apply plugin : ' java - library ' 
 + apply plugin : ' maven - publish ' 
 apply plugin : ' eclipse ' 
 apply plugin : ' net . minecraftforge . gradle . forgedev . patcher ' 
 apply plugin : ' net . minecrell . licenser ' 
 + apply plugin : ' de . undercouch . download ' 
 
 compileJava . sourceCompatibility = compileJava . targetCompatibility = sourceCompatibility = targetCompatibility = ' 1 . 8 ' / / Need this here so eclipse task generates correctly . 
 
 @ @ - 98 , 6 + 110 , 8 @ @ project ( ' : forge ' ) { 
 } 
 mcVersion = ' 1 . 13 ' 
 } 
 + group = ' net . minecraftforge ' 
 + version = getVersionFromJava ( file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) , patcher . mcVersion ) 
 applyPatches { 
 canonicalizeAccess true 
 canonicalizeWhitespace true 
 @ @ - 105 , 7 + 119 , 10 @ @ project ( ' : forge ' ) { 
 } 
 dependencies { 
 api ' net . minecraft : client : 1 . 13 : extra ' 
 - api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . 4 + ' / / Pinned until cpw fixes getCommonSupertype 
 + api ' org . ow2 . asm : asm : 6 . 2 ' 
 + api ' org . ow2 . asm : asm - commons : 6 . 2 ' 
 + api ' org . ow2 . asm : asm - tree : 6 . 2 ' 
 + api ' cpw . mods : modlauncher : 0 . 1 . 0 - rc . + ' 
 api ' net . minecraftforge : accesstransformers : 0 . 10 + : shadowed ' 
 api ' net . minecraftforge : eventbus : 0 . 1 + : service ' 
 api ' net . minecraftforge : forgespi : 0 . 1 + ' 
 @ @ - 117 , 27 + 134 , 6 @ @ project ( ' : forge ' ) { 
 api ' java3d : vecmath : 1 . 5 . 2 ' 
 } 
 
 - / * 
 - configurations { 
 - ecj 
 - } 
 - 
 - dependencies { 
 - ecj ' org . eclipse . jdt . core . compiler : ecj : 4 . 6 . 1 ' 
 - } 
 - * / 
 - 
 - / * Forge compiles , no longer need eclipse compiler 
 - compileJava { 
 - options . fork = true 
 - options . failOnError = false 
 - options . forkOptions . with { 
 - executable = ' java ' 
 - jvmArgs = [ ' - classpath ' , project . configurations . ecj . asPath , ' org . eclipse . jdt . internal . compiler . batch . Main ' , ' - nowarn ' , ' - proceedOnError ' , ' - preserveAllLocals ' , ' - parameters ' ] 
 - } 
 - } 
 - * / 
 - 
 task runclient ( type : JavaExec , dependsOn : [ " : forge : downloadAssets " , " : forge : extractNatives " ] ) { 
 doFirst { 
 mkdir ' runclient ' 
 @ @ - 148 , 7 + 144 , 7 @ @ project ( ' : forge ' ) { 
 into " $ buildDir / classes / java / main " 
 } 
 } 
 - / / jvmArgs = [ ' - verbose : class ' ] 
 + / / jvmArgs = [ ' - verbose : class ' ] 
 classpath sourceSets . main . runtimeClasspath 
 main ' net . minecraftforge . fml . LaunchTesting ' 
 systemProperties = [ 
 @ @ - 174 , 6 + 170 , 284 @ @ project ( ' : forge ' ) { 
 workingDir ' runserver ' 
 } 
 
 + task ciWriteBuildNumber < < { 
 + def file = file ( " $ rootDir / src / main / java / net / minecraftforge / common / ForgeVersion . java " ) 
 + def bn = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 
 + def outfile = ' ' 
 + 
 + file . eachLine { String s - > 
 + if ( s . matches ( ' ^ public static final int buildVersion = [ \ \ d ] + ; \ $ ' ) ) 
 + s = " public static final int buildVersion = $ { bn } ; " 
 + if ( s . matches ( ' ^ public static final String mcVersion = " [ ^ \ \ " ] + " ; ' ) ) 
 + s = " public static final String mcVersion = \ " $ { patcher . mcVersion } \ " ; " 
 + outfile + = ( s + ' \ n ' ) 
 + } 
 + file . write ( outfile ) 
 + } 
 + 
 + 
 + def extraTxts = [ 
 + rootProject . file ( ' CREDITS . txt ' ) , 
 + rootProject . file ( ' LICENSE . txt ' ) 
 + ] 
 + / * TODO : Changelog 
 + if ( project . hasProperty ( ' forgeJenkinsPass ' ) ) 
 + extraTxts + = changelog 
 + * / 
 + 
 + task downloadCrowdin ( ) { 
 + ext { 
 + output = file ( ' build / crowdin _ raw . zip ' ) 
 + update = file ( ' build / crowdin . json ' ) 
 + id = ' minecraft - forge ' 
 + } 
 + onlyIf { 
 + project . hasProperty ( ' crowdinKey ' ) & & ! project . gradle . startParameter . isOffline ( ) 
 + } 
 + doLast { 
 + download { 
 + src " https : / / api . crowdin . com / api / project / $ { id } / export ? key = $ { project . crowdinKey } & json " 
 + dest update 
 + overwrite true 
 + } 
 + if ( ! update . text . contains ( ' success ' ) ) { 
 + throw new RuntimeException ( " Crowdin export failed , see $ { update } for more info " ) 
 + } 
 + download { 
 + src " https : / / api . crowdin . com / api / project / $ { id } / download / all . zip ? key = $ { project . crowdinKey } " 
 + dest output 
 + overwrite true 
 + } 
 + } 
 + } 
 + 
 + task crowdin ( type : Zip ) { 
 + dependsOn downloadCrowdin 
 + baseName = project . name 
 + version = project . version 
 + classifier = ' crowdin ' 
 + destinationDir = file ( ' build / distributions ' ) 
 + from ( zipTree ( downloadCrowdin . output ) ) { 
 + eachFile { / / Tired of waiting for crowdin API , rename things myself . Remove once crowdin stops being dumb 
 + if ( it . name . equals ( ' en _ us . json ' ) & & ! it . path . startsWith ( ' assets / ' ) ) { 
 + it . name = it . path . split ( ' / ' ) [ 0 ] + ' . json ' 
 + it . path = ' assets / forge / lang / ' + it . name 
 + } 
 + } 
 + exclude { it . isDirectory ( ) } 
 + rename { it . toLowerCase ( ) } / / Minecraft needs it lowercase . 
 + exclude ' * * / * . lang ' / / Pre - 1 . 13 format 
 + } 
 + } 
 + 
 + task launcherJson ( ) { 
 + ext { 
 + output = file ( ' build / libs / version . json ' ) 
 + vanilla = project ( ' : mcp ' ) . file ( ' build / mcp / downloadJson / version . json ' ) 
 + timestamp = dateToIso8601 ( new Date ( ) ) 
 + comment = [ 
 + " Please do not automate the download and installation of Forge . " , 
 + " Our efforts are supported by ads from the download page . " , 
 + " If you MUST automate this , please consider supporting the project through https : / / www . patreon . com / LexManos / " 
 + ] 
 + } 
 + inputs . file vanilla 
 + outputs . file output 
 + doLast { 
 + def json _ vanilla = new JsonSlurper ( ) . parseText ( vanilla . text ) 
 + def json = [ 
 + _ comment _ : comment , 
 + id : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , 
 + time : timestamp , 
 + releaseTime : timestamp , 
 + type : ' release ' , 
 + mainClass : ' cpw . mods . modlauncher . Launcher ' , 
 + inheritsFrom : patcher . mcVersion , 
 + logging : [ ] , 
 + arguments : [ 
 + game : json _ vanilla . arguments . game + [ ' - - launchTarget ' , ' fmlclient ' ] 
 + ] , 
 + libraries : [ 
 + [ name : " $ { project . group } : $ { project . name } : $ { project . version } " ] 
 + ] 
 + ] 
 + 
 + / / TODO : There should be a way to mark this in the config declaration . . . 
 + def forge = [ 
 + ' cpw . mods : modlauncher ' , 
 + ' org . ow2 . asm : asm ' , 
 + ' org . ow2 . asm : asm - commons ' , 
 + ' org . ow2 . asm : asm - tree ' , 
 + ' net . minecraftforge : accesstransformers ' , 
 + ' net . minecraftforge : eventbus ' , 
 + ' net . minecraftforge : forgespi ' , 
 + ' net . minecraftforge : coremods ' , 
 + ' com . electronwill . night - config : core ' , 
 + ' com . electronwill . night - config : toml ' , 
 + ' org . jline : jline ' , 
 + ' org . apache . maven : maven - artifact ' , 
 + ' java3d : vecmath ' 
 + ] 
 + def mojang = [ ] 
 + 
 + project . configurations . compileClasspath . resolvedConfiguration . resolvedArtifacts . each { 
 + def art = [ 
 + group : it . moduleVersion . id . group , 
 + name : it . moduleVersion . id . name , 
 + version : it . moduleVersion . id . version , 
 + classifier : it . classifier , 
 + extension : it . extension , 
 + file : it . file 
 + ] 
 + def key = art . group + ' : ' + art . name 
 + if ( forge . contains ( key ) | | mojang . contains ( key ) ) { 
 + def url = forge . contains ( key ) ? " https : / / files . minecraftforge . net / maven / " : " https : / / libraries . minecraft . net / " 
 + def path = " $ { art . group . replace ( ' . ' , ' / ' ) } / $ { art . name } / $ { art . version } / $ { art . name } - $ { art . version } " 
 + if ( art . classifier ! = null ) 
 + path + = " - $ { art . classifier } " 
 + path + = " . $ { art . extension } " 
 + def lib = [ 
 + name : " $ { art . group } : $ { art . name } : $ { art . version } " + ( art . classifier = = null ? ' ' : " : $ { art . classifier } " ) + ( art . extension = = ' jar ' ? ' ' : " @ $ { art . extension } " ) , 
 + downloads : [ 
 + path : path , 
 + url : url + path , 
 + sha1 : sha1 ( art . file ) , 
 + size : art . file . length ( ) 
 + ] 
 + ] 
 + json . libraries . add ( lib ) 
 + } 
 + } 
 + 
 + output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 + } 
 + } 
 + 
 + task installerJson ( ) { 
 + ext { 
 + output = file ( ' build / libs / installer . json ' ) 
 + } 
 + dependsOn launcherJson 
 + inputs . file launcherJson . output 
 + outputs . file output 
 + doLast { 
 + def json = [ 
 + install : [ 
 + _ comment _ : launcherJson . comment , 
 + profileName : project . name , 
 + version : project . version . split ( ' - ' ) [ 0 ] + ' - forge - ' + project . version . split ( ' - ' ) [ 1 ] , 
 + json : ' / version . json ' , 
 + logo : ' / big _ logo . png ' 
 + ] 
 + ] 
 + output . text = new JsonBuilder ( json ) . toPrettyString ( ) 
 + } 
 + } 
 + 
 + universalJar { 
 + dependsOn launcherJson 
 + from ( launcherJson . output ) { 
 + rename { ' version . json ' } 
 + } 
 + from extraTxts 
 + 
 + / * TODO : Annotation Cache ? need to talk to cpw about his new design . 
 + from ( fixAnnotationsJson ) { 
 + into ' META - INF ' 
 + } 
 + dependsOn fixAnnotationsJson 
 + * / 
 + 
 + / / add crowdin locales 
 + from { crowdin . getDidWork ( ) ? zipTree ( crowdin . archivePath ) : null } 
 + dependsOn crowdin 
 + 
 + doFirst { 
 + def json = new JsonSlurper ( ) . parseText ( launcherJson . output . text ) 
 + def classpath = new StringBuilder ( ) 
 + json . libraries . each { lib - > 
 + if ( ! lib . name . startsWith ( " $ { project . group } : $ { project . name } " ) ) { 
 + / / group : artifact : version [ : classifier ] [ @ extension ] 
 + def split = lib . name . split ( ' : ' ) 
 + def ext = ' jar ' 
 + if ( split [ split . length - 1 ] . indexOf ( ' @ ' ) ! = - 1 ) { 
 + ext = split [ split . length - 1 ] . split ( ' @ ' ) [ 1 ] 
 + split [ split . length - 1 ] = split [ split . length - 1 ] . split ( ' @ ' ) [ 0 ] 
 + } 
 + 
 + def group = split [ 0 ] . replace ( ' . ' , ' / ' ) 
 + def artifact = split [ 1 ] 
 + def version = split [ 2 ] 
 + def classifier = split . length > 3 ? split [ 3 ] : null 
 + 
 + if ( classifier = = null ) 
 + classpath + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } . $ { ext } " 
 + else 
 + classpath + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } - $ { classifier } . $ { ext } " 
 + } 
 + } 
 + classpath + = " minecraft _ server . $ { patcher . mcVersion } . jar " 
 + 
 + manifest . attributes ( [ 
 + " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , 
 + " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , 
 + " Class - Path " : classpath . toString ( ) 
 + ] ) 
 + } 
 + } 
 + 
 + task signUniversal ( type : SignJar , dependsOn : universalJar ) { 
 + onlyIf { 
 + project . hasProperty ( ' jarsigner ' ) 
 + } 
 + 
 + def jarsigner = [ : ] ; 
 + 
 + if ( project . hasProperty ( ' jarsigner ' ) ) 
 + jarsigner = project . jarsigner ; 
 + 
 + alias = ' forge ' 
 + storePass = jarsigner . storepass 
 + keyPass = jarsigner . keypass 
 + keyStore = jarsigner . keystore 
 + inputFile = universalJar . archivePath 
 + outputFile = universalJar . archivePath 
 + } 
 + publish . dependsOn signUniversal 
 + build . dependsOn signUniversal 
 + 
 + / * 
 + installer { 
 + dependsOn signUniversal 
 + classifier = ' installer ' 
 + from extraTxts 
 + from " src / main / resources / forge _ logo . png " 
 + from " src / main / resources / url . png " 
 + rename " forge _ logo \ \ . png " , " big _ logo . png " 
 + } 
 + * / 
 + 
 + task makeMdk ( type : Zip ) { 
 + baseName = project . name 
 + classifier = ' mdk ' 
 + version = project . version 
 + destinationDir = file ( ' build / distributions ' ) 
 + 
 + from rootProject . file ( ' gradlew ' ) 
 + from rootProject . file ( ' gradlew . bat ' ) 
 + from extraTxts 
 + from ( rootProject . file ( ' gradle / ' ) ) { 
 + into ( ' gradle / ' ) 
 + } 
 + from ( rootProject . file ( ' mdk / ' ) ) { 
 + / * filter ( ReplaceTokens , tokens : [ 
 + VERSION : project . version 
 + ] ) 
 + * / 
 + rename ' gitignore \ \ . txt ' , ' . gitignore ' 
 + } 
 + } 
 + 
 license { 
 header = file ( " $ rootDir / LICENSE - header . txt " ) 
 
 @ @ - 193 , 7 + 467 , 101 @ @ project ( ' : forge ' ) { 
 files = files ( " $ rootDir / src / test / java " ) 
 } 
 } 
 + } 
 + 
 + publishing { 
 + publications { 
 + mavenJava ( MavenPublication ) { 
 + artifact universalJar 
 + / / TODO : changelog 
 + / / TODO : installer 
 + / / TODO : installer - win 
 + artifact makeMdk 
 + artifact userdevJar 
 + 
 + pom { 
 + name = ' forge ' 
 + description = ' Modifactions to Minecraft to enable mod developers . ' 
 + url = ' https : / / github . com / MinecraftForge / MinecraftForge ' 
 + 
 + scm { 
 + url = ' https : / / github . com / MinecraftForge / MinecraftForge ' 
 + connection = ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' 
 + developerConnection = ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' 
 + } 
 + 
 + issueManagement { 
 + system = ' github ' 
 + url = ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' 
 + } 
 + 
 + licenses { 
 + license { 
 + name = ' LGPL 2 . 1 ' 
 + url = ' https : / / github . com / MinecraftForge / MinecraftForge / blob / 1 . 13 - pre / LICENSE . txt ' 
 + distribution = ' repo ' 
 + } 
 + } 
 + } 
 + } 
 + } 
 + repositories { 
 + maven { 
 + if ( project . hasProperty ( ' forgeMavenPassword ' ) ) { 
 + credentials { 
 + username project . properties . forgeMavenUser 
 + password project . properties . forgeMavenPassword 
 + } 
 + url ' http : / / files . minecraftforge . net / maven / manage / upload ' 
 + } else { 
 + url ' file : / / ' + rootProject . file ( ' repo ' ) . getAbsolutePath ( ) 
 + } 
 + } 
 + } 
 + } 
 + } 
 + 
 + def getVersionFromJava ( def file , def mcver ) { 
 + def major , minor , revision , build = ' 0 ' 
 + def prefix = ' public static final int ' 
 + file . eachLine { String s - > 
 + s = s . trim ( ) 
 + if ( s . startsWith ( prefix ) ) { 
 + s = s . substring ( prefix . length ( ) , s . length ( ) - 1 ) 
 + s = s . replace ( ' = ' , ' ' ) . replace ( ' Version ' , ' ' ) . replaceAll ( ' + ' , ' ' ) . trim ( ) 
 + String [ ] pts = s . split ( ' ' ) 
 + if ( pts [ 0 ] . equals ( ' major ' ) ) major = pts [ pts . length - 1 ] 
 + else if ( pts [ 0 ] = = ' minor ' ) minor = pts [ pts . length - 1 ] 
 + else if ( pts [ 0 ] = = ' revision ' ) revision = pts [ pts . length - 1 ] 
 + } 
 + } 
 + build = System . getenv ( ' BUILD _ NUMBER ' ) ? : project . ext . properties . buildNumber ? : 0 
 + String branch = null 
 + if ( ! System . getenv ( ) . containsKey ( ' GIT _ BRANCH ' ) ) { 
 + branch = grgit . branch . current ( ) . name 
 + } else { 
 + branch = System . getenv ( ' GIT _ BRANCH ' ) 
 + branch = branch . substring ( branch . lastIndexOf ( ' / ' ) + 1 ) 
 + } 
 + def out = " $ { mcver . replace ( ' - ' , ' _ ' ) } - $ major . $ minor . $ revision . $ build " 
 + if ( branch & & branch ! = ' master ' & & branch ! = ' HEAD ' & & branch ! = mcver & & branch ! = mcver + ' . 0 ' ) { 
 + if ( ! ( branch . endsWith ( ' . x ' ) & & mcver . startsWith ( branch . substring ( 0 , branch . length ( ) - 2 ) ) ) ) 
 + out + = " - $ branch " 
 + } 
 + return out 
 + } 
 + 
 + def dateToIso8601 ( date ) { 
 + def format = new SimpleDateFormat ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) 
 + def result = format . format ( date ) 
 + return result [ 0 . . 21 ] + ' : ' + result [ 22 . . - 1 ] 
 + } 
 + def sha1 ( file ) { 
 + MessageDigest md = MessageDigest . getInstance ( " SHA - 1 " ) ; 
 + file . eachByte 4096 , { bytes , size - > 
 + md . update ( bytes , 0 , size ) ; 
 } 
 + return md . digest ( ) . collect { String . format " % 02x " , it } . join ( ) ; 
 } 
 
 / / evaluationDependsOnChildren ( ) 
 diff - - git a / mdk / build . gradle b / mdk / build . gradle 
 index deaf2d9 . . 6dead0b 100644 
 - - - a / mdk / build . gradle 
 + + + b / mdk / build . gradle 
 @ @ - 4 , 7 + 4 , 7 @ @ buildscript { 
 maven { url = " http : / / files . minecraftforge . net / maven " } 
 } 
 dependencies { 
 - classpath ' net . minecraftforge . gradle : ForgeGradle : 2 . 3 - SNAPSHOT ' 
 + classpath ' net . minecraftforge . gradle : ForgeGradle : 3 . + ' 
 } 
 } 
 apply plugin : ' net . minecraftforge . gradle . forge '

NEAREST DIFF:
diff - - git a / . gitignore b / . gitignore 
 index 5c737dd . . f99fd0d 100644 
 - - - a / . gitignore 
 + + + b / . gitignore 
 @ @ - 12 , 13 + 12 , 14 @ @ 
 / . gradle 
 
 # occupational hazards 
 - / eclipse / 
 + / projects / 
 / repo / 
 / buildSrc 
 
 # Patch rejects 
 * . rej 
 / patches - / 
 + 
 # FML changelog 
 changelog . txt 
 / patches _ old / 
 diff - - git a / build . gradle b / build . gradle 
 index 14c5723 . . f77c1c7 100644 
 - - - a / build . gradle 
 + + + b / build . gradle 
 @ @ - 1 , 11 + 1 , 6 @ @ 
 buildscript { 
 repositories { 
 - maven { 
 - name = " central _ mirrior " 
 - url = " http : / / uk . maven . org / maven2 " 
 - } 
 mavenCentral ( ) 
 - mavenLocal ( ) 
 maven { 
 name = " forge " 
 url = " http : / / files . minecraftforge . net / maven " 
 @ @ - 16 , 71 + 11 , 184 @ @ buildscript { 
 } 
 } 
 dependencies { 
 - classpath ' net . minecraftforge . gradle : ForgeGradle : 1 . 2 - SNAPSHOT ' 
 + classpath ' net . minecraftforge . gradle : ForgeGradle : 2 . 0 - SNAPSHOT ' 
 } 
 } 
 
 - configurations { 
 - deployJars 
 - } 
 + apply plugin : " maven " 
 + apply plugin : " net . minecraftforge . gradle . patcher " 
 + apply plugin : " net . minecraftforge . gradle . launch4j " 
 
 - import static net . minecraftforge . gradle . dev . ForgeDevPlugin . * 
 - 
 - apply plugin : ' maven ' 
 - apply plugin : ' forgedev ' 
 + minecraft { 
 + version = " 1 . 8 " 
 + / / mappings = ' stable _ 16 ' 
 + mappings = " snapshot _ nodoc _ 20141130 " 
 + workspaceDir = " projects " 
 + versionJson = " fml / jsons / 1 . 8 - dev . json " 
 + buildUserdev = true 
 + buildInstaller = true 
 + installerVersion = " 1 . 4 " 
 
 - repositories { 
 - maven { 
 - name = " central _ mirrior " 
 - url = " http : / / uk . maven . org / maven2 " 
 + def common = { 
 + patchPrefixOriginal " . . / src - base / minecraft " 
 + patchPrefixChanged " . . / src - work / minecraft " 
 + mainClassClient " net . minecraft . launchwrapper . Launch " 
 + tweakClassClient " net . minecraftforge . fml . common . launcher . FMLTweaker " 
 + mainClassServer " net . minecraft . launchwrapper . Launch " 
 + tweakClassServer " net . minecraftforge . fml . common . launcher . FMLServerTweaker " 
 } 
 - mavenLocal ( ) 
 - flatDir { 
 - name " fileRepo " 
 - dirs " repo " 
 + 
 + projects { 
 + fml { 
 + rootDir ' fml ' 
 + patchDir " fml / patches / minecraft " 
 + patchAfter " clean " 
 + genPatchesFrom " clean " 
 + 
 + with common 
 + } 
 + forge { 
 + rootDir " . " 
 + patchDir " patches / minecraft " 
 + patchAfter " fml " 
 + genPatchesFrom " fml " 
 + 
 + with common 
 + } 
 } 
 } 
 
 - minecraft { 
 - version = ' 1 . 8 ' 
 - mcpVersion = ' 9 . 10 ' 
 - mappings = ' snapshot _ nodoc _ 20141130 ' 
 - fmlDir = projectDir . getAbsolutePath ( ) + " / fml " ; 
 - mainClass = ' net . minecraftforge . fml . relauncher . ServerLaunchWrapper ' 
 - tweakClass = ' net . minecraftforge . fml . common . launcher . FMLTweaker ' 
 - installerVersion = " 1 . 4 " 
 + group = ' net . minecraftforge ' 
 + version = getVersionFromJava ( file ( " src / main / java / net / minecraftforge / common / ForgeVersion . java " ) ) 
 + 
 + extractFmlSources { exclude " * * / SideOnly . java " , " * * / Side . java " } 
 + 
 + genGradleProjects { addTestCompileDep " junit : junit : 4 . 12 " } 
 + 
 + processJson { 
 + releaseJson = " fml / jsons / 1 . 8 - rel . json " 
 + addReplacements ( [ 
 + " @ minecraft _ version @ " : project . minecraft . version , 
 + " @ version @ " : project . version , 
 + " @ project @ " : " forge " , 
 + " @ artifact @ " : " net . minecraftforge : forge : $ { project . version } " , 
 + " @ universal _ jar @ " : { outputJar . archiveName } , 
 + " @ timestamp @ " : new Date ( ) . format ( " yyyy - MM - dd ' T ' HH : mm : ssZ " ) , 
 + ] ) 
 } 
 
 - group = ' net . minecraftforge ' 
 - version = getVersionFromJava ( getProject ( ) , ' src / main / java / net / minecraftforge / common / ForgeVersion . java ' ) 
 + task changelog ( type : JenkinsChangelog ) { 
 
 - jenkins { 
 - job = ' minecraftforge ' 
 + / / skip if there is no forge jenkins pass 
 + onlyIf { project . hasProperty ( ' forgeJenkinsPass ' ) } 
 + 
 + outputs . upToDateWhen { false } / / never up to date 
 + serverRoot = " http : / / ci . jenkins . minecraftforge . net / " 
 + jobName = " minecraftforge " 
 + targetBuild = System . env [ ' BUILD _ NUMBER ' ] ? : 0 ; 
 + authName = " console _ script " 
 + authPassword = project . hasProperty ( ' forgeJenkinsPass ' ) ? project . getProperty ( ' forgeJenkinsPass ' ) : " " ; 
 + output = " build / distributions / $ { project . name } - $ { project . version } - changelog . txt " 
 + } 
 + 
 + task crowdin ( type : CrowdinDownload ) { 
 + output = " build / crowdin . zip " 
 + projectId = ' minecraft - forge ' 
 + extract = false / / we wanna keep it as a zip . not extract it to a folder named " crowdin . zip " 
 + 
 + / / task auomatically skips if this is null 
 + if ( project . hasProperty ( ' crowdinKey ' ) ) 
 + apiKey = project . crowdinKey 
 } 
 
 - / / crowdin stuff 
 - if ( project . hasProperty ( " crowdinKey " ) ) 
 - tasks . getLocalizations . apiKey = project . crowdinKey 
 + def extraTxts = [ 
 + changelog , / / yeah we can do thi , because gradle and groovy are awesome 
 + " fml / LICENSE - fml . txt " , 
 + " fml / CREDITS - fml . txt " , 
 + " MinecraftForge - Credits . txt " , 
 + " MinecraftForge - License . txt " , 
 + " Paulscode SoundSystem CodecIBXM License . txt " , 
 + " Paulscode IBXM Library License . txt " 
 + ] 
 
 + outputJar { 
 + classifier = ' universal ' 
 + from extraTxts 
 + 
 + / / add crowdin locales 
 + from { crowdin . getDidWork ( ) ? zipTree ( crowdin ) : null } 
 + dependsOn ' crowdin ' 
 + 
 + manifest . attributes ( [ 
 + " Main - Class " : " net . minecraftforge . fml . relauncher . ServerLaunchWrapper " , 
 + " TweakClass " : " net . minecraftforge . fml . common . launcher . FMLTweaker " , 
 + " Class - Path " : getServerClasspath ( file ( " fml / jsons / 1 . 8 - rel . json " ) ) 
 + ] ) 
 + } 
 + 
 + installer { 
 + classifier = ' installer ' 
 + from extraTxts 
 + from " src / main / resources / forge _ logo . png " 
 + rename " forge _ logo \ \ . png " , " big _ logo . png " 
 + } 
 + 
 + task signUniversal ( type : SignJar , dependsOn : ' outputJar ' ) { 
 + onlyIf { 
 + project . hasProperty ( ' jarsigner ' ) 
 + } 
 + 
 + def jarsigner = [ : ] ; 
 + 
 + if ( project . hasProperty ( ' jarsigner ' ) ) 
 + jarsigner = project . jarsigner ; 
 + 
 + alias = ' forge ' 
 + exclude " paulscode / * * " 
 + storePass = jarsigner . storepass 
 + keyPass = jarsigner . keypass 
 + keyStore = jarsigner . keystore 
 + inputFile = outputJar . archivePath 
 + outputFile = outputJar . archivePath 
 + } 
 + uploadArchives . dependsOn signUniversal 
 + build . dependsOn signUniversal 
 + 
 + / / launch4j 
 
 launch4j { 
 + jar = installer . archivePath . canonicalPath 
 + outfile = file ( " build / distributions / $ { project . name } - $ { project . version } - installer - win . exe " ) . canonicalPath 
 + icon = file ( ' icon . ico ' ) . canonicalPath 
 + manifest = file ( ' l4jManifest . xml ' ) . canonicalPath 
 jreMinVersion = ' 1 . 6 . 0 ' 
 + initialHeapPercent = 5 ; 
 + maxHeapPercent = 100 ; 
 + } 
 + tasks . generateXmlConfig . dependsOn installer 
 + tasks . build . dependsOn ' launch4j ' 
 + 
 + / / MAVEN 
 + 
 + artifacts { 
 + archives changelog . output 
 + archives file ( " build / distributions / $ { project . name } - $ { project . version } - installer - win . exe " ) 
 } 
 
 uploadArchives { 
 - repositories { 
 - add getProject ( ) . repositories . mavenLocal ( ) 
 - } 
 repositories . mavenDeployer { 
 - configuration = configurations . deployJars 
 
 - if ( project . hasProperty ( " filesmaven " ) ) { 
 - logger . info ( ' Publishing to files server ' ) 
 - repository ( url : project . filesmaven . url ) { 
 - authentication ( userName : project . filesmaven . username , privateKey : project . filesmaven . key ) 
 + dependsOn ' build ' 
 + 
 + if ( project . hasProperty ( ' forgeMavenPass ' ) ) 
 + { 
 + repository ( url : " http : / / files . minecraftforge . net / maven / manage / upload " ) { 
 + authentication ( userName : " forge " , project . getProperty ( ' forgeMavenPass ' ) ) / / the elvis operator . look it up . 
 } 
 - } else { 
 - logger . info ( ' Publishing to repo folder ' ) 
 + } 
 + else 
 + { 
 + / / local repo folder . Might wanna juset use gradle install if you wanans end it to maven - local 
 repository ( url : ' file : / / localhost / ' + project . file ( ' repo ' ) . getAbsolutePath ( ) ) 
 } 
 
 @ @ - 88 , 49 + 196 , 120 @ @ uploadArchives { 
 groupId = project . group 
 version = project . version 
 artifactId = project . archivesBaseName 
 - } 
 - pom . project { 
 - name project . archivesBaseName 
 - packaging ' jar ' 
 - description ' Minecraft Forge API ' 
 - url ' https : / / github . com / MinecraftForge / MinecraftForge ' 
 - 
 - scm { 
 + project { 
 + name project . archivesBaseName 
 + packaging ' jar ' 
 + description ' Minecraft Forge API ' 
 url ' https : / / github . com / MinecraftForge / MinecraftForge ' 
 - connection ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' 
 - developerConnection ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' 
 - } 
 
 - issueManagement { 
 - system ' github ' 
 - url ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' 
 - } 
 - 
 - licenses { 
 - license { 
 - name ' Forge Public License ' 
 - url ' https : / / raw . github . com / MinecraftForge / MinecraftForge / master / MinecraftForge - License . txt ' 
 - distribution ' repo ' 
 + scm { 
 + url ' https : / / github . com / MinecraftForge / MinecraftForge ' 
 + connection ' scm : git : git : / / github . com / MinecraftForge / MinecraftForge . git ' 
 + developerConnection ' scm : git : git @ github . com : MinecraftForge / MinecraftForge . git ' 
 } 
 - } 
 
 - developers { 
 - developer { 
 - id ' cpw ' 
 - name ' cpw ' 
 - roles { role ' developer ' } 
 + issueManagement { 
 + system ' github ' 
 + url ' https : / / github . com / MinecraftForge / MinecraftForge / issues ' 
 } 
 - developer { 
 - id ' LexManos ' 
 - name ' Lex Manos ' 
 - roles { role ' developer ' } 
 + 
 + licenses { 
 + license { 
 + name ' Forge Public License ' 
 + url ' https : / / raw . github . com / MinecraftForge / MinecraftForge / master / MinecraftForge - License . txt ' 
 + distribution ' repo ' 
 + } 
 } 
 - developer { 
 - id ' AbrarSyed ' 
 - name ' Abrar Syed ' 
 - roles { role ' contributor ' } 
 + 
 + developers { 
 + developer { 
 + id ' cpw ' 
 + name ' cpw ' 
 + roles { role ' developer ' } 
 + } 
 + developer { 
 + id ' LexManos ' 
 + name ' Lex Manos ' 
 + roles { role ' developer ' } 
 + } 
 + developer { 
 + id ' AbrarSyed ' 
 + name ' Abrar Syed ' 
 + roles { role ' contributor ' } 
 + } 
 } 
 } 
 } 
 } 
 } 
 + 
 + / / HELPER METHODS 
 + 
 + import groovy . json . JsonSlurper ; 
 + 
 + String getServerClasspath ( File file ) 
 + { 
 + def node = new JsonSlurper ( ) . parse ( file ) ; 
 + def out = new StringBuilder ( ) 
 + node . versionInfo . libraries . each { lib - > 
 + if ( lib . serverreq ) 
 + { 
 + / / group : artifact : version 
 + def split = lib . name . split ( ' : ' ) 
 + def group = split [ 0 ] . replace ( ' . ' , ' / ' ) 
 + def artifact = split [ 1 ] 
 + def version = split [ 2 ] 
 + out + = " libraries / $ group / $ artifact / $ version / $ artifact - $ { version } . jar " 
 + } 
 + } 
 + out + = " minecraft _ server . $ { minecraft . version } . jar " 
 + 
 + return out . toString ( ) ; 
 + } 
 + 
 + String getVersionFromJava ( File file ) 
 + { 
 + String major = " 0 " ; 
 + String minor = " 0 " ; 
 + String revision = " 0 " ; 
 + String build = " 0 " ; 
 + 
 + String prefix = " public static final int " ; 
 + file . eachLine { String s - > 
 + s = s . trim ( ) ; 
 + if ( s . startsWith ( prefix ) ) 
 + { 
 + s = s . substring ( prefix . length ( ) , s . length ( ) - 1 ) ; 
 + s = s . replace ( ' = ' , ' ' ) . replace ( " Version " , " " ) . replaceAll ( " + " , " " ) . trim ( ) ; 
 + String [ ] pts = s . split ( " " ) ; 
 + 
 + if ( pts [ 0 ] . equals ( " major " ) ) major = pts [ pts . length - 1 ] ; 
 + else if ( pts [ 0 ] = = " minor " ) minor = pts [ pts . length - 1 ] ; 
 + else if ( pts [ 0 ] = = " revision " ) revision = pts [ pts . length - 1 ] ; 
 + } 
 + } 
 + 
 + if ( System . getenv ( ) . containsKey ( " BUILD _ NUMBER " ) ) 
 + { 
 + build = System . getenv ( " BUILD _ NUMBER " ) ; 
 + } 
 + 
 + String branch = null ; 
 + if ( ! System . getenv ( ) . containsKey ( " GIT _ BRANCH " ) ) 
 + { 
 + / / TODO : use grgit 
 + branch = " git rev - parse - - abbrev - ref HEAD " . execute ( ) . text . trim ( ) 
 + } 
 + else 
 + { 
 + branch = System . getenv ( " GIT _ BRANCH " ) ; 
 + branch = branch . substring ( branch . lastIndexOf ( ' / ' ) + 1 ) ; 
 + } 
 + 
 + def out = " $ { minecraft . version . replace ( ' - ' , ' _ ' ) } - $ major . $ minor . $ revision . $ build " 
 + 
 + if ( branch & & branch ! = ' master ' & & branch ! = ' HEAD ' ) 
 + out + = " - $ branch " 
 + 
 + return out ; 
 + } 
 diff - - git a / gradle / wrapper / gradle - wrapper . jar b / gradle / wrapper / gradle - wrapper . jar 
 new file mode 100644 
 index 0000000 . . b5166da 
 Binary files / dev / null and b / gradle / wrapper / gradle - wrapper . jar differ 
 diff - - git a / gradle / wrapper / gradle - wrapper . properties b / gradle / wrapper / gradle - wrapper . properties 
 new file mode 100644 
 index 0000000 . . 7822bea 
 - - - / dev / null 
 + + + b / gradle / wrapper / gradle - wrapper . properties 
 @ @ - 0 , 0 + 1 , 6 @ @ 
 + # Sat May 16 19 : 56 : 41 CDT 2015 
 + distributionBase = GRADLE _ USER _ HOME 
 + distributionPath = wrapper / dists 
 + zipStoreBase = GRADLE _ USER _ HOME 
 + zipStorePath = wrapper / dists 
 + distributionUrl = https \ : / / services . gradle . org / distributions / gradle - 2 . 4 - bin . zip 
 diff - - git a / gradlew b / gradlew 
 new file mode 100755 
 index 0000000 . . 91a7e26 
 - - - / dev / null 
 + + + b / gradlew 
 @ @ - 0 , 0 + 1 , 164 @ @ 
 + # ! / usr / bin / env bash 
 + 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + # # 
 + # # Gradle start up script for UN * X 
 + # # 
 + # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + 
 + # Add default JVM options here . You can also use JAVA _ OPTS and GRADLE _ OPTS to pass JVM options to this script . 
 + DEFAULT _ JVM _ OPTS = " " 
 + 
 + APP _ NAME = " Gradle " 
 + APP _ BASE _ NAME = ` basename " $ 0 " ` 
 + 
 + # Use the maximum available , or set MAX _ FD ! = - 1 to use that value . 
 + MAX _ FD = " maximum " 
 + 
 + warn ( ) { 
 + echo " $ * " 
 + } 
 + 
 + die ( ) { 
 + echo 
 + echo " $ * " 
 + echo 
 + exit 1 
 + } 
 + 
 + # OS specific support ( must be ' true ' or ' false ' ) . 
 + cygwin = false 
 + msys = false 
 + darwin = false 
 + case " ` uname ` " in 
 + CYGWIN * ) 
 + cygwin = true 
 + ; ; 
 + Darwin * ) 
 + darwin = true 
 + ; ; 
 + MINGW * ) 
 + msys = true 
 + ; ; 
 + esac 
 + 
 + # For Cygwin , ensure paths are in UNIX format before anything is touched . 
 + if $ cygwin ; then 
 + [ - n " $ JAVA _ HOME " ] & & JAVA _ HOME = ` cygpath - - unix " $ JAVA _ HOME " ` 
 + fi 
 + 
 + # Attempt to set APP _ HOME 
 + # Resolve links : $ 0 may be a link 
 + PRG = " $ 0 " 
 + # Need this for relative symlinks . 
 + while [ - h " $ PRG " ] ; do 
 + ls = ` ls - ld " $ PRG " ` 
 + link = ` expr " $ ls " : ' . * - > \ ( . * \ ) $ ' ` 
 + if expr " $ link " : ' / . * ' > / dev / null ; then 
 + PRG = " $ link " 
 + else 
 + PRG = ` dirname " $ PRG " ` " / $ link " 
 + fi 
 + done 
 + SAVED = " ` pwd ` " 
 + cd " ` dirname \ " $ PRG \ " ` / " > & - 
 + APP _ HOME = " ` pwd - P ` " 
 + cd " $ SAVED " > & - 
 + 
 + CLASSPATH = $ APP _ HOME / gradle / wrapper / gradle - wrapper . jar 
 + 
 + # Determine the Java command to use to start the JVM . 
 + if [ - n " $ JAVA _ HOME " ] ; then 
 + if [ - x " $ JAVA _ HOME / jre / sh / java " ] ; then 
 + # IBM ' s JDK on AIX uses strange locations for the executables 
 + JAVACMD = " $ JAVA _ HOME / jre / sh / java " 
 + else 
 + JAVACMD = " $ JAVA _ HOME / bin / java " 
 + fi 
 + if [ ! - x " $ JAVACMD " ] ; then 
 + die " ERROR : JAVA _ HOME is set to an invalid directory : $ JAVA _ HOME 
 + 
 + Please set the JAVA _ HOME variable in your environment to match the 
 + location of your Java installation . " 
 + fi 
 + else 
 + JAVACMD = " java " 
 + which java > / dev / null 2 > & 1 | | die " ERROR : JAVA _ HOME is not set and no ' java ' command could be found in your PATH . 
 + 
 + Please set the JAVA _ HOME variable in your environment to match the 
 + location of your Java installation . " 
 + fi 
 + 
 + # Increase the maximum file descriptors if we can . 
 + if [ " $ cygwin " = " false " - a " $ darwin " = " false " ] ; then 
 + MAX _ FD _ LIMIT = ` ulimit - H - n ` 
 + if [ $ ? - eq 0 ] ; then 
 + if [ " $ MAX _ FD " = " maximum " - o " $ MAX _ FD " = " max " ] ; then 
 + MAX _ FD = " $ MAX _ FD _ LIMIT " 
 + fi 
 + ulimit - n $ MAX _ FD 
 + if [ $ ? - ne 0 ] ; then 
 + warn " Could not set maximum file descriptor limit : $ MAX _ FD " 
 + fi 
 + else 
 + warn " Could not query maximum file descriptor limit : $ MAX _ FD _ LIMIT " 
 + fi 
 + fi 
 + 
 + # For Darwin , add options to specify how the application appears in the dock 
 + if $ darwin ; then 
 + GRADLE _ OPTS = " $ GRADLE _ OPTS \ " - Xdock : name = $ APP _ NAME \ " \ " - Xdock : icon = $ APP _ HOME / media / gradle . icns \ " " 
 + fi 
 + 
 + # For Cygwin , switch paths to Windows format before running java 
 + if $ cygwin ; then 
 + APP _ HOME = ` cygpath - - path - - mixed " $ APP _ HOME " ` 
 + CLASSPATH = ` cygpath - - path - - mixed " $ CLASSPATH " ` 
 + 
 + # We build the pattern for arguments to be converted via cygpath 
 + ROOTDIRSRAW = ` find - L / - maxdepth 1 - mindepth 1 - type d 2 > / dev / null ` 
 + SEP = " " 
 + for dir in $ ROOTDIRSRAW ; do 
 + ROOTDIRS = " $ ROOTDIRS $ SEP $ dir " 
 + SEP = " | " 
 + done 
 + OURCYGPATTERN = " ( ^ ( $ ROOTDIRS ) ) " 
 + # Add a user - defined pattern to the cygpath arguments 
 + if [ " $ GRADLE _ CYGPATTERN " ! = " " ] ; then 
 + OURCYGPATTERN = " $ OURCYGPATTERN | ( $ GRADLE _ CYGPATTERN ) " 
 + fi 
 + # Now convert the arguments - kludge to limit ourselves to / bin / sh 
 + i = 0 
 + for arg in " $ @ " ; do 
 + CHECK = ` echo " $ arg " | egrep - c " $ OURCYGPATTERN " - ` 
 + CHECK2 = ` echo " $ arg " | egrep - c " ^ - " ` # # # Determine if an option 
 + 
 + if [ $ CHECK - ne 0 ] & & [ $ CHECK2 - eq 0 ] ; then # # # Added a condition 
 + eval ` echo args $ i ` = ` cygpath - - path - - ignore - - mixed " $ arg " ` 
 + else 
 + eval ` echo args $ i ` = " \ " $ arg \ " " 
 + fi 
 + i = $ ( ( i + 1 ) ) 
 + done 
 + case $ i in 
 + ( 0 ) set - - ; ; 
 + ( 1 ) set - - " $ args0 " ; ; 
 + ( 2 ) set - - " $ args0 " " $ args1 " ; ; 
 + ( 3 ) set - - " $ args0 " " $ args1 " " $ args2 " ; ; 
 + ( 4 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " ; ; 
 + ( 5 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " ; ; 
 + ( 6 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " ; ; 
 + ( 7 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " ; ; 
 + ( 8 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " " $ args7 " ; ; 
 + ( 9 ) set - - " $ args0 " " $ args1 " " $ args2 " " $ args3 " " $ args4 " " $ args5 " " $ args6 " " $ args7 " " $ args8 " ; ; 
 + esac 
 + fi 
 + 
 + # Split up the JVM _ OPTS And GRADLE _ OPTS values into an array , following the shell quoting and substitution rules 
 + function splitJvmOpts ( ) { 
 + JVM _ OPTS = ( " $ @ " ) 
 + } 
 + eval splitJvmOpts $ DEFAULT _ JVM _ OPTS $ JAVA _ OPTS $ GRADLE _ OPTS 
 + JVM _ OPTS [ $ { # JVM _ OPTS [ * ] } ] = " - Dorg . gradle . appname = $ APP _ BASE _ NAME " 
 + 
 + exec " $ JAVACMD " " $ { JVM _ OPTS [ @ ] } " - classpath " $ CLASSPATH " org . gradle . wrapper . GradleWrapperMain " $ @ " 
 diff - - git a / gradlew . bat b / gradlew . bat 
 new file mode 100644 
 index 0000000 . . 8a0b282 
 - - - / dev / null 
 + + + b / gradlew . bat 
 @ @ - 0 , 0 + 1 , 90 @ @ 
 + @ if " % DEBUG % " = = " " @ echo off 
 + @ rem # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + @ rem 
 + @ rem Gradle startup script for Windows 
 + @ rem 
 + @ rem # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 
 + 
 + @ rem Set local scope for the variables with windows NT shell 
 + if " % OS % " = = " Windows _ NT " setlocal 
 + 
 + @ rem Add default JVM options here . You can also use JAVA _ OPTS and GRADLE _ OPTS to pass JVM options to this script . 
 + set DEFAULT _ JVM _ OPTS = 
 + 
 + set DIRNAME = % ~ dp0 
 + if " % DIRNAME % " = = " " set DIRNAME = . 
 + set APP _ BASE _ NAME = % ~ n0 
 + set APP _ HOME = % DIRNAME % 
 + 
 + @ rem Find java . exe 
 + if defined JAVA _ HOME goto findJavaFromJavaHome 
 + 
 + set JAVA _ EXE = java . exe 
 + % JAVA _ EXE % - version > NUL 2 > & 1 
 + if " % ERRORLEVEL % " = = " 0 " goto init 
 + 
 + echo . 
 + echo ERROR : JAVA _ HOME is not set and no ' java ' command could be found in your PATH . 
 + echo . 
 + echo Please set the JAVA _ HOME variable in your environment to match the 
 + echo location of your Java installation . 
 + 
 + goto fail 
 + 
 + : findJavaFromJavaHome 
 + set JAVA _ HOME = % JAVA _ HOME : " = % 
 + set JAVA _ EXE = % JAVA _ HOME % / bin / java . exe 
 + 
 + if exist " % JAVA _ EXE % " goto init 
 + 
 + echo . 
 + echo ERROR : JAVA _ HOME is set to an invalid directory : % JAVA _ HOME % 
 + echo . 
 + echo Please set the JAVA _ HOME variable in your environment to match the 
 + echo location of your Java installation . 
 + 
 + goto fail 
 + 
 + : init 
 + @ rem Get command - line arguments , handling Windowz variants 
 + 
 + if not " % OS % " = = " Windows _ NT " goto win9xME _ args 
 + if " % @ eval [ 2 + 2 ] " = = " 4 " goto 4NT _ args 
 + 
 + : win9xME _ args 
 + @ rem Slurp the command line arguments . 
 + set CMD _ LINE _ ARGS = 
 + set _ SKIP = 2 
 + 
 + : win9xME _ args _ slurp 
 + if " x % ~ 1 " = = " x " goto execute 
 + 
 + set CMD _ LINE _ ARGS = % * 
 + goto execute 
 + 
 + : 4NT _ args 
 + @ rem Get arguments from the 4NT Shell from JP Software 
 + set CMD _ LINE _ ARGS = % $ 
 + 
 + : execute 
 + @ rem Setup the command line 
 + 
 + set CLASSPATH = % APP _ HOME % \ gradle \ wrapper \ gradle - wrapper . jar 
 + 
 + @ rem Execute Gradle 
 + " % JAVA _ EXE % " % DEFAULT _ JVM _ OPTS % % JAVA _ OPTS % % GRADLE _ OPTS % " - Dorg . gradle . appname = % APP _ BASE _ NAME % " - classpath " % CLASSPATH % " org . gradle . wrapper . GradleWrapperMain % CMD _ LINE _ ARGS % 
 + 
 + : end 
 + @ rem End local scope for the variables with windows NT shell 
 + if " % ERRORLEVEL % " = = " 0 " goto mainEnd 
 + 
 + : fail 
 + rem Set variable GRADLE _ EXIT _ CONSOLE if you need the _ script _ return code instead of 
 + rem the _ cmd . exe / c _ return code ! 
 + if not " " = = " % GRADLE _ EXIT _ CONSOLE % " exit 1 
 + exit / b 1 
 + 
 + : mainEnd 
 + if " % OS % " = = " Windows _ NT " endlocal 
 + 
 + : omega 
 diff - - git a / icon . ico b / icon . ico 
 new file mode 100644 
 index 0000000 . . f47d8ec 
 Binary files / dev / null and b / icon . ico differ 
 diff - - git a / l4jManifest . xml b / l4jManifest . xml 
 new file mode 100644 
 index 0000000 . . a57d63e 
 - - - / dev / null 
 + + + b / l4jManifest . xml 
 @ @ - 0 , 0 + 1 , 26 @ @ 
 + < ? xml version = " 1 . 0 " encoding = " UTF - 8 " standalone = " yes " ? > 
 + < assembly xmlns = " urn : schemas - microsoft - com : asm . v1 " manifestVersion = " 1 . 0 " > 
 + < compatibility xmlns = " urn : schemas - microsoft - com : compatibility . v1 " > 
 + < application > 
 + < ! - - The ID below indicates application support for Windows Vista - - > 
 + < supportedOS Id = " { e2011457 - 1546 - 43c5 - a5fe - 008deee3d3f0 } " / > 
 + < ! - - The ID below indicates application support for Windows 7 - - > 
 + < supportedOS Id = " { 35138b9a - 5d96 - 4fbd - 8e2d - a2440225f93a } " / > 
 + < ! - - The ID below indicates application support for Windows 8 - - > 
 + < supportedOS Id = " { 4a2f28e3 - 53b9 - 4441 - ba9c - d69d4a4a6e38 } " / > 
 + < ! - - The ID below indicates application support for Windows 8 . 1 - - > 
 + < supportedOS Id = " { 1f676c76 - 80e1 - 4239 - 95bb - 83d0f6d0da78 } " / > 
 + < ! - - The ID below indicates application supprort for Windows 10 - - > 
 + < supportedOS Id = " { 8e0f7a12 - bfb3 - 4fe8 - b9a5 - 48fd50a15a9a } " / > 
 + < / application > 
 + < / compatibility > 
 + 
 + < ! - - following stuff is so the EXE doesnt ask for admin access - - > 
 + < trustInfo xmlns = " urn : schemas - microsoft - com : asm . v3 " > 
 + < security > 
 + < requestedPrivileges > 
 + < requestedExecutionLevel level = " asInvoker " uiAccess = " false " / > 
 + < / requestedPrivileges > 
 + < / security > 
 + < / trustInfo > 
 + < / assembly >
