BLEU SCORE: 0.04767707020457096

TEST MSG: Add legacy support for signature change of AddCallback .
GENERATED MSG: Restone binary compatibility with registry substitution rework .

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 938ab5c . . 9c7a8aa 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 166 , 7 + 166 , 7 @ @ public class PersistentRegistryManager <nl> IForgeRegistry . CreateCallback < T > createCallback ) <nl> { <nl> return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , <nl> - addCallback , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; <nl> + getLegacyAdd ( addCallback ) , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; <nl> } <nl> @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 { Make package private so only builder can use it } <nl> public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( <nl> @ @ - 789 , 4 + 789 , 34 @ @ public class PersistentRegistryManager <nl> } <nl> return null ; / / Will never get here unless things go wonkey . . . <nl> } <nl> + <nl> + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . <nl> + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . AddCallback < T > getLegacyAdd ( final IForgeRegistry . AddCallback < T > cb ) <nl> + { <nl> + if ( cb = = null ) <nl> + return null ; <nl> + try { <nl> + final Method mtd = cb . getClass ( ) . getMethod ( " onAdd " , Object . class , int . class , Map . class ) ; <nl> + return new IForgeRegistry . AddCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onAdd ( T obj , int id , Map < ResourceLocation , ? > slaveset ) <nl> + { <nl> + try { <nl> + mtd . invoke ( cb , obj , id , slaveset ) ; <nl> + } catch ( Exception e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return cb ; / / Assume they are ussing modern API <nl> + } catch ( SecurityException e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + return null ; / / Will never get here unless things go wonkey . . . <nl> + } <nl> }
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> index 2ab4869 . . 7790453 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java <nl> @ @ - 20 , 6 + 20 , 8 @ @ <nl> package net . minecraftforge . fml . common . registry ; <nl> <nl> import java . io . IOException ; <nl> + import java . lang . reflect . InvocationTargetException ; <nl> + import java . lang . reflect . Method ; <nl> import java . util . HashMap ; <nl> import java . util . HashSet ; <nl> import java . util . LinkedHashMap ; <nl> @ @ - 42 , 6 + 44 , 7 @ @ import net . minecraftforge . fml . common . event . FMLMissingMappingsEvent ; <nl> import org . apache . logging . log4j . Level ; <nl> <nl> import com . google . common . base . Function ; <nl> + import com . google . common . base . Throwables ; <nl> import com . google . common . collect . BiMap ; <nl> import com . google . common . collect . HashBiMap ; <nl> import com . google . common . collect . ImmutableList ; <nl> @ @ - 154 , 9 + 157 , 28 @ @ public class PersistentRegistryManager <nl> public static final ResourceLocation ENCHANTMENTS = new ResourceLocation ( " minecraft : enchantments " ) ; <nl> static final ResourceLocation SUBSTITUTION _ ORIGINALS = new ResourceLocation ( " fml : suboriginals " ) ; <nl> <nl> - public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , int minId , int maxId , boolean hasDelegates , IForgeRegistry . AddCallback < T > addCallback , IForgeRegistry . ClearCallback < T > clearCallback , IForgeRegistry . CreateCallback < T > createCallback , IForgeRegistry . SubstitutionCallback < T > substitutionCallback ) <nl> + @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 <nl> + public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( <nl> + ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , <nl> + int minId , int maxId , boolean hasDelegates , <nl> + IForgeRegistry . AddCallback < T > addCallback , <nl> + IForgeRegistry . ClearCallback < T > clearCallback , <nl> + IForgeRegistry . CreateCallback < T > createCallback ) <nl> { <nl> - return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , addCallback , clearCallback , createCallback , substitutionCallback ) ; <nl> + return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , <nl> + addCallback , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; <nl> + } <nl> + @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 { Make package private so only builder can use it } <nl> + public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( <nl> + ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , <nl> + int minId , int maxId , boolean hasDelegates , <nl> + IForgeRegistry . AddCallback < T > addCallback , <nl> + IForgeRegistry . ClearCallback < T > clearCallback , <nl> + IForgeRegistry . CreateCallback < T > createCallback , <nl> + IForgeRegistry . SubstitutionCallback < T > substitutionCallback ) <nl> + { <nl> + return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , <nl> + addCallback , clearCallback , createCallback , substitutionCallback ) ; <nl> } <nl> <nl> @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) <nl> @ @ - 707 , 4 + 729 , 64 @ @ public class PersistentRegistryManager <nl> } <nl> } <nl> <nl> + <nl> + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . <nl> + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . ClearCallback < T > getLegacyClear ( final IForgeRegistry . ClearCallback < T > cb ) <nl> + { <nl> + if ( cb = = null ) <nl> + return null ; <nl> + try { <nl> + final Method mtd = cb . getClass ( ) . getMethod ( " onClear " , Map . class ) ; <nl> + return new IForgeRegistry . ClearCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onClear ( IForgeRegistry < T > is , Map < ResourceLocation , ? > slaveset ) <nl> + { <nl> + try { <nl> + mtd . invoke ( cb , slaveset ) ; <nl> + } catch ( Exception e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return cb ; / / Assume they are ussing modern API <nl> + } catch ( SecurityException e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + return null ; / / Will never get here unless things go wonkey . . . <nl> + } <nl> + <nl> + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . <nl> + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . CreateCallback < T > getLegacyCreate ( final IForgeRegistry . CreateCallback < T > cb ) <nl> + { <nl> + if ( cb = = null ) <nl> + return null ; <nl> + try { <nl> + final Method mtd = cb . getClass ( ) . getMethod ( " onClear " , Map . class ) ; <nl> + return new IForgeRegistry . CreateCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) <nl> + { <nl> + try { <nl> + mtd . invoke ( cb , slaveset ) ; <nl> + } catch ( Exception e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + } <nl> + } ; <nl> + } catch ( NoSuchMethodException e ) { <nl> + e . printStackTrace ( ) ; <nl> + return cb ; / / Assume they are ussing modern API <nl> + } catch ( SecurityException e ) { <nl> + e . printStackTrace ( ) ; <nl> + Throwables . propagate ( e ) ; <nl> + } <nl> + return null ; / / Will never get here unless things go wonkey . . . <nl> + } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java b / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java <nl> new file mode 100644 <nl> index 0000000 . . cfad0b4 <nl> - - - / dev / null <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java <nl> @ @ - 0 , 0 + 1 , 175 @ @ <nl> + / * <nl> + * Minecraft Forge <nl> + * Copyright ( c ) 2016 . <nl> + * <nl> + * This library is free software ; you can redistribute it and / or <nl> + * modify it under the terms of the GNU Lesser General Public <nl> + * License as published by the Free Software Foundation version 2 . 1 <nl> + * of the License . <nl> + * <nl> + * This library is distributed in the hope that it will be useful , <nl> + * but WITHOUT ANY WARRANTY ; without even the implied warranty of <nl> + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU <nl> + * Lesser General Public License for more details . <nl> + * <nl> + * You should have received a copy of the GNU Lesser General Public <nl> + * License along with this library ; if not , write to the Free Software <nl> + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA <nl> + * / <nl> + <nl> + package net . minecraftforge . fml . common . registry ; <nl> + <nl> + import java . util . List ; <nl> + import java . util . Map ; <nl> + <nl> + import com . google . common . collect . BiMap ; <nl> + import com . google . common . collect . Lists ; <nl> + <nl> + import net . minecraft . util . ResourceLocation ; <nl> + import net . minecraftforge . fml . common . registry . IForgeRegistry . * ; <nl> + <nl> + public class RegistryBuilder < T extends IForgeRegistryEntry < T > > <nl> + { <nl> + private ResourceLocation registryName ; <nl> + private Class < T > registryType ; <nl> + private ResourceLocation optionalDefaultKey ; <nl> + private int minId ; <nl> + private int maxId ; <nl> + private List < AddCallback < T > > addCallback = Lists . newArrayList ( ) ; <nl> + private List < ClearCallback < T > > clearCallback = Lists . newArrayList ( ) ; <nl> + private List < CreateCallback < T > > createCallback = Lists . newArrayList ( ) ; <nl> + private List < SubstitutionCallback < T > > substitutionCallback = Lists . newArrayList ( ) ; <nl> + <nl> + public RegistryBuilder < T > setName ( ResourceLocation name ) <nl> + { <nl> + this . registryName = name ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > setType ( Class < T > type ) <nl> + { <nl> + this . registryType = type ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > setIDRange ( int min , int max ) <nl> + { <nl> + this . minId = min ; <nl> + this . maxId = max ; <nl> + return this ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " unchecked " ) <nl> + public RegistryBuilder < T > addCallback ( Object inst ) <nl> + { <nl> + if ( inst instanceof AddCallback ) <nl> + this . add ( ( AddCallback < T > ) inst ) ; <nl> + if ( inst instanceof ClearCallback ) <nl> + this . add ( ( ClearCallback < T > ) inst ) ; <nl> + if ( inst instanceof CreateCallback ) <nl> + this . add ( ( CreateCallback < T > ) inst ) ; <nl> + if ( inst instanceof SubstitutionCallback ) <nl> + this . add ( ( SubstitutionCallback < T > ) inst ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > add ( AddCallback < T > add ) <nl> + { <nl> + this . addCallback . add ( add ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > add ( ClearCallback < T > clear ) <nl> + { <nl> + this . clearCallback . add ( clear ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > add ( CreateCallback < T > create ) <nl> + { <nl> + this . createCallback . add ( create ) ; <nl> + return this ; <nl> + } <nl> + <nl> + public RegistryBuilder < T > add ( SubstitutionCallback < T > sub ) <nl> + { <nl> + this . substitutionCallback . add ( sub ) ; <nl> + return this ; <nl> + } <nl> + <nl> + @ SuppressWarnings ( " deprecation " ) <nl> + public IForgeRegistry < T > create ( ) <nl> + { <nl> + return PersistentRegistryManager . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , false , <nl> + getAdd ( ) , getClear ( ) , getCreate ( ) , getSubstitution ( ) ) ; <nl> + } <nl> + <nl> + private AddCallback < T > getAdd ( ) <nl> + { <nl> + if ( this . addCallback . isEmpty ( ) ) <nl> + return null ; <nl> + if ( this . addCallback . size ( ) = = 1 ) <nl> + return this . addCallback . get ( 0 ) ; <nl> + <nl> + return new AddCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onAdd ( T obj , int id , Map < ResourceLocation , ? > slaveset ) <nl> + { <nl> + for ( AddCallback < T > cb : RegistryBuilder . this . addCallback ) <nl> + cb . onAdd ( obj , id , slaveset ) ; <nl> + } <nl> + } ; <nl> + } <nl> + private ClearCallback < T > getClear ( ) <nl> + { <nl> + if ( this . clearCallback . isEmpty ( ) ) <nl> + return null ; <nl> + if ( this . clearCallback . size ( ) = = 1 ) <nl> + return this . clearCallback . get ( 0 ) ; <nl> + <nl> + return new ClearCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onClear ( IForgeRegistry < T > is , Map < ResourceLocation , ? > slaveset ) <nl> + { <nl> + for ( ClearCallback < T > cb : RegistryBuilder . this . clearCallback ) <nl> + cb . onClear ( is , slaveset ) ; <nl> + } <nl> + } ; <nl> + } <nl> + private CreateCallback < T > getCreate ( ) <nl> + { <nl> + if ( this . createCallback . isEmpty ( ) ) <nl> + return null ; <nl> + if ( this . createCallback . size ( ) = = 1 ) <nl> + return this . createCallback . get ( 0 ) ; <nl> + <nl> + return new CreateCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) <nl> + { <nl> + for ( CreateCallback < T > cb : RegistryBuilder . this . createCallback ) <nl> + cb . onCreate ( slaveset , registries ) ; <nl> + } <nl> + } ; <nl> + } <nl> + private SubstitutionCallback < T > getSubstitution ( ) <nl> + { <nl> + if ( this . substitutionCallback . isEmpty ( ) ) <nl> + return null ; <nl> + if ( this . substitutionCallback . size ( ) = = 1 ) <nl> + return this . substitutionCallback . get ( 0 ) ; <nl> + <nl> + return new SubstitutionCallback < T > ( ) <nl> + { <nl> + @ Override <nl> + public void onSubstituteActivated ( Map < ResourceLocation , ? > slaveset , T original , T replacement , ResourceLocation name ) <nl> + { <nl> + for ( SubstitutionCallback < T > cb : RegistryBuilder . this . substitutionCallback ) <nl> + cb . onSubstituteActivated ( slaveset , original , replacement , name ) ; <nl> + } <nl> + } ; <nl> + } <nl> + } <nl> diff - - git a / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java b / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java <nl> index 88ec8a3 . . bcb8a95 100644 <nl> - - - a / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java <nl> + + + b / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java <nl> @ @ - 9 , 7 + 9 , 7 @ @ import net . minecraftforge . fml . common . eventhandler . Event . Result ; <nl> import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; <nl> <nl> @ Mod ( modid = DecorateEventDebug . MODID , name = DecorateEventDebug . NAME , version = DecorateEventDebug . VERSION ) <nl> - public class DecorateEventDebug <nl> + public class DecorateEventDebug <nl> { <nl> <nl> public static final String MODID = " decorateeventdebug " ; <nl> @ @ - 17 , 14 + 17 , 14 @ @ public class DecorateEventDebug <nl> public static final String VERSION = " 1 . 0 . 0 " ; <nl> <nl> @ EventHandler <nl> - public void init ( FMLInitializationEvent event ) <nl> + public void init ( FMLInitializationEvent event ) <nl> { <nl> - 	 MinecraftForge . TERRAIN _ GEN _ BUS . register ( this ) ; <nl> + MinecraftForge . TERRAIN _ GEN _ BUS . register ( this ) ; <nl> } <nl> <nl> @ SubscribeEvent <nl> - public void decorateEvent ( DecorateBiomeEvent . Decorate event ) <nl> + public void decorateEvent ( DecorateBiomeEvent . Decorate event ) <nl> { <nl> - 	 event . setResult ( Result . DENY ) ; <nl> + event . setResult ( Result . DENY ) ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 938ab5c . . 9c7a8aa 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 166 , 7 + 166 , 7 @ @ public class PersistentRegistryManager 
 IForgeRegistry . CreateCallback < T > createCallback ) 
 { 
 return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , 
 - addCallback , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; 
 + getLegacyAdd ( addCallback ) , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; 
 } 
 @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 { Make package private so only builder can use it } 
 public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( 
 @ @ - 789 , 4 + 789 , 34 @ @ public class PersistentRegistryManager 
 } 
 return null ; / / Will never get here unless things go wonkey . . . 
 } 
 + 
 + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . 
 + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . AddCallback < T > getLegacyAdd ( final IForgeRegistry . AddCallback < T > cb ) 
 + { 
 + if ( cb = = null ) 
 + return null ; 
 + try { 
 + final Method mtd = cb . getClass ( ) . getMethod ( " onAdd " , Object . class , int . class , Map . class ) ; 
 + return new IForgeRegistry . AddCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onAdd ( T obj , int id , Map < ResourceLocation , ? > slaveset ) 
 + { 
 + try { 
 + mtd . invoke ( cb , obj , id , slaveset ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + } 
 + } ; 
 + } catch ( NoSuchMethodException e ) { 
 + e . printStackTrace ( ) ; 
 + return cb ; / / Assume they are ussing modern API 
 + } catch ( SecurityException e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + return null ; / / Will never get here unless things go wonkey . . . 
 + } 
 }

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 index 2ab4869 . . 7790453 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / PersistentRegistryManager . java 
 @ @ - 20 , 6 + 20 , 8 @ @ 
 package net . minecraftforge . fml . common . registry ; 
 
 import java . io . IOException ; 
 + import java . lang . reflect . InvocationTargetException ; 
 + import java . lang . reflect . Method ; 
 import java . util . HashMap ; 
 import java . util . HashSet ; 
 import java . util . LinkedHashMap ; 
 @ @ - 42 , 6 + 44 , 7 @ @ import net . minecraftforge . fml . common . event . FMLMissingMappingsEvent ; 
 import org . apache . logging . log4j . Level ; 
 
 import com . google . common . base . Function ; 
 + import com . google . common . base . Throwables ; 
 import com . google . common . collect . BiMap ; 
 import com . google . common . collect . HashBiMap ; 
 import com . google . common . collect . ImmutableList ; 
 @ @ - 154 , 9 + 157 , 28 @ @ public class PersistentRegistryManager 
 public static final ResourceLocation ENCHANTMENTS = new ResourceLocation ( " minecraft : enchantments " ) ; 
 static final ResourceLocation SUBSTITUTION _ ORIGINALS = new ResourceLocation ( " fml : suboriginals " ) ; 
 
 - public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , int minId , int maxId , boolean hasDelegates , IForgeRegistry . AddCallback < T > addCallback , IForgeRegistry . ClearCallback < T > clearCallback , IForgeRegistry . CreateCallback < T > createCallback , IForgeRegistry . SubstitutionCallback < T > substitutionCallback ) 
 + @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 
 + public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( 
 + ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , 
 + int minId , int maxId , boolean hasDelegates , 
 + IForgeRegistry . AddCallback < T > addCallback , 
 + IForgeRegistry . ClearCallback < T > clearCallback , 
 + IForgeRegistry . CreateCallback < T > createCallback ) 
 { 
 - return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , addCallback , clearCallback , createCallback , substitutionCallback ) ; 
 + return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , 
 + addCallback , getLegacyClear ( clearCallback ) , getLegacyCreate ( createCallback ) , null ) ; 
 + } 
 + @ Deprecated / / Use RegistryBuilder TODO : Remove in 1 . 11 { Make package private so only builder can use it } 
 + public static < T extends IForgeRegistryEntry < T > > FMLControlledNamespacedRegistry < T > createRegistry ( 
 + ResourceLocation registryName , Class < T > registryType , ResourceLocation optionalDefaultKey , 
 + int minId , int maxId , boolean hasDelegates , 
 + IForgeRegistry . AddCallback < T > addCallback , 
 + IForgeRegistry . ClearCallback < T > clearCallback , 
 + IForgeRegistry . CreateCallback < T > createCallback , 
 + IForgeRegistry . SubstitutionCallback < T > substitutionCallback ) 
 + { 
 + return PersistentRegistry . ACTIVE . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , 
 + addCallback , clearCallback , createCallback , substitutionCallback ) ; 
 } 
 
 @ SuppressWarnings ( { " unchecked " , " rawtypes " } ) 
 @ @ - 707 , 4 + 729 , 64 @ @ public class PersistentRegistryManager 
 } 
 } 
 
 + 
 + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . 
 + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . ClearCallback < T > getLegacyClear ( final IForgeRegistry . ClearCallback < T > cb ) 
 + { 
 + if ( cb = = null ) 
 + return null ; 
 + try { 
 + final Method mtd = cb . getClass ( ) . getMethod ( " onClear " , Map . class ) ; 
 + return new IForgeRegistry . ClearCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onClear ( IForgeRegistry < T > is , Map < ResourceLocation , ? > slaveset ) 
 + { 
 + try { 
 + mtd . invoke ( cb , slaveset ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + } 
 + } ; 
 + } catch ( NoSuchMethodException e ) { 
 + e . printStackTrace ( ) ; 
 + return cb ; / / Assume they are ussing modern API 
 + } catch ( SecurityException e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + return null ; / / Will never get here unless things go wonkey . . . 
 + } 
 + 
 + / / TODO : Remove in 1 . 11 , creates wrappers for API breakage cpw did in registry re - work . 
 + private static < T extends IForgeRegistryEntry < T > > IForgeRegistry . CreateCallback < T > getLegacyCreate ( final IForgeRegistry . CreateCallback < T > cb ) 
 + { 
 + if ( cb = = null ) 
 + return null ; 
 + try { 
 + final Method mtd = cb . getClass ( ) . getMethod ( " onClear " , Map . class ) ; 
 + return new IForgeRegistry . CreateCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) 
 + { 
 + try { 
 + mtd . invoke ( cb , slaveset ) ; 
 + } catch ( Exception e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + } 
 + } ; 
 + } catch ( NoSuchMethodException e ) { 
 + e . printStackTrace ( ) ; 
 + return cb ; / / Assume they are ussing modern API 
 + } catch ( SecurityException e ) { 
 + e . printStackTrace ( ) ; 
 + Throwables . propagate ( e ) ; 
 + } 
 + return null ; / / Will never get here unless things go wonkey . . . 
 + } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java b / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java 
 new file mode 100644 
 index 0000000 . . cfad0b4 
 - - - / dev / null 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / RegistryBuilder . java 
 @ @ - 0 , 0 + 1 , 175 @ @ 
 + / * 
 + * Minecraft Forge 
 + * Copyright ( c ) 2016 . 
 + * 
 + * This library is free software ; you can redistribute it and / or 
 + * modify it under the terms of the GNU Lesser General Public 
 + * License as published by the Free Software Foundation version 2 . 1 
 + * of the License . 
 + * 
 + * This library is distributed in the hope that it will be useful , 
 + * but WITHOUT ANY WARRANTY ; without even the implied warranty of 
 + * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE . See the GNU 
 + * Lesser General Public License for more details . 
 + * 
 + * You should have received a copy of the GNU Lesser General Public 
 + * License along with this library ; if not , write to the Free Software 
 + * Foundation , Inc . , 51 Franklin Street , Fifth Floor , Boston , MA 02110 - 1301 USA 
 + * / 
 + 
 + package net . minecraftforge . fml . common . registry ; 
 + 
 + import java . util . List ; 
 + import java . util . Map ; 
 + 
 + import com . google . common . collect . BiMap ; 
 + import com . google . common . collect . Lists ; 
 + 
 + import net . minecraft . util . ResourceLocation ; 
 + import net . minecraftforge . fml . common . registry . IForgeRegistry . * ; 
 + 
 + public class RegistryBuilder < T extends IForgeRegistryEntry < T > > 
 + { 
 + private ResourceLocation registryName ; 
 + private Class < T > registryType ; 
 + private ResourceLocation optionalDefaultKey ; 
 + private int minId ; 
 + private int maxId ; 
 + private List < AddCallback < T > > addCallback = Lists . newArrayList ( ) ; 
 + private List < ClearCallback < T > > clearCallback = Lists . newArrayList ( ) ; 
 + private List < CreateCallback < T > > createCallback = Lists . newArrayList ( ) ; 
 + private List < SubstitutionCallback < T > > substitutionCallback = Lists . newArrayList ( ) ; 
 + 
 + public RegistryBuilder < T > setName ( ResourceLocation name ) 
 + { 
 + this . registryName = name ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > setType ( Class < T > type ) 
 + { 
 + this . registryType = type ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > setIDRange ( int min , int max ) 
 + { 
 + this . minId = min ; 
 + this . maxId = max ; 
 + return this ; 
 + } 
 + 
 + @ SuppressWarnings ( " unchecked " ) 
 + public RegistryBuilder < T > addCallback ( Object inst ) 
 + { 
 + if ( inst instanceof AddCallback ) 
 + this . add ( ( AddCallback < T > ) inst ) ; 
 + if ( inst instanceof ClearCallback ) 
 + this . add ( ( ClearCallback < T > ) inst ) ; 
 + if ( inst instanceof CreateCallback ) 
 + this . add ( ( CreateCallback < T > ) inst ) ; 
 + if ( inst instanceof SubstitutionCallback ) 
 + this . add ( ( SubstitutionCallback < T > ) inst ) ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > add ( AddCallback < T > add ) 
 + { 
 + this . addCallback . add ( add ) ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > add ( ClearCallback < T > clear ) 
 + { 
 + this . clearCallback . add ( clear ) ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > add ( CreateCallback < T > create ) 
 + { 
 + this . createCallback . add ( create ) ; 
 + return this ; 
 + } 
 + 
 + public RegistryBuilder < T > add ( SubstitutionCallback < T > sub ) 
 + { 
 + this . substitutionCallback . add ( sub ) ; 
 + return this ; 
 + } 
 + 
 + @ SuppressWarnings ( " deprecation " ) 
 + public IForgeRegistry < T > create ( ) 
 + { 
 + return PersistentRegistryManager . createRegistry ( registryName , registryType , optionalDefaultKey , minId , maxId , false , 
 + getAdd ( ) , getClear ( ) , getCreate ( ) , getSubstitution ( ) ) ; 
 + } 
 + 
 + private AddCallback < T > getAdd ( ) 
 + { 
 + if ( this . addCallback . isEmpty ( ) ) 
 + return null ; 
 + if ( this . addCallback . size ( ) = = 1 ) 
 + return this . addCallback . get ( 0 ) ; 
 + 
 + return new AddCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onAdd ( T obj , int id , Map < ResourceLocation , ? > slaveset ) 
 + { 
 + for ( AddCallback < T > cb : RegistryBuilder . this . addCallback ) 
 + cb . onAdd ( obj , id , slaveset ) ; 
 + } 
 + } ; 
 + } 
 + private ClearCallback < T > getClear ( ) 
 + { 
 + if ( this . clearCallback . isEmpty ( ) ) 
 + return null ; 
 + if ( this . clearCallback . size ( ) = = 1 ) 
 + return this . clearCallback . get ( 0 ) ; 
 + 
 + return new ClearCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onClear ( IForgeRegistry < T > is , Map < ResourceLocation , ? > slaveset ) 
 + { 
 + for ( ClearCallback < T > cb : RegistryBuilder . this . clearCallback ) 
 + cb . onClear ( is , slaveset ) ; 
 + } 
 + } ; 
 + } 
 + private CreateCallback < T > getCreate ( ) 
 + { 
 + if ( this . createCallback . isEmpty ( ) ) 
 + return null ; 
 + if ( this . createCallback . size ( ) = = 1 ) 
 + return this . createCallback . get ( 0 ) ; 
 + 
 + return new CreateCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onCreate ( Map < ResourceLocation , ? > slaveset , BiMap < ResourceLocation , ? extends IForgeRegistry < ? > > registries ) 
 + { 
 + for ( CreateCallback < T > cb : RegistryBuilder . this . createCallback ) 
 + cb . onCreate ( slaveset , registries ) ; 
 + } 
 + } ; 
 + } 
 + private SubstitutionCallback < T > getSubstitution ( ) 
 + { 
 + if ( this . substitutionCallback . isEmpty ( ) ) 
 + return null ; 
 + if ( this . substitutionCallback . size ( ) = = 1 ) 
 + return this . substitutionCallback . get ( 0 ) ; 
 + 
 + return new SubstitutionCallback < T > ( ) 
 + { 
 + @ Override 
 + public void onSubstituteActivated ( Map < ResourceLocation , ? > slaveset , T original , T replacement , ResourceLocation name ) 
 + { 
 + for ( SubstitutionCallback < T > cb : RegistryBuilder . this . substitutionCallback ) 
 + cb . onSubstituteActivated ( slaveset , original , replacement , name ) ; 
 + } 
 + } ; 
 + } 
 + } 
 diff - - git a / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java b / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java 
 index 88ec8a3 . . bcb8a95 100644 
 - - - a / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java 
 + + + b / src / test / java / net / minecraftforge / debug / DecorateEventDebug . java 
 @ @ - 9 , 7 + 9 , 7 @ @ import net . minecraftforge . fml . common . eventhandler . Event . Result ; 
 import net . minecraftforge . fml . common . eventhandler . SubscribeEvent ; 
 
 @ Mod ( modid = DecorateEventDebug . MODID , name = DecorateEventDebug . NAME , version = DecorateEventDebug . VERSION ) 
 - public class DecorateEventDebug 
 + public class DecorateEventDebug 
 { 
 
 public static final String MODID = " decorateeventdebug " ; 
 @ @ - 17 , 14 + 17 , 14 @ @ public class DecorateEventDebug 
 public static final String VERSION = " 1 . 0 . 0 " ; 
 
 @ EventHandler 
 - public void init ( FMLInitializationEvent event ) 
 + public void init ( FMLInitializationEvent event ) 
 { 
 - 	 MinecraftForge . TERRAIN _ GEN _ BUS . register ( this ) ; 
 + MinecraftForge . TERRAIN _ GEN _ BUS . register ( this ) ; 
 } 
 
 @ SubscribeEvent 
 - public void decorateEvent ( DecorateBiomeEvent . Decorate event ) 
 + public void decorateEvent ( DecorateBiomeEvent . Decorate event ) 
 { 
 - 	 event . setResult ( Result . DENY ) ; 
 + event . setResult ( Result . DENY ) ; 
 } 
 }
