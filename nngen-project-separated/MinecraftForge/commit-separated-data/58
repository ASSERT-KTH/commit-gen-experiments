BLEU SCORE: 0.040583489434387374

TEST MSG: Put both LogicalSides on NetworkDirection :
GENERATED MSG: Use lambdas for short anonymous methods

TEST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> index eaef0a2 . . 980b110 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java <nl> @ @ - 131 , 7 + 131 , 7 @ @ public class FMLPlayMessages <nl> throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; <nl> } <nl> <nl> - Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getLogicalSide ( ) ) ; <nl> + Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getReceptionSide ( ) ) ; <nl> Entity e = world . map ( w - > type . handleSpawnMessage ( w , msg ) ) . orElse ( null ) ; <nl> if ( e = = null ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java b / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java <nl> index 9a51605 . . 2f7eadf 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java <nl> @ @ - 79 , 11 + 79 , 13 @ @ public enum NetworkDirection <nl> return this . eventSupplier . apply ( buffer , manager ) ; <nl> } <nl> <nl> - public LogicalSide getLogicalSide ( ) <nl> + public LogicalSide getOriginationSide ( ) <nl> { <nl> return logicalSide ; <nl> } <nl> <nl> + public LogicalSide getReceptionSide ( ) { return reply ( ) . logicalSide ; } ; <nl> + <nl> @ SuppressWarnings ( " unchecked " ) <nl> public < T extends Packet < ? > > ICustomPacket < T > buildPacket ( Pair < PacketBuffer , Integer > packetData , ResourceLocation channelName ) <nl> { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> index ce8e8dc . . eb2791e 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java <nl> @ @ - 129 , 7 + 129 , 7 @ @ public class NetworkEvent extends Event <nl> / * * <nl> * The { @ link NetworkDirection } this message has been received on . <nl> * / <nl> - private final NetworkDirection side ; <nl> + private final NetworkDirection networkDirection ; <nl> <nl> / * * <nl> * The packet dispatcher for this event . Sends back to the origin . <nl> @ @ - 137 , 19 + 137 , 19 @ @ public class NetworkEvent extends Event <nl> private final PacketDispatcher packetDispatcher ; <nl> private boolean packetHandled ; <nl> <nl> - Context ( NetworkManager netHandler , NetworkDirection side , int index ) <nl> + Context ( NetworkManager netHandler , NetworkDirection networkDirection , int index ) <nl> { <nl> - this ( netHandler , side , new PacketDispatcher . NetworkManagerDispatcher ( netHandler , index , side . reply ( ) : : buildPacket ) ) ; <nl> + this ( netHandler , networkDirection , new PacketDispatcher . NetworkManagerDispatcher ( netHandler , index , networkDirection . reply ( ) : : buildPacket ) ) ; <nl> } <nl> <nl> - Context ( NetworkManager networkManager , NetworkDirection side , PacketDispatcher dispatcher ) { <nl> + Context ( NetworkManager networkManager , NetworkDirection networkDirection , PacketDispatcher dispatcher ) { <nl> this . networkManager = networkManager ; <nl> - this . side = side ; <nl> + this . networkDirection = networkDirection ; <nl> this . packetDispatcher = dispatcher ; <nl> } <nl> <nl> public NetworkDirection getDirection ( ) { <nl> - return side ; <nl> + return networkDirection ; <nl> } <nl> <nl> public PacketDispatcher getPacketDispatcher ( ) { <nl> @ @ - 171 , 7 + 171 , 7 @ @ public class NetworkEvent extends Event <nl> <nl> @ SuppressWarnings ( " unchecked " ) <nl> public < V > ListenableFuture < V > enqueueWork ( Runnable runnable ) { <nl> - return ( ListenableFuture < V > ) LogicalSidedProvider . WORKQUEUE . < IThreadListener > get ( getDirection ( ) . reply ( ) . getLogicalSide ( ) ) . addScheduledTask ( runnable ) ; <nl> + return ( ListenableFuture < V > ) LogicalSidedProvider . WORKQUEUE . < IThreadListener > get ( getDirection ( ) . getReceptionSide ( ) ) . addScheduledTask ( runnable ) ; <nl> } <nl> <nl> / * *
NEAREST DIFF (one line): diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> index e5b227f . . 99670a5 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java <nl> @ @ - 88 , 14 + 88 , 10 @ @ public class ItemModelMesherForge extends ItemModelMesher <nl> models . put ( e . getKey ( ) , mods ) ; <nl> } <nl> final TIntObjectHashMap < IBakedModel > map = mods ; <nl> - e . getValue ( ) . forEachEntry ( new TIntObjectProcedure < ModelResourceLocation > ( ) <nl> + e . getValue ( ) . forEachEntry ( ( meta , location ) - > <nl> { <nl> - @ Override <nl> - public boolean execute ( int meta , ModelResourceLocation location ) <nl> - { <nl> - map . put ( meta , manager . getModel ( location ) ) ; <nl> - return true ; <nl> - } <nl> + map . put ( meta , manager . getModel ( location ) ) ; <nl> + return true ; <nl> } ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> index aa6a7a5 . . 04cc4a1 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java <nl> @ @ - 231 , 14 + 231 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory <nl> props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config <nl> } <nl> props . addAll ( values . values ( ) ) ; / / Add any left overs from the config <nl> - Collections . sort ( props , new Comparator < Property > ( ) <nl> - { <nl> - @ Override <nl> - public int compare ( Property o1 , Property o2 ) <nl> - { <nl> - return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; <nl> - } <nl> - } ) ; <nl> + props . sort ( Comparator . comparing ( Property : : getName ) ) ; <nl> <nl> List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; <nl> list . add ( new ConfigElement ( global ) ) ; <nl> diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> index a525ec1 . . e3c9d06 100644 <nl> - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java <nl> @ @ - 1145 , 14 + 1145 , 7 @ @ public final class ModelLoader extends ModelBakery <nl> * Helper method for registering all itemstacks for given item to map to universal bucket model . <nl> * / <nl> public static void setBucketModelDefinition ( Item item ) { <nl> - ModelLoader . setCustomMeshDefinition ( item , new ItemMeshDefinition ( ) <nl> - { <nl> - @ Override <nl> - public ModelResourceLocation getModelLocation ( @ Nonnull ItemStack stack ) <nl> - { <nl> - return ModelDynBucket . LOCATION ; <nl> - } <nl> - } ) ; <nl> + ModelLoader . setCustomMeshDefinition ( item , stack - > ModelDynBucket . LOCATION ) ; <nl> ModelBakery . registerItemVariants ( item , ModelDynBucket . LOCATION ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> index d77028a . . 113d499 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> + + + b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java <nl> @ @ - 57 , 16 + 57 , 12 @ @ public enum CapabilityManager <nl> public < T > void register ( Class < T > type , Capability . IStorage < T > storage , final Class < ? extends T > implementation ) <nl> { <nl> Preconditions . checkArgument ( implementation ! = null , " Attempted to register a capability with no default implementation " ) ; <nl> - register ( type , storage , new Callable < T > ( ) <nl> + register ( type , storage , ( ) - > <nl> { <nl> - @ Override <nl> - public T call ( ) throws Exception <nl> - { <nl> - try { <nl> - return implementation . newInstance ( ) ; <nl> - } catch ( InstantiationException | IllegalAccessException e ) { <nl> - throw Throwables . propagate ( e ) ; <nl> - } <nl> + try { <nl> + return implementation . newInstance ( ) ; <nl> + } catch ( InstantiationException | IllegalAccessException e ) { <nl> + throw Throwables . propagate ( e ) ; <nl> } <nl> } ) ; <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java b / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java <nl> index 640acf0 . . 55b2927 100644 <nl> - - - a / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java <nl> + + + b / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java <nl> @ @ - 48 , 14 + 48 , 7 @ @ public class CapabilityAnimation <nl> <nl> @ Override <nl> public void readNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side , NBTBase nbt ) { } <nl> - } , new Callable < IAnimationStateMachine > ( ) <nl> - { <nl> - @ Override <nl> - public IAnimationStateMachine call ( ) throws Exception <nl> - { <nl> - return AnimationStateMachine . getMissing ( ) ; <nl> - } <nl> - } ) ; <nl> + } , AnimationStateMachine : : getMissing ) ; <nl> } <nl> <nl> public static class DefaultItemAnimationCapabilityProvider implements ICapabilityProvider <nl> diff - - git a / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java b / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java <nl> index 9f8cacf . . 07522db 100644 <nl> - - - a / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java <nl> + + + b / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java <nl> @ @ - 50 , 13 + 50 , 6 @ @ public class CapabilityEnergy <nl> ( ( EnergyStorage ) instance ) . energy = ( ( NBTTagInt ) nbt ) . getInt ( ) ; <nl> } <nl> } , <nl> - new Callable < IEnergyStorage > ( ) <nl> - { <nl> - @ Override <nl> - public IEnergyStorage call ( ) throws Exception <nl> - { <nl> - return new EnergyStorage ( 1000 ) ; <nl> - } <nl> - } ) ; <nl> + ( ) - > new EnergyStorage ( 1000 ) ) ; <nl> } <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java b / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java <nl> index 6685c42 . . 90e17f6 100644 <nl> - - - a / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java <nl> @ @ - 19 , 8 + 19 , 6 @ @ <nl> <nl> package net . minecraftforge . fluids . capability ; <nl> <nl> - import java . util . concurrent . Callable ; <nl> - <nl> import net . minecraft . init . Items ; <nl> import net . minecraft . item . ItemStack ; <nl> import net . minecraft . nbt . NBTBase ; <nl> @ @ - 44 , 22 + 42 , 9 @ @ public class CapabilityFluidHandler <nl> <nl> public static void register ( ) <nl> { <nl> - CapabilityManager . INSTANCE . register ( IFluidHandler . class , new DefaultFluidHandlerStorage < IFluidHandler > ( ) , new Callable < IFluidHandler > ( ) <nl> - { <nl> - @ Override <nl> - public IFluidHandler call ( ) throws Exception <nl> - { <nl> - return new FluidTank ( Fluid . BUCKET _ VOLUME ) ; <nl> - } <nl> - } ) ; <nl> + CapabilityManager . INSTANCE . register ( IFluidHandler . class , new DefaultFluidHandlerStorage < > ( ) , ( ) - > new FluidTank ( Fluid . BUCKET _ VOLUME ) ) ; <nl> <nl> - CapabilityManager . INSTANCE . register ( IFluidHandlerItem . class , new DefaultFluidHandlerStorage < IFluidHandlerItem > ( ) , new Callable < IFluidHandlerItem > ( ) { <nl> - @ Override <nl> - public IFluidHandlerItem call ( ) throws Exception <nl> - { <nl> - return new FluidHandlerItemStack ( new ItemStack ( Items . BUCKET ) , Fluid . BUCKET _ VOLUME ) ; <nl> - } <nl> - } ) ; <nl> + CapabilityManager . INSTANCE . register ( IFluidHandlerItem . class , new DefaultFluidHandlerStorage < > ( ) , ( ) - > new FluidHandlerItemStack ( new ItemStack ( Items . BUCKET ) , Fluid . BUCKET _ VOLUME ) ) ; <nl> } <nl> <nl> private static class DefaultFluidHandlerStorage < T extends IFluidHandler > implements Capability . IStorage < T > { <nl> diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> index d9855f2 . . 6b415c5 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java <nl> @ @ - 127 , 15 + 127 , 7 @ @ public class GuiConfig extends GuiScreen <nl> toReturn . add ( ConfigElement . from ( clazz ) ) ; <nl> } <nl> } <nl> - Collections . sort ( toReturn , new Comparator < IConfigElement > ( ) { <nl> - <nl> - @ Override <nl> - public int compare ( IConfigElement e1 , IConfigElement e2 ) <nl> - { <nl> - return I18n . format ( e1 . getLanguageKey ( ) ) . compareTo ( I18n . format ( e2 . getLanguageKey ( ) ) ) ; <nl> - } <nl> - <nl> - } ) ; <nl> + toReturn . sort ( Comparator . comparing ( e - > I18n . format ( e . getLanguageKey ( ) ) ) ) ; <nl> return toReturn ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> index 8a4cef5 . . 6df3650 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java <nl> @ @ - 441 , 22 + 441 , 8 @ @ public class FMLModContainer implements ModContainer <nl> { <nl> SetMultimap < String , ASMData > annotations = asmDataTable . getAnnotationsFor ( this ) ; <nl> <nl> - parseSimpleFieldAnnotation ( annotations , Instance . class . getName ( ) , new Function < ModContainer , Object > ( ) <nl> - { <nl> - @ Override <nl> - public Object apply ( ModContainer mc ) <nl> - { <nl> - return mc . getMod ( ) ; <nl> - } <nl> - } ) ; <nl> - parseSimpleFieldAnnotation ( annotations , Metadata . class . getName ( ) , new Function < ModContainer , Object > ( ) <nl> - { <nl> - @ Override <nl> - public Object apply ( ModContainer mc ) <nl> - { <nl> - return mc . getMetadata ( ) ; <nl> - } <nl> - } ) ; <nl> + parseSimpleFieldAnnotation ( annotations , Instance . class . getName ( ) , ModContainer : : getMod ) ; <nl> + parseSimpleFieldAnnotation ( annotations , Metadata . class . getName ( ) , ModContainer : : getMetadata ) ; <nl> } <nl> <nl> private void parseSimpleFieldAnnotation ( SetMultimap < String , ASMData > annotations , String annotationClassName , Function < ModContainer , Object > retriever ) throws IllegalAccessException <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> index c24ee78 . . f5b0005 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java <nl> @ @ - 569 , 17 + 569 , 6 @ @ public class Loader <nl> modController . transition ( LoaderState . CONSTRUCTING , false ) ; <nl> modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; <nl> <nl> - List < ModContainer > mods = Lists . newArrayList ( ) ; <nl> - mods . addAll ( getActiveModList ( ) ) ; <nl> - Collections . sort ( mods , new Comparator < ModContainer > ( ) <nl> - { <nl> - @ Override <nl> - public int compare ( ModContainer o1 , ModContainer o2 ) <nl> - { <nl> - return o1 . getModId ( ) . compareTo ( o2 . getModId ( ) ) ; <nl> - } <nl> - } ) ; <nl> - <nl> FMLLog . log . debug ( " Mod signature data " ) ; <nl> FMLLog . log . debug ( " \ tValid Signatures : " ) ; <nl> for ( ModContainer mod : getActiveModList ( ) ) <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> index ae9fa74 . . aafd2e0 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java <nl> @ @ - 56 , 14 + 56 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E <nl> } <nl> else <nl> { <nl> - thread . addScheduledTask ( new Runnable ( ) <nl> - { <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - EntitySpawnHandler . this . process ( msg ) ; <nl> - } <nl> - } ) ; <nl> + thread . addScheduledTask ( ( ) - > EntitySpawnHandler . this . process ( msg ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java <nl> index cc93e47 . . 96ba30b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java <nl> @ @ - 40 , 14 + 40 , 7 @ @ public class OpenGuiHandler extends SimpleChannelInboundHandler < FMLMessage . OpenG <nl> } <nl> else <nl> { <nl> - thread . addScheduledTask ( new Runnable ( ) <nl> - { <nl> - @ Override <nl> - public void run ( ) <nl> - { <nl> - OpenGuiHandler . this . process ( msg ) ; <nl> - } <nl> - } ) ; <nl> + thread . addScheduledTask ( ( ) - > OpenGuiHandler . this . process ( msg ) ) ; <nl> } <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> index f22474d . . 8f092fd 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java <nl> @ @ - 177 , 14 + 177 , 7 @ @ public class GameRegistry <nl> private static void computeSortedGeneratorList ( ) <nl> { <nl> ArrayList < IWorldGenerator > list = Lists . newArrayList ( worldGenerators ) ; <nl> - Collections . sort ( list , new Comparator < IWorldGenerator > ( ) <nl> - { <nl> - @ Override <nl> - public int compare ( IWorldGenerator o1 , IWorldGenerator o2 ) <nl> - { <nl> - return Ints . compare ( worldGeneratorIndex . get ( o1 ) , worldGeneratorIndex . get ( o2 ) ) ; <nl> - } <nl> - } ) ; <nl> + list . sort ( Comparator . comparingInt ( o - > worldGeneratorIndex . get ( o ) ) ) ; <nl> sortedGeneratorList = ImmutableList . copyOf ( list ) ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> index 014afe0 . . 6b5829b 100644 <nl> - - - a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> + + + b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java <nl> @ @ - 60 , 13 + 60 , 7 @ @ public class TopologicalSort <nl> } <nl> <nl> orderedNodes . add ( node ) ; <nl> - graph . put ( node , new TreeSet < T > ( new Comparator < T > ( ) <nl> - { <nl> - @ Override <nl> - public int compare ( T o1 , T o2 ) { <nl> - return orderedNodes . indexOf ( o1 ) - orderedNodes . indexOf ( o2 ) ; <nl> - } <nl> - } ) ) ; <nl> + graph . put ( node , new TreeSet < T > ( Comparator . comparingInt ( o - > orderedNodes . indexOf ( o ) ) ) ) ; <nl> return true ; <nl> } <nl> <nl> diff - - git a / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java b / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java <nl> index 48225f6 . . 53bb314 100644 <nl> - - - a / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java <nl> + + + b / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java <nl> @ @ - 76 , 14 + 76 , 7 @ @ public class CapabilityItemHandler <nl> } <nl> } <nl> } <nl> - } , new Callable < ItemStackHandler > ( ) <nl> - { <nl> - @ Override <nl> - public ItemStackHandler call ( ) throws Exception <nl> - { <nl> - return new ItemStackHandler ( ) ; <nl> - } <nl> - } ) ; <nl> + } , ItemStackHandler : : new ) ; <nl> } <nl> <nl> } <nl> diff - - git a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> index 055945c . . 6160859 100644 <nl> - - - a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> + + + b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java <nl> @ @ - 74 , 15 + 74 , 7 @ @ public final class TerminalHandler <nl> } <nl> else <nl> { <nl> - TerminalConsoleAppender . setFormatter ( new Function < String , String > ( ) { <nl> - <nl> - @ Override <nl> - public String apply ( String text ) <nl> - { <nl> - return TextFormatting . getTextWithoutFormattingCodes ( text ) ; <nl> - } <nl> - <nl> - } ) ; <nl> + TerminalConsoleAppender . setFormatter ( TextFormatting : : getTextWithoutFormattingCodes ) ; <nl> return false ; <nl> } <nl> }

TEST DIFF:
diff - - git a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 index eaef0a2 . . 980b110 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / FMLPlayMessages . java 
 @ @ - 131 , 7 + 131 , 7 @ @ public class FMLPlayMessages 
 throw new RuntimeException ( String . format ( " Could not spawn entity ( id % d ) with unknown type at ( % f , % f , % f ) " , msg . entityId , msg . posX , msg . posY , msg . posZ ) ) ; 
 } 
 
 - Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getLogicalSide ( ) ) ; 
 + Optional < World > world = LogicalSidedProvider . CLIENTWORLD . get ( ctx . get ( ) . getDirection ( ) . getReceptionSide ( ) ) ; 
 Entity e = world . map ( w - > type . handleSpawnMessage ( w , msg ) ) . orElse ( null ) ; 
 if ( e = = null ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java b / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java 
 index 9a51605 . . 2f7eadf 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkDirection . java 
 @ @ - 79 , 11 + 79 , 13 @ @ public enum NetworkDirection 
 return this . eventSupplier . apply ( buffer , manager ) ; 
 } 
 
 - public LogicalSide getLogicalSide ( ) 
 + public LogicalSide getOriginationSide ( ) 
 { 
 return logicalSide ; 
 } 
 
 + public LogicalSide getReceptionSide ( ) { return reply ( ) . logicalSide ; } ; 
 + 
 @ SuppressWarnings ( " unchecked " ) 
 public < T extends Packet < ? > > ICustomPacket < T > buildPacket ( Pair < PacketBuffer , Integer > packetData , ResourceLocation channelName ) 
 { 
 diff - - git a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 index ce8e8dc . . eb2791e 100644 
 - - - a / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 + + + b / src / main / java / net / minecraftforge / fml / network / NetworkEvent . java 
 @ @ - 129 , 7 + 129 , 7 @ @ public class NetworkEvent extends Event 
 / * * 
 * The { @ link NetworkDirection } this message has been received on . 
 * / 
 - private final NetworkDirection side ; 
 + private final NetworkDirection networkDirection ; 
 
 / * * 
 * The packet dispatcher for this event . Sends back to the origin . 
 @ @ - 137 , 19 + 137 , 19 @ @ public class NetworkEvent extends Event 
 private final PacketDispatcher packetDispatcher ; 
 private boolean packetHandled ; 
 
 - Context ( NetworkManager netHandler , NetworkDirection side , int index ) 
 + Context ( NetworkManager netHandler , NetworkDirection networkDirection , int index ) 
 { 
 - this ( netHandler , side , new PacketDispatcher . NetworkManagerDispatcher ( netHandler , index , side . reply ( ) : : buildPacket ) ) ; 
 + this ( netHandler , networkDirection , new PacketDispatcher . NetworkManagerDispatcher ( netHandler , index , networkDirection . reply ( ) : : buildPacket ) ) ; 
 } 
 
 - Context ( NetworkManager networkManager , NetworkDirection side , PacketDispatcher dispatcher ) { 
 + Context ( NetworkManager networkManager , NetworkDirection networkDirection , PacketDispatcher dispatcher ) { 
 this . networkManager = networkManager ; 
 - this . side = side ; 
 + this . networkDirection = networkDirection ; 
 this . packetDispatcher = dispatcher ; 
 } 
 
 public NetworkDirection getDirection ( ) { 
 - return side ; 
 + return networkDirection ; 
 } 
 
 public PacketDispatcher getPacketDispatcher ( ) { 
 @ @ - 171 , 7 + 171 , 7 @ @ public class NetworkEvent extends Event 
 
 @ SuppressWarnings ( " unchecked " ) 
 public < V > ListenableFuture < V > enqueueWork ( Runnable runnable ) { 
 - return ( ListenableFuture < V > ) LogicalSidedProvider . WORKQUEUE . < IThreadListener > get ( getDirection ( ) . reply ( ) . getLogicalSide ( ) ) . addScheduledTask ( runnable ) ; 
 + return ( ListenableFuture < V > ) LogicalSidedProvider . WORKQUEUE . < IThreadListener > get ( getDirection ( ) . getReceptionSide ( ) ) . addScheduledTask ( runnable ) ; 
 } 
 
 / * *

NEAREST DIFF:
diff - - git a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 index e5b227f . . 99670a5 100644 
 - - - a / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 + + + b / src / main / java / net / minecraftforge / client / ItemModelMesherForge . java 
 @ @ - 88 , 14 + 88 , 10 @ @ public class ItemModelMesherForge extends ItemModelMesher 
 models . put ( e . getKey ( ) , mods ) ; 
 } 
 final TIntObjectHashMap < IBakedModel > map = mods ; 
 - e . getValue ( ) . forEachEntry ( new TIntObjectProcedure < ModelResourceLocation > ( ) 
 + e . getValue ( ) . forEachEntry ( ( meta , location ) - > 
 { 
 - @ Override 
 - public boolean execute ( int meta , ModelResourceLocation location ) 
 - { 
 - map . put ( meta , manager . getModel ( location ) ) ; 
 - return true ; 
 - } 
 + map . put ( meta , manager . getModel ( location ) ) ; 
 + return true ; 
 } ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 index aa6a7a5 . . 04cc4a1 100644 
 - - - a / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 + + + b / src / main / java / net / minecraftforge / client / gui / ForgeGuiFactory . java 
 @ @ - 231 , 14 + 231 , 7 @ @ public class ForgeGuiFactory implements IModGuiFactory 
 props . add ( ForgeModContainer . getConfig ( ) . get ( VERSION _ CHECK _ CAT , mod . getModId ( ) , true ) ) ; / / Get or make the value in the config 
 } 
 props . addAll ( values . values ( ) ) ; / / Add any left overs from the config 
 - Collections . sort ( props , new Comparator < Property > ( ) 
 - { 
 - @ Override 
 - public int compare ( Property o1 , Property o2 ) 
 - { 
 - return o1 . getName ( ) . compareTo ( o2 . getName ( ) ) ; 
 - } 
 - } ) ; 
 + props . sort ( Comparator . comparing ( Property : : getName ) ) ; 
 
 List < IConfigElement > list = new ArrayList < IConfigElement > ( ) ; 
 list . add ( new ConfigElement ( global ) ) ; 
 diff - - git a / src / main / java / net / minecraftforge / client / model / ModelLoader . java b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 index a525ec1 . . e3c9d06 100644 
 - - - a / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 + + + b / src / main / java / net / minecraftforge / client / model / ModelLoader . java 
 @ @ - 1145 , 14 + 1145 , 7 @ @ public final class ModelLoader extends ModelBakery 
 * Helper method for registering all itemstacks for given item to map to universal bucket model . 
 * / 
 public static void setBucketModelDefinition ( Item item ) { 
 - ModelLoader . setCustomMeshDefinition ( item , new ItemMeshDefinition ( ) 
 - { 
 - @ Override 
 - public ModelResourceLocation getModelLocation ( @ Nonnull ItemStack stack ) 
 - { 
 - return ModelDynBucket . LOCATION ; 
 - } 
 - } ) ; 
 + ModelLoader . setCustomMeshDefinition ( item , stack - > ModelDynBucket . LOCATION ) ; 
 ModelBakery . registerItemVariants ( item , ModelDynBucket . LOCATION ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 index d77028a . . 113d499 100644 
 - - - a / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 + + + b / src / main / java / net / minecraftforge / common / capabilities / CapabilityManager . java 
 @ @ - 57 , 16 + 57 , 12 @ @ public enum CapabilityManager 
 public < T > void register ( Class < T > type , Capability . IStorage < T > storage , final Class < ? extends T > implementation ) 
 { 
 Preconditions . checkArgument ( implementation ! = null , " Attempted to register a capability with no default implementation " ) ; 
 - register ( type , storage , new Callable < T > ( ) 
 + register ( type , storage , ( ) - > 
 { 
 - @ Override 
 - public T call ( ) throws Exception 
 - { 
 - try { 
 - return implementation . newInstance ( ) ; 
 - } catch ( InstantiationException | IllegalAccessException e ) { 
 - throw Throwables . propagate ( e ) ; 
 - } 
 + try { 
 + return implementation . newInstance ( ) ; 
 + } catch ( InstantiationException | IllegalAccessException e ) { 
 + throw Throwables . propagate ( e ) ; 
 } 
 } ) ; 
 } 
 diff - - git a / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java b / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java 
 index 640acf0 . . 55b2927 100644 
 - - - a / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java 
 + + + b / src / main / java / net / minecraftforge / common / model / animation / CapabilityAnimation . java 
 @ @ - 48 , 14 + 48 , 7 @ @ public class CapabilityAnimation 
 
 @ Override 
 public void readNBT ( Capability < IAnimationStateMachine > capability , IAnimationStateMachine instance , EnumFacing side , NBTBase nbt ) { } 
 - } , new Callable < IAnimationStateMachine > ( ) 
 - { 
 - @ Override 
 - public IAnimationStateMachine call ( ) throws Exception 
 - { 
 - return AnimationStateMachine . getMissing ( ) ; 
 - } 
 - } ) ; 
 + } , AnimationStateMachine : : getMissing ) ; 
 } 
 
 public static class DefaultItemAnimationCapabilityProvider implements ICapabilityProvider 
 diff - - git a / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java b / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java 
 index 9f8cacf . . 07522db 100644 
 - - - a / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java 
 + + + b / src / main / java / net / minecraftforge / energy / CapabilityEnergy . java 
 @ @ - 50 , 13 + 50 , 6 @ @ public class CapabilityEnergy 
 ( ( EnergyStorage ) instance ) . energy = ( ( NBTTagInt ) nbt ) . getInt ( ) ; 
 } 
 } , 
 - new Callable < IEnergyStorage > ( ) 
 - { 
 - @ Override 
 - public IEnergyStorage call ( ) throws Exception 
 - { 
 - return new EnergyStorage ( 1000 ) ; 
 - } 
 - } ) ; 
 + ( ) - > new EnergyStorage ( 1000 ) ) ; 
 } 
 } 
 diff - - git a / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java b / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java 
 index 6685c42 . . 90e17f6 100644 
 - - - a / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java 
 + + + b / src / main / java / net / minecraftforge / fluids / capability / CapabilityFluidHandler . java 
 @ @ - 19 , 8 + 19 , 6 @ @ 
 
 package net . minecraftforge . fluids . capability ; 
 
 - import java . util . concurrent . Callable ; 
 - 
 import net . minecraft . init . Items ; 
 import net . minecraft . item . ItemStack ; 
 import net . minecraft . nbt . NBTBase ; 
 @ @ - 44 , 22 + 42 , 9 @ @ public class CapabilityFluidHandler 
 
 public static void register ( ) 
 { 
 - CapabilityManager . INSTANCE . register ( IFluidHandler . class , new DefaultFluidHandlerStorage < IFluidHandler > ( ) , new Callable < IFluidHandler > ( ) 
 - { 
 - @ Override 
 - public IFluidHandler call ( ) throws Exception 
 - { 
 - return new FluidTank ( Fluid . BUCKET _ VOLUME ) ; 
 - } 
 - } ) ; 
 + CapabilityManager . INSTANCE . register ( IFluidHandler . class , new DefaultFluidHandlerStorage < > ( ) , ( ) - > new FluidTank ( Fluid . BUCKET _ VOLUME ) ) ; 
 
 - CapabilityManager . INSTANCE . register ( IFluidHandlerItem . class , new DefaultFluidHandlerStorage < IFluidHandlerItem > ( ) , new Callable < IFluidHandlerItem > ( ) { 
 - @ Override 
 - public IFluidHandlerItem call ( ) throws Exception 
 - { 
 - return new FluidHandlerItemStack ( new ItemStack ( Items . BUCKET ) , Fluid . BUCKET _ VOLUME ) ; 
 - } 
 - } ) ; 
 + CapabilityManager . INSTANCE . register ( IFluidHandlerItem . class , new DefaultFluidHandlerStorage < > ( ) , ( ) - > new FluidHandlerItemStack ( new ItemStack ( Items . BUCKET ) , Fluid . BUCKET _ VOLUME ) ) ; 
 } 
 
 private static class DefaultFluidHandlerStorage < T extends IFluidHandler > implements Capability . IStorage < T > { 
 diff - - git a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 index d9855f2 . . 6b415c5 100644 
 - - - a / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 + + + b / src / main / java / net / minecraftforge / fml / client / config / GuiConfig . java 
 @ @ - 127 , 15 + 127 , 7 @ @ public class GuiConfig extends GuiScreen 
 toReturn . add ( ConfigElement . from ( clazz ) ) ; 
 } 
 } 
 - Collections . sort ( toReturn , new Comparator < IConfigElement > ( ) { 
 - 
 - @ Override 
 - public int compare ( IConfigElement e1 , IConfigElement e2 ) 
 - { 
 - return I18n . format ( e1 . getLanguageKey ( ) ) . compareTo ( I18n . format ( e2 . getLanguageKey ( ) ) ) ; 
 - } 
 - 
 - } ) ; 
 + toReturn . sort ( Comparator . comparing ( e - > I18n . format ( e . getLanguageKey ( ) ) ) ) ; 
 return toReturn ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 index 8a4cef5 . . 6df3650 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / FMLModContainer . java 
 @ @ - 441 , 22 + 441 , 8 @ @ public class FMLModContainer implements ModContainer 
 { 
 SetMultimap < String , ASMData > annotations = asmDataTable . getAnnotationsFor ( this ) ; 
 
 - parseSimpleFieldAnnotation ( annotations , Instance . class . getName ( ) , new Function < ModContainer , Object > ( ) 
 - { 
 - @ Override 
 - public Object apply ( ModContainer mc ) 
 - { 
 - return mc . getMod ( ) ; 
 - } 
 - } ) ; 
 - parseSimpleFieldAnnotation ( annotations , Metadata . class . getName ( ) , new Function < ModContainer , Object > ( ) 
 - { 
 - @ Override 
 - public Object apply ( ModContainer mc ) 
 - { 
 - return mc . getMetadata ( ) ; 
 - } 
 - } ) ; 
 + parseSimpleFieldAnnotation ( annotations , Instance . class . getName ( ) , ModContainer : : getMod ) ; 
 + parseSimpleFieldAnnotation ( annotations , Metadata . class . getName ( ) , ModContainer : : getMetadata ) ; 
 } 
 
 private void parseSimpleFieldAnnotation ( SetMultimap < String , ASMData > annotations , String annotationClassName , Function < ModContainer , Object > retriever ) throws IllegalAccessException 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / Loader . java b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 index c24ee78 . . f5b0005 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / Loader . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / Loader . java 
 @ @ - 569 , 17 + 569 , 6 @ @ public class Loader 
 modController . transition ( LoaderState . CONSTRUCTING , false ) ; 
 modController . distributeStateMessage ( LoaderState . CONSTRUCTING , modClassLoader , discoverer . getASMTable ( ) , reverseDependencies ) ; 
 
 - List < ModContainer > mods = Lists . newArrayList ( ) ; 
 - mods . addAll ( getActiveModList ( ) ) ; 
 - Collections . sort ( mods , new Comparator < ModContainer > ( ) 
 - { 
 - @ Override 
 - public int compare ( ModContainer o1 , ModContainer o2 ) 
 - { 
 - return o1 . getModId ( ) . compareTo ( o2 . getModId ( ) ) ; 
 - } 
 - } ) ; 
 - 
 FMLLog . log . debug ( " Mod signature data " ) ; 
 FMLLog . log . debug ( " \ tValid Signatures : " ) ; 
 for ( ModContainer mod : getActiveModList ( ) ) 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 index ae9fa74 . . aafd2e0 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / EntitySpawnHandler . java 
 @ @ - 56 , 14 + 56 , 7 @ @ public class EntitySpawnHandler extends SimpleChannelInboundHandler < FMLMessage . E 
 } 
 else 
 { 
 - thread . addScheduledTask ( new Runnable ( ) 
 - { 
 - @ Override 
 - public void run ( ) 
 - { 
 - EntitySpawnHandler . this . process ( msg ) ; 
 - } 
 - } ) ; 
 + thread . addScheduledTask ( ( ) - > EntitySpawnHandler . this . process ( msg ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java b / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java 
 index cc93e47 . . 96ba30b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / network / internal / OpenGuiHandler . java 
 @ @ - 40 , 14 + 40 , 7 @ @ public class OpenGuiHandler extends SimpleChannelInboundHandler < FMLMessage . OpenG 
 } 
 else 
 { 
 - thread . addScheduledTask ( new Runnable ( ) 
 - { 
 - @ Override 
 - public void run ( ) 
 - { 
 - OpenGuiHandler . this . process ( msg ) ; 
 - } 
 - } ) ; 
 + thread . addScheduledTask ( ( ) - > OpenGuiHandler . this . process ( msg ) ) ; 
 } 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 index f22474d . . 8f092fd 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / registry / GameRegistry . java 
 @ @ - 177 , 14 + 177 , 7 @ @ public class GameRegistry 
 private static void computeSortedGeneratorList ( ) 
 { 
 ArrayList < IWorldGenerator > list = Lists . newArrayList ( worldGenerators ) ; 
 - Collections . sort ( list , new Comparator < IWorldGenerator > ( ) 
 - { 
 - @ Override 
 - public int compare ( IWorldGenerator o1 , IWorldGenerator o2 ) 
 - { 
 - return Ints . compare ( worldGeneratorIndex . get ( o1 ) , worldGeneratorIndex . get ( o2 ) ) ; 
 - } 
 - } ) ; 
 + list . sort ( Comparator . comparingInt ( o - > worldGeneratorIndex . get ( o ) ) ) ; 
 sortedGeneratorList = ImmutableList . copyOf ( list ) ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 index 014afe0 . . 6b5829b 100644 
 - - - a / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 + + + b / src / main / java / net / minecraftforge / fml / common / toposort / TopologicalSort . java 
 @ @ - 60 , 13 + 60 , 7 @ @ public class TopologicalSort 
 } 
 
 orderedNodes . add ( node ) ; 
 - graph . put ( node , new TreeSet < T > ( new Comparator < T > ( ) 
 - { 
 - @ Override 
 - public int compare ( T o1 , T o2 ) { 
 - return orderedNodes . indexOf ( o1 ) - orderedNodes . indexOf ( o2 ) ; 
 - } 
 - } ) ) ; 
 + graph . put ( node , new TreeSet < T > ( Comparator . comparingInt ( o - > orderedNodes . indexOf ( o ) ) ) ) ; 
 return true ; 
 } 
 
 diff - - git a / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java b / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java 
 index 48225f6 . . 53bb314 100644 
 - - - a / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java 
 + + + b / src / main / java / net / minecraftforge / items / CapabilityItemHandler . java 
 @ @ - 76 , 14 + 76 , 7 @ @ public class CapabilityItemHandler 
 } 
 } 
 } 
 - } , new Callable < ItemStackHandler > ( ) 
 - { 
 - @ Override 
 - public ItemStackHandler call ( ) throws Exception 
 - { 
 - return new ItemStackHandler ( ) ; 
 - } 
 - } ) ; 
 + } , ItemStackHandler : : new ) ; 
 } 
 
 } 
 diff - - git a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 index 055945c . . 6160859 100644 
 - - - a / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 + + + b / src / main / java / net / minecraftforge / server / console / TerminalHandler . java 
 @ @ - 74 , 15 + 74 , 7 @ @ public final class TerminalHandler 
 } 
 else 
 { 
 - TerminalConsoleAppender . setFormatter ( new Function < String , String > ( ) { 
 - 
 - @ Override 
 - public String apply ( String text ) 
 - { 
 - return TextFormatting . getTextWithoutFormattingCodes ( text ) ; 
 - } 
 - 
 - } ) ; 
 + TerminalConsoleAppender . setFormatter ( TextFormatting : : getTextWithoutFormattingCodes ) ; 
 return false ; 
 } 
 }
